"Copyright © 2001-2019 Python Software Foundation; All Rights Reserved"

"documentText","functionality","concept","directives","purpose","quality","control","structure","patterns","codeExamples","environment","reference","nonInformation"
"Additional online Documentation: Syntax: System.Object    System.Windows.ResourceDictionary     System.Activities.Core.Design.Themes.DesignerStylesDictionary Summary: Contains a dictionary for designer styles. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class SqlWorkflowInstanceStore : InstanceStore Summary: Derives from the abstract InstanceStore class of the persistence functionality and provides implementation to allow saving instance state information to and loading instance state information from an SQL Server 2005 or SQL Server 2008 database. Remarks: SqlWorkflowInstanceStore uses the NetDataContractSerializer to serialize complex types; all types used in workflows to be persisted with this instance store must be serializable using NetDataContractSerializer. Example: The following code sample demonstrates creating a SqlWorkflowInstanceStore. This example is from the Persistence Participants sample. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public TimeSpan HostLockRenewalPeriod { get; set; } Property Value Type: System.TimeSpan The time period. Summary: Specifies the time period within which the host renews its lock on a workflow service instance. Remarks: If the host does not renew the lock (in other words, extend the lease) with this in this time period, the persistence provider unlocks the instance and another host may lock the instance. The value is a TimeSpan of the form hh:mm:ss\". The minimum permitted value is \"00:00:01\" (1 sec). The default value of this property is \"00:00:30\" (30 seconds). Example: The following code sample demonstrates using HostLockRenewalPeriod in a SqlWorkflowInstanceStore. This example is from the Built-in Configuration sample.\"",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: System.Object    System.Activities.Design.CommandInfo Summary: Describes a command on the designer, such as copy or paste. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: System.Object    System.Activities.Design.CommandValues Summary: A commanding interface that is used for integration of workflow designer actions (e.g., context menu) with custom provided implementation - i.e. property browser service, debugging service, etc. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: This class abstracts the encoding formats used in the DataObject that is passed from the drag source to the target. Summary: Represents a helper class to assist dragging and dropping inside the workflow designer. Remarks: This class abstracts the encoding formats used in the DataObject that is passed from the drag source to the target. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Retrieves the source container.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: JScript   public interface ISourceContainer Summary: Provides functions to copy, move, delete, and paste objects.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: JScript   void DefaultContainerLoaded( ISourceContainer container ) Parameters containerType: System.Activities.Design.ISourceContainer The default container to be loaded. Summary: Occurs when the default container is loaded.",0,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: void OnWorkflowCommandLoaded( CommandInfo commandInfo ) Parameters commandInfoType: System.Activities.Design.CommandInfo The workflow command to be loaded. Summary: Provides additional functions based on the specified workflow command to be loaded.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: JScript   public bool RegisterWindowMessageHandler( WindowMessage callback ) Parameters callbackType: System.Activities.Design.WindowMessage The delegate to be registered for event notifications. Return Value Type: System.Boolean true if the operation is successful; otherwise, false. Summary: Registers the specified delegate for event notifications.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: JScript   public void Flush() Summary: Saves the current state of the workflow to the Textproperty.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: JScript   protected WorkflowElementDialog() Summary: Initializes a new instance of the WorkflowElementDialog class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: JScript   public static readonly DependencyProperty ItemProperty Summary: Identifies the Items dependency property.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: JScript   public static readonly DependencyProperty HeaderTemplateProperty Summary: Identifies the HeaderTemplate dependency property.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: System.Object    System.Activities.Design.Debug.BreakpointInfo Summary: Handles breakpoint location and type information that is used in conjunction with the debugging of an activity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void UpdateBreakpoint( SourceLocation sourceLocation, BreakpointTypes newBreakpointType ) Parameters sourceLocationType: System.Activities.Debugger.SourceLocation The location of the breakpoint to update. newBreakpointTypeType: System.Activities.Design.BreakpointTypes A new breakpoint type from the BreakpointTypes enumeration. Implements IDesignerDebugView.UpdateBreakpoint(SourceLocation, BreakpointTypes) Summary: Updates the appearance of a specified breakpoint to show the specified type.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: System.Object    System.Activities.Design.Model.ModelEditingScope     System.Activities.Design.ModelTree.EditingScope Summary: Describes the editing scope. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: JScript   public interface IValidationErrorService Summary: Provides accessibility to a specified list of activity validation errors.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: System.Object    System.Activities.Design.Validation.ValidationErrorInfo Summary: Provides a container for all the properties attached to an instance of a validation error that occurred during the design time or run time of a workflow activity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"A value that indicates that a workflow element is valid.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: JScript   public Object Convert( Object value, Type targetType, Object parameter, CultureInfo culture ) Parameters valueType: System.Object Not the value to convert. targetTypeType: System.Type Not implemented. parameterType: System.Object Not implemented. cultureType: System.Globalization.CultureInfo Not implemented. Return Value Type: System.Object Returns Object. Contains the converted Argument.Expression. Implements IValueConverter.Convert(Object, Type, Object, CultureInfo) Summary: Converts the specified argument into an Argument.Expression.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: ArgumentToExpressionModelItemConverter handles the case where the argument value itself is null. In this situation, ArgumentToExpressionModelItemConverter creates the wrapper object for the Expression to be used from. Summary: Converts an argument to an expression model. Remarks: ArgumentToExpressionModelItemConverter handles the case where the argument value itself is null. In this situation, ArgumentToExpressionModelItemConverter creates the wrapper object for the Expression to be used from. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: System.Object    System.Windows.Threading.DispatcherObject     System.Windows.DependencyObject       System.Windows.Media.Visual         System.Windows.UIElement           System.Windows.FrameworkElement             System.Windows.Controls.Control               System.Windows.Controls.ContentControl                 System.Windows.Controls.UserControl                   System.Activities.Design.View.ErrorView Summary: Contains the error view presented when there are exceptions or errors in the designer view, or when the designer is unable to load. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: JScript   public static readonly DependencyProperty UseLocationExpressionProperty Summary: Registers the UseLocationExpression dependency property.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: JScript   public static readonly DependencyProperty DesignerProperty Summary: Registers the Designer property.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: JScript   public event ExtensionWindow..::..ExtensionWindowClosingEventHandler Closing Summary: Occurs when the window is closing.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: JScript   public static readonly DependencyProperty IconProperty Summary: Identifies with the Icon dependency property.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: System.Object    System.EventArgs     System.Windows.RoutedEventArgs       System.Activities.Design.View.ExtensionWindowClosingRoutedEventArgs Summary: Contains the arguments for the ExtensionWindowClosingRoutedEvent. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: System.Object    System.Windows.Threading.DispatcherObject     System.Windows.DependencyObject       System.Activities.Design.View.FilterableData         System.Activities.Design.View.FilterableData(Of TData) Summary: Represents a piece of data that can be filtered on visibility. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: JScript   public override string ToString() Return Value Type: System.String Returns String. Summary: Converts this piece of data into a string.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class FilterableData<TData> : FilterableData Type Parameters TData Summary: Represents a piece of data that can be filtered on visibility. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: JScript   event EventHandler LostAggregateFocus Summary: Represents an event that is raised when the expression editor loses aggregate focus.",0,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: JScript   public enum PropertyKind Summary: An enumeration that describes the type of argument being passed.",0,1,0,0,0,0,0,0,0,1,0,0
"Additional online Documentation: Syntax: JScript   public event ViewStateChangedEventHandler ViewStateChanged Summary: Declares an event that signals that a change has been made to the control's view state.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string Import { get; set; } Property Value Type: System.String The imported namespace referenced by this VisualBasicImportReference. Summary: Gets or sets the imported namespace referenced by this VisualBasicImportReference.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string ExpressionText { get; set; } Property Value Type: System.String The Visual Basic expression. Implements ITextExpression.ExpressionText Summary: Gets or set the Visual Basic expression represented by this VisualBasicReference(Of TResult).",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class VisualBasicValue<TResult> : CodeActivity<TResult>, IValueSerializableExpression, ITextExpression Type Parameters TResult The type of the expression. Summary: Contains an expression in Visual Basic syntax that evaluates to an r-value, which supports binding of In arguments. Remarks: This activity uses the LINQ to Entity provider to evaluate LINQ expressions. Any LINQ expressions used with this activity must be evaluatable by the ADO.Net Entity Data Model. For example, LINQ expressions cannot be used to reference activities, variables, or arguments of the workflow itself. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected Activity() Summary: When implemented in a derived class, creates a new instance of the derived class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static Activity<TResult> FromVariable( Variable<TResult> variable ) Parameters variableType: System.Activities.Variable(Of TResult) The value for the expression. Return Value Type: System.Activities.Activity(Of TResult) A workflow expression that evaluates to the given variable. Summary: Returns a Activity(Of TResult) expression that evaluates to the given Variable(Of T).",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static implicit operator Activity<TResult> ( TResult constValue ) Parameters constValueType: TResult The value used to create the expression. Return Value Type: System.Activities.Activity(Of TResult) A workflow expression that evaluates to the given value. Summary: Returns a Activity(Of TResult) expression that evaluates to the given value.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ActivityAction<T> : ActivityDelegate Type Parameters T The type of the in argument of the activity delegate. Summary: Defines an activity delegate that has one in argument and does not return a value. Remarks: An activity delegate allows a developer to define the required signature of an activity that will be specified by a third party. There are multiple generic versions of this type that take from 1 to 16 arguments for the activity that is called. There are also ActivityFunc types for activity delegates that return values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DelegateInArgument<T10> Argument10 { get; set; } Property Value Type: System.Activities.DelegateInArgument(Of T10) An argument to an activity delegate. Summary: Gets or sets the tenth in argument of the activity delegate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DelegateInArgument<T13> Argument13 { get; set; } Property Value Type: System.Activities.DelegateInArgument(Of T13) An argument to an activity delegate. Summary: Gets or sets the thirteenth in argument of the activity delegate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ActivityAction<T1, T2> : ActivityDelegate Type Parameters T1 The type of the first in argument of the activity delegate. T2 The type of the second in argument of the activity delegate. Summary: Defines an activity delegate that has two in arguments and does not return a value. Remarks: An activity delegate allows a developer to define the required signature of an activity that will be specified by a third party. There are multiple generic versions of this type that take from 1 to 16 arguments for the activity that is called. There are also ActivityFunc types for activity delegates that return values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public DelegateInArgument<T6> Argument6 { get; set; } Property Value Type: System.Activities.DelegateInArgument(Of T6) An argument to an activity delegate. Summary: Gets or sets the sixth in argument of the activity delegate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DelegateInArgument<T6> Argument6 { get; set; } Property Value Type: System.Activities.DelegateInArgument(Of T6) An argument to an activity delegate. Summary: Gets or sets the sixth in argument of the activity delegate.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ActivityFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> : ActivityDelegate Type Parameters T1 The type of the first in argument of the activity delegate. T2 The type of the second in argument of the activity delegate. T3 The type of the third in argument of the activity delegate. T4 The type of the fourth in argument of the activity delegate. T5 The type of the fifth in argument of the activity delegate. T6 The type of the sixth in argument of the activity delegate. T7 The type of the seventh in argument of the activity delegate. T8 The type of the eighth in argument of the activity delegate. T9 The type of the ninth in argument of the activity delegate. T10 The type of the tenth in argument of the activity delegate. T11 The type of the eleventh in argument of the activity delegate. T12 The type of the twelfth in argument of the activity delegate. T13 The type of the thirteenth in argument of the activity delegate. T14 The type of the fourteenth in argument of the activity delegate. T15 The type of the fifteenth in argument of the activity delegate. TResult The type of the out argument of the activity delegate. Summary: Defines an activity delegate with one in argument of type T and one out argument of type TResult. Remarks: The ActivityDelegate enables activity authors to expose callbacks with specific signatures that users of the activity can provide activity-based handlers for. ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult) is an ActivityDelegate that returns a value. The signature of the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult) is specified as generic type arguments. There are multiple generic versions of this type that take from 1 to 16 in arguments, plus the out argument, for the activity that is called. There are also ActivityAction types for activity delegates that do not return values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DelegateInArgument<T12> Argument12 { get; set; } Property Value Type: System.Activities.DelegateInArgument(Of T12) An argument to an activity delegate. Summary: Gets or sets the twelfth in argument of the activity delegate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ActivityFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> : ActivityDelegate Type Parameters T1 The type of the first in argument of the activity delegate. T2 The type of the second in argument of the activity delegate. T3 The type of the third in argument of the activity delegate. T4 The type of the fourth in argument of the activity delegate. T5 The type of the fifth in argument of the activity delegate. T6 The type of the sixth in argument of the activity delegate. T7 The type of the seventh in argument of the activity delegate. T8 The type of the eighth in argument of the activity delegate. T9 The type of the ninth in argument of the activity delegate. T10 The type of the tenth in argument of the activity delegate. T11 The type of the eleventh in argument of the activity delegate. T12 The type of the twelfth in argument of the activity delegate. T13 The type of the thirteenth in argument of the activity delegate. T14 The type of the fourteenth in argument of the activity delegate. T15 The type of the fifteenth in argument of the activity delegate. T16 The type of the sixteenth in argument of the activity delegate. TResult The type of the out argument of the activity delegate. Summary: Defines an activity delegate with one in argument of type T and one out argument of type TResult. Remarks: The ActivityDelegate enables activity authors to expose callbacks with specific signatures that users of the activity can provide activity-based handlers for. ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult) is an ActivityDelegate that returns a value. The signature of the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult) is specified as generic type arguments. There are multiple generic versions of this type that take from 1 to 16 in arguments, plus the out argument, for the activity that is called. There are also ActivityAction types for activity delegates that do not return values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public DelegateInArgument<T9> Argument9 { get; set; } Property Value Type: System.Activities.DelegateInArgument(Of T9) An argument to an activity delegate. Summary: Gets or sets the ninth in argument of the activity delegate.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public DelegateInArgument<T2> Argument2 { get; set; } Property Value Type: System.Activities.DelegateInArgument(Of T2) An argument to an activity delegate. Summary: Gets or sets the second in argument of the activity delegate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DelegateOutArgument<TResult> Result { get; set; } Property Value Type: System.Activities.DelegateOutArgument(Of TResult) An argument to an activity delegate. Summary: Gets or sets the out argument of the activity delegate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DelegateInArgument<T2> Argument2 { get; set; } Property Value Type: System.Activities.DelegateInArgument(Of T2) An argument to an activity delegate. Summary: Gets or sets the second in argument of the activity delegate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string Id { get; } Property Value Type: System.String An identifier that uniquely identifies the ActivityInstance. Summary: Gets an identifier that uniquely identifies the ActivityInstance.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public void RequireExtension<T>() where T : class Type Parameters T The type of the extension. Summary: Specifies that the activity requires an extension of the specified generic type at runtime. Remarks: If the host fails to provide an extension of the specified type, validation fails.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ActivityPropertyReference Summary: Represents a property reference that is used in ActivityBuilder and that maps to a PropertyReferenceExtension(Of T) in an x:Class activity when the x:Class activity is deserialized into an ActivityBuilder. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum BookmarkResumptionResult Summary: Defines an enumeration whose members represent the outcome of bookmark scheduling requests.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [DataContractAttribute] public sealed class BookmarkScopeHandle : Handle Summary: A T:System.Handle used to manage the lifetime of a BookmarkScope. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class CodeActivity<TResult> : Activity<TResult> Type Parameters TResult The result returned by the activity. Summary: An abstract class for creating a custom activity with imperative behavior defined in the Execute(CodeActivityContext) method, giving access to variable and argument resolution and extensions. Remarks: Derived classes can define a result value of the type specified in the type specifier of the class. Example: The following example shows how to derive a class from CodeActivity(Of TResult). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public struct CodeActivityMetadata Summary: Represents the set of arguments that a configured CodeActivity introduces to the execution environment. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public delegate void DelegateCompletionCallback( NativeActivityContext context, ActivityInstance completedInstance, IDictionary<string, Object> outArguments ) Parameters contextType: System.Activities.NativeActivityContext The execution environment of the activity handling the callback. completedInstanceType: System.Activities.ActivityInstance The completed activity instance of the ActivityDelegate handler. outArgumentsType: System.Collections.Generic.IDictionary(Of String, Object) The output arguments of the completed ActivityDelegate. Summary: Represents the method that is called when an ActivityDelegate completes. Remarks: The values in the outArguments dictionary are the ActivityDelegateParameter values of the ActivityDelegate that are assigned when the ActivityDelegate is invoked, keyed by Name.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class DelegateInArgument<T> : DelegateInArgument Type Parameters T The data type of the DelegateInArgument(Of T). Summary: A binding terminal that represents the flow of data into an ActivityDelegate. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DelegateInArgument() Summary: Initializes a new instance of the DelegateInArgument(Of T) class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: PropertyDescriptor ICustomTypeDescriptor.GetDefaultProperty() Return Value Type: System.ComponentModel.PropertyDescriptor The default property. Implements ICustomTypeDescriptor.GetDefaultProperty Summary: Returns the default property for the dynamic activity. Remarks: This member is an explicit interface member implementation. It can be used only when the DynamicActivity instance is cast to an ICustomTypeDescriptor interface.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Collection<Attribute> Attributes { get; } Property Value Type: System.Collections.ObjectModel.Collection(Of Attribute) The collection of attributes. Summary: Gets the collection of attributes of the dynamically generated activity.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: AttributeCollection ICustomTypeDescriptor.GetAttributes() Return Value Type: System.ComponentModel.AttributeCollection The attributes of the dynamic activity. Implements ICustomTypeDescriptor.GetAttributes Summary: Returns a collection of attributes of the dynamic activity. Remarks: This member is an explicit interface member implementation. It can be used only when the DynamicActivity(Of TResult) instance is cast to an ICustomTypeDescriptor interface.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Object Value { get; set; } Property Value Type: System.Object An object of type Object. Summary: Gets or sets the value of the DynamicActivityProperty object.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [DataContractAttribute] public abstract class Handle Summary: Represents a type that has its lifetime controlled by the workflow runtime. Remarks: Types derived from Handle have their lifetimes controlled by the workflow runtime. For workflow variables of handle types, the runtime uses the required default constructor to create an instance of the type, assigns it to the Variable, and calls OnInitialize(HandleInitializationContext) when initializing the environment. When the variable goes out of scope, OnUninitialize(HandleInitializationContext) is called. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected virtual void OnUninitialize( HandleInitializationContext context ) Parameters contextType: System.Activities.HandleInitializationContext The environment in which the handle was created. Summary: Called by the workflow runtime when the Variable for the Handle goes out of scope.",0,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: [TypeConverterAttribute(typeof(InArgumentConverter))] [ContentPropertyAttribute(#Expression#)] public sealed class InArgument<T> : InArgument Type Parameters T The data type of the InArgument(Of T). Summary: A binding terminal that represents the flow of data into an activity. Example: In this example, a workflow is created that consists of a single WriteLine activity. The WriteLine activity has an InArgument(Of T) named Text. The host application creates an instance of the workflow and passes a string, which maps to the Text argument of the WriteLine and is used by the WriteLine activity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public InOutArgument() Summary: Initializes a new instance of the InOutArgument(Of T) class using default values.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [DataContractAttribute] public abstract class Location Summary: Provides a reference to a value used by an Argument or Variable. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class LocationReferenceEnvironment Summary: Provides a representation of the environment of variables and arguments that is available to an activity at runtime. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public ActivityInstance ScheduleAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>( ActivityAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, CompletionCallback onCompleted, FaultCallback onFaulted ) Type Parameters T1 The data that is carried into an activity. T2 The data that is carried into an activity. T3 The data that is carried into an activity. T4 The data that is carried into an activity. T5 The data that is carried into an activity. T6 The data that is carried into an activity. T7 The data that is carried into an activity. T8 The data that is carried into an activity. T9 The data that is carried into an activity. T10 The data that is carried into an activity. T11 The data that is carried into an activity. T12 The data that is carried into an activity. T13 The data that is carried into an activity. T14 The data that is carried into an activity. T15 Generic parameter that represents data that is carried into an activity. Parameters activityActionType: System.Activities.ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) An action that executes when a specific event occurs in the parent activity. argument1Type: T1 An argument that carries data into an activity. argument2Type: T2 An argument that carries data into an activity. argument3Type: T3 An argument that carries data into an activity. argument4Type: T4 An argument that carries data into an activity. argument5Type: T5 An argument that carries data into an activity. argument6Type: T6 An argument that carries data into an activity. argument7Type: T7 An argument that carries data into an activity. argument8Type: T8 An argument that carries data into an activity. argument9Type: T9 An argument that carries data into an activity. argument10Type: T10 An argument that carries data into an activity. argument11Type: T11 An argument that carries data into an activity. argument12Type: T12 An argument that carries data into an activity. argument13Type: T13 An argument that carries data into an activity. argument14Type: T14 An argument that carries data into an activity. argument15Type: T15 An argument that carries data into an activity. onCompletedType: System.Activities.CompletionCallback A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15). onFaultedType: System.Activities.FaultCallback A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15). Return Value Type: System.Activities.ActivityInstance An instance of an activity. Summary: Schedules for execution a specified ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) that has fifteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15).",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ActivityInstance ScheduleAction<T1, T2, T3, T4, T5, T6, T7, T8>( ActivityAction<T1, T2, T3, T4, T5, T6, T7, T8> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, CompletionCallback onCompleted, FaultCallback onFaulted ) Type Parameters T1 The data that is carried into an activity. T2 The data that is carried into an activity. T3 The data that is carried into an activity. T4 The data that is carried into an activity. T5 The data that is carried into an activity. T6 The data that is carried into an activity. T7 The data that is carried into an activity. T8 The data that is carried into an activity. Parameters activityActionType: System.Activities.ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8) An action that executes when a specific event occurs in the parent activity. argument1Type: T1 An argument that carries data into an activity. argument2Type: T2 An argument that carries data into an activity. argument3Type: T3 An argument that carries data into an activity. argument4Type: T4 An argument that carries data into an activity. argument5Type: T5 An argument that carries data into an activity. argument6Type: T6 An argument that carries data into an activity. argument7Type: T7 An argument that carries data into an activity. argument8Type: T8 An argument that carries data into an activity. onCompletedType: System.Activities.CompletionCallback A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8). onFaultedType: System.Activities.FaultCallback A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8). Return Value Type: System.Activities.ActivityInstance An instance of an activity. Summary: Schedules for execution a specified ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8) that has eight parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8).",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ActivityInstance ScheduleAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>( ActivityAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, CompletionCallback onCompleted, FaultCallback onFaulted ) Type Parameters T1 The data that is carried into an activity. T2 The data that is carried into an activity. T3 The data that is carried into an activity. T4 The data that is carried into an activity. T5 The data that is carried into an activity. T6 The data that is carried into an activity. T7 The data that is carried into an activity. T8 The data that is carried into an activity. T9 The data that is carried into an activity. T10 The data that is carried into an activity. T11 The data that is carried into an activity. T12 The data that is carried into an activity. Parameters activityActionType: System.Activities.ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) An action that executes when a specific event occurs in the parent activity. argument1Type: T1 An argument that carries data into an activity. argument2Type: T2 An argument that carries data into an activity. argument3Type: T3 An argument that carries data into an activity. argument4Type: T4 An argument that carries data into an activity. argument5Type: T5 An argument that carries data into an activity. argument6Type: T6 An argument that carries data into an activity. argument7Type: T7 An argument that carries data into an activity. argument8Type: T8 An argument that carries data into an activity. argument9Type: T9 An argument that carries data into an activity. argument10Type: T10 An argument that carries data into an activity. argument11Type: T11 An argument that carries data into an activity. argument12Type: T12 An argument that carries data into an activity. onCompletedType: System.Activities.CompletionCallback A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12). onFaultedType: System.Activities.FaultCallback A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12). Return Value Type: System.Activities.ActivityInstance An instance of an activity. Summary: Schedules for execution a specified ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) that has twelve parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class NativeActivityFaultContext : NativeActivityContext Summary: Represents the execution environment of a NativeActivity when it is handling an exception thrown by a child activity. Remarks: This class is sealed. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Collection<ActivityDelegate> GetDelegatesWithReflection() Return Value Type: System.Collections.ObjectModel.Collection(Of ActivityDelegate) A collection of delegates. Summary: Returns a collection of delegates using reflection. Remarks: This method uses an activity's TypeDescriptor to examine all public properties of type ActivityDelegate, or IList<T> or ICollection<T> where T derives from ActivityDelegate, and returns them in a collection.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class OutArgument : Argument Summary: The abstract base class that represents a binding terminal that supports the flow of data out of an activity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property)] public sealed class RequiredArgumentAttribute : Attribute Summary: Application element on which it is valid to apply an argument.0 ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class RuntimeArgument : LocationReference Summary: Describes the characteristics of an argument of an activity to the runtime. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum VariableModifiers Summary: Specifies the way the workflow runtime treats Variable objects.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Loads a workflow asynchronously from an instance store using the IAsyncResult asynchronous design pattern. Remarks: For more information, seeAsynchronous Programming Overview.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Summary: Loads a workflow instance from an instance store.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class WorkflowApplicationIdleEventArgs : WorkflowApplicationEventArgs Summary: Holds information about the workflow instance that has become idle. Example: The following code example inspects the WorkflowApplicationIdleEventArgs passed into the Idle handler of a WorkflowApplication instance. In this example the workflow going idle has one Bookmark with a name of EnterGuess, owned by an activity named ReadInt. This code example is based off of How to: Run a Workflow, which is part of the Getting Started Tutorial. If the Idle handler in that step is modified to contain the code from this example, the following output is displayed. BookmarkName: EnterGuess - OwnerDisplayName: ReadInt ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class WorkflowApplicationTerminatedException : WorkflowApplicationCompletedException Summary: An exception that is thrown when an operation on a workflow instance is not valid because the instance has been terminated. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class WorkflowDataContext : CustomTypeDescriptor, INotifyPropertyChanged, IDisposable Summary: Represents the data context of the current workflow environment and provides a bridge to bring workflow arguments and variables into the scope of data binding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class WorkflowInvoker Summary: Provides a means for invoking a workflow as if it were a method call. Remarks: WorkflowInvoker contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously. WorkflowInvoker does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use WorkflowApplication instead. To execute workflows synchronously with no instance control, call the Invoke method. To execute a workflow asynchronously with no instance control, use the BeginInvoke(AsyncCallback, Object) and EndInvoke(IAsyncResult) method pairs, or the InvokeAsync(IDictionary(Of String, Object)) method. Example: The following example synchronously invokes a workflow consisting of a single WriteLine activity using WorkflowInvoker. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: JScript   public WorkflowInvoker( WorkflowElement workflow ) Parameters workflowType: System.Activities.WorkflowElement The workflow definition of the workflow to be invoked by this instance of the WorkflowInvoker class. Summary: Initializes a new instance of the WorkflowInvoker class. Remarks: WorkflowInvoker contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class VirtualStackFrame Summary: Provides a virtual call stack frame for the interpreter. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class LoadWorkflowByInstanceKeyCommand : InstancePersistenceCommand Summary: A persistence command that loads a workflow instance by using the instance key associated with the instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public LoadWorkflowCommand() Summary: Initializes an instance of the LoadWorkflowCommand class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the SourceExpressionException class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public bool Checked { get; set; } Property Value Type: System.Boolean true if the addition executes in a checked context; otherwise, false. The default is true. Summary: Gets or sets a value that indicates whether the addition executes in a checked context. Remarks: By default the Add(Of TLeft, TRight, TResult) activity executes in a checked context and throws an OverflowException if the addition causes an overflow.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public ArgumentReference() Summary: Initializes a new instance of the ArgumentReference(Of T) class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [RequiredArgumentAttribute] public InArgument<TRight> Right { get; set; } Property Value Type: System.Activities.InArgument(Of TRight) The right operand. Summary: Gets or sets the right operand.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [RequiredArgumentAttribute] public InArgument<TOperand> Operand { get; set; } Property Value Type: System.Activities.InArgument(Of TOperand) The object that contains the indexer. Summary: Gets or sets the object that contains the indexer.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Func#)] public sealed class InvokeFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> : NativeActivity<TResult> Type Parameters T1 The type of the first InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T2 The type of the second InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T3 The type of the third InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T4 The type of the fourth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T5 The type of the fifth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T6 The type of the sixth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T7 The type of the seventh InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T8 The type of the eighth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T9 The type of the ninth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T10 The type of the tenth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). T11 The type of the eleventh InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). TResult The type of the return OutArgument(Of T) whose value is returned from the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). Summary: Invokes an ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Func#)] public sealed class InvokeFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> : NativeActivity<TResult> Type Parameters T1 The type of the first InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T2 The type of the second InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T3 The type of the third InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T4 The type of the fourth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T5 The type of the fifth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T6 The type of the sixth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T7 The type of the seventh InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T8 The type of the eighth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T9 The type of the ninth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T10 The type of the tenth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T11 The type of the eleventh InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). T12 The type of the twelfth InArgument(Of T) whose value is passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). TResult The type of the return OutArgument(Of T) whose value is returned from the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). Summary: Invokes an ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ActivityFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> Func { get; set; } Property Value Type: System.Activities.ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult) The activity functions to be invoked. Summary: Gets or sets the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult) to be invoked.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [RequiredArgumentAttribute] public InArgument<T11> Argument11 { get; set; } Property Value Type: System.Activities.InArgument(Of T11) The eleventh argument passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult). Summary: Gets or sets the eleventh argument passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult).",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [RequiredArgumentAttribute] public InArgument<T9> Argument9 { get; set; } Property Value Type: System.Activities.InArgument(Of T9) The ninth argument passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult). Summary: Gets or sets the ninth argument passed to the ActivityFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult).",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Indices#)] public sealed class MultidimensionalArrayItemReference<TItem> : CodeActivity<Location<TItem>> Type Parameters TItem The type of elements in the array. Summary: Represents an element in a multidimensional array that can be used as an l-value in an expression. Example: The following code example uses MultidimensionalArrayItemReference(Of TItem) in an Assign activity to assign an integer value to the array element at row 1 and column 2 and prints the value of the array element to the console. The Assign activity is equivalent to the following statement when using arrays: array[1, 2] = 1;. Note Instead of instantiating the MultidimensionalArrayItemReference(Of TItem) l-value expression activity directly, it is strongly recommended that you call ConvertReference(Of TResult)(Expression(Of Func(Of ActivityContext, TResult))), which provides a higher level of abstraction and enables you to implement your workflow more intuitively. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class PropertyValue<TOperand, TResult> : CodeActivity<TResult> Type Parameters TOperand The type of the operand. TResult The type of the result. Summary: A property value. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class Subtract<TLeft, TRight, TResult> : CodeActivity<TResult> Type Parameters TLeft The type of the left operand. TRight The type of the right operand. TResult The type of the result. Summary: Computes the difference between two values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Indices#)] public sealed class ValueTypeIndexerReference<TOperand, TItem> : CodeActivity<Location<TItem>> Type Parameters TOperand The value type with the indexer. TItem The type of indexer array. Summary: Represents an element referenced by an indexer on a value type that can be used as an l-value in an expression. Example: The following code example uses ValueTypeIndexerReference(Of TOperand, TItem) in an Assign activity to assign a string value to the struct element at index 1 and prints the element value to the console. The Assign activity is equivalent to the following statement when using the struct defined in the following example: myStructVariable[1] = #Hello#;. Note Instead of instantiating the ValueTypeIndexerReference(Of TOperand, TItem) l-value expression activity directly, it is strongly recommended that you call ConvertReference(Of TResult)(Expression(Of Func(Of ActivityContext, TResult))), which provides a higher level of abstraction and enables you to implement your workflow more intuitively. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class ValueTypePropertyReference<TOperand, TResult> : CodeActivity<Location<TResult>> Type Parameters TOperand The value type. TResult The property type. Summary: Represents a property on a value type that can be used as an l-value in an expression. Example: The following code example uses ValueTypePropertyReference(Of TOperand, TResult) in an Assign activity to assign a string value to a property and prints the property value to the console. The Assign activity is equivalent to the following statement when using the struct defined in the following example: myStructVariable.AProperty = #Hello#;. Note Instead of instantiating the ValueTypePropertyReference(Of TOperand, TResult) l-value expression activity directly, it is strongly recommended that you call ConvertReference(Of TResult)(Expression(Of Func(Of ActivityContext, TResult))), which provides a higher level of abstraction and enables you to implement your workflow more intuitively. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public abstract class WorkflowInstance Summary: WorkflowInstance is a lightweight, per-instance runtime for executing a workflow program. It can be constructed to create a new workflow instance or from existing instance state. The APIs that WorkflowInstance.WorkflowInstanceControl exposes are the minimal set of runtime controls from which higher level operations can be implemented. This API set represents the entire breadth of functionality of the runtime. WorkflowInstance is an abstract class and relies on a host's implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions. Remarks: WorkflowInstance is single threaded and assumes that the host synchronizes all access to it. An attempt to call multiple APIs simultaneously will result in an InvalidOperationException being thrown. Internally, a WorkflowInstance has two states: Running and Paused. The only way to cause the runtime to transition from paused to running is to call Run. All actions (except Pause) can only be taken while the runtime is Paused. The runtime will become spontaneously Paused in the following situations: An error fatal to the runtime has occurred. The host will be signaled through OnRequestAbort(Exception) (which does not signal a transition to Paused) and then notified through OnNotifyPaused. An exception in the workflow was uncaught and escaped the root. The host will be notified through the OnNotifyUnhandledException(Exception, Activity, String) method. The scheduler has run out of work items and is now Idle. The host will be notified through the OnNotifyPaused method. Note that the scheduler could have run out of work items because the instance is idle or because the instance is complete. The State value of the Controller property can be used to differentiate between the two. The host can request a change from Running to Paused by calling the RequestPause or PauseWhenPersistable methods of the WorkflowInstance.WorkflowInstanceControl instance returned by the Controller property. This request should not be considered to have a specific response meaning that the host should not attempt to correlate an OnNotify* or OnRequestAbort(Exception) with a specific call to pause. In response to a pause request, the runtime may transition to Paused and call OnNotifyPaused while the scheduler still has pending work items. The State value of the Controller property can be used to determine whether the scheduler has no more work or was interrupted by a request to pause. The RequestPause method of the WorkflowInstance.WorkflowInstanceControl instance returned by the Controller property is the only method which can be called while the WorkflowInstance is in the Running state. All other methods will throw an InvalidOperationException if called.Given the rules for how WorkflowInstance transitions from one state to another, the public notion of Running and Paused can be defined as follows: Running - The state between a call to Run and the next WorkflowInstance.OnNotify*. Paused - The state between the last WorkflowInstance.OnNotify* and the next call to Run. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,1,0,1,1,0,0,0,0
"Additional online Documentation: Summary: Called by the host to initialize the workflow instance.",0,0,0,1,0,1,0,0,0,0,0,0
"Additional online Documentation: Summary: Resumes a bookmark asynchronously.",1,0,0,0,0,1,0,1,0,0,0,1
"Additional online Documentation: Syntax: public abstract class PersistenceParticipant Summary: This class allows both WorkflowApplication and WorkflowServiceHost to participate in persistence process. A persistence participant derives from the PersistenceParticipant class or the PersistenceIOParticipant class (derived class of the PersistenceParticipant class), implements abstract methods, and then add an instance of the class as a workflow instance extension. The WorkflowApplication and WorkflowServiceHost look for such extensions when persisting an instance and invoke appropriate methods at appropriate times. Remarks: A host executes the following steps (or stages) when persisting an instance: Collects values to be persisted. Maps fields of monolithic structured values to individual values. Issues the SaveWorkflowCommand to the persistence provider. Performs I/O under the persistence transaction. A host completes a stage before beginning the next stage. For example when persisting, the host collects values from all the persistence participants before moving to the second stage. In the second stage, the host provides all the values collected in the first stage to all persistence participants in the second stage for mapping. In the third stage, the host provides all the collected values in the first and second stages to the persistence provider when invoking the SaveWorkflowCommand. Then in the fourth stage, the host provides all the collected values to all the persistence IO participants under the persistence transaction. A host executes the following stages when loading a persistence instance: Issues the LoadWorkflowCommand and LoadWorkflowByInstanceKeyCommand to the persistence provider. Performs I/O under the persistence transaction. Publishes the loaded values. At the highest level, workflow instance extensions that derive from the PersistenceParticipant class can participate in the first (Collect) and second (Map) stages of persisting process and the third stage (Publish) of loading process. Workflow instance extensions deriving from the PersistenceIOParticipant class can additionally participate in the fourth stage of the persisting process and the second stage of the loading process (I/O). Example: The following code sample demonstrates creating a class that derives from PersistenceParticipant. This example is from the Hiring Process sample. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,1,0,0,0
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Collection#)] public sealed class AddToCollection<T> : CodeActivity Type Parameters T The type of elements in the specified collection. Summary: Adds an item to a specified collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Activity Body { get; set; } Property Value Type: System.Activities.Activity The main path of execution. Summary: Gets the Activity contained by the CancellationScope that represents the main path of execution.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DeleteBookmarkScope : NativeActivity Summary: Deletes the BookmarkScope referenced by Scope. Remarks: The DeleteBookmarkScope activity is deprecated and should not be used. All BookmarkScope manipulation should be performed by using a BookmarkScopeHandle. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class DurableTimerExtension : TimerExtension, IWorkflowInstanceExtension, IDisposable Summary: Represents an activity timer extension that can be persisted. Remarks: A DurableTimerExtension object can only be associated with a single workflow instance. If a DurableTimerExtension object is used with more than one workflow instance, an InvalidOperationException is thrown with the following message: This TimerExtension has already been attached to a workflow instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Body#)] public sealed class ForEach<T> : NativeActivity Type Parameters T The type of the values provided in the Values collection. Summary: Executes an activity action once for each value provided in the Values collection. Remarks: ForEach is similar to the keyword foreach, but is implemented as an activity rather than a language statement. Note that unlike foreach in C\#, the ForEach(Of T) activity uses GetEnumerator, rather than IEnumerator\#System\#Collections\#IEnumerable\#GetEnumerator. Example: The following code sample demonstrates creating a ForEach(Of T) activity. This example is from the DynamicActivity Creation sample. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Body#)] public sealed class HandleScope<THandle> : NativeActivity where THandle : Handle Type Parameters THandle The type of the Handle. Summary: Provides default scoping behavior for Handle objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Action#)] public sealed class InvokeAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : NativeActivity Type Parameters T1 The data type of the first InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T2 The data type of the second InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T3 The data type of the third InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T4 The data type of the fourth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T5 The data type of the fifth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T6 The data type of the sixth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T7 The data type of the seventh InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T8 The data type of the eighth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T9 The data type of the ninth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T10 The data type of the tenth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). T11 The data type of the eleventh InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). Summary: Invokes an ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [RequiredArgumentAttribute] public InArgument<T1> Argument1 { get; set; } Property Value Type: System.Activities.InArgument(Of T1) The first In argument passed to the associated ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12). Summary: Gets or sets the first InArgument(Of T) passed to the associated ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [RequiredArgumentAttribute] public InArgument<T5> Argument5 { get; set; } Property Value Type: System.Activities.InArgument(Of T5) The fifth In argument passed to the associated ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12). Summary: Gets or sets the fifth InArgument(Of T) passed to the associated ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Action#)] public sealed class InvokeAction<T1, T2, T3, T4, T5, T6, T7> : NativeActivity Type Parameters T1 The data type of the first InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7). T2 The data type of the second InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7). T3 The data type of the third InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7). T4 The data type of the fourth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7). T5 The data type of the fifth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7). T6 The data type of the sixth InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7). T7 The data type of the seventh InArgument(Of T) passed to the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7). Summary: Invokes an activity's ActivityAction(Of T1, T2, T3, T4, T5, T6, T7) handler. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [RequiredArgumentAttribute] public InArgument<T4> Argument4 { get; set; } Property Value Type: System.Activities.InArgument(Of T4) The fourth argument passed to the associated ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8). Summary: Gets or sets the fourth InArgument(Of T) passed to the associated ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8).",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public OutArgument Result { get; set; } Property Value Type: System.Activities.OutArgument The operation's return value. Summary: The return value of the method operation. Example: The following code sample demonstrates setting the Result property of an InvokeMethod activity. This example is from the Using the InvokeMethod Activity sample.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class WorkflowTerminatedException : Exception Summary: The exception that is thrown when an operation is invoked on a terminated WorkflowApplication. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Text#)] public sealed class WriteLine : CodeActivity Summary: Writes a specified string to a specified TextWriter object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public InArgument<TextWriter> TextWriter { get; set; } Property Value Type: System.Activities.InArgument(Of TextWriter) The text writer. Summary: The TextWriter to write the Text to. Remarks: If no writer is available, the WriteLine activity writes its Text out to the console.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ActivityScheduledQuery : TrackingQuery Summary: When added to the Queries collection, subscribes to activity scheduled records when the tracking profile is created to subscribe to tracking records. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string ActivityName { get; set; } Property Value Type: System.String The activity name. Summary: Gets the name of the activity that the tracking record is subscribed from.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class CustomTrackingQuery : TrackingQuery Summary: When added to the Queries, subscribes to custom tracking records when the tracking profile is queried for custom records. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [DataContractAttribute] public class CustomTrackingRecord : TrackingRecord Summary: Contains the data sent to a tracking participant by the run-time tracking infrastructure when a custom tracking record is raised. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Creates a new instance of the CustomTrackingRecord class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected internal override TrackingRecord Clone() Return Value Type: System.Activities.Tracking.TrackingRecord A copy of the CustomTrackingRecord instance. Summary: Creates a copy of the CustomTrackingRecord.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Creates a new instance of the EtwTrackingParticipant class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ContentPropertyAttribute(#Queries#)] public class TrackingProfile Summary: Creates a subscription to workflow tracking records in a TrackingParticipant. Remarks: The queries defined within the tracking profile define the kinds of events that are returned by the subscription. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [DataContractAttribute] public class WorkflowInstanceRecord : TrackingRecord Summary: Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance changes state. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static class WorkflowInstanceStates Summary: Specifies the state of a workflow instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class ValidationResults Summary: Containts all validation errors generated by Validate(Activity) while validating a workflow. These errors are contained in the Errors and Warnings collections. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public IDictionary<Type, IList<Constraint>> AdditionalConstraints { get; } Property Value Type: System.Collections.Generic.IDictionary(Of Type, IList(Of Constraint)) A dictionary type list of constraints and types. Summary: Gets a dictionary of type-constraint pairs. Each additional constraint added to the dictionary will be applied to every activity of the specify type in the workflow to validate.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ActivityWithResultValueSerializer : ValueSerializer Summary: Ensures that the result of an activity is properly converted to a string that can be used for serial transmission. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ArgumentValueSerializer : ValueSerializer Summary: Converts instances of Argument to instances of String. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class FuncDeferringLoader : XamlDeferringLoader Summary: Represents an object that loads an instance of a saved function. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override Object Load( XamlReader xamlReader, IServiceProvider context ) Parameters xamlReaderType: System.Xaml.XamlReader A list of serialized nodes. contextType: System.IServiceProvider A context that provides information needed for parsing. Return Value Type: System.Object An instance of a function. Summary: Loads an instance of a function that can be used at any point to deserialize a list of nodes.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class InOutArgumentConverter : TypeConverterBase Summary: Provides a type converter to convert InOutArgument classes to and from various other representations. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,0,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IContract Summary: Represents the base interface for all contracts that are used for communication between components that are updated independently. Remarks: The IContract interface defines a contract that independently updated components, such as an application and an add-in, can use to communicate. Components can use IContract to communicate across process or application domain boundaries, or to communicate with other components in the same process or application domain. IContract serves a similar purpose for components created using the .NET Framework as the IUnknown interface serves for components created using COM. To determine whether an object implements a particular contract, use the QueryContract method.",0,0,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public interface IEnumeratorContract<T> : IDisposable Type Parameters T The type of objects being enumerated. Summary: Enumerates the elements in an IListContract(Of T) collection. Remarks: Enumerators can be used to read the data in the collection, but they cannot be used to modify the collection. Initially, the enumerator is positioned before the first element in the collection. At this position, the return value of GetCurrent is undefined. Therefore, you must call MoveNext to advance the enumerator to the first element of the collection before calling GetCurrent. GetCurrent returns the same object until MoveNext is called. MoveNext sets the return value of GetCurrent to the next element. If MoveNext passes the end of the collection, the enumerator is positioned after the last element in the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls to MoveNext also return false. If the last call to MoveNext returned false, the return value of GetCurrent is undefined. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IExecutorExtensionContract : IContract Summary: Defines an interface that host applications can implement to extend add-in executors. Remarks: Note This type is no longer used by the managed add-in infrastructure, and may be marked obsolete in a future release.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: void Insert( int index, T item ) Parameters indexType: System.Int32 The zero-based index at which to insert item. itemType: T The IContract object to insert in the IListContract(Of T) collection. Summary: Inserts an item at the specified index in an IListContract(Of T) collection. Remarks: After you call the Insert method, the items that follow the insertion point move to accommodate the new item. The indexes of the items that are moved are also updated. To replace an item at a specified index, use the SetItem method. To determine whether an IListContract(Of T) collection is read-only, call the GetIsReadOnly method.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public interface IProfferServiceContract : IContract Summary: Enables clients to provide custom services to components on which the contract is implemented. Remarks: A component implements IProfferServiceContract to enable clients to offer services to the component. After a service has been offered to a component, other clients of the component can access the service. Components typically implement IProfferServiceContract on the same type on which they implement IServiceProviderContract. Clients use the ProfferService method to add an IServiceProviderContract to the set of service providers offered by a component. Clients use the RevokeService method to remove an IServiceProviderContract from the set of service providers offered by a component.",1,0,0,1,0,0,0,1,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the RemoteArgument class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public long ObjectId Summary: Represents the ID of the serializable object that this SerializableObjectData describes. Remarks: To create an object ID, implementations of ISerializableObjectContract can use the System.Runtime.Serialization.ObjectIDGenerator class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IRemoteDelegateContract : IRemoteObjectContract, IContract Summary: Defines a contract that components can use to access a delegate across application domain and process boundaries. Remarks: To invoke a delegate, use the InvokeDelegate method. To add a delegate to an event or remove a delegate from an event, call the Invoke method of the IRemoteMethodInfoContract that is returned by GetAddMethod or GetRemoveMethod. Pass an IRemoteDelegateContract that represents the delegate to the parameters parameter of Invoke.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: IRemotePropertyInfoContract GetProperty( string name, BindingFlags bindingFlags, IRemoteTypeContract remoteReturnType, IArrayContract<IRemoteTypeContract> remoteTypes ) Parameters nameType: System.String The name of a property of the current IRemoteTypeContract. bindingFlagsType: System.Reflection.BindingFlags A bitwise combination of the BindingFlags values that specifies how to search for the method. remoteReturnTypeType: System.AddIn.Contract.Automation.IRemoteTypeContract An IRemoteTypeContract that specifies the return type of the property. remoteTypesType: System.AddIn.Contract.Collections.IArrayContract(Of IRemoteTypeContract) An IArrayContract(Of C) of IRemoteTypeContract objects that represent the parameters for the specified property. Return Value Type: System.AddIn.Contract.Automation.IRemotePropertyInfoContract An IRemotePropertyInfoContract that provides access to the specified property, if found; otherwise, Nothing. Summary: Returns an IRemotePropertyInfoContract that provides access to a specified property of the current IRemoteTypeContract.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsByRef Summary: Indicates whether this RemoteTypeData describes a type that is passed by reference. Remarks: The value of this field is true if the current RemoteTypeData describes a type that is passed by reference; otherwise, the value of this field is false.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IRemoteArgumentEnumerableContract : IContract Summary: Exposes an enumerator that supports a simple iteration over a collection of RemoteArgument objects.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class)] public sealed class AddInAttribute : Attribute Summary: Identifies an object as an add-in. Remarks: The following methods, which maintain the store of information about available pipeline segments, use this attribute to identify an add-in. Rebuild RebuildAddIns Update UpdateAddIns FindAddIn This attribute is not required when an add-in is found exclusively by the FindAddIn method. The host has already identified the add-in by its type name and location, and therefore the attribute is not required for the add-in to be discovered. This attribute should be used only on types that activate the segments of the pipeline. Types that represent objects passed between the host and the add-in do not need this attribute. Example: The following example identifies an add-in. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public Platform Platform { get; } Property Value Type: System.AddIn.Hosting.Platform The bits-per-word of the process that runs the add-in. Summary: Gets the bits-per-word of the process in which the out-of-process add-in is run. Remarks: The bits-per-word is set when the AddInProcess object is initialized, and cannot be changed.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public static class AddInStore Summary: Provides methods to store and find information about available add-ins and pipeline segments. Remarks: Use this class to build, rebuild, and update two cache files, as described in the following table. Cache file Methods that create the file PipelineSegments.store This file is located in the root directory of the pipeline directory structure. Update Updates the file with new pipeline segments. If no new segments are installed, this method just validates the cache. Rebuild Rebuilds the file and includes new pipeline segments. AddIns.store This file is located in a directory that contains one or more add-in subdirectories. If this directory is in the pipeline directory structure, it must be named AddIns. UpdateAddIns Updates the file with new add-ins at a specified location. Call this method if your add-ins are outside the pipeline directory structure. If no new add-ins are installed, this method just validates the cache. RebuildAddIns Rebuilds the file and includes add-ins at a specified location. Call this method if your add-ins are outside the pipeline directory structure. Update If the add-ins are in the pipeline directory structure, this method updates the file with new add-ins. Rebuild If the add-ins are in the pipeline directory structure, this method rebuilds the file and includes new add-ins. These methods create the cache files if they do not previously exist. After the cache files are created, use the FindAddIns method to examine the files to find all add-ins that match a specified host view of the add-in. You can also use the FindAddIn method to find a specific add-in. Example: The following example shows how to update cache files. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public string Version { get; } Property Value Type: System.String The version of the add-in, or Nothing if the version number is not specified in the AddInAttribute attribute. Summary: Gets the version of the add-in, as specified in the AddInAttribute attribute. Remarks: The version number is a free-form string. Example: The following example displays the value of the Name, AddInFullName, Description, AssemblyName, Publisher, and Version properties to the console. This code example is part of a larger example provided for the AddInToken class.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public struct QualificationDataItem Summary: Represents information supplied by the developer of a pipeline segment, for use by the host. Remarks: Each item of qualification data consists of a name/value pair that was applied to a pipeline segment by using the QualificationDataAttribute attribute, to provide information that qualifies the use of the segment (for example, the recommended isolation level for the segment). The QualificationDataItem structure contains one name/value pair and the type of pipeline segment it was applied to. Use the AddInToken.QualificationData property to get a nested set of dictionaries that contains QualificationDataItem structures for the pipeline segments associated with an AddInToken. Alternatively, use the AddInToken.GetEnumerator method to get an enumerator for the QualificationDataItem structures of the pipeline segments associated with a token, or simply use a foreach statement (For Each in Visual Basic, for each in Visual C++) to treat the token as if it were a collection of QualificationDataItem structures. Example: The following example lists the qualification data for the pipeline segments associated with each AddInToken in a collection of tokens. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public TimeSpan Renewal( ILease lease ) Parameters leaseType: System.Runtime.Remoting.Lifetime.ILease The lifetime lease object that is used by the remoting lifetime service. Return Value Type: System.TimeSpan The renewed lease. Implements ISponsor.Renewal(ILease) Summary: Requests a sponsoring client to renew the lease for the specified object.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Gets the unique identifier for a method or type.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class CompositionError Summary: Represents an error that occurred during composition. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Specifies that a single shared instance of the associated ComposablePart will be created by the CompositionContainer and shared by all requestors.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Constructor, AllowMultiple = false, Inherited = false)] public class ImportingConstructorAttribute : Attribute Summary: Specifies which constructor should be used when creating a part. Remarks: By default, only a parameter-less constructor will be used to construct an attributed part. Use ImportingConstructorAttribute to indicate that a specific constructor should be used instead. Parameters to the decorated constructor will be treated as imports. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: JScript   protected virtual void OnChanged( ComposablePartCatalogChangedEventArgs e ) Parameters eType: System.ComponentModel.Composition.Primitives.ComposablePartCatalogChangedEventArgs A ComposablePartCatalogChangedEventArgs object that contains the event data. Summary: Raises the Changed event.",0,0,0,0,0,0,0,0,0,1,0,1
"Additional online Documentation: Syntax: public class AssemblyCatalog : ComposablePartCatalog, ICompositionElement Summary: Discovers attributed parts in a managed code assembly. Remarks: An AssemblyCatalog is used to parse all the parts present in a specified assembly. The target assembly can be indicated either via object reference or by path. This type is thread safe. Example: The following code demonstrates the common scenario of an application creating an AssemblyCatalog to parse its own assembly. This is a straightforward way to load parts contained in a single project into MEF. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,1,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: ICompositionElement ICompositionElement.Origin { get; } Property Value Type: System.ComponentModel.Composition.Primitives.ICompositionElement Always Nothing. Implements ICompositionElement.Origin Summary: Gets the composition element that this element originated from. Remarks: This member is an explicit interface member implementation. It can be used only when the AssemblyCatalog instance is cast to an ICompositionElement interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<ComposablePartCatalogChangeEventArgs> Changed Implements INotifyComposablePartCatalogChanged.Changed Summary: Occurs when the contents of the catalog has changed.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<ComposablePartCatalogChangeEventArgs> Changing Implements INotifyComposablePartCatalogChanged.Changing Summary: Occurs when the catalog is changing.",0,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string FullPath { get; } Property Value Type: System.String The translated absolute path observed by the catalog. Summary: Gets the translated absolute path observed by the DirectoryCatalog.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ImportEngine : ICompositionService, IDisposable Summary: Performs composition for containers. Remarks: This class is used internally by CompositionContainer. You should generally not use it unless you are authoring a container. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override IQueryable<ComposablePartDefinition> Parts { get; } Property Value Type: System.Linq.IQueryable(Of ComposablePartDefinition) The ComposablePartDefinition objects that are contained in the TypeCatalog object. Summary: Gets the part definitions that are contained in the catalog.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected virtual Object GetExportedValueCore() Return Value Type: System.Object The exported object the export provides. Summary: Returns the exported object the export provides.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ExportDefinition Summary: Describes the contract that a particular Export object satisfies. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override string ToString() Return Value Type: System.String A string representation of the export definition. Summary: Returns a string representation of the export definition.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum ImportCardinality Summary: Indicates the cardinality of the Export objects required by an ImportDefinition.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static class ReflectionModelServices Summary: Provides extension methods to create and retrieve reflection-based parts. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method|AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter, AllowMultiple = false)] public class DataTypeAttribute : ValidationAttribute Summary: Specifies the name of an additional type to associate with a data field. Remarks: The DataTypeAttribute attribute enables you to mark fields by using a type that is more specific than the database intrinsic type. The type name is selected from the DataType enumeration type. For example, a string data field that contains e-mail addresses can be specified as the EmailAddress type. This information is then accessed by the field templates to modify how the data field is processed. You use the DataTypeAttribute attribute for the following reasons: To provide additional type information for a data field. You do this by applying the DataTypeAttribute attribute to a data field in the data model and by specifying the additional type name from the DataType enumeration. The field template that processes the data field can access this additional metadata type information to determine how to process the field. For example, the text field template can generate hyperlinks for e-mail addresses whose intrinsic type is String. To associate a custom field template with a data field. The specified custom field template will then be used to process the data field. This is an alternative to using the UIHintAttribute attribute. When you apply the DataTypeAttribute attribute to a data field you must do the following: Follow the attribute usage rules. Implement the metadata class that contains the data fields to which you want to apply the attribute. Issue validation errors as appropriate. For more information, see ASP.NET Dynamic Data Guidelines. See a run-time code example of this feature: Run. Example: The following example uses the DataTypeAttribute attribute to customize the display of the EmailAddress data field. The e-mail addresses are shown as hyperlinks instead of as simple text, which is what Dynamic Data would infer from the intrinsic data type. The example code is in three parts, and it performs the following steps: It implements a metadata partial class and the associated metadata class. In the associated metadata class, it applies the DataTypeAttribute attribute to the EmailAddress data field by specifying the EmailAddress enumerated value. This indicates to the Text.ascx field template that it should customize the display of e-mail addresses. It modifies the Text.ascx field template to customize the display of the EmailAddress data fields.    <%@ Control Language=## CodeFile=#Text.ascx.cs# Inherits=#TextField# %> <!-- Removed, evaluated in the code behind. <%\# FieldValueString %> -->    To compile and run the example code, you need the following: Visual Studio 2008 Service Pack 1 or Visual Developer 2008 Express Edition Service Pack 1. The AdventureWorksLT sample database. For information about how to download and install the SQL Server sample database, see Microsoft SQL Server Product Samples: Database on the CodePlex site. Make sure that you install the correct version of the sample database for the version of SQL Server that you are running (SQL Server 2005 or SQL Server 2008). A data-driven Web site. This enables you to create a data context for the database and to create the class that contains the data field to customize. For more information, see Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,1,1,1,1,0
"Additional online Documentation: Summary: Initializes a new instance of the DisplayColumnAttribute class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public sealed class EditableAttribute : Attribute Summary: Indicates whether a data field is editable. Remarks: The presence of the EditableAttribute attribute on a data field indicates whether the user should be able to change the field's value. This class neither enforces nor guarantees that a field is editable. The underlying data store might allow the field to be changed regardless of the presence of this attribute. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public Object Minimum { get; private set; } Property Value Type: System.Object The minimu value that is allowed for the data field. Summary: Gets the minimum allowed field value. Remarks: The minimum value that is allowed for the data field.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public class ScaffoldColumnAttribute : Attribute Summary: Specifies whether a class or data column uses scaffolding. Remarks: Scaffolding is the mechanism for generating web page templates based on database schemas. ASP.NET Dynamic Data uses scaffolding to generate Web-based UI that lets a user to view and update a database. This class uses the Scaffold property to enable scaffolding in a Dynamic Data Web Site. Scaffolding enhances ASP.NET page framework by dynamically displaying pages based on the data model with no physical pages required. Scaffolding provides the following capabilities: Minimal or no code to create a data-driven Web application. Quick development time. Pages that are fully functional and include?display, insert, edit, delete, sorting, and paging functionalities. Built-in data validation that is based on the database schema. Filters that are created for each foreign key or Boolean fields. This class can be used to enable or disable scaffolding of data columns in a data model by applying this attribute to the appropriate data field object in the class that represents the table. Example: The following code example exposes the ProductID column of the Products table in the AdventureWorksLT data base by applying the scaffold property to the ProductID object in the Products partial class and setting it to true. It hides the ThumbnailPhotoFileName column by applying the scaffold property to the ThumbnailPhotoFileName object and setting it to false.  [C\#]    To compile the example code, you need the following: Visual Studio 2008 Service Pack 1 or Visual Developer 2008 Express Edition Service Pack 1. The AdventureWorksLT sample database. For information about how to download and install the SQL Server sample database, see Microsoft SQL Server Product Samples: Database on the CodePlex site. Make sure that you install the correct version of the sample database for the version of SQL Server that you are running (SQL Server 2005 or SQL Server 2008). A Dynamic Data Web site. This enables you to create a data context for the database and the class that contains the data field to customize and the methods to override. In addition, it creates the environment in which to use the page described before. For more information, see Walkthrough: Creating a New Dynamic Data Web Site Using Scaffolding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,0,1,1,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter, AllowMultiple = false)] public class StringLengthAttribute : ValidationAttribute Summary: Specifies the minimum and maximum length of characters that are allowed in a data field. Remarks: ASP.NET Dynamic Data enables CRUD (Create, Read, Update and Delete) operations in a data model. You can specify the minimum and maximum length of characters for each field when data is being inserted or updated. For character data types, the MinimumLength and MaximumLength properties identify the largest number of bytes that are required in order to store a string. Example: The following example shows how to limit the number of characters in a field. This example works with the ThumbnailPhotoFileName field in the Products table in the AdventureWorksLT database. The field is limited 4 characters by applying the StringLengthAttribute attribute to the partial class that represents the Product entity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public override bool Equals( Object obj ) Parameters objType: System.Object The object to compare with this instance, or a Nothing reference. Return Value Type: System.Boolean true if the specified object is equal to this instance; otherwise, false. Summary: Gets a value that indicates whether this instance is equal to the specified object.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Object GetService( Type serviceType ) Parameters serviceTypeType: System.Type The type of the service to use for validation. Return Value Type: System.Object An instance of the service, or Nothing if the service is not available. Implements IServiceProvider.GetService(Type) Summary: Returns the service that provides custom validation. Remarks: If the ServiceContainer object is defined at the application level, the GetService method accesses it to retrieve the requested service. If the ServiceContainer object is not defined or it does not return the service, the GetService method queries the IServiceProvider object that is passed to the ValidationContext method in order to obtain the service.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class ValidationException : Exception Summary: Represents the exception that occurs during validation of a data field when the ValidationAttribute class is used. Remarks: A validation exception occurs if an input value does not match the expected data type, range or pattern of the data field. For example, if a user enters an integer value in a data field that expects a DateTime value, a validation exception occurs. This class uses the ValidationAttribute class to customize validations. A ValidationException is thrown if a validation error occurs. The exception is thrown when the Validate method is called. All the exceptions that are thrown during validation are contained in the InnerExceptions collection. You can retrieve each validation exception by iterating through the InnerExceptions collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public override void Commit( IDictionary savedState ) Parameters savedStateType: System.Collections.IDictionary An IDictionary that contains the state of the computer after all the installers in the installer collection have run. Summary: Completes the installation transaction. Remarks: This method is called only if the Install methods of all the installers in this instance's InstallerCollection succeed. This method then calls the Commit method of each installer in the collection. Store any information that you might need to do a correct uninstall operation in the saved-state IDictionary, which is passed to the Uninstall method. Example: The following example demonstrates the AssemblyInstaller constructor and the Install and Commit methods of the AssemblyInstaller class. An AssemblyInstaller class is created by invoking the AssemblyInstaller constructor. The properties of this object are set and the Install and Commit methods are called to install the MyAssembly_Install.exe assembly.",1,0,0,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public event InstallEventHandler BeforeUninstall Summary: Occurs before the installers in the Installers property perform their uninstall operations. Example: The following example demonstrates the BeforeUninstall event. It is raised by the OnBeforeUninstall method.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public event InstallEventHandler Committing Summary: Occurs before the installers in the Installers property committ their installations. Example: The following example demonstrates the Committing event. It is raised by the OnCommitting method.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class InstallException : SystemException Summary: The exception that is thrown when an error occurs during the commit, rollback, or uninstall phase of an installation. Example: The following example, plus the examples in the InstallException constructors, together make up an example showing an assembly having its own installer. The installer is named MyInstaller, which has an attribute RunInstallerAttribute, indicating that this installer will be invoked by Installutil.exe (Installer Tool). Installutil.exe (Installer Tool) calls the methods Commit, Rollback, Install and Uninstall. The code in Commit presumes that a file named FileDoesNotExist.txt exists before the installation of the assembly can be committed. If the file FileDoesNotExist.txt does not exist, Commit raises an InstallException. The same is the case with Uninstall in which an uninstallation will only happen if a file named FileDoesNotExist.txt exists. Otherwise it raises an InstallException. In Rollback, a code fragment is executed, which might raise an exception. If the exception is raised, it is caught and an InstallException is raised with that exception being passed to it. Note Run this example with the help of Installutil.exe. Type this in the command prompt: Installutil InstallException.exe -or- Installutil /u InstallException.exe ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: int IManagedInstaller.ManagedInstall( string argString, int hInstall ) Parameters argStringType: System.String The command line to install. hInstallType: System.Int32 The handle to the installation. Return Value Type: System.Int32 The return code for installutil.exe. A successful installation returns 0. Other values indicate failure. Implements IManagedInstaller.ManagedInstall(String, Int32) Summary: For a description of this member, see ManagedInstall. Remarks: This member is an explicit interface member implementation. It can be used only when the ManagedInstallerClass instance is cast to an IManagedInstaller interface.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Specifies what an installer should do during an uninstallation.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] [SecurityPermissionAttribute(SecurityAction.LinkDemand, UnmanagedCode = true)] [SecurityPermissionAttribute(SecurityAction.InheritanceDemand, UnmanagedCode = true)] public abstract class SafeNCryptHandle : SafeHandleZeroOrMinusOneIsInvalid Summary: Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11>( T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11 ) Type Parameters In T1 The type of the first parameter of the method that this delegate encapsulates. This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics. In T2 The type of the second parameter of the method that this delegate encapsulates. In T3 The type of the third parameter of the method that this delegate encapsulates. In T4 The type of the fourth parameter of the method that this delegate encapsulates. In T5 The type of the fifth parameter of the method that this delegate encapsulates. In T6 The type of the sixth parameter of the method that this delegate encapsulates. In T7 The type of the seventh parameter of the method that this delegate encapsulates. In T8 The type of the eighth parameter of the method that this delegate encapsulates. In T9 The type of the ninth parameter of the method that this delegate encapsulates. In T10 The type of the tenth parameter of the method that this delegate encapsulates. In T11 The type of the eleventh parameter of the method that this delegate encapsulates. Parameters arg1Type: T1 The first parameter of the method that this delegate encapsulates. arg2Type: T2 The second parameter of the method that this delegate encapsulates. arg3Type: T3 The third parameter of the method that this delegate encapsulates. arg4Type: T4 The fourth parameter of the method that this delegate encapsulates. arg5Type: T5 The fifth parameter of the method that this delegate encapsulates. arg6Type: T6 The sixth parameter of the method that this delegate encapsulates. arg7Type: T7 The seventh parameter of the method that this delegate encapsulates. arg8Type: T8 The eighth parameter of the method that this delegate encapsulates. arg9Type: T9 The ninth parameter of the method that this delegate encapsulates. arg10Type: T10 The tenth parameter of the method that this delegate encapsulates. arg11Type: T11 The eleventh parameter of the method that this delegate encapsulates. Summary: Encapsulates a method that has 11 parameters and does not return a value. Remarks: You can use the Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have 11 parameters that are all passed to it by value, and it must not return a value. (In C\#, the method must return void. In Visual Basic, it must be defined by the Sub.End Sub construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation. Note To reference a method that has 11 parameters and returns a value, use the generic Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult) delegate instead. You can also use the Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) delegate with anonymous methods and lambda expressions.",0,0,1,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9>( T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9 ) Type Parameters In T1 The type of the first parameter of the method that this delegate encapsulates. This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics. In T2 The type of the second parameter of the method that this delegate encapsulates. In T3 The type of the third parameter of the method that this delegate encapsulates. In T4 The type of the fourth parameter of the method that this delegate encapsulates. In T5 The type of the fifth parameter of the method that this delegate encapsulates. In T6 The type of the sixth parameter of the method that this delegate encapsulates. In T7 The type of the seventh parameter of the method that this delegate encapsulates. In T8 The type of the eighth parameter of the method that this delegate encapsulates. In T9 The type of the ninth parameter of the method that this delegate encapsulates. Parameters arg1Type: T1 The first parameter of the method that this delegate encapsulates. arg2Type: T2 The second parameter of the method that this delegate encapsulates. arg3Type: T3 The third parameter of the method that this delegate encapsulates. arg4Type: T4 The fourth parameter of the method that this delegate encapsulates. arg5Type: T5 The fifth parameter of the method that this delegate encapsulates. arg6Type: T6 The sixth parameter of the method that this delegate encapsulates. arg7Type: T7 The seventh parameter of the method that this delegate encapsulates. arg8Type: T8 The eighth parameter of the method that this delegate encapsulates. arg9Type: T9 The ninth parameter of the method that this delegate encapsulates. Summary: Encapsulates a method that has nine parameters and does not return a value. Remarks: You can use the Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9) delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have nine parameters that are all passed to it by value, and it must not return a value. (In C\#, the method must return void. In Visual Basic, it must be defined by the Sub.End Sub construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation. Note To reference a method that has nine parameters and returns a value, use the generic Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult) delegate instead. You can also use the Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9) delegate with anonymous methods and lambda expressions.",1,0,1,0,0,0,0,1,0,0,1,1
"Additional online Documentation: Syntax: public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, out TResult>( T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10 ) Type Parameters In T1 The type of the first parameter of the method that this delegate encapsulates. This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics. In T2 The type of the second parameter of the method that this delegate encapsulates. In T3 The type of the third parameter of the method that this delegate encapsulates. In T4 The type of the fourth parameter of the method that this delegate encapsulates. In T5 The type of the fifth parameter of the method that this delegate encapsulates. In T6 The type of the sixth parameter of the method that this delegate encapsulates. In T7 The type of the seventh parameter of the method that this delegate encapsulates. In T8 The type of the eighth parameter of the method that this delegate encapsulates. In T9 The type of the ninth parameter of the method that this delegate encapsulates. In T10 The type of the tenth parameter of the method that this delegate encapsulates. Out TResult The type of the return value of the method that this delegate encapsulates. This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics. Parameters arg1Type: T1 The first parameter of the method that this delegate encapsulates. arg2Type: T2 The second parameter of the method that this delegate encapsulates. arg3Type: T3 The third parameter of the method that this delegate encapsulates. arg4Type: T4 The fourth parameter of the method that this delegate encapsulates. arg5Type: T5 The fifth parameter of the method that this delegate encapsulates. arg6Type: T6 The sixth parameter of the method that this delegate encapsulates. arg7Type: T7 The seventh parameter of the method that this delegate encapsulates. arg8Type: T8 The eighth parameter of the method that this delegate encapsulates. arg9Type: T9 The ninth parameter of the method that this delegate encapsulates. arg10Type: T10 The tenth parameter of the method that this delegate encapsulates. Return Value Type: TResult The return value of the method that this delegate encapsulates. Summary: Encapsulates a method that has 10 parameters and returns a value of the type specified by the TResult parameter. Remarks: You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have 10 parameters, each of which is passed to it by value, and that it must return a value. Note To reference a method that has 10 parameters and returns void (or in Visual Basic, that is declared as a Sub rather than as a Function), use the generic Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) delegate instead. You can also use the Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult) delegate with anonymous methods and lambda expressions. The underlying type of a lambda expression is one of the generic Func delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.",0,0,1,1,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class HashSet<T> : ISerializable, IDeserializationCallback, ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of elements in the hash set. Summary: Represents a set of values. Remarks: The HashSet(Of T) class provides high-performance set operations. A set is a collection that contains no duplicate elements, and whose elements are in no particular order. The capacity of a HashSet(Of T) object is the number of elements that the object can hold. A HashSet(Of T) object's capacity automatically increases as elements are added to the object. Starting with the .NET Framework version 4, the HashSet(Of T) class implements the ISet(Of T) interface. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: The following example demonstrates how to merge two disparate sets. This example creates two HashSet(Of T) objects, and populates them with even and odd numbers, respectively. A third HashSet(Of T) object is created from the set that contains the even numbers. The example then calls the UnionWith method, which adds the odd number set to the third set. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public bool IsSubsetOf( IEnumerable<T> other ) Parameters otherType: System.Collections.Generic.IEnumerable(Of T) The collection to compare to the current HashSet(Of T) object. Return Value Type: System.Boolean true if the HashSet(Of T) object is a subset of other; otherwise, false. Implements ISet(Of T).IsSubsetOf(IEnumerable(Of T)) Summary: Determines whether a HashSet(Of T) object is a subset of the specified collection. Remarks: An empty set is a subset of any other collection, including an empty set; therefore, this method returns true if the collection represented by the current HashSet(Of T) object is empty, even if the other parameter is an empty set. This method always returns false if Count is greater than the number of elements in other. If the collection represented by other is a HashSet(Of T) collection with the same equality comparer as the current HashSet(Of T) object, this method is an O(n) operation. Otherwise, this method is an O(n + m) operation, where n is Count and m is the number of elements in other. Example: The following example creates two disparate HashSet(Of T) objects and compares them to each other. In this example, lowNumbers is both a subset and a proper subset of allNumbers until allNumbers is modified, using the IntersectWith method, to contain only values that are present in both sets. Once allNumbers and lowNumbers are identical, lowNumbers is still a subset of allNumbers but is no longer a proper subset.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Writes event trace information to the log file.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum TraceLogRetentionOption Summary: Specifies the file structure that will be used for the EventSchemaTraceListener log. Remarks: The TraceLogRetentionOption enumeration is used to specify the value of the TraceLogRetentionOption property in the EventSchemaTraceListener class. That property setting determines the possible and default values for the EventSchemaTraceListener.MaximumFileSize and EventSchemaTraceListener.MaximumNumberOfFiles properties. You can set the MaximumFileSize and MaximumNumberOfFiles properties through the maximumFileSize and maximumNumberOfFiles custom attributes in the configuration file or by using the maximumFileSize or maximumNumberOfFiles parameters in the EventSchemaTraceListener constructor. If the maximumFileSize or maximumNumberOfFiles attributes in the configuration file specify an out-of-range value, the properties are set to their default values. If you specify an out-of-range value in the maximumFileSize or maximumNumberOfFiles parameter when you call the EventSchemaTraceListener constructor, an ArgumentOutOfRangeException is thrown. The following table shows the possible and default values for file size and file count that are associated with each trace log retention option. #N/A# indicates that the associated property is not checked for that TraceLogRetentionOption value. TraceLogRetentionOption Maximum file size Default file size Maximum number of files Default number of files LimitedCircularFiles N/A -1 N/A 1 LimitedSequentialFiles >0 4 kB N/A 1 SingleFileBoundedSize >0 4 kB N/A -1 SingleFileUnboundedSize >0 4 kB >0 1 UnlimitedSequentialFiles >0 4 kB >1 2",1,0,0,1,0,0,0,1,0,0,0,0
"The event is larger than the session buffer size; events cannot span buffers.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class EventKeyword Summary: Represents a keyword for an event. Keywords are defined in an event provider and are used to group the event with other similar events (based on the usage of the events). Remarks: This class cannot be instantiated. A ProviderMetadata object defies a list of EventKeyword objects, one for each keyword used by the provider events. Each keyword is a bit in a 64-bit mask. Predefined bit values and reserved bits occupy the top 16 positions of this mask, leaving the manifest to use any bits between 0x0000000000000001 and 0x0000800000000000. The standard event keywords are defined in the StandardEventKeywords enumeration. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class EventLevel Summary: Contains an event level that is defined in an event provider. The level signifies the severity of the event. Remarks: This class cannot be instantiated. A ProviderMetadata object defies a list of EventLevel objects, one for each level defined in the provider. The standard level values and their meanings are defined in the StandardEventLevel enumeration. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsEnabled { get; set; } Property Value Type: System.Boolean Returns true if the log is enabled, and returns false if the log is disabled. Summary: Gets or sets a Boolean value that determines whether the event log is enabled or disabled. An enabled log is one in which events can be logged, and a disabled log is one in which events cannot be logged. Remarks: If the value of this property is changed, call the SaveChanges method to save the changes.",1,1,1,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public IEnumerable<string> ProviderNames { get; } Property Value Type: System.Collections.Generic.IEnumerable(Of String) Returns an enumerable collection of strings that contain the event provider names. Summary: Gets an enumerable collection of the names of all the event providers that can publish events to this event log.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Summary: Initializes a new instance of the EventLogInvalidDataException class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string DisplayName { get; } Property Value Type: System.String Returns a string that contains the localized name of the event log. Summary: Gets the localized name of the event log.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class EventLogSession : IDisposable Summary: Used to access the Event Log service on the local computer or a remote computer so you can manage and gather information about the event logs and event providers on the computer. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: For example code using this class, see How To: Query for Events, How to: Retrieve Information About an Event Publisher or How to: Configure and Read Event Log Properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,1,0
"Additional online Documentation: Summary: Clears events from the specified event log. Example: For example code using this class, see How To: Export, Archive, and Clear Event Logs.",1,0,1,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public static EventLogSession GlobalSession { get; } Property Value Type: System.Diagnostics.Eventing.Reader.EventLogSession Returns an EventLogSession object that is a predefined session object that is connected to the Event Log service on the local computer. Summary: Gets a static predefined session object that is connected to the Event Log service on the local computer.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class EventLogWatcher : IDisposable Summary: Allows you to subscribe to incoming events. Each time a desired event is published to an event log, the EventRecordWritten event is raised, and the method that handles this event will be executed. Remarks: The instances of this class are created from EventLogQuery objects, which specify a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the EventRecordWritten event is raised. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: For example code using this class, see How to: Subscribe to Events in an Event Log. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,0,0,1,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class EventProperty Summary: Contains the value of an event property that is specified by the event provider when the event is published. Remarks: This class can be extended to contain more attributes of the property, such as the property name or output type. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum PathType Summary: Specifies that a string contains a name of an event log or the file system path to an event log file.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [FlagsAttribute] public enum StandardEventKeywords Summary: Defines the standard keywords that are attached to events by the event provider. For more information about keywords, see EventKeyword.",1,0,0,0,0,0,0,0,0,0,0,0
"The counter set contains single instance counters, for example, a counter that measures physical memory.",1,0,0,0,0,0,0,0,0,0,0,1
"The counter set contains multiple instance counters whose aggregate value is obtained from all instances of the counter. For example, a counter in this type of counter set might obtain the total thread execution time for all threads in a multithreaded application and sum their values.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class ConvertBinder : DynamicMetaObjectBinder Summary: Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual Type ReturnType { get; } Property Value Type: System.Type The Type object representing the result type of the operation. Summary: The result type of the operation.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual bool TryDeleteIndex( DeleteIndexBinder binder, Object[] indexes ) Parameters binderType: System.Dynamic.DeleteIndexBinder Provides information about the deletion. indexesType: System.Object() The indexes to be deleted. Return Value Type: System.Boolean true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.) Summary: Provides the implementation for operations that delete an object by index. This method is not intended for use in C\# or Visual Basic. Remarks: Classes derived from the DynamicObject class can override this method to specify how a value that has a specified index should be deleted. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.) C\# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting objects by index, such as del sampleObject[1,2] in Python.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ExpandoObject : IDynamicMetaObjectProvider, IDictionary<string, Object>, ICollection<KeyValuePair<string, Object>>, IEnumerable<KeyValuePair<string, Object>>, IEnumerable, INotifyPropertyChanged Summary: Represents an object whose members can be dynamically added and removed at run time. Remarks: The ExpandoObject class enables you to add and delete members of its instances at run time and also to set and get values of these members. This class supports dynamic binding, which enables you to use standard syntax like sampleObject.sampleMember instead of more complex syntax like sampleObject.GetAttribute(#sampleMember#). The ExpandoObject class implements the standard Dynamic Language Runtime (DLR) interface IDynamicMetaObjectProvider, which enables you to share instances of the ExpandoObject class between languages that support the DLR interoperability model. For example, you can create an instance of the ExpandoObject class in  and then pass it to an IronPython function. For more information, see Dynamic Language Runtime Overview documentation on the CodePlex Web site, and Introducing the ExpandoObject on the  Frequently Asked Questions Web site. The ExpandoObject class is an implementation of the dynamic object concept that enables getting, setting, and invoking members. If you want to define types that have their own dynamic dispatch semantics, use the DynamicObject class. If you want to define how dynamic objects participate in the interoperability protocol and manage DLR fast dynamic dispatch caching, create your own implementation of the IDynamicMetaObjectProvider interface. Creating an Instance In , to enable late binding for an instance of the ExpandoObject class, you must use the dynamic keyword. For more information, see Using Type dynamic ( Programming Guide). In Visual Basic, dynamic operations are supported by late binding. For more information, see Early and Late Binding (Visual Basic). The following code example demonstrates how to create an instance of the ExpandoObject class.  Adding New Members You can add properties, methods, and events to instances of the ExpandoObject class. The following code example demonstrates how to add a new property to an instance of the ExpandoObject class.    The methods represent lambda expressions that are stored as delegates, which can be invoked when they are needed. The following code example demonstrates how to add a method that increments a value of the dynamic property.    The following code example demonstrates how to add an event to an instance of the ExpandoObject class.   class Program { static void Main(string[] args) {  // Create a new event and initialize it with null. sampleObject.sampleEvent = null; // Add an event handler. sampleObject.sampleEvent += new EventHandler(SampleHandler); // Raise an event for testing purposes. sampleObject.sampleEvent(sampleObject, new EventArgs()); } // Event handler. static void SampleHandler(object sender, EventArgs e) { Console.WriteLine(#SampleHandler for {0} event#, sender); } } // This code example produces the following output: // SampleHandler for System.Dynamic.ExpandoObject event. Passing As a Parameter You can pass instances of the ExpandoObject class as parameters. Note that these instances are treated as dynamic objects in  and late-bound objects in Visual Basic. This means that you do not have IntelliSense for object members and you do not receive compiler errors when you call non-existent members. If you call a member that does not exist, an exception occurs. The following code example demonstrates how you can create and use a method to print the names and values of properties.    Enumerating and Deleting Members The ExpandoObject class implements the IDictionary<String, Object> interface. This enables enumeration of members added to the instance of the ExpandoObject class at run time. This can be useful if you do not know at compile time what members an instance might have. The following code example shows how you can cast an instance of the ExpandoObject class to the IDictionary(Of TKey, TValue) interface and enumerate the instance's members.    In languages that do not have syntax for deleting members (such as  and Visual Basic), you can delete a member by implicitly casting an instance of the ExpandoObject to the IDictionary<String, Object> interface and then deleting the member as a key/value pair. This is shown in the following example.    Receiving Notifications of Property Changes The ExpandoObject class implements the INotifyPropertyChanged interface and can raise a PropertyChanged event when a member is added, deleted, or modified. This enables ExpandoObject class integration with Windows Presentation Foundation (WPF) data binding and other environments that require notification about changes in the object content. The following code example demonstrates how to create an event handler for the PropertyChanged event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public interface IInvokeOnGetBinder Summary: Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected InvokeMemberBinder( string name, bool ignoreCase, CallInfo callInfo ) Parameters nameType: System.String The name of the member to invoke. ignoreCaseType: System.Boolean true if the name should be matched ignoring case; false otherwise. callInfoType: System.Dynamic.CallInfo The signature of the arguments at the call site. Summary: Initializes a new instance of the InvokeMemberBinder.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override sealed Type ReturnType { get; } Property Value Type: System.Type The Type object representing the result type of the operation. Summary: The result type of the operation.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Creates a memory-mapped file in system memory.",0,0,0,0,0,0,0,0,1,0,0,0
"Read and write access to the file.",0,0,0,0,0,0,0,0,0,0,0,0
"The right to open and copy a file as read-only.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void DisposeLocalCopyOfClientHandle() Summary: Closes the local copy of the AnonymousPipeClientStream object's handle. Remarks: The DisposeLocalCopyOfClientHandle method should be called after the client handle has been passed to the client. If this method is not called, the AnonymousPipeServerStream object will not receive notice when the client disposes of its PipeStream object. Example: The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an AnonymousPipeServerStream object is created in a parent process with a PipeDirection value of Out.",1,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public abstract class PipeStream : Stream Summary: Exposes a Stream object around a pipe, which supports both anonymous and named pipes. Remarks: The PipeStream class provides the base class for named and anonymous pipes operations in the .NET Framework. Use the NamedPipeServerStream and NamedPipeClientStream classes for named pipe operations. Use the AnonymousPipeServerStream and AnonymousPipeClientStream classes for anonymous pipe operations. For more information about pipes, see Pipes. For an example of anonymous pipes, see How to: Use Anonymous Pipes to Communicate Between Local Processes. For an example of named pipes, see How to: Use Named Pipes to Communicate Between Processes over a Network. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public void SetAccessControl( PipeSecurity pipeSecurity ) Parameters pipeSecurityType: System.IO.Pipes.PipeSecurity A PipeSecurity object that specifies an access control list (ACL) entry to apply to the current pipe. Summary: Applies the access control list (ACL) entries specified by a PipeSecurity object to the pipe specified by the current PipeStream object. Remarks: An access control list (ACL) describes individuals and/or groups that have, or do not have, rights to perform specific actions on a specified file. For more information, see ACL Technology Overview and How to: Add or Remove Access Control List Entries.",0,1,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>( this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector ) Type Parameters TSource The type of the elements of source. TKey The type of the key returned by keySelector. Parameters sourceType: System.Linq.IOrderedEnumerable(Of TSource) An IOrderedEnumerable(Of TElement) that contains elements to sort. keySelectorType: System.Func(Of TSource, TKey) A function to extract a key from each element. Return Value Type: System.Linq.IOrderedEnumerable(Of TSource) An IOrderedEnumerable(Of TElement) whose elements are sorted according to a key. Usage Note In Visual Basic and C\#, you can call this method as an instance method on any object of type IOrderedEnumerable(Of TSource). When you use instance method syntax to call this method, omit the first parameter. For more information, see Extension Methods (Visual Basic) or Extension Methods (C\# Programming Guide). Summary: Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Remarks: This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using foreach in Visual C\# or For Each in Visual Basic. To order a sequence by the values of the elements themselves, specify the identity function (x => x in Visual C\# or Function(x) x in Visual Basic) for keySelector. ThenBy and ThenByDescending are defined to extend the type IOrderedEnumerable(Of TElement), which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of ThenBy or ThenByDescending methods. Note Because IOrderedEnumerable(Of TElement) inherits from IEnumerable(Of T), you can call OrderBy or OrderByDescending on the results of a call to OrderBy, OrderByDescending, ThenBy or ThenByDescending. Doing this introduces a new primary ordering that ignores the previously established ordering. This method compares keys by using the default comparer Default. This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key. In query expression syntax, an orderby [first criterion], [second criterion] (Visual C\#) or Order By [first criterion], [second criterion] (Visual Basic) clause translates to an invocation of ThenBy. Example: The following code example demonstrates how to use ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey)) to perform a secondary ordering of the elements in a sequence.",1,1,1,1,1,0,1,1,1,0,1,1
"Additional online Documentation: Syntax: public EnumerableQuery( Expression expression ) Parameters expressionType: System.Linq.Expressions.Expression An expression tree to associate with the new instance. Summary: Initializes a new instance of the EnumerableQuery(Of T) class and associates the instance with an expression tree.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: IQueryable<S> IQueryProvider.CreateQuery<S>( Expression expression ) Type Parameters S The type of the data in the collection that expression represents. Parameters expressionType: System.Linq.Expressions.Expression An expression tree to execute. Return Value Type: System.Linq.IQueryable(Of S) An EnumerableQuery object that is associated with expression. Implements IQueryProvider.CreateQuery(Of TElement)(Expression) Summary: Constructs a new EnumerableQuery(Of T) object and associates it with a specified expression tree that represents an IQueryable(Of T) collection of data.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class Lookup<TKey, TElement> : ILookup<TKey, TElement>, IEnumerable<IGrouping<TKey, TElement>>, IEnumerable Type Parameters TKey The type of the keys in the Lookup(Of TKey, TElement). TElement The type of the elements of each IEnumerable(Of T) value in the Lookup(Of TKey, TElement). Summary: Represents a collection of keys each mapped to one or more values. Remarks: A Lookup(Of TKey, TElement) resembles a Dictionary(Of TKey, TValue). The difference is that a Dictionary(Of TKey, TValue) maps keys to single values, whereas a Lookup(Of TKey, TElement) maps keys to collections of values. You can create an instance of a Lookup(Of TKey, TElement) by calling ToLookup on an object that implements IEnumerable(Of T). Note There is no public constructor to create a new instance of a Lookup(Of TKey, TElement). Additionally, Lookup(Of TKey, TElement) objects are immutable, that is, you cannot add or remove elements or keys from a Lookup(Of TKey, TElement) object after it has been created. Example: The following example creates a Lookup(Of TKey, TElement) from a collection of objects. It then enumerates the Lookup(Of TKey, TElement) and outputs each key and each value in the key's associated collection of values. It also demonstrates how to use the properties Count and Item and the methods Contains and GetEnumerator. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public class OrderedParallelQuery<TSource> : ParallelQuery<TSource> Type Parameters TSource The type of elements in the source collection. Summary: Represents a sorted, parallel sequence. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>( this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector ) Type Parameters TSource The type of the elements of source. TKey The type of the key returned by keySelector. TResult The type of the result value returned by resultSelector. Parameters sourceType: System.Linq.ParallelQuery(Of TSource) A sequence whose elements to group. keySelectorType: System.Func(Of TSource, TKey) A function to extract the key for each element. resultSelectorType: System.Func(Of TKey, IEnumerable(Of TSource), TResult) A function to create a result value from each group. Return Value Type: System.Linq.ParallelQuery(Of TResult) A sequence of elements of type TResult where each element represents a projection over a group and its key. Usage Note In Visual Basic and C\#, you can call this method as an instance method on any object of type ParallelQuery(Of TSource). When you use instance method syntax to call this method, omit the first parameter. For more information, see Extension Methods (Visual Basic) or Extension Methods (C\# Programming Guide). Summary: Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.",1,1,1,0,0,0,0,0,0,0,1,1
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static Nullable<int> Max( this ParallelQuery<Nullable<int>> source ) Parameters sourceType: System.Linq.ParallelQuery(Of Nullable(Of Int32)) A sequence of values to determine the maximum value of. Return Value Type: System.Nullable(Of Int32) The maximum value in the sequence. Usage Note In Visual Basic and C\#, you can call this method as an instance method on any object of type ParallelQuery(Of Nullable(Of Int32)). When you use instance method syntax to call this method, omit the first parameter. For more information, see Extension Methods (Visual Basic) or Extension Methods (C\# Programming Guide). Summary: Returns the maximum value in a parallel sequence of values.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public static decimal Max( this ParallelQuery<decimal> source ) Parameters sourceType: System.Linq.ParallelQuery(Of Decimal) A sequence of values to determine the maximum value of. Return Value Type: System.Decimal The maximum value in the sequence. Usage Note In Visual Basic and C\#, you can call this method as an instance method on any object of type ParallelQuery(Of Decimal). When you use instance method syntax to call this method, omit the first parameter. For more information, see Extension Methods (Visual Basic) or Extension Methods (C\# Programming Guide). Summary: Returns the maximum value in a parallel sequence of values.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public enum ParallelMergeOptions Summary: Specifies the preferred type of output merge to use in a query. In other words, it indicates how PLINQ should merge the results from the various partitions back into a single result sequence. This is a hint only, and may not be respected by the system when parallelizing all queries. Remarks: Use NotBuffered for queries that will be consumed and output as streams, this has the lowest latency between beginning query execution and elements being yielded. For some queries, such as those involving a sort (OrderBy, OrderByDescending), buffering is essential and a hint of NotBuffered or AutoBuffered will be ignored. However, queries that are created by using the AsOrdered operator can be streamed as long as no further sorting is performed within the query itself. Use AutoBuffered for most cases; this is the default. It strikes a balance between latency and overall performance. Use FullyBuffered for queries when the entire output can be processed before the information is needed. This option offers the best performance when all of the output can be accumulated before yielding any information, though it is not suitable for stream processing or showing partial results mid-query.",1,0,1,0,1,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public class ParallelQuery<TSource> : ParallelQuery, IEnumerable<TSource>, IEnumerable Type Parameters TSource The type of element in the source sequence. Summary: Represents a parallel sequence. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public static IQueryable<TSource> DefaultIfEmpty<TSource>( this IQueryable<TSource> source ) Type Parameters TSource The type of the elements of source. Parameters sourceType: System.Linq.IQueryable(Of TSource) The IQueryable(Of T) to return a default value for if empty. Return Value Type: System.Linq.IQueryable(Of TSource) An IQueryable(Of T) that contains default(TSource) if source is empty; otherwise, source. Usage Note In Visual Basic and C\#, you can call this method as an instance method on any object of type IQueryable(Of TSource). When you use instance method syntax to call this method, omit the first parameter. For more information, see Extension Methods (Visual Basic) or Extension Methods (C\# Programming Guide). Summary: Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty. Remarks: The DefaultIfEmpty(Of TSource)(IQueryable(Of TSource)) method generates a MethodCallExpression that represents calling DefaultIfEmpty(Of TSource)(IQueryable(Of TSource)) itself as a constructed generic method. It then passes the MethodCallExpression to the CreateQuery(Of TElement)(Expression) method of the IQueryProvider represented by the Provider property of the source parameter. The query behavior that occurs as a result of executing an expression tree that represents calling DefaultIfEmpty(Of TSource)(IQueryable(Of TSource)) depends on the implementation of the type of the source parameter. The expected behavior is that it returns source if it is not empty. Otherwise, it returns an IQueryable(Of T) that contains default(TSource). Example: The following code examples demonstrate how to use DefaultIfEmpty(Of TSource)(IQueryable(Of TSource)) to provide a default value in case the source sequence is empty.",1,1,1,0,0,1,1,1,1,0,1,1
"Additional online Documentation: Syntax: public static IQueryable<TSource> Except<TSource>( this IQueryable<TSource> source1, IEnumerable<TSource> source2 ) Type Parameters TSource The type of the elements of the input sequences. Parameters source1Type: System.Linq.IQueryable(Of TSource) An IQueryable(Of T) whose elements that are not also in source2 will be returned. source2Type: System.Collections.Generic.IEnumerable(Of TSource) An IEnumerable(Of T) whose elements that also occur in the first sequence will not appear in the returned sequence. Return Value Type: System.Linq.IQueryable(Of TSource) An IQueryable(Of T) that contains the set difference of the two sequences. Usage Note In Visual Basic and C\#, you can call this method as an instance method on any object of type IQueryable(Of TSource). When you use instance method syntax to call this method, omit the first parameter. For more information, see Extension Methods (Visual Basic) or Extension Methods (C\# Programming Guide). Summary: Produces the set difference of two sequences by using the default equality comparer to compare values. Remarks: The Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource)) method generates a MethodCallExpression that represents calling Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource)) itself as a constructed generic method. It then passes the MethodCallExpression to the CreateQuery(Of TElement)(Expression) method of the IQueryProvider represented by the Provider property of thesource1 parameter. The query behavior that occurs as a result of executing an expression tree that represents calling Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource)) depends on the implementation of the type of the source1 parameter. The expected behavior is that all the elements in source1 are returned except for those that are also in source2. Example: The following code example demonstrates how to use Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource)) to return those elements that only appear in the first source sequence.",1,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public static TResult Max<TSource, TResult>( this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector ) Type Parameters TSource The type of the elements of source. TResult The type of the value returned by the function represented by selector. Parameters sourceType: System.Linq.IQueryable(Of TSource) A sequence of values to determine the maximum of. selectorType: System.Linq.Expressions.Expression(Of Func(Of TSource, TResult)) A projection function to apply to each element. Return Value Type: TResult The maximum value in the sequence. Usage Note In Visual Basic and C\#, you can call this method as an instance method on any object of type IQueryable(Of TSource). When you use instance method syntax to call this method, omit the first parameter. For more information, see Extension Methods (Visual Basic) or Extension Methods (C\# Programming Guide). Summary: Invokes a projection function on each element of a generic IQueryable(Of T) and returns the maximum resulting value. Remarks: This method has at least one parameter of type Expression(Of TDelegate) whose type argument is one of the Func(Of T, TResult) types. For these parameters, you can pass in a lambda expression and it will be compiled to an Expression(Of TDelegate). The Max(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult))) method generates a MethodCallExpression that represents calling Max(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult))) itself as a constructed generic method. It then passes the MethodCallExpression to the Execute(Of TResult)(Expression) method of the IQueryProvider represented by the Provider property of the source parameter. The query behavior that occurs as a result of executing an expression tree that represents calling Max(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult))) depends on the implementation of the type of the source parameter. The expected behavior is that it invokes selector on each element in source and returns the maximum value. Example: The following code example demonstrates how to use Max(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult))) to determine the maximum value in a sequence of projected values.",1,1,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public Expression Left { get; } Property Value Type: System.Linq.Expressions.Expression An Expression that represents the left operand of the binary operation. Summary: Gets the left operand of the binary operation.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Expression Result { get; } Property Value Type: System.Linq.Expressions.Expression The Expression object representing the last expression in this block. Summary: Gets the last expression in this block.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public BlockExpression Update( IEnumerable<ParameterExpression> variables, IEnumerable<Expression> expressions ) Parameters variablesType: System.Collections.Generic.IEnumerable(Of ParameterExpression) The Variables property of the result.  expressionsType: System.Collections.Generic.IEnumerable(Of Expression) The Expressions property of the result. Return Value Type: System.Linq.Expressions.BlockExpression This expression if no children changed, or an expression with the updated children. Summary: Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ConditionalExpression : Expression Summary: Represents an expression that has a conditional operator. Remarks: Use the Condition factory method to create a ConditionalExpression. The NodeType of a ConditionalExpression is Conditional. Example: The following code example shows how to create an expression that represents a conditional statement. If the first argument evaluates to true, the second argument is executed; otherwise, the third argument is executed. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public virtual int EndColumn { get; } Property Value Type: System.Int32 The number of the end column of the code that was used to generate the wrapped expression. Summary: Gets the end column of this DebugInfoExpression.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static ConditionalExpression IfThen( Expression test, Expression ifTrue ) Parameters testType: System.Linq.Expressions.Expression An Expression to set the Test property equal to. ifTrueType: System.Linq.Expressions.Expression An Expression to set the IfTrue property equal to. Return Value Type: System.Linq.Expressions.ConditionalExpression A ConditionalExpression that has the NodeType property equal to Conditional and the Test, IfTrue, properties set to the specified values. The IfFalse property is set to default expression and the type of the resulting ConditionalExpression returned by this method is Void. Summary: Creates a ConditionalExpression that represents a conditional block with an if statement. Example: The following code example shows how to create an expression that represents a conditional block.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Creates a BinaryExpression that represents a remainder assignment operation.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Creates a NewExpression.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Creates a NewArrayExpression that represents creating a one-dimensional array and initializing it from a list of elements.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Returns the expression representing the ones complement.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Creates a BinaryExpression that represents raising an expression to a power and assigning the result back to the expression.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Creates a MemberExpression that represents accessing a property.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override string ToString() Return Value Type: System.String A textual representation of the Expression. Summary: Returns a textual representation of the Expression.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class ExpressionVisitor Summary: Represents a visitor or rewriter for expression trees. Remarks: This class is designed to be inherited to create more specialized classes whose functionality requires traversing, examining or copying an expression tree. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected virtual ElementInit VisitElementInit( ElementInit node ) Parameters nodeType: System.Linq.Expressions.ElementInit The expression to visit. Return Value Type: System.Linq.Expressions.ElementInit The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Summary: Visits the children of the ElementInit.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class InvocationExpression : Expression Summary: Represents an expression that applies a delegate or lambda expression to a list of argument expressions. Remarks: Use the Invoke factory methods to create an InvocationExpression. The NodeType of an InvocationExpression is Invoke. Example: The following example creates an InvocationExpression that represents invoking a lambda expression with specified arguments. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public MemberBindingType BindingType { get; } Property Value Type: System.Linq.Expressions.MemberBindingType One of the MemberBindingType values. Summary: Gets the type of binding that is represented.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class MemberInitExpression : Expression Summary: Represents calling a constructor and initializing one or more members of the new object. Remarks: Use the MemberInit factory methods to create a MemberInitExpression. The value of the NodeType property of a MemberInitExpression is MemberInit. Example: The following example creates a MemberInitExpression that represents the initialization of two members of a new object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public override bool CanReduce { get; } Property Value Type: System.Boolean True if the node can be reduced, otherwise false. Summary: Gets a value that indicates whether the expression tree node can be reduced.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class MethodCallExpression : Expression Summary: Represents a call to either static or an instance method. Remarks: Use the Call, ArrayIndex, or ArrayIndex factory method to create a MethodCallExpression. The value of the NodeType property of a MethodCallExpression object is Call. Example: The following example creates a MethodCallExpression object that represents indexing into a two-dimensional array. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public sealed class SwitchCase Summary: Represents one case of a SwitchExpression. Example: The following example demonstrates how to create an expression that represents a switch statement without a default case by using the SwitchCase method. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public Expression SwitchValue { get; } Property Value Type: System.Linq.Expressions.Expression The Expression object representing the test for the switch. Summary: Gets the test for the switch.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class TryExpression : Expression Summary: Represents a try/catch/finally/fault block. Remarks: The body block is protected by the try block. The handlers consist of a set of CatchBlock expressions that can be either catch statements or filters. The fault block runs if an exception is thrown. The finally block runs regardless of how control exits the body. Only one of fault or finally blocks can be supplied. The return type of the try block must match the return type of any associated catch statements. Example: The following example demonstrates how to create a TryExpression object that contains a catch statement by using the TryCatch method. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class TypeBinaryExpression : Expression Summary: Represents an operation between an expression and a type. Remarks: A type test is an example of an operation between an expression and a type. Use the TypeIs factory method to create a TypeBinaryExpression. The value of the NodeType property of a TypeBinaryExpression object is TypeIs. Example: The following example creates a TypeBinaryExpression object that represents a type test of a string value against the Int32 type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,1,1,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the InstanceNotFoundException class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum ManagementHostingModel Summary: Defines values that specify the hosting model for the provider. Remarks: To learn more about WMI provider hosting models, see the Provider Hosting and Security topic on MSDN online.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class ManagementKeyAttribute : ManagementMemberAttribute Summary: The ManagementKey attribute identifies the key properties of a WMI class. Remarks: Unless a WMI class is a singleton, it can have multiple corresponding instances. Clients of the class must be able to uniquely identify the specific instance they are interested in. So, as a provider writer, you must choose a property or set of properties that uniquely identify an instance of each of your WMI classes. You use the ManagementKeyAttribute attribute to identify those key properties. Properties identified as keys have the same runtime behavior as read-only properties indicated by the ManagementProbeAttribute attribute. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: The following example shows how to use the ManagementKeyAttribute to mark a field as a key property of a WMI class.  The next example shows how to use the ManagementKeyAttribute attribute to mark a key property of a WMI class. [C\#] ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Constructor|AttributeTargets.Method, AllowMultiple = false)] [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public abstract class ManagementNewInstanceAttribute : ManagementMemberAttribute Summary: The base class for management attributes that have only run-time functionality and no schema representation. The management attribute classes ManagementBindAttribute, ManagementCreateAttribute and ManagementEnumeratorAttribute are all derived from this class. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Type Schema { get; set; } Property Value Type: System.Type A Type value that indicates the type of output that the property that is marked with the ManagementProbe attribute will output. Summary: Gets or sets a value that defines the type of output that the property that is marked with the ManagementProbe attribute will output. Remarks: If the returned type is System.Object, then the output should be treated as a value of type System.Object.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class CallSite<T> : CallSite where T : class Type Parameters T The delegate type. Summary: Dynamic site type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public static class CallSiteOps Summary: Creates and caches binding rules. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method)] public sealed class ExtensionAttribute : Attribute Summary: Indicates that a method is an extension method, or that a class or assembly contains extension methods. Remarks: In Visual Basic, you should use this attribute to create an extension method. For more information, see Extension Methods (Visual Basic). In C\#, you do not need to use this attribute; you should use the this (C\# Reference) modifier for the first parameter to create an extension method. The compiler automatically emits ExtensionAttribute for extension methods. For more information, see Extension Methods (C\# Programming Guide). If you are writing a compiler that supports extension methods, your compiler should emit this attribute on each extension method and on each class and assembly that contains one or more extension methods. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public ReadOnlyCollectionBuilder() Summary: Constructs a ReadOnlyCollectionBuilder.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class RuleCache<T> where T : class Type Parameters T The delegate type. Summary: Represents a cache of runtime binding rules. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class CngKey : IDisposable Summary: Defines the core functionality for keys that are used with Cryptography Next Generation (CNG) objects. Remarks: This class wraps NCrypt keys, not BCrypt keys. NCrypt is a subset of CNG that provides key storage functionality. BCrypt is a subset that provides base cryptographic services such as random number generation, hash functions, signatures, and encryption keys. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public SafeNCryptProviderHandle ProviderHandle { get; } Property Value Type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle A handle to the KSP. Summary: Gets a native handle (an NCRYPT_PROV_HANDLE) to the key storage provider (KSP). Remarks: The returned handle is a duplicate of the handle in the current CngKey object. It will persist even if the current CngKey is disposed, and must be disposed of separately. You can release the current object and the handle in any order without any adverse effects.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public override string ToString() Return Value Type: System.String The embedded key BLOB format name. Summary: Gets the name of the key BLOB format that the current CngKeyBlobFormat object specifies.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static bool operator ==( CngProvider left, CngProvider right ) Parameters leftType: System.Security.Cryptography.CngProvider An object that specifies a KSP. rightType: System.Security.Cryptography.CngProvider A second object, to be compared to the object that is identified by the left parameter. Return Value Type: System.Boolean true if the two objects represent the same KSP; otherwise, false. Summary: Determines whether two CngProvider objects specify the same key storage provider (KSP).",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string UseContext { get; } Property Value Type: System.String The description of how the key will be used. Summary: Gets the description of how the key will be used.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class ManifestSignatureInformation Summary: Provides information for a manifest signature. Remarks: Use the VerifySignature method to obtain a ManifestSignatureInformationCollection object that can be use to examine the signature information. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public SHA384Cng() Summary: Initializes a new instance of the SHA384Cng class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void Initialize() Summary: Initializes, or reinitializes, an instance of a hash algorithm. Remarks: This method does not need to be called when using a newly created SHA512CryptoServiceProvider object.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Summary: Specifies most of the result codes for signature verification.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Uri DescriptionUrl { get; } Property Value Type: System.Uri The description URL of the signing certificate. Summary: Gets the description URL of the signing certificate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class TimestampInformation Summary: Provides details about the time stamp that was applied to an Authenticode signature for a manifest. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum TrustStatus Summary: Identifies the level of trustworthiness that is assigned to the signature for a manifest.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Specifies whether a lock can be acquired multiple times by the same thread.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static DataView AsDataView<T>( this EnumerableRowCollection<T> source ) where T : DataRow Type Parameters T The type of objects in the source sequence, typically DataRow. Parameters sourceType: System.Data.EnumerableRowCollection(Of T) The source LINQ to DataSet query from which the LINQ-enabled DataView is created. Return Value Type: System.Data.DataView A LINQ-enabled DataView object. Usage Note In Visual Basic and C\#, you can call this method as an instance method on any object of type EnumerableRowCollection(Of T). When you use instance method syntax to call this method, omit the first parameter. For more information, see Extension Methods (Visual Basic) or Extension Methods (C\# Programming Guide). Summary: Creates and returns a LINQ-enabled DataView object representing the LINQ to DataSet query. Remarks: DataView enables data binding scenarios for LINQ to DataSet and can be created from a LINQ to DataSet query. The DataView represents the query itself, and is not a view on top of the query. The newly created DataView infers the filtering and sorting information from the query it is created from. The DataView is then bound to a UI control, such as a DataGrid or a DataGridView, providing a simple data-binding model. The parameter T of the input parameter source can only be of type DataRow or a type derived from DataRow. The following query operators, only, are supported in a query used to create DataView: Cast(Of TResult) OrderBy OrderByDescending Select``2(EnumerableRowCollection(Of UMP), Expression(Of Func(Of UMP, UMP))) ThenBy ThenByDescending Where(Of TRow) For more information and examples, see Creating a DataView Object (LINQ to DataSet). Example: The following example creates a DataView of online orders ordered by total due:",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public abstract class EnumerableRowCollection : IEnumerable Summary: Represents a collection of DataRow objects returned from a LINQ to DataSet query. This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.  Remarks: EnumerableRowCollection provides an entry point so that the cast operation can be intercepted within an extension method. The derived generic class EnumerableRowCollection(Of TRow) is actually used by the .NET Framework to contain the results of a query. This class cannot be instantiated. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static class TypedTableBaseExtensions Summary: Contains the extension methods for the TypedTableBase(Of T) class. Remarks: The class contains static extension methods that define the AsEnumerable(Of TRow) method and standard query operations for typed data sets. This class cannot be instantiated. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum EntityStoreSchemaFilterEffect Summary: Specifies whether to allow or exclude database objects that match the pattern specified in the EntityStoreSchemaFilterEntry. Remarks: The EntityStoreSchemaFilterEffect enumeration is used with the EntityStoreSchemaFilterEntry class to allow or exclude particular database objects during generation.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum EntityStoreSchemaFilterObjectTypes Summary: Specifies the store object type to apply the schema filter to. Remarks: The EntityStoreSchemaFilterObjectTypes enumeration is used with the EntityStoreSchemaFilterEntry class to allow or exclude particular database objects during generation.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool GenerateForeignKeyProperties { get; set; } Property Value Type: System.Boolean true (True in Visual Basic) if foreign key properties are generated in the storage model; false (False in Visual Basic) otherwise. Summary: Gets or sets the flag for generating foreign key properties in a storage model. Remarks: The default value for the GenerateForeignKeyProperties property is true (True in Visual Basic).",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class EntityViewGenerator Summary: Generates views for the extents in the StorageMappingItemCollection, and creates a source code file for a type that will cache these views. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the TypeGeneratedEventArgs class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override BuildProviderResultFlags GetResultFlags( CompilerResults results ) Parameters resultsType: System.CodeDom.Compiler.CompilerResults The compilation results for the build provider. Return Value Type: System.Web.Compilation.BuildProviderResultFlags The ShutdownAppDomainOnChange value, which indicates that the containing AppDomain will be unloaded and restarted. Summary: Returns a value indicating actions required when a entity model build provider is built.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class PluralizationService Summary: Provides methods for constructing plural and singular forms of words. Remarks: The PluralizationService class applies English rules for constructing plural and singular forms of words. To extend the service to other languages, use the PluralizationService on the EntityModelSchemaGenerator class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public static readonly EntityKey EntityNotValidKey Summary: A simple EntityKey identifying an entity that resulted from a failed TREAT operation. Remarks: There are various ways to get an invalid entity. The most common scenario is when an Entity SQL query uses the TREAT operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match. (TREAT is similar to the C\# as operator). In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to EntityNotValidKey. ",1,0,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: public override int GetHashCode() Return Value Type: System.Int32 A hash code for the current EntityKey. Summary: Serves as a hash function for the current EntityKey object. GetHashCode is suitable for hashing algorithms and data structures such as a hash table.",0,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class EntitySqlException : EntityException Summary: Represents errors that occur when parsing Entity SQL command text. This exception is thrown when syntactic or semantic rules are violated. Remarks: For more information about how to handle code exceptions, see Exception. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class MappingException : EntityException Summary: The exception that is thrown when mapping related service requests fail. Remarks: For more information about how to handle exceptions in your code, see Exception. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class ProviderIncompatibleException : EntityException Summary: The exception that is thrown when the underlying data provider is incompatible with the Entity Framework. Remarks: For more information about how to handle exceptions in your code, see Exception. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class DbCommandDefinition Summary: Defines a cacheable command plan. Remarks: The DbCommandDefinition class is used by the Entity Framework and is not intended for use as a stand-alone component. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected abstract string GetDbProviderManifestToken( DbConnection connection ) Parameters connectionType: System.Data.Common.DbConnection Connection to provider. Return Value Type: System.String The provider manifest token for the specified connection. Summary: Returns provider manifest token given a connection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override ReadOnlyCollection<FacetDescription> GetFacetDescriptions( EdmType type ) Parameters typeType: System.Data.Metadata.Edm.EdmType An EdmType for which the facet descriptions are to be retrieved. Return Value Type: System.Collections.ObjectModel.ReadOnlyCollection(Of FacetDescription) A collection of type ReadOnlyCollection(Of T) that contains the list of facet descriptions for the specified EDM type. Summary: Returns the list of facet descriptions for the specified Entity Data Model (EDM) type.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int Ordinal { get; } Property Value Type: System.Int32 An integer representing the ordinal value. Summary: Gets the ordinal for this FieldMetadata object.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class DbCommandTree Summary: An immutable class that implements the basic functionality for the Query, Insert, Update, Delete, and function invocation command tree types. Remarks: A DbCommandTree is an abstract class that is used to represent queries, Data Manipulation Language (DML) operations and function/procedure invocations. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DbCrossJoinExpression : DbExpression Summary: Represents an unconditional join operation between the given collection arguments. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DbDeleteCommandTree : DbModificationCommandTree Summary: Represents a single row delete operation expressed as a command tree. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DbEntityRefExpression : DbUnaryExpression Summary: Represents an expression that extracts a reference from the underlying entity instance. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Implements the visitor pattern for expressions.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Implements the visitor pattern for expressions.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract TResultType Visit( DbFunctionExpression expression ) Parameters expressionType: System.Data.Common.CommandTrees.DbFunctionExpression The DbFunctionExpression that is being visited. Return Value Type: TResultType A result value of a specific type. Summary: When overridden in a derived class, implements the visitor pattern for DbFunctionExpression.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract TResultType Visit( DbParameterReferenceExpression expression ) Parameters expressionType: System.Data.Common.CommandTrees.DbParameterReferenceExpression The DbParameterReferenceExpression that is being visited. Return Value Type: TResultType A result value of a specific type. Summary: When overridden in a derived class, implements the visitor pattern for DbParameterReferenceExpression.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class DbFunctionCommandTree : DbCommandTree Summary: Represents the invocation of a database function. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DbGroupExpressionBinding Summary: Defines the binding for the input set to a DbGroupByExpression. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public TypeUsage GroupVariableType { get; } Property Value Type: System.Data.Metadata.Edm.TypeUsage The type metadata of the group element variable. Summary: Gets the type metadata of the group element variable.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class DbIsOfExpression : DbUnaryExpression Summary: Represents the type comparison of a single argument against the specified type. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public sealed class DbLambda Summary: Represents a lambda function that can be invoked to produce a DbLambdaExpression. This class cannot be inherited. Remarks: The static helper methods in the DbExpressionBuilder class make it easier to construct DbExpression objects. For more information, see Lambda . ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DbNewInstanceExpression : DbExpression Summary: Represents the construction of a new instance of a given type, including set and record types. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public EntitySet EntitySet { get; } Property Value Type: System.Data.Metadata.Edm.EntitySet The metadata for the entity set that contains the instance. Summary: Gets the metadata for the entity set that contains the instance.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class DbRefKeyExpression : DbUnaryExpression Summary: Represents the retrieval of the key value (in its structural form) from the underlying reference value. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public DbExpressionBinding Input { get; } Property Value Type: System.Data.Common.CommandTrees.DbExpressionBinding The DbExpressionBinding that specifies the input set. Summary: Gets the DbExpressionBinding that specifies the input set.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override int Depth { get; } Property Value Type: System.Int32 The depth of nesting for the current row. Implements IDataReader.Depth Summary: Gets a value indicating the depth of nesting for the current row. Remarks: The outermost table has a depth of zero.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the EntityParameter class. Remarks: For code examples, see Working with EntityClient.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public byte Scale { get; set; } Property Value Type: System.Byte The number of decimal places to which Value is resolved. The default is 0. Implements IDbDataParameter.Scale Summary: Gets or sets the number of decimal places to which Value is resolved.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Copies all the elements of the current EntityParameterCollection to the specified object.",1,1,0,0,1,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override DbConnectionStringBuilder CreateConnectionStringBuilder() Return Value Type: System.Data.Common.DbConnectionStringBuilder A new instance of EntityConnectionStringBuilder. Summary: Returns a new instance of the provider's class that implements the EntityConnectionStringBuilder class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override DbParameter CreateParameter() Return Value Type: System.Data.Common.DbParameter A new instance of EntityParameter. Summary: Returns a new instance of the provider's class that implements the EntityParameter class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class EntityViewGenerationAttribute : Attribute Summary: Attribute to mark the assemblies containing the generated views type. Remarks: The views for EntitySets and AssociationSets are generated at design time. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [CLSCompliantAttribute(false)] public abstract class MappingItemCollection : ItemCollection Summary: Collection of ItemCollection objects designed for storing mapping information. Remarks: MappingItemCollection inherits from ItemCollection, providing strongly-typed accessors for retrieving mapping metadata. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,1,0,0
"Additional online Documentation: Syntax: [CLSCompliantAttribute(false)] public class StorageMappingItemCollection : MappingItemCollection Summary: The StorageMappingItemCollection contains a collection of storage mappings for EntitySet and AssociationSet objects. Remarks: The StorageMappingItemCollection contains mappings for EntitySet and AssociationSet objects in an EntityContainer from the model to an underlying data storage definition. It loads and stores mappings and invokes view generation for the loaded mappings, providing accessors for obtaining the mapping view for a given extent. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class AssociationEndMember : RelationshipEndMember Summary: Represents the End of an association in the conceptual model. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum CollectionKind Summary: Represents an enumeration that specifies the kind of the collection that is applied to the properties in the conceptual schema definition language (CSDL) files. You can apply this to the properties of any type.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public abstract class EdmError Summary: Encapsulates the error information for a generic conceptual model error. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string CommandTextAttribute { get; } Property Value Type: System.String A string value in the syntax used by the database management system or storage model that contains the query or update statement of the EdmFunction. Summary: Represents a query in the language that is used by the database management system or storage model. Remarks: For more information about the CommandTextAttribute, see Function Element (SSDL). Example: The following example shows a function definition as it would appear in SSDL. The CommandTextAttribute element defines the function in Transact-SQL syntax.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [CLSCompliantAttribute(false)] public sealed class EdmItemCollection : ItemCollection Summary: Loads metadata about the conceptual model. The EdmItemCollection loads metadata from conceptual schema definition language (CSDL) files. This class is derived from the ItemCollection class. Remarks: For more information, see Item Collections (Metadata). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string Name { get; } Property Value Type: System.String The name of this member. Summary: Gets the name of this member.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class EdmProperty : EdmMember Summary: Represents a property for the EntityType in a conceptual model. An EdmProperty class derives from the EdmMember class and provides the Default and the Nullable facets for the type of this EdmProperty. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string Name { get; } Property Value Type: System.String The name of this EntityContainer. Summary: Gets the name of this EntityContainer.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class FunctionParameter : MetadataItem Summary: Describes the parameters of an EdmFunction. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class PrimitiveType : SimpleType Summary: Describes the .NET Framework primitive types, conceptual model primitive types, and storage provider-specific primitive types. Remarks: For more information, see Simple Types. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,1,0
"An enumeration member that indicates the Binary (EDM) type.",0,0,0,0,0,0,0,0,0,0,0,1
"An enumeration member that indicates the Double (EDM) type.",1,0,0,0,0,0,0,0,0,0,0,1
"An enumeration member that indicates the Int32 (EDM) type.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class DbUpdatableDataRecord : DbDataRecord, IExtendedDataRecord, IDataRecord Summary: Provides access to the original values of object data. The DbUpdatableDataRecord implements methods that allow updates to the original values of an object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void SetInt32( int ordinal, int value ) Parameters ordinalType: System.Int32 The ordinal of the field. valueType: System.Int32 The value of the field. Summary: Sets the value of a field in a record.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL). Remarks: You cannot call this function directly. This function can only appear within a LINQ to Entities query. This function is translated to a corresponding function in the database.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Invokes the canonical DiffYears function. For information about the canonical DiffYears function, see Date and Time Canonical Functions (Entity SQL). Remarks: You cannot call this function directly. This function can only appear within a LINQ to Entities query. This function is translated to a corresponding function in the database.",0,0,1,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Summary: Invokes the canonical VarP function, which returns the statistical variance over a population. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL). Remarks: This function is translated to a corresponding function in the database.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ObjectContext : IDisposable Summary: Provides facilities for querying and working with entity data as objects. Remarks: Note The ObjectContext class is not thread safe. The integrity of data objects in an ObjectContext cannot be ensured in multithreaded scenarios. The ObjectContext class is the primary class for interacting with data as objects that are instances of entity types that are defined in a conceptual model. An instance of the ObjectContext class encapsulates the following: A connection to the database, in the form of an EntityConnection object. Metadata that describes the model, in the form of a MetadataWorkspace object. An ObjectStateManager object that manages objects persisted in the cache. When the object layer that represents a conceptual model is generated by the Entity Data Model tools, the class that represents the EntityContainer for the model is derived from the ObjectContext. Example: This example is based on the Adventure Works Sales Model. The example shows you how to construct an ObjectContext. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the ObjectContext class.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public TEntity ApplyOriginalValues<TEntity>( string entitySetName, TEntity originalEntity ) where TEntity : class Type Parameters TEntity The type of the entity object. Parameters entitySetNameType: System.String The name of the entity set to which the object belongs. originalEntityType: TEntity The detached object that has original values to apply to the object. The entity key of originalEntity must match the EntityKey property of an entry in the ObjectContext. Return Value Type: TEntity The updated object. Summary: Copies the scalar values from the supplied object into set of original values for the object in the ObjectContext that has the same key. Remarks: The ApplyOriginalValues(Of TEntity) method is used to apply changes that were made to objects outside the ObjectContext, such as detached objects that are received by a Web service. The method copies the scalar values from the supplied object into the object in the ObjectContext that has the same key. You can use the EntityKey of the detached object to retrieve an instance of this object from the data source. For more information, see How to: Return a Specific Object Using its Key (Entity Framework). Any values that differ from the current values of the object are marked as modified. Note, the method does not apply the current values to the related objects of originalEntity. If you have a graph with the original values and want to apply the current values, call ApplyCurrentValues(Of TEntity) method. You may also use the ApplyOriginalValues of the ObjectSet(Of TEntity) or ApplyOriginalValues method of the ObjectStateEntry. For more information, see Building N-Tier Applications.",1,0,1,1,0,0,1,1,0,0,1,1
"Additional online Documentation: Syntax: public ObjectStateManager ObjectStateManager { get; } Property Value Type: System.Data.Objects.ObjectStateManager The ObjectStateManager used by this ObjectContext. Summary: Gets the object state manager used by the object context to track object changes. Example: These examples are based on the Adventure Works Sales Model. This example gets the ObjectStateManager from the ObjectContext and uses the state manager to access an object in the context.  This example uses the TryGetObjectStateEntry method on the returned ObjectStateManager to get an object based on its entity key.",0,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public event EventHandler SavingChanges Summary: Occurs when changes are saved to the data source. Remarks: The SavingChanges event is raised at the start of a SaveChanges operation on an ObjectContext. This event is typically used to validate changed objects before new values are written to the database. Example: This example is based on the Adventure Works Sales Model. This registers a handler for the SavingChanges event that performs entity state validation.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public ObjectResult<TEntity> Translate<TEntity>( DbDataReader reader, string entitySetName, MergeOption mergeOption ) Type Parameters TEntity Parameters readerType: System.Data.Common.DbDataReader The DbDataReader that contains entity data to translate into entity objects. entitySetNameType: System.String The entity set of the TResult type. mergeOptionType: System.Data.Objects.MergeOption The MergeOption to use when translated objects are added to the object context. The default is AppendOnly. Return Value Type: System.Data.Objects.ObjectResult(Of TEntity) An enumeration of objects of type TResult. Summary: Translates a DbDataReader that contains rows of entity data to objects of the requested entity type, in a specific entity set, and with the specified merge option. Remarks: The Translate method is used to translate entity data from a DbDataReader into objects of the requested type. This process is performed automatically when an ObjectQuery(Of T) is executed to return entity data. The Translate method enables you to execute a standard ADO.NET query against a data source and translate the returned data rows into entity objects. The supplied DbDataReader must contain data that maps to the requested entity type. For more information, see: Executing Store Commands and How to: Directly Execute Arbitrary Command Against the Store",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ObjectMaterializedEventArgs : EventArgs Summary: Contains the data for the ObjectMaterialized event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public delegate void ObjectMaterializedEventHandler( Object sender, ObjectMaterializedEventArgs e ) Parameters senderType: System.Object The ObjectContext instance that triggered the event.  eType: System.Data.Objects.ObjectMaterializedEventArgs An ObjectMaterializedEventArgs object that contains the event data. Summary: Represents the method that will handle the ObjectMaterialized event of the ObjectContext.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ObjectParameter Summary: Represents a query parameter that is passed to an object query. Remarks: Represents a query parameter that is passed to an ObjectQuery(Of T) or a query builder method. For more information, see Query Builder Methods (Entity Framework). Object parameters consist of a name, a type, and a value. This class cannot be inherited. For more information, see ObjectParameterCollection. Example: The example in this topic is based on the Adventure Works Sales Model. The example adds new parameters to the collection. It iterates through the ObjectParameterCollection and displays the name, type, and value of each parameter in the collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public abstract class ObjectResult : IEnumerable, IDisposable, IListSource Summary: The base class for the results of an object query against a conceptual model. Remarks: ObjectResult(Of T) is the base class for the results of an object query against a conceptual model. Query results are returned by using a typed ObjectResult(Of T). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract void ChangeState( EntityState state ) Parameters stateType: System.Data.EntityState The EntityState value to set for the State property of the entry. Summary: Changes state of the entry to the specified EntityState value. Remarks: The ChangeState method is used to change the state of both entity object and relationship entries. Changing the state of an object does not affect related objects in the object graph. When you change the EntityState of an entity object entry to Modified, all of the properties of the object are marked as modified, regardless of the current or original values. When the EntityState of an entity object entry is changed to Added, Deleted, or Detached, the relationship entries for the object are also updated.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Returns a collection of ObjectStateEntry objects for the given EntityState.",0,0,0,0,1,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public RelationshipManager GetRelationshipManager( Object entity ) Parameters entityType: System.Object The object for which to return the RelationshipManager. Return Value Type: System.Data.Objects.DataClasses.RelationshipManager The RelationshipManager for the specified object. Summary: Returns the RelationshipManager that is used by the specified object. Remarks: Calling the GetRelationshipManager method is the same as calling the TryGetRelationshipManager method, except that this method raises an exception instead of returning false. Call the TryGetRelationshipManager method to avoid handling the InvalidOperationException that occurs when a RelationshipManager cannot be returned for the supplied entity.",1,0,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: public class ProxyDataContractResolver : DataContractResolver Summary: This class helps resolve proxy types that were created for persistence-ignorant data classes to the actual types of persistence-ignorant objects. Remarks: The ProxyDataContractResolver class is used with the DataContractSerializer. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum SaveOptions Summary: Specifies the behavior of the object context when the SaveChanges(SaveOptions) method is called.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public string NamespaceName { get; set; } Property Value Type: System.String A String that is the namespace name. Summary: The namespace name of the entity object type or complex type in the conceptual schema that maps to this type.",0,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Loads the related object or objects into this related end. Remarks: Load is called to explicitly load related objects from a related end that is exposed by a navigation property. For more information, see Shaping Query Results (Entity Framework).",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class RelationshipManager Summary: Used to track relationships between objects in the object context. Remarks: RelationshipManager is used to track relationships between objects in an object context. There is one instance of the RelationshipManager class for each relationship tracked in the object context. Relationships are defined by associations in a conceptual model. For more information, see Association (EDM). Example: The example in this topic is based on the Adventure Works Sales Model. The example adds new SalesOrderHeader entities to the Contact entity. Then it gets all related ends from the Contact entity and displays the relationship name, source role name, and target role name for each related end. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Gets a property value. Remarks: GetValidValue methods are called in the property getter methods that are generated by the Entity Data Model tools. These methods are used when additional actions must be performed on a returned property.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Returns the positive angle, in radians, between the positive x-axis and the ray from the origin through the point (x, y), where x and y are the two specified numerical values. The first parameter passed to the function is the y-value and the second parameter is the x-value. Remarks: You cannot call this function directly. This function can only appear within a LINQ to Entities query. This function is translated to a corresponding function in the database. For information about the corresponding SQL Server function, see ATN2 (Transact-SQL).",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Returns the radian measure corresponding to the specified angle in degrees. Remarks: You cannot call this function directly. This function can only appear within a LINQ to Entities query. This function is translated to a corresponding function in the database. For information about the corresponding SQL Server function, see RADIANS (Transact-SQL).",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public class ChangeConflictException : Exception Summary: Thrown when an update fails because database values have been updated since the client last read them. Remarks: The following example shows how this exception might be used for returning information about a concurrency conflict. Topic Location How to: Specify When Concurrency Exceptions are Thrown (LINQ to SQL) LINQ to SQL How to: Retrieve Member Conflict Information (LINQ to SQL) LINQ to SQL How to: Detect and Resolve Conflicting Submissions (LINQ to SQL) LINQ to SQL How to: Retrieve Entity Conflict Information (LINQ to SQL) LINQ to SQL Optimistic Concurrency Overview (LINQ to SQL) LINQ to SQL Responsibilities of the Developer In Overriding Default Behavior (LINQ to SQL) LINQ to SQL How to: Specify When Concurrency Exceptions are Thrown (LINQ to SQL) LINQ to SQL How to: Retrieve Member Conflict Information (LINQ to SQL) LINQ to SQL How to: Detect and Resolve Conflicting Submissions (LINQ to SQL) LINQ to SQL How to: Retrieve Entity Conflict Information (LINQ to SQL) LINQ to SQL Optimistic Concurrency Overview (LINQ to SQL) LINQ to SQL Responsibilities of the Developer In Overriding Default Behavior (LINQ to SQL) LINQ to SQL ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: public int CommandTimeout { get; set; } Property Value Type: System.Int32 An integer value that represents seconds. Summary: Increases the time-out period for queries that would otherwise time out during the default time-out period. Remarks: This property gets or sets the command time-out used to execute generated commands (IDbCommands). For more information, see CommandTimeout. When this property is not set, the default value of CommandTimeout is used for query command execution. This default value is set by the storage provider. Note that some providers may throw exceptions if this value is set to a non-zero value.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class DuplicateKeyException : InvalidOperationException Summary: Thrown when an attempt is made to add an object to the identity cache by using a key that is already being used. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public TEntity Entity { get; set; } Property Value Type: TEntity The target entity. Summary: Gets or sets the target entity.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public bool HasLoadedOrAssignedValues { get; } Property Value Type: System.Boolean Returns true if the EntitySet(Of TEntity) has either loaded or assigned a value. Summary: Specifies whether the EntitySet(Of TEntity) has loaded or assigned a value. Remarks: #Loaded# means that the data was loaded during materialization or at deferred loading. #Assigned# means that you have manually given the data a value.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public TEntity this[ int index ] { get; set; } Parameters indexType: System.Int32 The index of the element. Property Value Type: TEntity An EntitySet(Of TEntity) representing the item. Implements IList(Of T).Item(Int32) Summary: Gets or sets the element at the specified index.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IMultipleResults : IFunctionResult, IDisposable Summary: Represents the results of mapped functions or queries with variable return sequences. Remarks: In the following SQL code example, the result shape depends on the input (shape =1 or shape = 2). The order that the projections are returned is undefined. Topic Location How to: Use Stored Procedures Mapped for Sequential Result Shapes (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Multiple Result Shapes (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Sequential Result Shapes (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Multiple Result Shapes (LINQ to SQL) LINQ to SQL",0,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public Link( Link<T> link ) Parameters linkType: System.Data.Linq.Link(Of T) The Link(Of T) instance from which to copy. Summary: Initializes a new instance of the Link(Of T) structure by copying the internal state from another Link(Of T) instance.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsDeleted { get; } Property Value Type: System.Boolean True if the object has been deleted. Summary: Gets a value that indicates whether the object in conflict has been deleted from the database.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum AutoSync Summary: Instructs the runtime how to retrieve the value after an insert or update operation.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsComposable { get; set; } Property Value Type: System.Boolean true if a function; false if a stored procedure. Summary: Gets or sets whether a method is mapped to a function or to a stored procedure.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class MetaAssociation Summary: Represents an association relationship between two entity types. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract ReadOnlyCollection<MetaParameter> Parameters { get; } Property Value Type: System.Collections.ObjectModel.ReadOnlyCollection(Of MetaParameter) A collection of the parameters. Summary: Gets an enumeration of the function parameters.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class MetaModel Summary: An abstraction that represents the mapping between a database and domain objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract MetaType InheritanceRoot { get; } Property Value Type: System.Data.Linq.Mapping.MetaType The root type. Summary: Gets the root type of the inheritance hierarchy.",0,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract bool IsInheritanceDefault { get; } Property Value Type: System.Boolean true if this type is used as the default of an inheritance hierarchy; otherwise false. Summary: Gets a value indicating whether this type is used as the default of an inheritance hierarchy.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Parameter|AttributeTargets.ReturnValue, AllowMultiple = false)] public sealed class ParameterAttribute : Attribute Summary: Enables specification of mapping details for a stored procedure method parameter. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Type Type { get; } Property Value Type: System.Type The type of the provider. Summary: Gets the type of the provider that is used to construct the ProviderAttribute. Remarks: LINQ to SQL supports Sql2000Provider, Sql2005Provider, and Sql2008Provider providers. These are subclasses of SqlProvider.",0,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method, AllowMultiple = true)] public sealed class ResultTypeAttribute : Attribute Summary: Used to specify each type of result; for functions having various result types. Remarks: This attribute applies to functions returning various result types. It is used to declare the possible result types returned from the function. For inheritance types, only the root type of the inheritance hierarchy needs to be specified. See ResultTypeAttribute.Type. Topic Location Attribute-Based Mapping (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Sequential Result Shapes (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Multiple Result Shapes (LINQ to SQL) LINQ to SQL Attribute-Based Mapping (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Sequential Result Shapes (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Multiple Result Shapes (LINQ to SQL) LINQ to SQL ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class TableAttribute : Attribute Summary: Designates a class as an entity class that is associated with a database table. Remarks: Use this attribute to designate a class as an entity class that is associated with a database table or view. LINQ to SQL treats classes that have the TableAttribute attribute as persistent classes. LINQ to SQL supports only single-table mapping. That is, an entity class must be mapped to exactly one database table, and you cannot map a database table to multiple classes at the same time. You can use the Name property of the TableAttribute attribute to specify a name for the table, and you can optionally use the schema name to qualify a table name. If you do not specify a name by using the Name property, the table name is assumed to be the same as the class name. Schema-qualified Names You can optionally use the schema name to qualify a table name. By default, the token to the left of the first period in the Name string is considered to be the schema name. The remainder of the name is considered to be the table name. The provider quotes the table name as appropriate. For example, the LINQ to SQL provider for SQL Server makes sure that brackets are used at least where they are needed. Note In some cases, you must explicitly quote attributes because the SQL Server provider cannot auto-quote. The following table shows some examples. Case Example: Identifier Name Example: Expected String in Attributes Otherwise. Schema name contains a period Schema: #A.B# Table: #C# #[A.B].C# The first period is assumed to separate the schema name from the table name. Schema/Table name starts with @ #@SomeName# #[@SomeName]# Assumed to be a parameter name. Schema starts with [ and ends with ] #[Schema.Table]# #[[Schema].[Table]]]# The unquoted identifier resembles a quoted identifier. Table starts with [ and ends with ] #[Table]# #[[Table]]]# The unquoted identifier resembles a quoted identifier. Topic Location Attribute-Based Mapping (LINQ to SQL) LINQ to SQL The LINQ to SQL Object Model LINQ to SQL How to: Represent Tables as Classes (LINQ to SQL) LINQ to SQL How to: Map Inheritance Hierarchies (LINQ to SQL) LINQ to SQL Attribute-Based Mapping (LINQ to SQL) LINQ to SQL The LINQ to SQL Object Model LINQ to SQL How to: Represent Tables as Classes (LINQ to SQL) LINQ to SQL How to: Map Inheritance Hierarchies (LINQ to SQL) LINQ to SQL ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public static XmlMappingSource FromXml( string xml ) Parameters xmlType: System.String A string that contains XML. Return Value Type: System.Data.Linq.Mapping.XmlMappingSource The new XML mapping source, as type XmlMappingSource. Summary: Creates a mapping source from an XML string.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class Sql2000Provider : SqlProvider Summary: Contains functionality to connect to and communicate with a SQL Server 2000. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public OracleConnection Connection { get; } Property Value Type: System.Data.OracleClient.OracleConnection The connection to a data source. The default is a null value. Summary: Gets the OracleConnection used by this instance of the OracleBFile.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static OracleBoolean Parse( string s ) Parameters sType: System.String The String to be converted. Return Value Type: System.Data.OracleClient.OracleBoolean An OracleBoolean structure containing the parsed value. Summary: Converts the specified String representation of a logical value to its OracleBoolean equivalent.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void Prepare() Implements IDbCommand.Prepare Summary: Creates a prepared (or compiled) version of the command at the data source. Remarks: Before you call Prepare, specify the data type of each parameter in the statement to be prepared.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#OracleConnection has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260#, false)] public sealed class OracleConnection : DbConnection, ICloneable Summary: Represents an open connection to a database. This class cannot be inherited. Remarks: This type is deprecated and will be removed in a future version of the .NET Framework. For more information, see Oracle and ADO.NET. An OracleConnection object represents a unique connection to an Oracle database. In the case of a client/server database system, it is equivalent to a network connection to the server. An application that creates an instance of the OracleConnection object can set declarative or imperative security demands that require all direct and indirect callers to have adequate permission to the code. OracleConnection creates security demands by using the OraclePermission object. Users can verify that their code has adequate permissions by using the OraclePermissionAttribute object. Users and administrators can also use the Code Access Security Policy Tool (Caspol.exe) to modify security policy at the machine, user, and enterprise levels. For more information, see Security in the .NET Framework. Note Unlike the Connection object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), OracleConnection does not support a ConnectionTimeout property. Setting a connection time-out either as a property or in the connection string has no effect, and the value returned is always zero. OracleConnection also does not support a Database property or a ChangeDatabase method. If the OracleConnection object goes out of scope, it remains open. Therefore, you should always close OracleConnection objects by calling Close or Dispose, or by using the OracleConnection object within a Using statement. Otherwise, the garbage collection might not free them immediately. Such delays can cause errors if the maximum number of connections is reached while a number of connections are waiting to be deleted by the garbage collector. By contrast, closing the connections by calling Close uses native resources more efficiently, enhancing scalability and improving overall application performance. To ensure that connections are always closed, open the connection inside of a Using block. Note To deploy high-performance applications, you often need to use connection pooling. However, when you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically. Example: The following example creates an OracleCommand and an OracleConnection. The OracleConnection is opened and set as the OracleCommand.Connection property. The example then calls ExecuteNonQuery, and closes the connection. To accomplish this, the ExecuteNonQuery is passed a connection string and a query string that is an SQL INSERT statement. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public override bool TryGetValue( string keyword, out Object value ) Parameters keywordType: System.String The key of the item to retrieve. valueType: System.Object% The value corresponding to keyword. Return Value Type: System.Boolean true if keyword was found within the connection string; otherwise, false. Summary: Retrieves a value corresponding to the supplied key from this OracleConnectionStringBuilder. Remarks: The TryGetValue method lets developers safely retrieve a value from an OracleConnectionStringBuilder without needing to verify that the supplied key name is a valid key name. Because TryGetValue gracefully handles searching for a non-existent key, there is no need to look for the existence of a key before retrieving its value. Calling TryGetValue with a nonexistent key will place the value null (Nothing in Visual Basic) in the value parameter. Example: The following example demonstrates the behavior of the TryGetValue method.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public sealed class OracleDataReader : DbDataReader Summary: Provides a way of reading a forward-only stream of data rows from a data source. This class cannot be inherited. Remarks: To create an OracleDataReader, you must call the ExecuteReader method of the OracleCommand object, rather than directly using a constructor. Changes made to a resultset by an process or thread while data is being read may be visible to the user of the OracleDataReader. IsClosed and RecordsAffected are the only properties that you can call after the OracleDataReader is closed. In some cases, you must call Close before you can call RecordsAffected. More than one OracleDataReader can be open at any given time. The following two Visual Basic examples demonstrate how to use an OracleDataReader to retrieve an Oracle REF CURSOR. These examples use tables that are defined in the Oracle Scott/Tiger schema, and require the following PL/SQL package and package body. You must create these on your server to use the examples. Create the following Oracle package on the Oracle server.  Create the following Oracle package body on the Oracle server.    This Visual Basic example executes a PL/SQL stored procedure that returns a REF CURSOR parameter, and reads the value as an OracleDataReader.    This Visual Basic example executes a PL/SQL stored procedure that returns two REF CURSOR parameters, and reads the values using an OracleDataReader.    This  example creates an Oracle table and loads it with data. You must run this example prior to running the subsequent example, which demonstrates using an OracleDataReader to access the data using OracleType structures.    This  example uses an OracleDataReader to access data, and uses several OracleType structures to display the data. Example: The following example creates an OracleConnection, an OracleCommand, and an OracleDataReader. The example reads through the data, writing it out to the console. Finally, the example closes the OracleDataReader, then the OracleConnection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,1,1,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the OracleDateTime structure.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the OracleDateTime structure.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the OracleDateTime structure.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Used for explicit OracleDateTime conversion.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DateTime Value { get; } Property Value Type: System.DateTime The value of this OracleDateTime structure. Summary: Gets the value of the OracleDateTime structure.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class OracleLob : Stream, ICloneable, IDisposable, INullable Summary: Represents a large object binary (LOB) data type stored on an Oracle server. This class cannot be inherited. Remarks: An OracleLob differs from an OracleBFile in that the data is stored on the server instead of in a physical file in the operating system. It can also be a read-write object, unlike an OracleBFile, which is always read-only. An OracleLob may be one of these OracleType data types. OracleType data type Description Blob An Oracle BLOB data type that contains binary data with a maximum size of 4 gigabytes (GB). This maps to an Array of type Byte. Clob An Oracle CLOB data type that contains character data, based on the default character set on the server, with a maximum size of 4 GB. This maps to String. NClob An Oracle NCLOB data type that contains character data, based on the national character set on the server with a maximum size of 4 GB. This maps to String. A .NET application developer can retrieve the Oracle LOB values into basic .NET data types, such as Array of type Byte and String, or the specialized OracleLob data type. The OracleLob class supports reading data from and writing to the Oracle LOB in the Oracle database. The following are the main characteristics of an OracleLob data type that distinguish it from basic .NET data types: After you retrieve the Oracle LOB value from the Oracle database into the OracleLob class, you can change the LOB data in an open transaction and your changes are directly reflected to the database. If you retrieve the Oracle LOB value into an Array of type Byte or String and update these arrays, your changes are not reflected to the database. When you use the OracleLob class to access a chunk of a LOB value, only that chunk is passed from the Oracle database to the client. When you use the GetChars method to access a chunk of a LOB value, the entire contents of the value are passed from the Oracle database to the client. To obtain an OracleLob object, call the GetOracleLob method. You can construct an OracleLob that is NULL using this format:  This technique is used primarily to test whether a LOB returned from the server is NULL, as this example illustrates:    A NULL LOB behaves similarly to a zero-byte LOB in that Read succeeds and always returns zero bytes. Selecting a LOB column that contains a null value returns Null. You must begin a transaction before obtaining a temporary LOB. Otherwise, the OracleDataReader may fail to obtain data later. You can also open a temporary LOB in Oracle by calling the DBMS_LOB.CREATETEMPORARY system stored procedure and binding a LOB output parameter. On the client side, a temporary LOB behaves like a table-based LOB. For example, to update the temporary LOB, it must be enclosed in a transaction. The following C\# example demonstrates how to open a temporary LOB.    Note The inherited WriteByte method fails if used with character data, and an InvalidOperationException is thrown. Use the Write method instead. Temporary LOBs are only closed when the connection is closed, but with pooling and under load, temporary LOBs do not close. This can be resolved by disposing the temporary LOB, by invoking tempLob.Dispose(). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new OracleMonthSpan structure.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Compares the supplied object parameter to the Value property of the OracleMonthSpan object.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static readonly int MaxScale Summary: A constant representing the maximum value for scale comparison. Remarks: The value of this constant is 127.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Inserts a OracleParameter object into the OracleParameterCollection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void Add( string connectionString, string restrictions, KeyRestrictionBehavior behavior ) Parameters connectionStringType: System.String The connection string. restrictionsType: System.String The key restrictions. behaviorType: System.Data.KeyRestrictionBehavior One of the KeyRestrictionBehavior enumerations. Summary: Creates a new set of permissions.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override SecurityElement ToXml() Return Value Type: System.Security.SecurityElement An XML encoding of the security object, including any state information. Implements ISecurityEncodable.ToXml Summary: Creates an XML encoding of the security object and its current state.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class OracleRowUpdatingEventArgs : RowUpdatingEventArgs Summary: Provides data for the RowUpdating event. Remarks: The RowUpdating event is raised before an Update to a row. When using Update, there are two events that occur for each data row updated. The order of execution is as follows: The values in the DataRow are moved to the parameter values. The OnRowUpdating event is raised. The command executes. If the command is set to FirstReturnedRecord, the first returned result is placed in the DataRow. If there are output parameters, they are placed in the DataRow. The OnRowUpdated event is raised. AcceptChanges is called. Example: The following example shows how to use both the RowUpdating and RowUpdated events. The RowUpdating event returns this output: Event Arguments: (command=OracleCommand commandType=2 status=0) The RowUpdated event returns this output: Event Arguments: (command=OracleCommand commandType=2 recordsAffected=1 row=DataRow[37] status=0) ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public char this[ int index ] { get; } Parameters indexType: System.Int32 The position of the byte to be retrieved. Property Value Type: System.Char The byte located at the position indicated by the integer parameter. Summary: Gets the single byte from the Value property located at the position indicated by the integer parameter, index. Remarks: If index indicates a position beyond the end of the byte array, an exception is raised. To avoid raising an exception, always check the IsNull property and the Length property before reading this. This property is read-only.",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum OracleType Summary: Specifies the data type of a field or property for use in an OracleParameter. Remarks: The following table shows mappings between OracleType data types, Oracle data types, and .NET Framework types.",1,0,0,1,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public DataServiceCollection() Summary: Creates a new instance of the DataServiceCollection(Of T) class. Remarks: By default, automatic change tracking is enabled for a DataServiceCollection(Of T). You can create an instance of DataServiceCollection(Of T) that uses manual change tracking when you create an instance using a constructor that enables you to supply a value of None for TrackingMode. When you use manual tracking, you must implement INotifyPropertyChanged and INotifyCollectionChanged and handle the raise events to manually report changes to the DataServiceContext. Automatic change tracking begins after items are loaded into the collection.",1,0,1,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public DataServiceStreamResponse EndGetReadStream( IAsyncResult asyncResult ) Parameters asyncResultType: System.IAsyncResult The result from the BeginGetReadStream operation that contains the binary data stream. Return Value Type: System.Data.Services.Client.DataServiceStreamResponse An instance of DataServiceStreamResponse which contains the response stream along with its metadata. Summary: Called to complete the asynchronous operation of retrieving a binary property as a stream. Remarks: The EndGetReadStream method is called to receive the results from the BeginGetReadStream method. The EndGetReadStream method does not complete until the response is received from the BeginGetReadStream method.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Uri TypeScheme { get; set; } Property Value Type: System.Uri A Uri object that contains the type scheme. Summary: Gets or sets the URI used to indicate what type scheme is used by the service. Remarks: In an ATOM payload, the return value will be the scheme attribute of a category element used to identify the type of an entity. The default value is http://schemas.microsoft.com/ado/2007/08/dataservices/scheme.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class DataServiceQueryException : InvalidOperationException Summary: Exception that indicates an error occurred loading the property value from the data service. Remarks: The caller should inspect Response to get the exception results. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class DataServiceRequestArgs Summary: Represents additional metadata that is included in a request message to WCF Data Services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DataServiceRequestException class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string ContentDisposition { get; } Property Value Type: System.String The contents of the Content-Disposition header field. Summary: Gets the Content-Disposition header field for the response stream. Remarks: When the Content-Disposition header is not present in the response, the ContentDisposition property returns Nothing.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class MimeTypePropertyAttribute : Attribute Summary: Annotates a property on a class that has been annotated with the MediaEntryAttribute. Remarks: The MimeTypePropertyAttribute takes the name of the property that holds the mime type to associate with the property specified in the MediaEntryAttribute. The property specified is automatically set to the mime type of data when a media resource associated with the media link entry is delay-loaded by the LoadProperty method. The system also reads the mime type from this property and uses it to set the Content-Type header in a POST request for a media link entry. A media link entry is an AtomPub protocol construct for handling binary data and metadata. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class OperationResponse Summary: Abstract class that represents the response of a single query or create, update, or delete operation. Remarks: The OperationResponse class is used to hold information that is shared between the two response types, but this class is not intended to be used directly by a developer. Instead, this response object should be cast to the specific QueryResponse or ChangesetResponse type that includes additional operation specific data. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Pending updates are made by replacing all values of the entity in the data source with values from the updated entity (HTTP PUT) instead of just updating changed values (HTTP MERGE), which is the default behavior.",1,0,0,0,1,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false)] public sealed class DataServiceEntityAttribute : Attribute Summary: Marks a class as an entity type in WCF Data Services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false)] public sealed class DataServiceKeyAttribute : Attribute Summary: Denotes the key property or properties of an entity. Remarks: You should only apply the DataServiceKeyAttribute attribute to a property that can be used to uniquely identify an instance of the entity type. This attribute is ignored when applied to a navigation property. For more information, see Reflection Provider (WCF Data Services). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false)] public sealed class EntitySetAttribute : Attribute Summary: Indicates the entity set to which a client data service class belongs. Remarks: The EntitySetAttribute class is used by the client during data binding to determine the name of the entity set to which a class belongs. This attribute is generated by the Add Service Reference dialog box when the Binding option is used and by the DataSvcUtil.exe tool when the /binding option is supplied. You must apply the EntitySetAttribute to any user-supplied client data service classes that are used with data binding. EntitySetAttribute is only supported when there is one entity set associated with the type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public DataServiceBuildProvider() Summary: Creates a new instance of the DataServiceBuildProvider class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class PropertyGeneratedEventArgs : EventArgs Summary: Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services. Remarks: This class is not intended for public use and is used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [CLSCompliantAttribute(false)] public class DataServiceHost : WebServiceHost Summary: The WCF Data Services class derived from WebServiceHost used to instantiate data services. Remarks: WCF Data Services are not autonomous server entities. Instead, the service is a component hosted in an environment such as the Windows Communication Foundation (WCF) that provides core server networking facilities. Specifically, a service does not bind to and listen on a network socket for incoming requests to its Representational State Transfer (REST) entry points. The host handles direct interactions with the network and support caching, scalability, and authentication modules. WCF Data Services defines a generic hosting interface IDataServiceHost that abstracts its implementation from a specific host. This allows WCF Data Services to run in a range of hosting environments. For more information, see Hosting the Data Service (WCF Data Services). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class ETagAttribute : Attribute Summary: This attribute on an entity type is used to specify the properties that determine changes in content. Remarks: Optimistic concurrency checks are enabled on a per type basis in WCF Data Services. For more information, see Making Changes to Data (WCF Data Services). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public ReadOnlyCollection<string> PropertyNames { get; } Property Value Type: System.Collections.ObjectModel.ReadOnlyCollection(Of String) String value containing property names. Summary: Gets the names of properties used in the ETagAttribute. Remarks: Parameters to the ETagAttribute constructors are the set of property names used to make up the eTag value for the type. If a type has eTags defined, the server automatically implements optimistic concurrency checks on all requests to the type. If a key property, complex type property, or navigation property is specified, an ArgumentException is thrown.",1,0,0,1,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ExpandSegment Summary: The segment of a query that indicates whether data should be returned inline instead of as deferred content. Remarks: An $expandclause indicates that each $expanditem should be fully expanded. For example, the value OrderLines.Product.Image with $expand causes OrderLines, the Product of each element in OrderLines, and the Image of the Product of each element in OrderLines to be expanded. The left-most property in an $expand clause must be a property on the entity type within the entity set identified by the last path segment in the request URI. Redundant expand clause rules are acceptable and ignored. Example: The following URI expands the OrderLines associated with each Order returned by the query. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public Expression Filter { get; } Property Value Type: System.Linq.Expressions.Expression An expression that specifies the filter on target data. Summary: The filter option in the query to which the expand segment applies.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string ResponseContentType { get; } Property Value Type: System.String The string value that indicates the response format. Summary: Gets the response content type. Remarks: All errors result in an error payload sent back from the service. This property informs the service author of the format the error that will be sent back. The value of this property will always be a valid Internet Assigned Numbers Authority (IANA) mime type.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IDataServiceHost2 : IDataServiceHost Summary: Defines extensions to IDataServiceHost needed for request and response headers in HTTP.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ServiceContractAttribute] public interface IRequestHandler Summary: Provides access to members that control handing of request messages.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class MimeTypeAttribute : Attribute Summary: Indicates the MIME type of HTTP request. Remarks: The mechanism used to control the serialization format used for a request sent from a client to a data service is the Content-Type HTTP header. The default mechanism controlling the format used in a response from a data service is the Accept HTTP header. The Accept header is used to indicate that the response to the request is limited to a specific set of MIME types. The MIME type returned from parsing the accept header is then used as the response format. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum ServiceOperationRights Summary: An enumeration used to define access rights to service operations deployed by WCF Data Services. Example: The following example sets all rights access to the service operation OrdersByCity.",1,0,0,0,0,0,1,0,1,0,0,0
"All rights assigned to the service operation..",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class ExpandedWrapper<TExpandedElement, TProperty0, TProperty1, TProperty2> : ExpandedWrapper<TExpandedElement> Type Parameters TExpandedElement The type of the expanded element. TProperty0 The type of the property to expand. TProperty1 The type of the property to expand. TProperty2 The type of the property to expand. Summary: This class is used internally by the system to implement support for queries with eager loading of related entities. Remarks: The namespace includes a number of variations of the ExpandedWrapper class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public TProperty3 ProjectedProperty3 { get; set; } Property Value Type: TProperty3 The property to expand. Summary: Get or sets the property to expand.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public TProperty0 ProjectedProperty0 { get; set; } Property Value Type: TProperty0 The property to expand. Summary: Get or sets the property to expand.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public TProperty1 ProjectedProperty1 { get; set; } Property Value Type: TProperty1 The property to expand. Summary: Get or sets the property to expand.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ProjectedWrapper4 : ProjectedWrapper Summary: Provides a wrapper over the result element with the ability to project a subset of properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ProjectedWrapper6 : ProjectedWrapper Summary: Provides a wrapper over the result elements with the ability to project a subset of the properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ProjectedWrapper7 : ProjectedWrapper Summary: Provides a wrapper over the result elements with the ability to project a subset of the properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static class DataServiceProviderMethods Summary: Performs late-bound operations on resource sets with a custom data service provider. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static bool TypeIs( Object value, ResourceType type ) Parameters valueType: System.Object The value to check. typeType: System.Data.Services.Providers.ResourceType ResourceType to compare with. Return Value Type: System.Boolean A Boolean value that is true if the value is of the specified type; otherwise false. Summary: Determines if the value is of a specified type.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static Object IndexOf( Object targetString, Object substring ) Parameters targetStringType: System.Object The target string. substringType: System.Object The substring to find. Return Value Type: System.Object Returns the index of the location of substring in the targetString. Summary: Returns the index of a substring in the target string. Remarks: The IndexOf method returns a null value when substring cannot be found in targetString.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static Object Multiply( Object left, Object right ) Parameters leftType: System.Object The first value. rightType: System.Object The second value. Return Value Type: System.Object The product of the two values. Summary: Multiplies two values. Remarks: The Multiply method multiplies two values without overflow checking.",1,0,0,0,1,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ResourceProperty ResourceProperty { get; } Property Value Type: System.Data.Services.Providers.ResourceProperty The resource property. Summary: Gets the resource property that returns the ResourceAssociationSetEnd.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string Name { get; } Property Value Type: System.String The name of the resource property as string. Summary: Gets the name of the resource property.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public struct DecimalAggregator Summary: Computes aggregates over a sequence of Decimal values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public struct DifferenceIterator Summary: Positions the iterator to the next node in the difference between two sets of nodes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public struct DodSequenceMerge Summary: Merges several doc-order-distinct sequences into a single doc-order-distinct sequence. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IteratorResult MoveNext( XPathNavigator navigator ) Parameters navigatorType: System.Xml.XPath.XPathNavigator XPathNavigator object. Return Value Type: System.Xml.Xsl.Runtime.IteratorResult Returns NoMoreNodes if there are no more content or sibling nodes. Returns NeedInputNode if the next input node needs to be fetched first. Returns HaveCurrentNode if, while iterating through the nodes, the Current property was set to the next node. Summary: Position this iterator to the next content or sibling node.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public struct IdIterator Summary: Tokenizes a string that contains IDREF values and dereferences the values in order to get a list of ID elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public XPathNavigator Current { get; } Property Value Type: System.Xml.XPath.XPathNavigator The current result navigator. Summary: Returns the current result navigator. Remarks: The state of the navigator changes only if the MoveNext method has returned true.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public XPathNavigator Current { get; } Property Value Type: System.Xml.XPath.XPathNavigator The current result navigator. Summary: Returns the current result navigator. Remarks: The state of the navigator changes only if the MoveNext method has returned true.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum SetIteratorResult Summary: Sets iterators for combinations of elements by Union, Intersection, or Difference, which use containment to control two nested iterators. This will return one of the enumeration values from MoveNext.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class XmlCollation Summary: Constructs a collation that uses the specified culture and compare options. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,1,0,0
"Additional online Documentation: Syntax: public sealed class XmlQueryItemSequence : XmlQuerySequence<XPathItem> Summary: A sequence of XML items that dynamically expands and allows random access to items. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the XmlQueryNodeSequence class.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public void WriteEndProcessingInstruction() Summary: Checks the processing instruction for well-formedness and writes the processing instruction.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Throws NotSupportedException.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string GetAtomizedName( int index ) Parameters indexType: System.Int32 A value of type int. Return Value Type: System.String A value of type string. Summary: Gets the atomized name at the specified index in the array of names.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Returns true if the type of the specified item matches the specified XML type.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Parses the specified tag name.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public struct XmlSortKeyAccumulator Summary: Accumulates a list of sort keys and stores them in an array. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public XPathNavigator Current { get; } Property Value Type: System.Xml.XPath.XPathNavigator The current result navigator. Summary: Returns the current result navigator. Remarks: The Current property changes when the MoveNext method sets the Current property to the next node and returns HaveCurrentNode; otherwise, the Current property remains unchanged.",0,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Summary: Converts the specified values to a sequence of nodes.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public enum DataAccessKind Summary: Describes the type of access to user data for a user-defined method or function. Remarks: Describes the type of access to user data for a user-defined method or function. This enumeration is used in SqlMethodAttribute and SqlFunctionAttribute to indicate whether the method or function uses ADO.NET to connect back to the database using the #context connection.# Note that methods and functions are not allowed to make changes to the database, so the options for this enumeration are None (meaning no data-access performed by the method or function) and Read (meaning that the method or function perform read-only data-access operations, such as executing SELECT statements).",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class SqlContext Summary: Represents an abstraction of the caller's context, which provides access to the SqlPipe, SqlTriggerContext, and WindowsIdentity objects. This class cannot be inherited. Remarks: The SqlContext object can be used to obtain the trigger context (for code executing in a trigger) and the pipe object (when available, such as in stored procedures). It can also be used to obtain a WindowsIdentity object that represents the Microsoft Windows identity of the calling client, if the client authenticated with the server using integrated authentication. Example: The following example creates a new SqlDataRecord and its SqlMetaData. The example then marks the beginning of a result set using the SendResultsStart method, sends records with example data back to the client using the SendResultsRow method, and marks the end of the result set with the SendResultsEnd method. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public virtual void SetByte( int ordinal, byte value ) Parameters ordinalType: System.Int32 The zero-based ordinal of the column. valueType: System.Byte The new value of the column. Summary: Sets the data stored in the column to the specified Byte value.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual void SetSqlDecimal( int ordinal, SqlDecimal value ) Parameters ordinalType: System.Int32 The zero-based ordinal of the column. valueType: System.Data.SqlTypes.SqlDecimal The new value of the column. Summary: Sets the data stored in the column to the specified SqlDecimal value.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual int SetValues( params Object[] values ) Parameters valuesType: System.Object() The array of new values, expressed as CLR types boxed as Object references, for the SqlDataRecord instance. Return Value Type: System.Int32 The number of column values set as an integer. Summary: Sets new values for all of the columns in the SqlDataRecord. These values are expressed as common language runtime (CLR) types. Remarks: The length of values must match the number of columns in the SqlDataRecord instance.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter|AttributeTargets.ReturnValue, AllowMultiple = false, Inherited = false)] public class SqlFacetAttribute : Attribute Summary: Annotates the returned result of a user-defined type (UDT) with additional information that can be used in Transact-SQL. Remarks: SqlFacetAttribute may only be specified on non-void return values. SqlFacetAttribute is used only to derive information about the return type, and is not intended to be a constraint specification on what can be stored in the type. Thus, if a field has a SqlFacetAttribute indicating its size to be 2 characters, then the SQL Server type of the field access expression is of size 2, but assignments into the field are not restricted by this facet. The table below captures the matrix of valid values for the various properties for specific field types. In this table, #Y# indicates that the property is valid, and #N# indicates that the property is not valid. The specified SqlFacetAttribute must be compatible with the field type. If the property is not valid, type registration will report an error if the user specifies a non-default value for the property. The maximum values for Precision and Scale properties are 38. For the MaxSize property, the value should be in the range of 1-8000 for binary and non-Unicode data, 1-4000 for Unicode data, or -1. All other values are not valid. Type IsFixedLength MaxSize Precision Scale IsNullable SqlBoolean N N N N Y SqlByte N N N N Y SqlInt16 N N N N Y SqlInt32 N N N N Y SqlInt64 N N N N Y SqlSingle N N N N Y SqlDouble N N N N Y SqlDateTime N N N N Y SqlMoney N N N N Y SqlGuid N N N N Y SqlDecimal N N Y Y Y SqlString Y Y N N Y SqlBinary Y Y N N Y SqlXml N N N N Y SqlBytes Y Y N N Y SqlChars Y Y N N Y Embedded UDTs N N N N Y String Y Y N N Y Byte[] Y Y N N Y Char[] Y Y N N Y DateTime N N N Y1 N Decimal N N Y Y Y (1) Specifying the scale on a DateTime type will cause the value to be returned to Transact-SQL as a DateTime2 type with the specified scale. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public SqlFacetAttribute() Summary: An optional attribute on a user-defined type (UDT) return type, used to annotate the returned result with additional information that can be used in Transact-SQL.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the SqlMetaData class.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Summary: Validates the specified value against the metadata, and adjusts the value if necessary.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Validates the specified value against the metadata, and adjusts the value if necessary.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] [AttributeUsageAttribute(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class SqlProcedureAttribute : Attribute Summary: Used to mark a method definition in an assembly as a stored procedure. The properties on the attribute reflect the physical characteristics used when the type is registered with SQL Server. This class cannot be inherited. Remarks: SqlProcedureAttribute is used only by Microsoft Visual Studio to automatically register the specified method as a stored procedure. It is not used by SQL Server. See #CLR Stored Procedures# in SQL Server 2005 Books Online for more information on CLR stored procedures and examples. Example: The following example shows a method declaration in an assembly that has been attributed as a stored procedure. The SqlProcedureAttribute property has been set to the name of the stored procedure. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,1,1,0
"Additional online Documentation: Syntax: public string Name { get; set; } Property Value Type: System.String A String value representing the name of the trigger. Summary: The name of the trigger.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class|AttributeTargets.Struct, AllowMultiple = false, Inherited = false)] public sealed class SqlUserDefinedAggregateAttribute : Attribute Summary: Indicates that the type should be registered as a user-defined aggregate. The properties on the attribute reflect the physical attributes used when the type is registered with SQL Server. This class cannot be inherited. Remarks: SQL Server creates a user-defined aggregate that is bound to the class definition that has the SqlUserDefinedAggregateAttribute custom attribute. Every user-defined aggregate must be annotated with this attribute. See #CLR User-Defined Aggregates# in SQL Server 2005 Books Online for more information on user-defined aggregates and examples. Example: The following example shows the SqlUserDefinedAggregateAttribute attribute for a user-defined aggregate. The aggregate uses custom serialization, has a maximum size of 8000 bytes when serialized, and is invariant to nulls, duplicates, and order. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,1,0,0,1
"An ALTER QUEUE Transact-SQL statement was executed.",1,0,0,0,0,0,0,0,0,0,0,1
"A DROP_REMOTE_SERVICE_BINDING event type was specified when an event notification was created on the database or server instance.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ConstraintCollection : InternalDataCollectionBase Summary: Represents a collection of constraints for a DataTable. Remarks: The ConstraintCollection is accessed through the DataTable.Constraints property. The ConstraintCollection can contain both UniqueConstraint and ForeignKeyConstraint objects for the DataTable. A UniqueConstraint object makes sure that data in a specific column is always unique to preserve the data integrity. The ForeignKeyConstraint determines what will occur in related tables when data in the DataTable is either updated or deleted. For example, if a row is deleted, the ForeignKeyConstraint will determine whether the related rows are also deleted (a cascade), or some other course of action. Note When you add a DataRelation that creates a relationship between two tables to a DataSet, both a ForeignKeyConstraint and a UniqueConstraint are created automatically. The UniqueConstraint is applied to the primary key column in the parent DataTable, and the constraint is added to that table's ConstraintCollection. The ForeignKeyConstraint is applied to the primary key column and the foreign key column, and the constraint is added to the child table's ConstraintCollection. The ConstraintCollection uses standard collection methods such as Add, Clear, and Remove. In addition, the Contains method can be used to look for the existence of a particular constraint in the collection. A UniqueConstraint is created when a DataColumn with its Unique property set to true is added to a DataTable object's DataColumnCollection. A ForeignKeyConstraint is created when a DataRelation is added to a DataSet object's DataRelationCollection. Example: The first example creates a DataTable, and adds a DataColumn (with its Unique property set to true) to the DataColumnCollection. The second example creates a DataSet, two DataTable objects, four columns, and a DataRelation. The count of constraints is then printed to show that a ForeignKeyConstraint and a UniqueConstraint are created when a DataRelation is added to the DataSet object's DataRelationCollection. ThreadSafety: This type is safe for multithreaded read operations. You must synchronize any write operations.",1,1,0,0,1,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public DataSetDateTime DateTimeMode { get; set; } Property Value Type: System.Data.DataSetDateTime The DataSetDateTime for the specified column. Summary: Gets or sets the DateTimeMode for the column. Remarks: The DateTimeMode cannot be modified after rows are added to a DataColumn, except for modifying from Unspecified and UnspecifiedLocal or vice-versa. The modification from UnspecifiedLocal to Unspecified and vice-versa is allowed as the difference between these two options is only during serialization and does not affect the storage.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class DataColumnChangeEventArgs : EventArgs Summary: Provides data for the ColumnChanging event. Remarks: The ColumnChanging event occurs when a change is made to the value of a column in the DataTable. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DataRow Row { get; } Property Value Type: System.Data.DataRow The DataRow of the column with a changing value. Summary: Gets the DataRow of the column with a changing value.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public bool Contains( string name ) Parameters nameType: System.String The ColumnName of the column to look for. Return Value Type: System.Boolean true if a column exists with this name; otherwise, false. Summary: Checks whether the collection contains a column with the specified name. Remarks: Use the Contains method to confirm the existence of a column before you perform additional operations on the column. The method returns false when two or more columns have the same name but different namespaces. The call does not succeed if there is any ambiguity when matching a column name to exactly one column. Example: The following example uses the Contains method and the CanRemove method to determine whether the column can be removed. If so, the column is removed.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DataRelation class.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Gets the parent row of a DataRow.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DataRowBuilder Summary: The DataRowBuilder type supports the .NET Framework infrastructure and is not intended to be used directly from your code. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public DataRowChangeEventArgs( DataRow row, DataRowAction action ) Parameters rowType: System.Data.DataRow The DataRow upon which an action is occuring.  actionType: System.Data.DataRowAction One of the DataRowAction values. Summary: Initializes a new instance of the DataRowChangeEventArgs class. Example: The following example adds a DataRowChangeEventHandler and the procedure to handle the event when a row is changed.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public enum DataRowVersion Summary: Describes the version of a DataRow. Remarks: The DataRowVersion values are used when retrieving the value found in a DataRow using Item or the GetChildRows of the DataRow object. The DataRowVersion informs you what version of a DataRow exists. Versions change under the following circumstances: After calling the DataRow object's BeginEdit method, if you change the value, the Current and Proposed values become available. After calling the DataRow object's CancelEdit method, the Proposed value is deleted. After calling the DataRow object's EndEdit method, the Proposed value becomes the Current value. After calling the DataRow object's AcceptChanges method, the Original value becomes identical to the Current value. After calling the DataTable object's AcceptChanges method, the Original value becomes identical to the Current value. After calling the DataRow object's RejectChanges, the Proposed value is discarded, and the version becomes Current. Example: The following example checks the DataRowVersion of a DataRow before invoking the AcceptChanges method.",0,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class DataRowView : ICustomTypeDescriptor, IEditableObject, IDataErrorInfo, INotifyPropertyChanged Summary: Represents a customized view of a DataRow. Remarks: Whenever data is displayed, such as in a DataGrid control, only one version of each row can be displayed. The displayed row is a DataRowView. A DataRowView can have one of four different version states: Default, Original, Current, and Proposed. After invoking BeginEdit on a DataRow, any edited value becomes the Proposed value. Until either CancelEdit or EndEdit is invoked, the row has an Original and a Proposed version. If CancelEdit is invoked, the proposed version is discarded, and the value reverts to Original. If EndEdit is invoked, the DataRowView no longer has a Proposed version; instead, the proposed value becomes the current value. Default values are available only on rows that have columns with default values defined. Example: The following example uses the RowVersion property to determine the state of a row in the DataRowView. ThreadSafety: This type is safe for multithreaded read operations. You must synchronize any write operations.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Returns a DataTableReader with one result set per DataTable, in the same sequence as the tables appear in the Tables collection. Remarks: In order to ensure the order of the result sets within the returned DataTableReader, if a DataTable within the DataSet is empty, it will be represented by an empty result set within the returned DataTableReader. Example: This example, a Console application, creates three DataTable instances and adds each to a DataSet. The example calls the CreateDataReader method and displays the contents of the returned DataTableReader. Note that the order of the result sets in the DataTableReader is controlled by the order of the DataTable instances passed as parameters. Note This example shows how to use one of the overloaded versions of CreateDataReader. For other examples that might be available, see the individual overload topics.  The example displays the following code in the Console window:",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Summary: Applies XML schema to the DataSet.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Initialized Implements ISupportInitializeNotification.Initialized Summary: Occurs after the DataSet is initialized. Remarks: For more information, see IsInitialized.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Merges a specified DataSet, DataTable, or array of DataRow objects into the current DataSet or DataTable.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Reads XML schema and data into the DataSet.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: void IXmlSerializable.ReadXml( XmlReader reader ) Parameters readerType: System.Xml.XmlReader A XmlReader. Implements IXmlSerializable.ReadXml(XmlReader) Summary: For a description of this member, see IXmlSerializable.ReadXml. Remarks: This member is an explicit interface member implementation. It can be used only when the DataSet instance is cast to an IXmlSerializable interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Writes XML data, and optionally the schema, from the DataSet.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Summary: Writes XML data, and optionally the schema, from the DataSet.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum DataSetDateTime Summary: Describes the serialization format for DateTime columns in a DataSet. Remarks: DataSetDateTime cannot be set on non-DateTime columns. Setting the DateTimeMode property with the default value UnspecifiedLocall on non-DateTime columns is permitted. Modifying the column data type from DateTime to any other type resets the DateTimeMode to the default value UnspecifiedLocal. Checking schema for merging, Relations, and ForeignKeyConstraints can be performed between DateTime columns with matching DateTimeMode properties. Otherwise the columns should be considered as non-matching on schema. The only exception is between Unspecified and UnspecifiedLocal. It is permitted to have a relation or a ForeignKeyConstraint between two DateTime columns with one in Unspecified and other in UnspecifiedLocal DateTimeMode.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.All)] [ObsoleteAttribute(#DataSysDescriptionAttribute has been deprecated. http://go.microsoft.com/fwlink/?linkid=14202#, false)] public class DataSysDescriptionAttribute : DescriptionAttribute Summary: Marks a property, event, or extender with a description. Visual designers can display this description when referencing the member. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class DataTable : MarshalByValueComponent, IListSource, ISupportInitializeNotification, ISupportInitialize, ISerializable, IXmlSerializable Summary: Represents one table of in-memory data. Remarks: The DataTable is a central object in the ADO.NET library. Other objects that use the DataTable include the DataSet and the DataView. When accessing DataTable objects, note that they are conditionally case sensitive. For example, if one DataTable is named #mydatatable# and another is named #Mydatatable#, a string used to search for one of the tables is regarded as case sensitive. However, if #mydatatable# exists and #Mydatatable# does not, the search string is regarded as case insensitive. A DataSet can contain two DataTable objects that have the same TableName property value but different Namespace property values. For more information about working with DataTable objects, see Creating a DataTable (ADO.NET). If you are creating a DataTable programmatically, you must first define its schema by adding DataColumn objects to the DataColumnCollection (accessed through the Columns property). For more information about adding DataColumn objects, see Adding Columns to a DataTable (ADO.NET). To add rows to a DataTable, you must first use the NewRow method to return a new DataRow object. The NewRow method returns a row with the schema of the DataTable, as it is defined by the table's DataColumnCollection. The maximum number of rows that a DataTable can store is 16,777,216. For more information, see Adding Data to a DataTable. The DataTable also contains a collection of Constraint objects that can be used to ensure the integrity of the data. For more information, see DataTable Constraints (ADO.NET). There are many DataTable events that can be used to determine when changes are made to a table. These include RowChanged, RowChanging, RowDeleting, and RowDeleted. For more information about the events that can be used with a DataTable, see Handling DataTable Events (ADO.NET). When an instance of DataTable is created, some of the read/write properties are set to initial values. For a list of these values, see the DataTable.DataTable constructor topic. Note The DataSet and DataTable objects inherit from MarshalByValueComponent, and support the ISerializable interface for .NET Framework remoting. These are the only ADO.NET objects that you can use for .NET Framework remoting. Topic Location How to: Create DataTables Data Access in Visual Studio How to: Create DataTables Data Access in Visual Studio Example: The following example creates two DataTable objects and one DataRelation object, and adds the new objects to a DataSet. The tables are then displayed in a DataGridView control. ThreadSafety: This type is safe for multithreaded read operations. You must synchronize any write operations.",0,1,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Finds and updates a specific row. If no matching row is found, a new row is created using the given values.",1,0,1,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public event DataRowChangeEventHandler RowChanged Summary: Occurs after a DataRow has been changed successfully. Remarks: For more information, see Handling DataTable Events (ADO.NET).",0,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public override string ToString() Return Value Type: System.String A string consisting of the TableName and the DisplayExpression values. Summary: Gets the TableName and DisplayExpression, if there is one as a concatenated string. Remarks: Gets the TableName and DisplayExpression for the DataTable. Example: The following example returns the TableName and DisplayExpression using the ToString method.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Summary: Writes the current contents of the DataTable as XML. Remarks: The WriteXml method provides a way to write either data only, or both data and schema from a DataTable into an XML document, whereas the WriteXmlSchema method writes only the schema. To write both data and schema, use one of the overloads that include the XmlWriteMode parameter, and set its value to WriteSchema. Note that the same is true for the ReadXml and ReadXmlSchema methods, respectively. To read XML data, or both schema and data into the DataTable, use the ReadXml method. To read just the schema, use the ReadXmlSchema method. Note An InvalidOperationException will be thrown if a column type in the DataRow being read from or written to implements IDynamicMetaObjectProvider and does not implement IXmlSerializable. Example: The following console application creates two DataTable instances, adds each to a DataSet, creates a DataRelation relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a TextWriter. The example demonstrates the behavior when setting the writeHierarchy parameter to each of its values. Note This example shows how to use one of the overloaded versions of WriteXml. For  examples that might be available, see the individual overload topics.  The example displays the following output in the console window:",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public event CollectionChangeEventHandler CollectionChanged Summary: Occurs after the DataTableCollection is changed because of DataTable objects being added or removed. Remarks: For more information about handling events, see Consuming Events. Example: The following example demonstrates how to use the CollectionChanged event.",0,0,0,0,0,1,0,0,1,0,1,0
"Additional online Documentation: Summary: Gets the index in the collection of the specified DataTable object.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Summary: Removes a specified DataTable object from the collection.",0,0,0,0,0,1,0,1,1,0,0,1
"Additional online Documentation: Syntax: public override int GetProviderSpecificValues( Object[] values ) Parameters valuesType: System.Object() An array of objects to be filled in with type information for the columns in the DataTableReader. Return Value Type: System.Int32 The number of column values copied into the array. Summary: Fills the supplied array with provider-specific type information for all the columns in the DataTableReader. Remarks: Because the DataTableReader always returns the data of the type stored within the underlying DataColumn, the values returned by calling the GetProviderSpecificValues method is always of the same types as the data stored within the DataTable. When you work with the DataTableReader class, calling the GetProviderSpecificValues method returns the same values and types as calling the GetValues method.",1,1,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Summary: Disposes of the resources, other than memory, that are used by the DataView object. Remarks: Property change notifications between the DataView and the underlying DataTable stop after this method is called. Dispose should be called for all DataView objects.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public event ListChangedEventHandler ListChanged Implements IBindingList.ListChanged Summary: Occurs when the list managed by the DataView changes. Example: The following example adds a handler for the ListChanged event of a DataView.",0,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: void IBindingList.RemoveSort() Implements IBindingList.RemoveSort Summary: For a description of this member, see IBindingList.RemoveSort. Remarks: This member is an explicit interface member implementation. It can be used only when the DataView instance is cast to an IBindingList interface.",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum DbType Summary: Specifies the data type of a field, a property, or a Parameter object of a .NET Framework data provider. Remarks: The type of a parameter is specific to the .NET Framework data provider. Specifying the type converts the value of the Parameter to the data provider Type before passing the value to the data source. If the type is not specified, ADO.NET infers the data provider Type of the Parameter from the Value property of the Parameter object. You can also generically specify the type of a Parameter by setting DbType property of a Parameter object. ADO.NET cannot correctly infer the type if a byte array is larger than 8,000 bytes. Explicitly specify the DbType when working with byte arrays larger than 8,000 bytes.",1,0,0,0,0,0,0,1,0,0,0,0
"A globally unique identifier (or GUID).",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DuplicateNameException class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class EvaluateException : InvalidExpressionException Summary: Represents the exception that is thrown when the Expression property of a DataColumn cannot be evaluated. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IColumnMapping Summary: Associates a data source column with a DataSet column, and is implemented by the DataColumnMapping class, which is used in common by .NET Framework data providers. Remarks: The IColumnMapping interface enables an inheriting class to implement a Column Mapping class, which associates a data source column with a DataSet column. For more information, see DataAdapter DataTable and DataColumn Mappings (ADO.NET). An application does not create an instance of the IColumnMapping interface directly, but creates an instance of a class that inherits IColumnMapping. Classes that inherit IColumnMapping must implement all inherited members, and typically define additional members to add provider-specific functionality. For example, the IColumnMapping interface defines the DataSetColumn property. In turn, the DataColumnMapping class inherits this property, and also defines the GetDataColumnBySchemaAction method. Notes to Implementers When you inherit from the IColumnMapping interface, you should implement the following constructors: Item Description ColumnMapping() Initializes a new instance of the ColumnMapping class. ColumnMapping(string sourceColumn, string dataSetColumn) Initializes a new instance of the ColumnMapping class with a source with the specified source column name and DataSet column name. Example: The following example creates an instance of the derived class, DataColumnMapping, and adds it to a DataColumnMappingCollection collection. It then tells the user that the mapping was added to the collection and shows the parent for the mapping.",1,0,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: void Cancel() Summary: Attempts to cancels the execution of an IDbCommand. Remarks: If there is nothing to cancel, nothing happens. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IDbDataAdapter : IDataAdapter Summary: Represents a set of command-related properties that are used to fill the DataSet and update a data source, and is implemented by .NET Framework data providers that access relational databases. Remarks: The IDbDataAdapter interface inherits from the IDataAdapter interface and allows an object to create a DataAdapter designed for use with a relational database. The IDbDataAdapter interface and, optionally, the utility class, DbDataAdapter, allow an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a DataSet. For more information about DataAdapter classes, see Populating a DataSet from a DataAdapter (ADO.NET). For more information about implementing .NET Framework data providers, see [<topic://cpconimplementingnetdataprovider>]. An application does not create an instance of the IDbDataAdapter interface directly, but creates an instance of a class that inherits IDbDataAdapter and DbDataAdapter. Classes that inherit IDbDataAdapter must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the IDbDataAdapter interface defines the SelectCommand property, and the DbDataAdapter interface defines a Fill method that takes a DataTable as a parameter. In turn, the OleDbDataAdapter class inherits the SelectCommand property and the Fill method, and also defines two additional overloads of the Fill method that take an ADO Recordset object as a parameter. Notes to Implementers To promote consistency among .NET Framework data providers, name the inheriting class in the form Prv DataAdapter where Prv is the uniform prefix given to all classes in a specific .NET Framework data provider namespace. For example, Sql is the prefix of the SqlDataAdapter class in the System.Data.SqlClient namespace. When you inherit from the IDbDataAdapter interface, you should implement the following constructors: Item Description PrvDataAdapter() Initializes a new instance of the PrvDataAdapter class. PrvDataAdapter(PrvCommand selectCommand) Initializes a new instance of the PrvDataAdapter class with the specified SQL SELECT statement. PrvDataAdapter(string selectCommandText, string selectConnectionString) Initializes a new instance of the PrvDataAdapter class with an SQL SELECT statement and a connection string. PrvDataAdapter(string selectCommandText, PrvConnection selectConnection) Initializes a new instance of the PrvDataAdapter class with an SQL SELECT statement and a PrvConnection object. Example: The following example uses the derived classes, SqlCommand, SqlDataAdapter and SqlConnection, to select records from a data source. The filled DataSet is then returned. To accomplish this, the method is passed an initialized DataSet, a connection string, and a query string that is a Transact-SQL SELECT statement.",1,1,0,0,0,0,1,0,1,1,1,0
"Additional online Documentation: Syntax: public virtual void CopyTo( Array ar, int index ) Parameters arType: System.Array The one-dimensional Array to copy the current InternalDataCollectionBase object's elements into.  indexType: System.Int32 The destination Array index to start copying into. Implements ICollection.CopyTo(Array, Int32) Summary: Copies all the elements of the current InternalDataCollectionBase to a one-dimensional Array, starting at the specified InternalDataCollectionBase index. Remarks: This method can be overridden by a derived class. The BaseCollection class and its members are not intended for use as a stand-alone component, but as the class from which other collection classes derive standard functionality.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class InvalidExpressionException : DataException Summary: Represents the exception that is thrown when you try to add a DataColumn that contains an invalid Expression to a DataColumnCollection. Remarks: The Expression property is use to calculate the value of a column, or create an aggregate column. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public delegate void MergeFailedEventHandler( Object sender, MergeFailedEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Data.MergeFailedEventArgs The data for the event. Summary: Represents the method that will handle the MergeFailed event. Remarks: When you create a MergeFailedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see Events and Delegates.",0,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class MissingPrimaryKeyException : DataException Summary: Represents the exception that is thrown when you try to access a row in a table that has no primary key. Remarks: The MissingPrimaryKeyException is thrown when invoking the following methods to access a row in a table that has no primary key. DataRowCollection.Contains DataRowCollection.Find ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum ParameterDirection Summary: Specifies the type of a parameter within a query relative to the DataSet. Remarks: The ParameterDirection values are used by the parameter direction properties of OleDbParameter and SqlParameter.",0,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#PropertyAttributes has been deprecated. http://go.microsoft.com/fwlink/?linkid=14202#)] [FlagsAttribute] public enum PropertyAttributes Summary: Specifies the attributes of a property.",1,0,0,0,0,0,0,0,0,0,0,1
"The user can read the property.",1,0,0,0,0,0,0,0,0,0,0,1
"Object . A special data type that can contain numeric, string, binary, or date data as well as the SQL Server values Empty and Null, which is assumed if no other type is declared.",1,0,0,0,0,0,0,0,0,0,0,0
"Date and time data. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds.",1,0,0,0,1,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class StateChangeEventArgs : EventArgs Summary: Provides data for the state change event of a .NET Framework data provider. Remarks: The data is used by the StateChange property of the OleDbConnection and the StateChange property of the SqlConnection. Example: The following example shows how to use the StateChange event within the SqlConnection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"An SQL query that is a DELETE statement.",0,0,0,0,0,0,0,0,0,0,0,1
"Reads XML fragments, such as those generated by executing FOR XML queries, against an instance of SQL Server. When XmlReadMode is set to Fragment, the default namespace is read as the inline schema.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class DataAdapter : Component, IDataAdapter Summary: Represents a set of SQL commands and a database connection that are used to fill the DataSet and update the data source. Remarks: The DataAdapter serves as a bridge between a DataSet and a data source for retrieving and saving data. The DataAdapter provides this bridge by mapping Fill, which changes the data in the DataSet to match the data in the data source, and Update, which changes the data in the data source to match the data in the DataSet. If you are connecting to a SQL Server database, you can increase overall performance by using the SqlDataAdapter along with its associated SqlCommand and SqlConnection objects. For OLE DB-supported data sources, use the DataAdapter with its associated OleDbCommand and OleDbConnection objects. For ODBC-supported data sources, use the DataAdapter with its associated OdbcCommand and OdbcConnection objects. For Oracle databases, use the DataAdapter with its associated OracleCommand and OracleConnection objects. When an instance of DataAdapter is created, the read/write properties are set to initial values. For a list of these values, see the DataAdapter constructor. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,1,0
"Additional online Documentation: Summary: Gets a DataColumn from the given DataTable.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public int IndexOfDataSetColumn( string dataSetColumn ) Parameters dataSetColumnType: System.String The name, which is not case-sensitive, of the data set column to find. Return Value Type: System.Int32 The zero-based location of the specified DataColumnMapping with the given DataSet column name, or -1 if the DataColumnMapping object does not exist in the collection. Summary: Gets the location of the specified DataColumnMapping with the given DataSet column name. Example: The following example searches for a DataColumnMapping within the collection. If the object exists, it is returned. The example assumes that a DataColumnMappingCollection collection and a DataColumnMapping object have been created.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DataTableMapping class.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [ListBindableAttribute(false)] public sealed class DataTableMappingCollection : MarshalByRefObject, ITableMappingCollection, IList, ICollection, IEnumerable Summary: A collection of DataTableMapping objects. This class cannot be inherited. Example: The following example uses an OleDbDataAdapter to Add DataTableMapping objects to its TableMappings collection, and then displays a list of those mapped source tables. This example assumes that an OleDbDataAdapter has already been created. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public abstract class DbCommand : Component, IDbCommand, IDisposable Summary: Represents an SQL statement or stored procedure to execute against a data source. Provides a base class for database-specific classes that represent commands. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: protected abstract DbParameter CreateDbParameter() Return Value Type: System.Data.Common.DbParameter A DbParameter object. Summary: Creates a new instance of a DbParameter object.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class DbConnection : Component, IDbConnection, IDisposable Summary: Represents a connection to a database. Remarks: Notes to Inheritors When you inherit from DbConnection, you must override the following members: Close, BeginDbTransaction, ChangeDatabase, CreateDbCommand, Open, and StateChange. You must also provide the following properties: ConnectionString, Database, DataSource, ServerVersion, and State. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual event StateChangeEventHandler StateChange Summary: Occurs when the state of the event changes. Remarks: The StateChange event occurs when the state of the event changes from closed to opened, or opened to closed.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties() Return Value Type: System.ComponentModel.PropertyDescriptorCollection A PropertyDescriptorCollection that represents the properties for this component instance. Implements ICustomTypeDescriptor.GetProperties Summary: Returns the properties for this instance of a component. Remarks: This member is an explicit interface member implementation. It can be used only when the DbConnectionStringBuilder instance is cast to an ICustomTypeDescriptor interface. For more information, see GetProperties.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class DbDataAdapter : DataAdapter, IDbDataAdapter, IDataAdapter, ICloneable Summary: Aids implementation of the IDbDataAdapter interface. Inheritors of DbDataAdapter implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a DataAdapter. Remarks: The DbDataAdapter class inherits from the DataAdapter class and helps a class implement a DataAdapter designed for use with a relational database. An application does not create an instance of the DbDataAdapter interface directly, but creates an instance of a class that inherits IDbDataAdapter and DbDataAdapter. Classes that inherit DbDataAdapter must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the DbDataAdapter class defines the SelectCommand property, and the DbDataAdapter interface defines eight overloads of the Fill method. In turn, the OleDbDataAdapter class inherits the Fill method, and also defines two additional overloads of Fill that take an ADO Recordset object as a parameter. Notes to Inheritors When you inherit from the DbDataAdapter class, we recommend that you implement the following constructors: Item Description PrvDataAdapter() Initializes a new instance of the PrvDataAdapter class. PrvDataAdapter(PrvCommand selectCommand) Initializes a new instance of the PrvDataAdapter class with the specified SQL SELECT statement. PrvDataAdapter(string selectCommandText, string selectConnectionString) Initializes a new instance of the PrvDataAdapter class with an SQL SELECT statement and a connection string. PrvDataAdapter(string selectCommandText, PrvConnection selectConnection) Initializes a new instance of the PrvDataAdapter class with an SQL SELECT statement and a PrvConnection object. To promote consistency among .NET Framework data providers, you should name the inheriting class in the form PrvDataAdapter, where Prv is the uniform prefix given to all classes in a specific .NET Framework data provider namespace. For example, #Sql# is the prefix of the SqlDataAdapter class in the System.Data.SqlClient namespace. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,1,1,0,0,1,1,0,0,1,1
"Additional online Documentation: Summary: Initializes a new instance of a DataAdapter class.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public DbCommand DeleteCommand { get; set; } Property Value Type: System.Data.Common.DbCommand An IDbCommand used during Update to delete records in the data source for deleted rows in the data set. Summary: Gets or sets a command for deleting records from the data set. Remarks: During Update, if this property is not set and primary key information is present in the DataSet, the DeleteCommand is automatically generated. Example: The following example creates the derived class OleDbDataAdapter and sets some of its properties.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Fills a DataSet or a DataTable.",1,0,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] [AttributeUsageAttribute(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Constructor|AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public abstract class DBDataPermissionAttribute : CodeAccessSecurityAttribute Summary: Associates a security action with a custom security attribute. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Syntax: public string KeyRestrictions { get; set; } Property Value Type: System.String One or more connection string parameters that are allowed or disallowed. Summary: Gets or sets connection string parameters that are allowed or disallowed. Remarks: Connection string parameters are identified in the form <parameter name>=. Multiple parameters can be specified, delimited using a semicolon (;). The connection string parameters listed may be identified as either the only additional parameters allowed or additional parameters that are not allowed using the KeyRestrictionBehavior property. If no key restrictions are specified, and the KeyRestrictionBehavior property is set to AllowOnly, no additional connection string parameters are allowed. If no key restrictions are specified, and the KeyRestrictionBehavior property is set to PreventUsage, additional connection string parameters are allowed. If more than one rule is set for the same connection string, the more restrictive rule is selected during the permission check.",1,0,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: protected virtual DbDataReader GetDbDataReader( int ordinal ) Parameters ordinalType: System.Int32 The zero-based column ordinal. Return Value Type: System.Data.Common.DbDataReader A DbDataReader object. Summary: Returns a DbDataReader object for the requested column ordinal that can be overridden with a provider-specific implementation.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public abstract bool IsDBNull( int ordinal ) Parameters ordinalType: System.Int32 The zero-based column ordinal. Return Value Type: System.Boolean true if the specified column is equivalent to DBNull; otherwise false. Implements IDataRecord.IsDBNull(Int32) Summary: Gets a value that indicates whether the column contains nonexistent or missing values. Remarks: Call this method to check for null column values before calling the typed get methods (for example, GetByte, GetChar, and so on) to avoid raising an error.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class DbDataSourceEnumerator Summary: Provides a mechanism for enumerating all available instances of database servers within the local network. Remarks: This class provides the basis for other strongly typed data source enumerators. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public static readonly string CreateFormat Summary: Used by the GetSchema method to create the CreateFormat column in the DataTypes collection.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public static readonly string GroupByBehavior Summary: Used by the GetSchema method to create the GroupByBehavior column in the DataSourceInformation collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract void ResetDbType() Summary: Resets the DbType property to its original settings.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsProviderSpecificTypeProperty { get; } Property Value Type: System.Boolean true if the property that this attribute is applied to is a provider-specific type property; otherwise false. Summary: Indicates whether the attributed property is a provider-specific type.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public abstract class DbTransaction : MarshalByRefObject, IDbTransaction, IDisposable Summary: The base class for a transaction. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public DbConnection Connection { get; } Property Value Type: System.Data.Common.DbConnection The DbConnection object associated with the transaction. Summary: Specifies the DbConnection object associated with the transaction. Remarks: A single application may have multiple data source connections, each with zero or more transactions. This property allows you to determine the connection object associated with a particular transaction.",0,1,0,1,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public enum IdentifierCase Summary: Specifies how identifiers are treated by the data source when searching the system catalog. Remarks: Identifiers may be either quoted or unquoted.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected virtual IDbCommand BaseCommand { get; set; } Property Value Type: System.Data.IDbCommand The IDbCommand to execute during the Update. Summary: Gets or sets the IDbCommand object for an instance of this class. Remarks: This method allows implementations to perform type checking for the IDbCommand object assignment. Only valid IDbCommand objects, for example a SqlCommand object, should be permitted.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static readonly string IsKey Summary: Specifies whether this column is a key for the table. Remarks: Returns the string #true# if the column is a key; otherwise #false#.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum SupportedJoinOperators Summary: Specifies what types of Transact-SQL join statements are supported by the data source. Remarks: These members are flags that allow a bitwise combination of the join capabilities.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public sealed class OdbcCommand : DbCommand, ICloneable Summary: Represents an SQL statement or stored procedure to execute against a data source. This class cannot be inherited. Remarks: The OdbcCommand class provides the following methods for executing commands against a data source: Item Description ExecuteReader Executes commands that return rows. ExecuteNonQuery Executes commands such as SQL INSERT, DELETE, UPDATE, and SET statements. ExecuteScalar Retrieves a single value, for example, an aggregate value, from a database. You can reset the CommandText property and reuse the OdbcCommand object. However, you must close the OdbcDataReader before you can execute a new or previous command. If execution of the command causes a fatal OdbcException such as a SQL Server severity level of 20 or more, OdbcConnection may close. However, the user can reopen the connection and continue. Example: The following example uses the ExecuteReader method of the OdbcCommand class, together with the OdbcDataReader and OdbcConnection classes, to select rows from a table. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,1,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public sealed class OdbcConnection : DbConnection, ICloneable Summary: Represents an open connection to a data source. Remarks: An OdbcConnection object represents a unique connection to a data source created by using a connection string or ODBC data source name (DSN). With a client/server database system, it is equivalent to a network connection to the server. Depending on the functionality supported by the native ODBC driver, some methods or properties of an OdbcConnection object may not be available. The OdbcConnection object uses native resources such as ODBC environment and connection handles. You should always explicitly close any open OdbcConnection objects by calling Close or Dispose before the OdbcConnection object goes out of scope, or by placing the connection within a Using statement. Not doing this leaves the freeing of these native resources to garbage collection. It might not free them immediately. This, in turn, can eventually cause the underlying driver to run out of resources or reach a maximum limit. This has resulted in intermittent failures. For example, you might experience Maximum Connections -related errors while many connections are waiting to be deleted by the garbage collector. Explicitly closing the connections allows for a more efficient use of native resources, enhancing scalability and improving overall application performance. Note To deploy high-performance applications, you frequently must use connection pooling. However, when you use the .NET Framework Data Provider for ODBC, you do not have to enable connection pooling because the provider manages this automatically. If one of the Execute methods of the OdbcCommand class causes a fatal OdbcException (for example, a SQL Server severity level of 20 or greater), the OdbcConnection may close. However, the user can reopen the connection and continue. An application that creates an instance of the OdbcConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. OdbcConnection creates security demands by using the OdbcPermission object. Users can verify that their code has sufficient permissions by using the OdbcPermissionAttribute object. Users and administrators can also use the Code Access Security Policy Tool (Caspol.exe) to modify security policy at the computer, user, and enterprise levels. For more information, see Code Access Security and ADO.NET. For more information about handling warning and informational messages from the data source, see Connection Events (ADO.NET). Example: The following example creates an OdbcCommand and an OdbcConnection. The OdbcConnection is opened and set as the Connection property. The example then calls ExecuteNonQuery, and closes the connection. To accomplish this, the ExecuteNonQuery is passed a connection string and a query string that is an SQL INSERT statement. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,1,0,0,1,0,1,0
"Additional online Documentation: Syntax: public override int GetValues( Object[] values ) Parameters valuesType: System.Object() An array of type Object into which to copy the attribute columns. Return Value Type: System.Int32 The number of instances of Object in the array. Implements IDataRecord.GetValues(Object()) Summary: Populates an array of objects with the column values of the current row. Remarks: For most applications, the GetValues method provides an efficient means for retrieving all columns, instead of retrieving each column individually. You can pass an Object array that contains fewer than the number of columns that are contained in the resulting row. Only the amount of data the Object array holds is copied to the array. You can also pass an Object array whose length is more than the number of columns that are contained in the resulting row. This method returns DBNull for null database columns.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public override string ToString() Return Value Type: System.String A string representing the InfoMessage event. Summary: Retrieves a string representation of the InfoMessage event.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static readonly string Tables Summary: A constant for use with the GetSchema method that represents the Tables collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static class OdbcMetaDataColumnNames Summary: Provides static values that are used for the column names in the OdbcMetaDataCollectionNames objects contained in the DataTable. The DataTable is created by the GetSchema method. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class OdbcParameter : DbParameter, ICloneable, IDbDataParameter, IDataParameter Summary: Represents a parameter to an OdbcCommand and optionally, its mapping to a DataColumn. This class cannot be inherited. Remarks: Parameter names are not case sensitive. When querying an Oracle database using the Microsoft OLE DB Provider for Oracle (MSDAORA) and the ODBC .NET Framework Data Provider, using the LIKE clause to query values in fixed-length fields might not return all expected matches. The reason is that when Oracle matches values for fixed-length fields in a LIKE clause, it matches the entire length of the string, including any padding trailing spaces. For example, if a table in an Oracle database contains a field named #Field1# that is defined as char(3), and you enter the value #a# into a row of that table, the following code will not return the row.  This is because Oracle stores the column value as #a # (padding #a#, with trailing spaces, to the fixed field length of 3), which Oracle does not treat as a match for the parameter value of #a# in the case of a LIKE comparison of fixed-length fields. To resolve this problem, append a percentage (#%#) wildcard character to the parameter value (#a%#), or use an SQL = comparison instead. Example: The following example creates multiple instances of OdbcParameter through the OdbcParameterCollection within the OdbcDataAdapter. These parameters are used to select data from the data source and place the data in the DataSet. This example assumes that a DataSet and an OdbcDataAdapter have already been created by using the appropriate schema, commands, and connection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Summary: Adds elements to the end of the OdbcParameterCollection.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class OdbcTransaction : DbTransaction Summary: Represents an SQL transaction to be made at a data source. This class cannot be inherited. Remarks: The application creates an OdbcTransaction object by calling BeginTransaction on the OdbcConnection object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction) are performed on the OdbcTransaction object. Example: The following example creates an OdbcConnection and an OdbcTransaction. It also demonstrates how to use the BeginTransaction, Commit, and Rollback methods. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,1,1,0,1,0
"Additional online Documentation: Syntax: public override float GetFloat( int ordinal ) Parameters ordinalType: System.Int32 The zero-based column ordinal. Return Value Type: System.Single The value of the specified column. Implements IDataRecord.GetFloat(Int32) Summary: Gets the value of the specified column as a single-precision floating-point number. Remarks: No conversions are performed. Therefore, the data retrieved must already be a single-precision floating-point number. Call IsDBNull to look for null values before calling this method.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Summary: Gets the value of a column in its native format.",1,0,0,0,0,1,0,0,0,0,1,1
"Additional online Documentation: Syntax: bool ICollection.IsSynchronized { get; } Property Value Type: System.Boolean true if access to the collection is synchronized (thread safe); otherwise, false. The default is false. Implements ICollection.IsSynchronized Summary: For a description of this member, see IsSynchronized. Remarks: This member is an explicit interface member implementation. It can be used only when the OleDbErrorCollection instance is cast to an ICollection interface.",1,0,1,0,0,0,0,0,0,0,0,0
"The character used in a LIKE clause to escape the character returned for the DBLITERAL_LIKE_PERCENT literal. For example, if a percent sign (%) is used to match zero or more characters and this is a backslash (\\), the characters #abc\\%%# match all character values that start with #abc%#. Some SQL dialects support a clause (the ESCAPE clause) that can be used to override this value. Maps to DBLITERAL_ESCAPE_PERCENT_PREFIX.",1,0,0,0,0,0,1,0,1,0,0,0
"A user name in a text command. Maps to DBLITERAL_USER_NAME.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] [AttributeUsageAttribute(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Constructor|AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public sealed class OleDbPermissionAttribute : DBDataPermissionAttribute Summary: Associates a security action with a custom security attribute. Remarks: This class is intended for future use when the .NET Framework Data Provider for OLE DB is enabled for partial trust scenarios. The .NET Framework Data Provider for OLE DB currently requires FullTrust permission. Currently, using the OleDbPermissionAttribute class has no effect. For more information, see Code Access Security and ADO.NET. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public sealed class OleDbRowUpdatedEventArgs : RowUpdatedEventArgs Summary: Provides data for the RowUpdated event. Remarks: The RowUpdated event is raised when an Update to a row is completed. When using Update, there are two events that occur for each data row updated. The order of execution is as follows: The values in the DataRow are moved to the parameter values. The OnRowUpdating event is raised. The command executes. If the command is set to FirstReturnedRecord, then the first returned result is placed in the DataRow. If there are output parameters, they are placed in the DataRow. The OnRowUpdated event is raised. AcceptChanges is called. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,1,1,0,0,0,0,0,1
"A 64-bit signed integer (DBTYPE_I8). This maps to Int64.",1,0,0,0,1,0,1,0,0,0,0,0
"Date data, stored as a double (DBTYPE_DATE). The whole portion is the number of days since December 30, 1899, and the fractional portion is a fraction of a day. This maps to DateTime.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Copies all rows from a data source to a destination table specified by the DestinationTableName property of the SqlBulkCopy object. Remarks: If multiple active result sets (MARS) is disabled, WriteToServer makes the connection busy. If MARS is enabled, you can interleave calls to WriteToServer with other commands in the same connection.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the SqlBulkCopyColumnMapping class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class SqlBulkCopyColumnMappingCollection : CollectionBase Summary: Collection of SqlBulkCopyColumnMapping objects that inherits from CollectionBase. Remarks: Column mappings define the mapping between data source and the target table. If mappings are not defined-that is, the ColumnMappings collection is empty-the columns are mapped implicitly based on ordinal position. For this to work, source and target schemas must match. If they do not, an InvalidOperationException is thrown. If the ColumnMappings collection is not empty, not every column present in the data source has to be specified. Those not mapped by the collection are ignored. You can refer to source and target columns by either name or ordinal. You can mix by-name and by-ordinal column references in the same mappings collection. Example: The following example bulk copies data from a source table in the AdventureWorks sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. SqlBulkColumnMapping are added to the SqlBulkColumnMappingCollection for the SqlBulk object to create a column map for the bulk copy. Important This sample will not run unless you have created the work tables as described in Bulk  Example Setup (ADO.NET). This code is provided to demonstrate the syntax for using SqlBulk only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL INSERT . SELECT statement to copy the data. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this SqlCommand.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class SqlConnection : DbConnection, ICloneable Summary: Represents an open connection to a SQL Server database. This class cannot be inherited. Remarks: A SqlConnection object represents a unique session to a SQL Server data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with SqlDataAdapter and SqlCommand to increase performance when connecting to a Microsoft SQL Server database. For all third-party SQL server products, and other OLE DB-supported data sources, use OleDbConnection. When you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor. See ConnectionString for a list of the keywords in a connection string. If the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling Close or Dispose. Close and Dispose are functionally equivalent. If the connection pooling value Pooling is set to true or yes, the underlying connection is returned back to the connection pool. On the other hand, if Pooling is set to false or no, the underlying connection to the server is actually closed. Note Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see SQL Server Connection Pooling (ADO.NET). To ensure that connections are always closed, open the connection inside of a using block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.  Note To deploy high-performance applications, you must use connection pooling. When you use the .NET Framework Data Provider for SQL Server, you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings. For more information, see SQL Server Connection Pooling (ADO.NET). If a SqlException is generated by the method executing a SqlCommand, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue. An application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the SqlClientPermission object. Users can verify that their code has sufficient permissions by using the SqlClientPermissionAttribute object. Users and administrators can also use the Caspol.exe (Code Access Security Policy Tool) to modify security policy at the machine, user, and enterprise levels. For more information, see Security in the .NET Framework. For an example demonstrating how to use security demands, see Code Access Security and ADO.NET. Note If you are using Microsoft .NET Framework version 1.0, the FullTrust named permission set is required to connect to SQL Server by using Open. This requirement does not apply if you are using .NET Framework version 1.1 or later. For more information, see Requesting Permissions and Named Permission Sets. For more information about handling warning and informational messages from the server, see Connection Events (ADO.NET). SQL Server engine errors and error messages are documented in SQL Server Books Online. Caution ADO.NET 2.0 does not support Asynchronous commands over shared memory for SQL Server 2000 or lower. However, you can force TCP instead of shared memory. You can do that by prefixing tcp: to the server name in the connection string or you can use localhost. Topic Location How to: Create Connections to SQL Server Databases Data Access in Visual Studio How to: Create Connections to SQL Server Databases Data Access in Visual Studio Example: The following example creates a SqlCommand and a SqlConnection. The SqlConnection is opened and set as the Connection for the SqlCommand. The example then calls ExecuteNonQuery. To accomplish this, the ExecuteNonQuery is passed a connection string and a query string that is a Transact-SQL INSERT statement. The connection is closed automatically when the code exits the using block. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,1,0,1,0
"Additional online Documentation: Syntax: public static void ClearAllPools() Summary: Empties the connection pool. Remarks: ClearAllPools resets (or empties) the connection pool. If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when Close is called on them.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SettingsBindableAttribute(true)] public override string ConnectionString { get; set; } Property Value Type: System.String The connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string. Implements IDbConnection.ConnectionString Summary: Gets or sets the string used to open a SQL Server database. Remarks: The ConnectionString is similar to an OLE DB connection string, but is not identical. Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if the Persist Security Info value is set to false (default). The .NET Framework Data Provider for SQL Server does not persist or return the password in a connection string unless you set Persist Security Info to true. You can use the ConnectionString property to connect to a database. The following example illustrates a typical connection string.  Use the new SqlConnectionStringBuilder to construct valid connection strings at run time. For more information, see Connection String Builders (ADO.NET). The ConnectionString property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. SqlConnection properties return only those settings that are contained in the ConnectionString. To connect to a local computer, specify #(local)# for the server. If a server name is not specified, a connection will be attempted to the default instance on the local computer. Resetting the ConnectionString on a closed connection resets all connection string values (and related properties) including the password. For example, if you set a connection string that includes #Database= AdventureWorks#, and then reset the connection string to #Data Source=myserver;Integrated Security=true#, the Database property is no longer set to #AdventureWorks#. The connection string is parsed immediately after being set. If errors in syntax are found when parsing, a runtime exception, such as ArgumentException, is generated. Other errors can be found only when an attempt is made to open the connection. The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation mark character used to enclose the value must be doubled every time it occurs within the value. To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Using .NET Framework version 1.1 or later, single or double quotation marks may be used within a connection string without using delimiters (for example, Data Source= my'Server or Data Source= my#Server), unless a quotation mark character is the first or last character in the value. Keywords are not case sensitive. The following table lists the valid names for keyword values within the ConnectionString. Keyword Default Description Addr N/A Synonym of Data Source. Address N/A Synonym of Data Source. App N/A Synonym of Application Name. Application Name N/A The name of the application, or '.NET SQLClient Data Provider' if no application name is provided. An application name can be 128 characters or less. Asynchronous Processing -or- Async 'false' When true, enables asynchronous operation support. Recognized values are true, false, yes, and no. AttachDBFilename -or- Extended Properties -or- Initial File Name N/A The name of the primary database file, including the full path name of an attachable database. AttachDBFilename is only supported for primary data files with an .mdf extension. If the value of the AttachDBFileName key is specified in the connection string, the database is attached and becomes the default database for the connection. If this key is not specified and if the database was previously attached, the database will not be reattached. The previously attached database will be used as the default database for the connection. If this key is specified together with the AttachDBFileName key, the value of this key will be used as the alias. However, if the name is already used in an attached database, the connection will fail. The path may be absolute or relative by using the DataDirectory substitution string. If DataDirectory is used, the database file must exist within a subdirectory of the directory pointed to by the substitution string. Note Remote server, HTTP, and UNC path names are not supported. The database name must be specified with the keyword 'database' (or one of its aliases) as in the following: #AttachDbFileName=|DataDirectory|\\data\\YourDB.mdf;integrated security=true;database=YourDatabase# An error will be generated if a log file exists in the same directory as the data file and the 'database' keyword is used when attaching the primary data file. In this case, remove the log file. Once the database is attached, a new log file will be automatically generated based on the physical path. Connection Lifetime -or- Load Balance Timeout 0 When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by Connection Lifetime. This is useful in clustered configurations to force load balancing between a running server and a server just brought online. A value of zero (0) causes pooled connections to have the maximum connection timeout. Connect Timeout -or- Connection Timeout -or- Timeout 15 The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error. Valid values are greater than or equal to 0 and less than or equal to 2147483647. Context Connection 'false' true if an in-process connection to SQL Server should be made. Current Language -or- Language N/A Sets the language used for database server warning or error messages. The language name can be 128 characters or less. Data Source -or- Server -or- Address -or- Addr -or- Network Address N/A The name or network address of the instance of SQL Server to which to connect. The port number can be specified after the server name: server=tcp:servername, portnumber When specifying a local instance, always use (local). To force a protocol, add one of the following prefixes: np:(local), tcp:(local), lpc:(local) Data Source must use the TCP format or the Named Pipes format. TCP format is as follows: tcp:<host name>\\<instance name> tcp:<host name>,<TCP/IP port number> The TCP format must start with the prefix #tcp:# and is followed by the database instance, as specified by a host name and an instance name. The host name MUST be specified in one of the following ways: NetBIOSName IPv4Address IPv6Address The instance name is used to resolve to a particular TCP/IP port number on which a database instance is hosted. Alternatively, specifying a TCP/IP port number directly is also allowed. If both instance name and port number are not present, the default database instance is used. The Named Pipes format is as follows: np:\\\\<host name>\\pipe\\<pipe name> The Named Pipes format MUST start with the prefix #np:# and is followed by a named pipe name. The host name MUST be specified in one of the following ways: NetBIOSName IPv4Address IPv6Address The pipe name is used to identify the database instance to which the .NET Framework application will be connected. If the value of the Network key is specified, the prefixes #tcp:# and #np:# should not be specified. Note ADO.NET 2.0 does not support asynchronous commands over shared memory for SQL Server 2000 or earlier. However, you can force the use of TCP instead of shared memory, either by prefixing tcp: to the server name in the connection string, or by using localhost. Encrypt 'false' When true, SQL Server uses SSL encryption for all data sent between the client and server if the server has a certificate installed. Recognized values are true, false, yes, and no. Enlist 'true' true indicates that the SQL Server connection pooler automatically enlists the connection in the creation thread's current transaction context. Failover Partner N/A The name of the failover partner server where database mirroring is configured. If the value of this key is ##, then Initial Catalog must be present, and its value must not be ##. The server name can be 128 characters or less. If you specify a failover partner but the failover partner server is not configured for database mirroring and the primary server (specified with the Server keyword) is not available, then the connection will fail. If you specify a failover partner and the primary server is not configured for database mirroring, the connection to the primary server (specified with the Server keyword) will succeed if the primary server is available. The Failover Partner keyword is not supported by .NET Framework version 1.0 or 1.1. Initial Catalog -or- Database N/A The name of the database. The database name can be 128 characters or less. Integrated Security -or- Trusted_Connection 'false' When false, User ID and Password are specified in the connection. When true, the current Windows account credentials are used for authentication. Recognized values are true, false, yes, no, and sspi (strongly recommended), which is equivalent to true. If User ID and Password are specified and Integrated Security is set to true, the User ID and Password will be ignored and Integrated Security will be used. Min Pool Size 0 The minimum number of connections that are allowed in the pool. Valid values are greater than or equal to 0. Zero (0) in this field means no minimum connections are initially opened. Values that are greater than Max Pool Size generate an error. Max Pool Size 100 The maximum number of connections that are allowed in the pool. Valid values are greater than or equal to 1. Values that are less than Min Pool Size generate an error. MultipleActiveResultSets 'false' When true, an application can maintain multiple active result sets (MARS). When false, an application must process or cancel all result sets from one batch before it can execute any  batch on that connection. Recognized values are true and false. The keyword is not supported by .NET Framework version 1.0 or 1.1. Network Library -or- Network -or- Net N/A The network library used to establish a connection to an instance of SQL Server. Supported values include: dbnmpntw (Named Pipes) dbmsrpcn (Multiprotocol, Windows RPC) dbmsadsn (Apple Talk) dbmsgnet (VIA) dbmslpcn (Shared Memory) dbmsspxn (IPX/SPX) dbmssocn (TCP/IP) Dbmsvinn (Banyan Vines) The corresponding network DLL must be installed on the system to which you connect. If you do not specify a network and you use a local server (for example, #.# or #(local)#), shared memory is used. In this example, the network library is Win32 Winsock TCP/IP (dbmssocn), and 1433 is the port being used.    Packet Size 8192 Size in bytes of the network packets used to communicate with an instance of SQL Server. The packet size can be greater than or equal to 512 and less than or equal to 32767. Password -or- PWD N/A The password for the SQL Server account logging on. Not recommended. To maintain a high level of security, we strongly recommend that you use the Integrated Security or Trusted_Connection keyword instead. The password must be 128 characters or less. Persist Security Info -or- PersistSecurityInfo 'false' When set to false or no (strongly recommended), security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Resetting the connection string resets all connection string values including the password. Recognized values are true, false, yes, and no. Pooling 'true' When the value of this key is set to true, any newly created connection will be added to the pool when closed by the application. In a next attempt to open the same connection, that connection will be drawn from the pool. Connections are considered the same if they have the same connection string. Different connections have different connection strings. The value of this key can be #true#, #false#, #yes#, or #no#. Replication 'false' true if replication is supported using the connection. Transaction Binding Implicit Unbind Controls connection association with an enlisted System.Transactions transaction. Possible values are: Transaction Binding=Implicit Unbind; Transaction Binding=Explicit Unbind; Implicit Unbind causes the connection to detach from the transaction when it ends. After detaching, additional requests on the connection are performed in autocommit mode. The System.Transactions.Transaction.Current property is not checked when executing requests while the transaction is active. After the transaction has ended, additional requests are performed in autocommit mode. If the system ends the transaction (in the scope of a using block) before the last command completes, it will throw InvalidOperationException. Explicit Unbind causes the connection to remain attached to the transaction until the connection is closed or an explicit SqlConnection.TransactionEnlist(null) is called. Beginning in .NET Framework version 4, changes to Implicit Unbind make Explicit Unbind obsolete. An InvalidOperationException is thrown if Transaction.Current is not the enlisted transaction or if the enlisted transaction is not active. TrustServerCertificate 'false' When set to true, SSL is used to encrypt the channel when bypassing walking the certificate chain to validate trust. If TrustServerCertificate is set to true and Encrypt is set to false, the channel is not encrypted. Recognized values are true, false, yes, and no. For more information, see Connection String Syntax (ADO.NET). Type System Version N/A A string value that indicates the type system the application expects. Possible values are: Type System Version=SQL Server 2000; Type System Version=SQL Server 2005; Type System Version=SQL Server 2008; Type System Version=Latest; When set to SQL Server 2000, the SQL Server 2000 type system is used. The following conversions are performed when connecting to a SQL Server 2005 instance: XML to NTEXT UDT to VARBINARY VARCHAR(MAX), NVARCHAR(MAX) and VARBINARY(MAX) to TEXT, NEXT and IMAGE respectively. When set to SQL Server 2005, the SQL Server 2005 type system is used. No conversions are made for the current version of ADO.NET. When set to Latest, the latest version than this client-server pair can handle is used. This will automatically move forward as the client and server components are upgraded. User ID -or- UID -or- N/A The SQL Server login account. Not recommended. To maintain a high level of security, we strongly recommend that you use the Integrated Security or Trusted_Connection keywords instead. The user ID must be 128 characters or less. User Instance 'false' A value that indicates whether to redirect the connection from the default SQL Server Express instance to a runtime-initiated instance running under the account of the caller. Workstation ID -or- WSID The local computer name The name of the workstation connecting to SQL Server. The ID must be 128 characters or less. The following list contains the valid names for connection pooling values within the ConnectionString. For more information, see SQL Server Connection Pooling (ADO.NET). Connection Lifetime (or Load Balance Timeout) Enlist Max Pool Size Min Pool Size Pooling When you are setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'. Integer values are represented as strings. Note The .NET Framework Data Provider for SQL Server uses its own protocol to communicate with SQL Server. Therefore, it does not support the use of an ODBC data source name (DSN) when connecting to SQL Server because it does not add an ODBC layer. Note Universal data link (UDL) files are not supported for the .NET Framework Data Provider for SQL Server. Caution In this release, the application should use caution when constructing a connection string based on user input (for example when retrieving user ID and password information from a dialog box, and appending it to the connection string). The application should make sure that a user cannot embed additional connection string parameters in these values (for example, entering a password as #validpassword;database=somedb# in an attempt to attach to a different database). If you need to construct connection strings based on user input, use the new SqlConnectionStringBuilder, which validates the connection string and helps to eliminate this problem. See Connection String Builders (ADO.NET) for more information. Example: The following example creates a SqlConnection and sets the ConnectionString property before opening the connection.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public event SqlInfoMessageEventHandler InfoMessage Summary: Occurs when SQL Server returns a warning or informational message. Remarks: Clients that want to process warnings or informational messages sent by the server should create an SqlInfoMessageEventHandler delegate to listen to this event. The InfoMessage event occurs when a message with a severity of 10 or less is returned by SQL Server. Messages that have a severity between 11 and 20 raise an error and messages that have a severity over 20 causes the connection to close. For more information on SQL Server error levels, see #Database Engine Error Severities# in SQL Server 2005 Books Online. For more information and an example, see Connection Events (ADO.NET).",0,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public int PacketSize { get; set; } Property Value Type: System.Int32 The value of the PacketSize property, or 8000 if none has been supplied. Summary: Gets or sets the size in bytes of the network packets used to communicate with an instance of SQL Server. Remarks: This property corresponds to the #Packet Size# key within the connection string.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected SqlConnection Connection { get; } Property Value Type: System.Data.SqlClient.SqlConnection The SqlConnection associated with the SqlDataReader. Summary: Gets the SqlConnection associated with the SqlDataReader.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Gets the value of a column in its native format.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public override int RecordsAffected { get; } Property Value Type: System.Int32 The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements. Implements IDataReader.RecordsAffected IDataReader.RecordsAffected Summary: Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement. Remarks: The RecordsAffected property is not set until all rows are read and you close the SqlDataReader. The value of this property is cumulative. For example, if two records are inserted in batch mode, the value of RecordsAffected will be two. IsClosed and RecordsAffected are the only properties that you can call after the SqlDataReader is closed.",1,0,0,0,0,1,0,0,0,0,1,0
"Additional online Documentation: Syntax: public event OnChangeEventHandler OnChange Summary: Occurs when a notification is received for any of the commands associated with this SqlDependency object. Remarks: OnChange occurs when the results for the associated command change. If you are not using OnChange, you can check the HasChanges property to determine whether the query results have changed. The OnChange event does not necessarily imply a change in the data. Other circumstances, such as time-out expired and failure to set the notification request, also generate OnChange.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public sealed class SqlInfoMessageEventArgs : EventArgs Summary: Provides data for the InfoMessage event. Remarks: The InfoMessage event contains a SqlErrorCollection collection which contains the warnings sent from the server. An InfoMessage event is generated when a SQL Server message with a severity level of 10 or less occurs. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,0,0,1,0
"Additional online Documentation: Syntax: public SqlNotificationSource Source { get; } Property Value Type: System.Data.SqlClient.SqlNotificationSource A value that indicates the source that generated the notification. Summary: Gets a value that indicates the source that generated the notification.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public delegate void SqlRowsCopiedEventHandler( Object sender, SqlRowsCopiedEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Data.SqlClient.SqlRowsCopiedEventArgs A SqlRowsCopiedEventArgs object that contains the event data. Summary: Represents the method that handles the SqlRowsCopied event of a SqlBulkCopy.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public delegate void SqlRowUpdatedEventHandler( Object sender, SqlRowUpdatedEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Data.SqlClient.SqlRowUpdatedEventArgs The SqlRowUpdatedEventArgs that contains the event data. Summary: Represents the method that will handle the RowUpdated event of a SqlDataAdapter. Remarks: The handler is not required to perform any action, and your code should avoid generating exceptions or allowing exceptions to propagate to the calling method. Any exceptions that do reach the caller are ignored. When you create a SqlRowUpdatedEventArgs delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see Events and Delegates.",1,0,0,0,0,0,0,1,0,0,1,1
"Additional online Documentation: Syntax: public static SqlBoolean LessThan( SqlBoolean x, SqlBoolean y ) Parameters xType: System.Data.SqlTypes.SqlBoolean A SqlBoolean structure. yType: System.Data.SqlTypes.SqlBoolean A SqlBoolean structure. Return Value Type: System.Data.SqlTypes.SqlBoolean A SqlBoolean that is true if the first instance is less than the second instance; otherwise, false. Summary: Compares two instances of SqlBoolean to determine whether the first is less than the second. Remarks: If either instance of x or y is null, the value of the SqlBoolean will be null.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Converts a SqlBoolean to a specified structure.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public struct SqlByte : INullable, IComparable, IXmlSerializable Summary: Represents an 8-bit unsigned integer, in the range of 0 through 255, to be stored in or retrieved from a database. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public static SqlBoolean operator ==( SqlByte x, SqlByte y ) Parameters xType: System.Data.SqlTypes.SqlByte A SqlByte structure.  yType: System.Data.SqlTypes.SqlByte A SqlByte structure. Return Value Type: System.Data.SqlTypes.SqlBoolean A SqlBoolean that is True if the two instances are equal or False if the two instances are not equal. If either instance of SqlByte is null, the Value of the SqlBoolean will be Null. Summary: Performs a logical comparison of two SqlByte structures to determine whether they are equal.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Summary: Converts a parameter to a SqlByte.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public char[] Buffer { get; } Property Value Type: System.Char() Returns a reference to the internal buffer. For SqlChars instances created on top of unmanaged pointers, it returns a managed copy of the internal buffer. Summary: Returns a reference to the internal buffer. Remarks: Returns a null reference for null value SqlChars. Throws an InvalidOperationException for stream-wrapped instances of SqlChars.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public bool IsNull { get; } Property Value Type: System.Boolean true if the SqlChars is null. Otherwise, false. Implements INullable.IsNull Summary: Gets a Boolean value that indicates whether this SqlChars is null. Remarks: The default value is false. For more information, see Handling Null Values (ADO.NET).",1,0,0,0,0,0,1,0,0,0,0,1
"Specifies that SqlString comparisons must ignore case.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static SqlDecimal Divide( SqlDecimal x, SqlDecimal y ) Parameters xType: System.Data.SqlTypes.SqlDecimal A SqlDecimal structure.  yType: System.Data.SqlTypes.SqlDecimal A SqlDecimal structure. Return Value Type: System.Data.SqlTypes.SqlDecimal A new SqlDecimal structure whose Value property contains the results of the division. Summary: The division operator calculates the results of dividing the first SqlDecimal operand by the second.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public SqlByte ToSqlByte() Return Value Type: System.Data.SqlTypes.SqlByte A SqlByte structure whose Value equals the Value of this SqlDouble structure. Summary: Converts this SqlDouble structure to SqlByte.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override void WriteByte( byte value ) Parameters valueType: System.Byte The byte to write to the stream. Summary: Writes a byte to the current position in the stream and advances the position within the stream by one byte. Remarks: Use the CanWrite property to determine whether the current instance supports writing.",0,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public struct SqlGuid : INullable, IComparable, IXmlSerializable Summary: Represents a GUID to be stored in or retrieved from a database. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Converts to and from a SqlInt16.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public static SqlInt16 operator *( SqlInt16 x, SqlInt16 y ) Parameters xType: System.Data.SqlTypes.SqlInt16 A SqlInt16 structure.  yType: System.Data.SqlTypes.SqlInt16 A SqlInt16 structure. Return Value Type: System.Data.SqlTypes.SqlInt16 A SqlInt16 structure whose Value contains the product of the two parameters. Summary: Computes the product of the two SqlInt16 parameters.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static SqlInt16 Subtract( SqlInt16 x, SqlInt16 y ) Parameters xType: System.Data.SqlTypes.SqlInt16 A SqlInt16 structure.  yType: System.Data.SqlTypes.SqlInt16 A SqlInt16 structure. Return Value Type: System.Data.SqlTypes.SqlInt16 A SqlInt16 structure whose Value property contains the results of the subtraction. Summary: Subtracts the second SqlInt16 parameter from the first.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static SqlInt64 operator |( SqlInt64 x, SqlInt64 y ) Parameters xType: System.Data.SqlTypes.SqlInt64 A SqlInt64 structure.  yType: System.Data.SqlTypes.SqlInt64 A SqlInt64 structure. Return Value Type: System.Data.SqlTypes.SqlInt64 A SqlInt64 structure that contains the results of the bitwise OR operation. Summary: Computes the bitwise OR of its two SqlInt64 operands.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static SqlMoney Add( SqlMoney x, SqlMoney y ) Parameters xType: System.Data.SqlTypes.SqlMoney A SqlMoney structure.  yType: System.Data.SqlTypes.SqlMoney A SqlMoney structure. Return Value Type: System.Data.SqlTypes.SqlMoney A new SqlMoney stucture whose Value contains the sum of the two SqlMoney parameters. Summary: Calculates the sum of the two SqlMoney parameters.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static SqlBoolean operator <=( SqlMoney x, SqlMoney y ) Parameters xType: System.Data.SqlTypes.SqlMoney A SqlMoney structure.  yType: System.Data.SqlTypes.SqlMoney A SqlMoney structure. Return Value Type: System.Data.SqlTypes.SqlBoolean A SqlBoolean that is True if the first instance is less than or equal to the second instance. Otherwise, False. If either instance of SqlMoney is null, the Value of the SqlBoolean will be Null. Summary: Performs a logical comparison of the two SqlMoney parameters to determine whether the first is less than or equal to the second.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public static SqlMoney operator -( SqlMoney x, SqlMoney y ) Parameters xType: System.Data.SqlTypes.SqlMoney A SqlMoney structure.  yType: System.Data.SqlTypes.SqlMoney A SqlMoney structure. Return Value Type: System.Data.SqlTypes.SqlMoney A new SqlMoney structure that contains the results of the subtraction. Summary: The subtraction operator subtracts the second SqlMoney parameter from the first.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the SqlNullValueException class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the SqlSingle structure using the supplied floating point value.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public static SqlSingle Divide( SqlSingle x, SqlSingle y ) Parameters xType: System.Data.SqlTypes.SqlSingle A SqlSingle structure.  yType: System.Data.SqlTypes.SqlSingle A SqlSingle structure. Return Value Type: System.Data.SqlTypes.SqlSingle A SqlInt64 structure that contains the results of the division. Summary: Divides the first SqlSingle structure by the second.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Converts to and from a SqlString.",0,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public static SqlBoolean operator <( SqlString x, SqlString y ) Parameters xType: System.Data.SqlTypes.SqlString A SqlString.  yType: System.Data.SqlTypes.SqlString A SqlString. Return Value Type: System.Data.SqlTypes.SqlBoolean A SqlBoolean that is True if the first instance is less than the second instance. Otherwise, False. If either instance of SqlString is null, the Value of the SqlBoolean will be Null. Summary: Performs a logical comparison of the two SqlString operands to determine whether the first is less than the second.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Summary: Initializes a new instance of the SqlTruncateException class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class TypeSmallIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper Summary: The TypeSmallIntSchemaImporterExtension class is not intended for use as a stand-alone component, but as a class from which other classes derive standard functionality. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the CompatibleFrameworkMissingException class.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class DownloadFileGroupCompletedEventArgs : AsyncCompletedEventArgs Summary: Describes a file download that has recently completed. Example: The following code example downloads a file group named HelpFiles, and displays download progress in a status bar. This example requires that you deploy a Windows Forms application, and that your main form has a StatusStrip control, and a ToolStripStatusLabel control named downloadStatus. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public delegate void DownloadFileGroupCompletedEventHandler( Object sender, DownloadFileGroupCompletedEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Deployment.Application.DownloadFileGroupCompletedEventArgs A DownloadFileGroupCompletedEventArgs that contains the event data. Summary: Represents the method that will handle the DownloadFileGroupCompleted event of an ApplicationDeployment. Remarks: When you create a DownloadFileGroupCompletedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates.",1,0,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: public class DownloadProgressChangedEventArgs : ProgressChangedEventArgs Summary: Provides data for the DownloadProgressChanged event. Remarks: In a console application, since events are assigned to threads out of a thread pool, you might receive update progress events out of order, with a subsequent event showing a decrease compared to a previous event. You will not see such behavior in a Windows Forms application, because events in Windows Forms are processed sequentially out of the UI thread's message queue. Example: The following code example demonstrates the use of DownloadProgressChangedEventArgs in the context of an application that uses InPlaceHostingManager to download and install a ClickOnce application programmatically. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public long TotalBytesToDownload { get; } Property Value Type: System.Int64 An Int64 representing the total size of the download, in bytes. Summary: Gets the total number of bytes for the download operation.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Uri SupportUri { get; } Property Value Type: System.Uri A Uri containing the value found in the supportUrl attribute of the deployment manifest's <description> tag. For more information, see ClickOnce Deployment Manifest. Summary: Gets the location of a Web page users can visit to obtain product support for the ClickOnce application.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class InvalidDeploymentException : DeploymentException Summary: Indicates that ClickOnce could not read either the deployment or application manifests. Remarks: InvalidDeploymentException indicates the existence of a corrupt deployment or application manifest in a ClickOnce application. The error might occur because the manifests are poorly formed, have unrecognized elements for their schemas, or have mismatched digital signatures. You are more likely to have corruption if you manually edit the deployment or application manifest files with a text editor. You can usually correct this problem by regenerating your ClickOnce deployment, which will create new deployment and application manifests. For more detailed debugging steps, see the following links. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class TrustNotGrantedException : DeploymentException Summary: Indicates that the application does not have the appropriate level of trust to run on the local computer. Remarks: By default, ClickOnce applications are given a level of trust on client computers that prevents them from engaging in potentially malicious activity, such as deleting data from the hard drive or accessing the network. A ClickOnce application can use either permission elevation or Trusted Application Deployment to request a higher level of trust: Permission elevation asks the user to grant the application a higher level of security. Trusted Application Deployment matches the digital signature of the ClickOnce application against a list of trusted publishers on the local machine. TrustNotGrantedException will be thrown if: The application uses permission elevation and the user denies the request for elevated trust; or The application uses Trusted Application Deployment and the digital certificate used to sign the application is not listed as a trusted publisher on the local machine.If you have deployed an update to an application, and the update uses more permissions than the previous version, and ClickOnce throws a TrustNotGrantedException, the new version will not install. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: public class ArrayEditor : CollectionEditor Summary: Provides a user interface for editing arrays at design time. Remarks: This editor can be used to edit arrays within the design-time environment. Example: The following code example demonstrates applying the System.ComponentModel.EditorAttribute to a property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class CollectionEditor : UITypeEditor Summary: Provides a user interface that can edit most types of collections at design time. Remarks: Notes to Inheritors This editor can edit collections that have an Item property. The editor can determine the type of the collection from the Item property, if it exists. If the collection does not have this property, or if you want to provide collections of more than one type, you can override certain protected members of this class to customize the editor to support other types of collections. Example: The following code example uses an EditorAttribute to associate the CollectionEditor with a property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: protected virtual void CancelChanges() Summary: Cancels changes to the collection. Remarks: Notes to Inheritors Override this method if you need to perform additional processing when changes to the collection are canceled.",1,0,1,0,0,0,0,0,0,0,0,0
"Push model smart tags only.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: void IDesignerFilter.PostFilterEvents( IDictionary events ) Parameters eventsType: System.Collections.IDictionary The EventDescriptor objects that represent the events of the class of the component. The keys in the dictionary of events are event names. Implements IDesignerFilter.PostFilterEvents(IDictionary) Summary: For a description of this member, see the IDesignerFilter.PostFilterEvents method. Remarks: This member is an explicit interface member implementation. It can be used only when the ComponentDesigner instance is cast to an IDesignerFilter interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual DesignerActionItemCollection GetSortedActionItems() Return Value Type: System.ComponentModel.Design.DesignerActionItemCollection A DesignerActionItem array that contains the items in this list. Summary: Returns the collection of DesignerActionItem objects contained in the list. Remarks: The virtual GetSortedActionItems method is implemented to return, in the expected display order, a collection of objects derived from the DesignerActionItem class. These items can be of the following specific types. Type Description DesignerActionHeaderItem The group label, displayed in bold. DesignerActionTextItem A label, displayed in a plain font. DesignerActionPropertyItem A panel item associated with a property. May also display a check mark or property editor associated with the underlying property. DesignerActionMethodItem A panel item displayed as a hyperlink and associated with a method. For every DesignerActionMethodItem and DesignerActionPropertyItem, a corresponding method or property must be added to the programmer-supplied class derived from the DesignerActionList class. Each method and property item is displayed as an active entry; interacting with it through the user interface (UI) invokes the corresponding method or property, respectively. Property items have a special panel-item interface that enables display and manipulation of their corresponding property values. For more information, see the DesignerActionPropertyItem class. The order of the items in the returned array reflects the order that they will appear in the panel. The items are grouped according to the Category property, using the following rules: The category of the first item encountered signifies the start of the first group. That group continues as long as each succeeding item is of the same category. When an item of a different, new category is encountered, a new group is created and the item is placed in it. If an item has a type different than the current group, but that category has already been used, the item is placed in the matching existing category. If an item does not have a category, it is placed in a miscellaneous group at the end of the panel. This group also contains items whose AllowAssociate property is set to false. The GetSortedActionItems method is called when the panel is first created. You must call the Refresh method to update the list of items displayed in the panel. Example: The following code example demonstrates how to create a collection of DesignerActionItem objects. For a complete explanation of this code example, see How to: Attach Smart Tags to a Windows Forms Component.",1,0,1,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public class DesignerActionListsChangedEventArgs : EventArgs Summary: Provides data for the DesignerActionListsChanged event. Remarks: A DesignerActionListsChanged event occurs when a DesignerActionList is added or removed from a managed collection of such lists. This event is not raised when an individual list element changes its value. The DesignerActionListsChanged event is generated by the DesignerActionService class when its Remove, Add, and Clear methods are executed. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,1,1,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#CreateComponent has been replaced by CreateInstance and will be removed after Beta2#)] protected internal virtual IComponent CreateComponent( Type componentType ) Parameters componentTypeType: System.Type The type of component to create. Return Value Type: System.ComponentModel.IComponent The newly created component. Summary: Creates an instance of a component. Remarks: The CreateComponent method is called by the design surface's CreateComponent method to create an instance of a component. The component should be created and added to the public container on the design surface.",1,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event LoadedEventHandler Loaded Summary: Occurs when the designer load has completed. Remarks: The Loaded event is raised for successful loads as well as unsuccessful ones. If code in this event handler throws an exception, the designer is unloaded. The LoadedEventArgs object can be used to determine if loading succeeded, and it can also provide a list of errors that occurred during the load. Note Errors can occur for successful loads as well, provided that the serialization system can tolerate errors.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public DesignSurface this[ int index ] { get; } Parameters indexType: System.Int32 The index of the design surface to return. Property Value Type: System.ComponentModel.Design.DesignSurface The design surface at the specified index. Summary: Gets the design surface at the specified index.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public enum DisplayMode Summary: Defines identifiers that indicate the display modes used by ByteViewer. Remarks: The DisplayMode identifiers are used to indicate the display mode used to display each byte sequence. Example: The following code example demonstrates how to use DisplayMode identifiers. This code example is part of a larger example provided for the ByteViewer class.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class ExceptionCollection : Exception Summary: Represents the collection of exceptions. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: string GetTargetAssemblyPath( AssemblyName runtimeOrTargetAssemblyName, string suggestedAssemblyPath, FrameworkName targetFramework ) Parameters runtimeOrTargetAssemblyNameType: System.Reflection.AssemblyName The full assembly name for the runtime or target assembly. suggestedAssemblyPathType: System.String The suggested path from which to load the assembly. targetFrameworkType: System.Runtime.Versioning.FrameworkName The target framework for the designer. Return Value Type: System.String The actual load path for the assembly, or Nothing if the assembly is not loadable. Summary: Determines the load path for the specified assembly in the target framework. Remarks: Gives the designer an opportunity to resolve assemblies that are not project references and that are not part of the .NET Framework redistribution. Also allows the designer to alter paths to prevent any runtime assemblies from being locked.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public InheritanceService() Summary: Initializes a new instance of the InheritanceService class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#This class has been deprecated. Use CodeDomLocalizationProvider instead. http://go.microsoft.com/fwlink/?linkid=14202#)] public class LocalizationExtenderProvider : IExtenderProvider, IDisposable Summary: Provides design-time support for localization features to a root designer. Remarks: LocalizationExtenderProvider can extend an IRootDesigner with a set of properties and methods that provide support for the .NET Framework localization architecture. For more about using resources, see Localization. The localization support architecture enables designers to initialize component properties using resource files that can be swapped at run time to support a variety of languages, culture-specific styles and dynamically configurable features. You can use the methods of this class to enable designers and code generating serializers to load from resources and build initialization code that uses localization features. The default serializers that ship with Visual Studio are already capable of localizing components and controls, but they only do so if they locate support for the .NET Framework localization architecture. To detect the presence of localization support, the serialization system must locate a public Boolean property named #Localizable# on the root designer component. If a serializer finds this property, it searches for a property of type CultureInfo named #Language# to determine the current resource configuration. Default serializers use these properties to determine if it should localize any localizable resources of the component, and if so, what CultureInfo format the resource information should be saved in. Example: The following code example adds a LocalizationExtenderProvider to a component.  The following code example includes an example component and designer. The designer uses a LocalizationExtenderProvider to add localization support properties for the component.   using System; using System.Collections; using System.ComponentModel; using System.ComponentModel.Design; using System.Diagnostics; using System.Drawing; using System.Windows.Forms; using System.Windows.Forms.Design; // This example demonstrates adding localization support to a component hierarchy from a // custom IRootDesigner using the LocalizationExtenderProvider class. namespace LocalizationExtenderProviderExample { // RootViewDesignerComponent is a component associated with the SampleRootDesigner // IRootDesigner that provides LocalizationExtenderProvider localization support. // This derived class is included at the top of this example to enable // easy launching of designer view without having to put the class in its own file. public class RootViewDesignerComponent : RootDesignedComponent { public RootViewDesignerComponent() { } } // The following attribute associates the RootDesignedComponent with the RootDesignedComponent component. [Designer(typeof(SampleRootDesigner), typeof(IRootDesigner))] public class RootDesignedComponent : Component { public RootDesignedComponent() { } } // Example IRootDesigner implementation demonstrates LocalizationExtenderProvider support. internal class SampleRootDesigner : IRootDesigner { // RootDesignerView Control provides a full region designer view for this root designer's associated component. private RootDesignerView m_view; // Stores reference to the LocalizationExtenderProvider this designer adds, in order to remove it on Dispose. private LocalizationExtenderProvider extender; // Internally stores the IDesigner's component reference private IComponent component; // Adds a LocalizationExtenderProvider for the component this designer is initialized to support. public void Initialize(System.ComponentModel.IComponent component) { this.component = component; // If no extender from this designer is active... if( extender == null ) {  } } // Provides a RootDesignerView object that supports ViewTechnology.WindowsForms. object IRootDesigner.GetView(ViewTechnology technology) { if (technology != ViewTechnology.WindowsForms) { throw new ArgumentException(#Not a supported view technology#, #technology#); } if (m_view == null ) { // Create the view control. In this example, a Control of type RootDesignerView is used. // A WindowsForms ViewTechnology view provider requires a class that inherits from Control. m_view = new RootDesignerView(this, this.Component); } return m_view; } // This designer supports the WindowsForms view technology. ViewTechnology[] IRootDesigner.SupportedTechnologies { get { return new ViewTechnology[] {ViewTechnology.WindowsForms}; } } // If a LocalizationExtenderProvider has been added, removes the extender provider. protected void Dispose(bool disposing) { // If an extender has been added, remove it if( extender != null ) { // Disposes of the extender provider. The extender // provider removes itself from the extender provider // service when it is disposed. extender.Dispose(); extender = null; } } // Empty IDesigner interface property and method implementations public System.ComponentModel.Design.DesignerVerbCollection Verbs { get { return null; } } public System.ComponentModel.IComponent Component { get { return this.component; } } public void DoDefaultAction() { } public void Dispose() { } // RootDesignerView is a simple control that will be displayed in the designer window. private class RootDesignerView : Control { private SampleRootDesigner m_designer; private IComponent comp; public RootDesignerView(SampleRootDesigner designer, IComponent component) { m_designer = designer; this.comp = component; BackColor = Color.Blue; Font = new Font(FontFamily.GenericMonospace, 12); } // Displays the name of the component and the name of the assembly of the component // that this root designer is providing support for. protected override void OnPaint(PaintEventArgs pe) { base.OnPaint(pe); if( m_designer != null && comp != null ) { // Draws the name of the component in large letters. pe.Graphics.DrawString(#Root Designer View#, Font, Brushes.Yellow, 8, 4); pe.Graphics.DrawString(#Design Name : #+comp.Site.Name, new Font(#Arial#, 10), Brushes.Yellow, 8, 28); pe.Graphics.DrawString(#Assembly : #+comp.GetType().AssemblyQualifiedName, new Font(#Arial#, 10), Brushes.Yellow, new Rectangle(new Point(8, 44), new Size(ClientRectangle.Width-8, ClientRectangle.Height-44))); // Uses the site of the component to acquire an ISelectionService and sets the property grid focus to the component. ISelectionService selectionService = (ISelectionService)comp.Site.GetService(typeof(ISelectionService)); if( selectionService != null ) selectionService.SetSelectedComponents( new IComponent[] { m_designer.component } ); } } } } } ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public virtual void AddVerb( DesignerVerb verb ) Parameters verbType: System.ComponentModel.Design.DesignerVerb The DesignerVerb to add. Implements IMenuCommandService.AddVerb(DesignerVerb) Summary: Adds a verb to the verb table of the MenuCommandService. Remarks: This verb is available regardless of what designer is currently selected. Unlike menu commands, verbs can define the text that is displayed to the user, but they do not define the placement of the command on the actual menu.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Invokes a command on the local form or in the global environment.",1,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Selector( ObjectSelectorEditor editor ) Parameters editorType: System.ComponentModel.Design.ObjectSelectorEditor The ObjectSelectorEditor. Summary: Initializes a new instance of the ObjectSelectorEditor.Selector class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected Object GetService( Type serviceType ) Parameters serviceTypeType: System.Type The type of service to retrieve. Return Value Type: System.Object An instance of the given service, or Nothing if the service cannot be resolved. Summary: Gets an instance of the requested service.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class DataSourceDescriptor Summary: Implements the basic functionality required by a single data source at the EnvDTE.Project level. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract string Name { get; } Property Value Type: System.String The name of the data source. Summary: When overridden in a derived class, gets the name of the data source. Remarks: The name of the data source must be unique across all data sources at the EnvDTE.Project level.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract string Name { get; } Property Value Type: System.String The name of the group. Summary: When overridden in a derived class, gets the name of the group. Remarks: The name of the group must be unique across all data sources groups at the EnvDTE.Project level.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [GuidAttribute(#ABE5C1F0-C96E-40c4-A22D-4A5CEC899BDC#)] public abstract class DataSourceProviderService Summary: Implements the basic functionality required of a service for providing access to a data source at the EnvDTE.Project level. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string ConnectionString { get; } Property Value Type: System.String The application connection string defined for the connection. Summary: Gets the application connection string defined for the connection. Remarks: The ConnectionString property contains the connection string used by the application for connecting to the data store. You must use the IDataEnvironment.GetDesignTimeConnection method to return a connection string suitable for use in the design environment.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DesignerDataParameter Summary: Represents a parameter for a stored procedure. This class cannot be inherited. Remarks: The DesignerDataParameter class is one of several types that represent the schema of a data store at design-time. These schema items are made available to controls by designers implementing the IDataEnvironment interface. Controls access schema objects by calling the GetConnectionSchema method of the interface. The DesignerDataParameter class represents the parameters required to call a stored procedure in the data store. The DesignerDataStoredProcedure.Parameters property contains a collection of DesignerDataParameter objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,1,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class DesignerDataSchemaClass Summary: Specifies the types of objects that can be retrieved from a data-store schema. This class cannot be inherited. Remarks: The DesignerDataSchemaClass class is one of several types that represent the schema of a data store at design-time. These schema items are made available to controls by designers implementing the IDataEnvironment interface. Controls access schema objects by calling the GetConnectionSchema method of the interface. Use fields from the DesignerDataSchemaClass class when calling the GetSchemaItems method to specify the types of objects you want to retrieve from a data-store schema. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string Name { get; } Property Value Type: System.String The name of the stored procedure. Summary: Gets the name of the stored procedure.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: CodeExpression GetCodeExpression( DesignerDataConnection connection ) Parameters connectionType: System.ComponentModel.Design.Data.DesignerDataConnection The connection to retrieve from the application's configuration file. Return Value Type: System.CodeDom.CodeExpression A CodeExpression object containing the source code required to retrieve a connection string from the application's configuration file. Summary: Returns a code expression that contains the source code required to retrieve a connection string from the application's configuration file.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override void Flush() Summary: Flushes pending changes to the designer loader. Remarks: If the designer loader has not been loaded or has not been marked as modified, the Flush method returns immediately. Otherwise, Flush asks the serialization manager to create a serialization session and then calls PerformFlush.",1,0,0,0,0,1,0,0,0,0,0,0
"The designer loader forces the reload to occur. Normally, a reload occurs only if the IsReloadNeeded() method returns true. This flag bypasses calling this method and always performs the reload.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] public abstract class CodeDomDesignerLoader : BasicDesignerLoader, INameCreationService, IDesignerSerializationService Summary: Provides the base class for implementing a CodeDOM-based designer loader. Remarks: CodeDomDesignerLoader is an abstract class that provides a full designer loader based on the Code Document Object Model (CodeDOM). You provide the CodeDOM parser and generator, and a type resolution service. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum CodeDomLocalizationModel Summary: Determines the localization model to be used by the CodeDom resource adapter.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool RecycleInstances { get; set; } Property Value Type: System.Boolean true if CreateInstance will return the existing instance; false if CreateInstance will create a new instance of a type. The default is false. Summary: Gets or sets a flag indicating whether CreateInstance will always create a new instance of a type. Remarks: If the RecycleInstances property is false, the CreateInstance method will always create a new instance of a type. If RecycleInstances is true, CreateInstance will first search the name table and container for an object of the same name. If such an object exists and is of the same type, CreateInstance will return the existing instance. This second variation is useful for implementing a serializer that applies serialization state to an existing set of objects, rather than always creating a new tree. The Undo command often uses this type of serializer. In the case where the RecycleInstances property is true, the ValidateRecycledTypes property will further modify the behavior of CreateInstance depending on the types of the two objects.",1,0,0,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: event ResolveNameEventHandler IDesignerSerializationManager.ResolveName Implements IDesignerSerializationManager.ResolveName Summary: Occurs when IDesignerSerializationManager.GetName cannot locate the specified name in the serialization manager's name table. Remarks: The ResolveName event is raised when the IDesignerSerializationManager.GetName method is called, but it fails to find the specified name in the serialization manager's name table. This event provides a way for a serializer to demand-create an object so the serializer does not have to order object creation by dependency. This delegate is cleared immediately after serialization or deserialization is complete.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: void IDesignerSerializationManager.SetName( Object instance, string name ) Parameters instanceType: System.Object The object to set the name. nameType: System.String A String used as the name of the object. Implements IDesignerSerializationManager.SetName(Object, String) Summary: Sets the name for the specified object. Remarks: The IDesignerSerializationManager.SetName method provides a way to set the name of an existing object. This enables creation of an instance of the object through a call to the IDesignerSerializationManager.GetInstance method, avoiding the overhead of the CreateInstance method.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class TypedDataSetGenerator Summary: Generates a strongly typed DataSet class. Remarks: The TypedDataSetGenerator class takes information provided (for example, an XML schema) and creates a typed dataset class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum GenerateOption Summary: Provides the TypedDataSetGeneratorwith information for creating typed datasets that support LINQ to DataSet and hierarchical update. Remarks: The TypedDataSetGenerator.GenerateOption enumeration provides the TypedDataSetGenerator with information about the type of typed dataset to create when the TypedDataSetGenerator.Generate method is called. The TypedDataSetGenerator.GenerateOption enumeration enables you to implement new features in typed datasets without needing to create additional overloads to the TypedDataSetGenerator.Generate method. Note LINQ to DataSet and hierarchical update are features in Visual Studio 2008. For more information, see Hierarchical Update Overview and Hierarchical Update Overview. ",1,0,0,1,0,0,1,0,0,1,1,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class ServiceControllerDesigner : ComponentDesigner Summary: Provides design-time services for the ServiceController class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class ContentDefinition Summary: Provides a property structure that defines Web content at design time. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public ContentDefinition( string id, string content, string designTimeHtml ) Parameters idType: System.String A string identifier for the content. contentType: System.String The default HTML markup content. designTimeHtmlType: System.String The design-time HTML markup content. Summary: Creates a new instance of the ContentDefinition class.",0,1,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public string ContentPlaceHolderID { get; } Property Value Type: System.String The ID of the ContentPlaceHolder associated with the current content. Summary: Gets the ID of the ContentPlaceHolder control that is associated with the current content.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class ControlDesigner : HtmlControlDesigner Summary: Provides a base control designer class for extending the design-mode behavior of a Web server control. Remarks: The ControlDesigner class provides a base control designer class that can be inherited from and extended to provide design-time support for a Web server control in a design host, such as Visual Studio 2005. The object model for working with design-time rendering is improved over earlier versions, with the following new base classes to provide access to the simplified object model: ControlDesigner , which is not new, but has been greatly improved. ContainerControlDesigner . CompositeControlDesigner . Automatic Formatting You can create a variety of automatic and pre-defined formats that can simplify the process of page developers who are applying complex style changes to custom Web server controls. For example, the TableDesigner control, which derives from the ControlDesigner class, provides many automatic formats from which to choose. To implement and provide automatic formatting in your custom controls, use the following features: The AutoFormats property. The OnAutoFormatApplied method. The DesignerAutoFormat class. The DesignerAutoFormatStyle class. Action Lists (Smart Tags) Action lists are menus of important or widely used tasks that a page developer who uses a control can perform in a design-time user interface (UI), such as Visual Studio 2005. For example, the design-time view of your control could provide a menu of available tasks. This includes a task to format the control automatically. To learn about action lists, start with the following features: The ActionLists property. The DesignerActionList class. The GetSortedActionItems method. The DesignerActionListCollection class. The DesignerActionMethodItem class. The DesignerActionPropertyItem class. Control Designer Regions Regions are editable areas in the design-time view of a Web server control. This feature offers WYSIWYG-like editing of the template content, inner controls, and properties at design time. You can have the control designer create controls in regions or you can use the Toolbox to drag and drop controls into regions. Regions are managed with the following features: The OnClick method. The DesignerRegion class. The EditableDesignerRegion class. The GetEditableDesignerRegionContent method. The SetEditableDesignerRegionContent method. Templates The model for creating a UI for design-time editing of templated controls, such as the GridView control, has been greatly improved from earlier versions. You can create complex custom controls that include templates for various parts of the control, and your custom control designer can help page developers who are modifying templates with the following features: The TemplateGroups property. The InTemplateMode property. The TemplateGroup class. Design-Time Rendering The ControlDesigner class has the following methods to support design-time rendering of the Web server control. Most of these methods are the same as in earlier versions: The GetDesignTimeHtml method. The GetEmptyDesignTimeHtml method. The GetErrorDesignTimeHtml method. The UpdateDesignTimeHtml method. The CreatePlaceHolderDesignTimeHtml method. Example: The following code example demonstrates how to create a simple designer class that derives from the ControlDesigner class. This control designer supports a custom TextControl class and provides a command to change the text size of a control at design time. The control designer is associated with the control by specifying the control designer in a DesignerAttribute object declaration on the TextControl class. The key to persisting property changes from the control designer to the HTML markup is found in the ToggleTextSize method of the custom ActionList class. To try the example, add a reference to the System.Design.dll assembly and compile the code. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,1,1,1,1,0
"Additional online Documentation: Syntax: protected virtual Control CreateViewControl() Return Value Type: System.Web.UI.Control A Web server control. Summary: Returns a copy of the associated control for viewing or rendering on the design surface.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static DesignTimeResourceProviderFactory GetDesignTimeResourceProviderFactory( IServiceProvider serviceProvider ) Parameters serviceProviderType: System.IServiceProvider An IServiceProvider object that can retrieve global and local services. Return Value Type: System.Web.UI.Design.DesignTimeResourceProviderFactory A DesignTimeResourceProviderFactory object, if any are defined in the configuration file; otherwise, Nothing. Summary: Returns an appropriate resource provider factory, depending on the globalization settings in the configuration file for the site. Remarks: A resource provider factory creates resource providers and resource writers, depending on the current settings in the system.web/globalization section of the configuration file (either the Machine.config or Web.config files for both global and local resources). If no globalization settings are found, the serviceProvider parameter is used to create a DesignTimeResourceProviderFactory object using the default implementation for the design host. Typically, control developers will not override the GetDesignTimeResourceProviderFactory method.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The recommended alternative is OnComponentChanged(). OnComponentChanged is called when any property of the control is changed. http://go.microsoft.com/fwlink/?linkid=14202#)] protected virtual void OnControlResize() Summary: Called when the associated Web server control has been resized in the design host at design time. Remarks: Note The OnControlResize method is obsolete. Use the OnComponentChanged method for equivalent control designer functionality. The OnControlResize method typically is called only by the design-time environment when a user action causes the associated Web server control to be resized. The OnControlResize method might be called several times during a resizing process to display the updated size of the control before the resizing is completed. The width and height properties of the control are updated before the OnControlResize method is called.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class DataBindingValueUIHandler Summary: Provides a UI handler for data binding values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Indicates whether this converter returns a set of available values for assignment to the associated control property.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DataSetViewSchema : IDataSourceViewSchema Summary: Represents the structure, or schema, of a DataTable. This class cannot be inherited. Remarks: Use the DataSetViewSchema class to list the structure of data using a DataTable at design time. Use the GetFields method to get a list of information about each field as DataColumn objects. The DataSetViewSchema class is used by custom control designer components to provide UI options to the user at design time that accurately reflect the structure of the data. To examine the components of data using a DataSet, use the following classes. DataSetSchema DataSetViewSchema DataSetFieldSchema ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class DataSourceBooleanViewSchemaConverter : DataSourceViewSchemaConverter Summary: Provides a type converter for a property representing a Boolean field in a data source schema. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override DesignerActionListCollection ActionLists { get; } Property Value Type: System.ComponentModel.Design.DesignerActionListCollection A DesignerActionListCollection object containing the action list items for the control designer. Summary: Gets a list of items that are used to create an action list menu at design time. Remarks: Notes to Inheritors When you create a custom class that is derived from the DataSourceDesigner class, you must override the ActionLists property. In your override method, first call the base class to create the default DesignerActionListCollection object, and then add a custom list of actions that are specific to your class. Example: The following code example demonstrates how to create a simple composite control with a Label control and a TextBox control, along with properties to set the Text properties on both internal controls, as well as the Width and BackColor properties of the TextBox control. An associated control designer class creates three DesignerActionMethodItem commands, each of which sets two properties on the control, and whose settings can be rolled back with the undo functionality in the design host. Although the code example does not use a custom DataSourceControl object, it illustrates how to override the ActionLists property.",0,0,1,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public event EventHandler SchemaRefreshed Implements IDataSourceDesigner.SchemaRefreshed Summary: Occurs after the schema has been refreshed.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual bool CanUpdate { get; } Property Value Type: System.Boolean true if the ExecuteUpdate method is supported; otherwise, false. Summary: Gets a value indicating whether the DataSourceView object that is associated with the current DataSourceControl object supports the ExecuteUpdate method.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public class EditableDesignerRegion : DesignerRegion Summary: Represents an editable content region within the design-time markup for the associated control. Remarks: Use the EditableDesignerRegion class to help manage templates at design time. A ControlDesigner will use an instance of this class with its GetEditableDesignerRegionContent method to generate HTML markup of the region's content. Example: This example shows how to create a control with two clickable regions and an EditableDesignerRegion object with two views, or templates. Compile the project, then open the page in a visual designer and switch to design (WYSIWYG) view. There are two clickable views, View1 and View2. Click View1 and drag the CheckBox control from the lower part of the page into the empty designer region just below the clickable regions. Click View2 and drag the RadioButton control into the empty designer region. Click View1 again, and the region with the CheckBox reappears. Click View2 and the region with the RadioButton reappears. Switch back to source view to see how your changes are persisted in the HTML markup Note Your project must have a reference to the System.Design.dll assembly. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public virtual DesignerHierarchicalDataSourceView GetView( string viewPath ) Parameters viewPathType: System.String The unique path to the block of data to use in creating the view. Return Value Type: System.Web.UI.Design.DesignerHierarchicalDataSourceView A DesignerHierarchicalDataSourceView object. Implements IHierarchicalDataSourceDesigner.GetView(String) Summary: Gets the named data source view associated with the data source control.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public interface IControlDesignerView Summary: Provides an interface for access to the visual representation and content of a control at design time. Remarks: This interface is intended for use by design host developers.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IDataBindingSchemaProvider Summary: Provides an interface for design-time access to a schema provider in a design host. Remarks: The IDataBindingSchemaProvider class is implemented by design hosts, such as Visual Studio 2005, that host the data-binding dialog box to show schema.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: void ResumeDataSourceEvents() Summary: Resumes raising data source events after calling the SuppressDataSourceEvents method.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IDesignTimeResourceWriter : IResourceWriter, IDisposable Summary: Used by the DesignTimeResourceProviderFactory class to localize data at design time.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: bool CanRefreshSchema { get; } Property Value Type: System.Boolean true if RefreshSchema can be called; otherwise, false. Summary: Gets a value indicating whether the RefreshSchema method can be called. Remarks: The CanRefreshSchema property is used by a design host, such as Visual Studio 2005, to determine whether to display a Refresh Schema command at design time. Notes to Implementers If you implement the IHierarchicalDataSourceDesigner interface to create your own data source and the schema will never change, the CanRefreshSchema property should always return false and the RefreshSchema method should raise a NotSupportedException.",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The recommended alternative is System.Web.UI.Design.IControlDesignerTag and System.Web.UI.Design.IControlDesignerView. http://go.microsoft.com/fwlink/?linkid=14202#)] public interface IHtmlControlDesignerBehavior Summary: Defines an interface that enables the extension of specific behaviors of an HTML control designer. Remarks: Note The IHtmlControlDesignerBehavior interface is obsolete. Use the IControlDesignerTag and IControlDesignerView interfaces for equivalent control designer functionality.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: void SetStyleAttribute( string attribute, bool designTimeOnly, Object value, bool ignoreCase ) Parameters attributeType: System.String The attribute to set.  designTimeOnlyType: System.Boolean true if the attribute is only active at design-time; otherwise, false.  valueType: System.Object The object to set the attribute on.  ignoreCaseType: System.Boolean true if the attribute syntax is case-insensitive; otherwise, false. Summary: Sets the specified style attribute to the specified object. Remarks: Note The SetStyleAttribute method is obsolete. Use the AddDesignTimeCssAttributes method on the ContainerControlDesigner class for equivalent control designer functionality.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class ImageUrlEditor : UrlEditor Summary: Provides a user interface for selecting a URL that references an image. Remarks: ImageUrlEditor is a UITypeEditor that provides a dialog box for selecting a URL property that references an image. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: Type GetObjectType( string tagPrefix, string typeName ) Parameters tagPrefixType: System.String The tag prefix for the type.  typeNameType: System.String The name of the type. Return Value Type: System.Type The Type of the object, if it could be resolved. Summary: Gets the type of the specified object. Remarks: Note The GetObjectType method is obsolete. Use the GetType method on the WebFormsReferenceManager class for equivalent designer functionality.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class MailFileEditor : UrlEditor Summary: Provides a user interface for selecting and editing a mail file name for a property at design time. Remarks: The MailFileEditor class is an UITypeEditor object that can be used at design time to select and edit a mail file name as a string, and assign the string to a control property. For example, the EmbeddedMailObject control uses the MailFileEditor class at design time to set the value of the Path property. Use the EditorAttribute attribute to associate the MailFileEditor with a property. When the associated property is edited in the design surface, the designer host calls the EditValue method. The EditValue method displays a dialog box for selecting a mail file name from a filtered list of files, and returns the file name that is selected by the user. The GetEditStyle method indicates the display style of the user interface. Derive a class from the MailFileEditor to define a custom editor for a mail file name property. For example, a derived class can override the EditValue method, and display an OpenFileDialog instance with a custom mail file filter or title. Example: The following code example demonstrates how to associate an instance of the MailFileEditor class with a property that is contained within a custom control. When the control property is edited in the design surface, the MailFileEditor class provides the user interface to select and edit a mail file name for the property value. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,1,1,1,1,0,0,1
"Additional online Documentation: Syntax: public class RouteUrlExpressionEditorSheet : ExpressionEditorSheet Summary: Represents a design-time editor sheet for the properties of a RouteUrl expression in the UI of a designer host at design time. Remarks: The visual designer uses the RouteUrlExpressionEditor class together with the RouteUrlExpressionEditorSheet class to select the individual properties of a RouteUrl expression, and to combine the selected expression property values into a RouteUrl expression. The RouteUrlExpressionEditor.GetExpressionEditorSheet method returns a RouteUrlExpressionEditorSheet object. In the expressions dialog box, when you select a control property and bind it to a RouteUrl expression, the visual designer calls the GetExpressionEditorSheet method. The visual designer uses the returned RouteUrlExpressionEditorSheet object to prompt for the RouteValues and RouteName properties. Once the properties are selected, the visual designer calls the GetExpression method to combine the properties into a RouteUrl expression string. The RouteValues property must be specified if the RouteName property is not specified. The RouteName property must be specified if the RouteValues is not specified. Both properties may be specified. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public RouteUrlExpressionEditorSheet( string expression, IServiceProvider serviceProvider ) Parameters expressionType: System.String A RouteUrl expression, used to initialize the expression editor sheet. serviceProviderType: System.IServiceProvider A service provider implementation supplied by the designer host, used to obtain additional design-time services. Summary: Initializes a new instance of the RouteUrlExpressionEditorSheet class. Remarks: The initial RouteValues and RouteName property values are set using the input expression string. The ServiceProvider property is set using the input serviceProvider implementation.",1,0,0,0,1,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public class SkinIDTypeConverter : TypeConverter Summary: Provides a list of valid skin IDs for a control at design time, based on the currently applicable theme. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Returns a value indicating whether this converter can convert a SkinID object to a string.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class TemplateGroup Summary: A collection of TemplateDefinition objects representing the template elements in a Web server control at design time. Example: The following code example demonstrates how to create a control designer class that derives from the ControlDesigner class. This control designer supports a control with four possible templates. To try it, compile the code, and then, in a design host such as Visual Studio 2005, look at the page in Design view. Select the control, click the action list to select a template to modify, and then use the drag-and-drop feature to move controls into the template. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the TemplateGroup class.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class TextControlDesigner : ControlDesigner Summary: Extends design-time behavior for Web server controls that have a Text property that is persisted as inner text. Remarks: This class can be used as the base class for designers for run-time controls that have a string Text property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class WebControlToolboxItem : ToolboxItem Summary: Provides a base class for a Web server control ToolboxItem. Remarks: WebControlToolboxItem provides a base class for toolbox items that create Web server controls. This class extends ToolboxItem and provides the following additional methods: GetToolAttributeValue gets the value of an attribute of the toolbox item. GetToolHtml gets the HTML that represents the initial state of the control. GetToolType gets the type of the associated runtime component. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public class WebFormsDesignerActionService : DesignerActionService Summary: Establishes a design-time service that manages the collection of DesignerActionItem objects for a component. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected virtual void PreFilterAttributes( IDictionary attributes ) Parameters attributesType: System.Collections.IDictionary The attributes for the class of the component. Summary: Allows a designer to add to the set of attributes that the designer exposes through a TypeDescriptor object.",1,0,0,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Syntax: public XmlDataFileEditor() Summary: Initializes a new instance of the XmlDataFileEditor class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class XsdSchemaFileEditor : UrlEditor Summary: Provides a design-time user interface for selecting an XML schema definition file. Remarks: An XsdSchemaFileEditor object is used at design time to select and edit a URL for an XML schema definition file (.xsd), and to assign the URL to a control property. Use the EditorAttribute attribute to associate the XsdSchemaFileEditor with a property. When the associated property is edited on the design surface, the designer host calls the EditValue method. The EditValue method uses the BuildUrl method, which in turn displays a user interface for selecting the URL, and then returns the URL that is selected by the user. The GetEditStyle method indicates the display style of the user interface. Derive a class from the XsdSchemaFileEditor to define a custom editor for an XML schema URL property. For example, a derived class can override the EditValue method, and then call the BuildUrl method with a custom Filter or Caption value. Example: The following code example demonstrates how to associate an instance of the XsdSchemaFileEditor class with a property that is contained within a custom control. When the control property is edited on the design surface, the XsdSchemaFileEditor class provides the user interface to select and edit an XML schema definition file name for the property value. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class XslTransformFileEditor : UrlEditor Summary: Provides a design-time user interface for selecting an XML transform file. Remarks: An XslTransformFileEditor object is used at design time to select and edit a URL for a XML transform file (.xsl) and to assign the URL to a control property. For example, the XmlDataSource control uses the XslTransformFileEditor class at design time to set the value of the TransformFile property. Use the EditorAttribute attribute to associate the XslTransformFileEditor with a property. When the associated property is edited on the design surface, the designer host calls the EditValue method. The EditValue method uses the BuildUrl method, which in turn displays a user interface for selecting the URL, and then returns the URL that is selected by the user. The GetEditStyle method indicates the display style of the user interface. Derive a class from the XslTransformFileEditor to define a custom editor for an XML transform file URL property. For example, a derived class can override the EditValue method, and then call the BuildUrl method with a custom Filter or Caption value. Example: The following code example demonstrates how to associate an instance of the XslTransformFileEditor class with a property that is contained within a custom control. When the control property is edited on the design surface, the XslTransformFileEditor class allows the user interface to select and edit an XML transform file name for the property value. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,1,1,1,1,0,1,0
"Additional online Documentation: Syntax: protected BaseDataBoundControlDesigner() Summary: Initializes a new instance of the BaseDataBoundControlDesigner class. Remarks: The .NET Framework internally constructs a new instance of a designer that is derived from the BaseDataBoundControlDesigner class when it creates the associated control on the design surface.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [SupportsPreviewControlAttribute(true)] [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class BaseValidatorDesigner : PreviewControlDesigner Summary: Provides design-time support in a visual designer for Web server controls that are derived from the BaseValidator class. Remarks: In a visual designer, when you switch from Source to Design view, the markup source code that describes a control that is derived from the BaseValidator abstract class is parsed and a design-time version of the control is created on the design surface. When you switch back to Source view, the design-time control is persisted to markup source code and edited into the markup for the Web page. The BaseValidatorDesigner objects provide design-time support for controls that are derived from the BaseValidator class in a visual designer. The GetDesignTimeHtml method gets the markup that is used to render the associated control at design time. Example: The following example derives the SimpleCompareValidator control from the CompareValidator class. SimpleCompareValidator is a copy of the CompareValidator. The example also derives the designer SimpleCompareValidatorDesigner from the BaseValidatorDesigner class and uses the DesignerAttribute attribute to associate the SimpleCompareValidatorDesigner class with the SimpleCompareValidator control. SimpleCompareValidatorDesigner overrides the GetDesignTimeHtml method to draw a solid border around the SimpleCompareValidator control at design time if the value of the BorderStyle property of the control is the NotSet or None field. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: [SupportsPreviewControlAttribute(true)] [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class CalendarDesigner : ControlDesigner Summary: Extends design-time behavior for the Calendar Web server control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class CompositeControlDesigner : ControlDesigner Summary: Extends design-time behavior for controls that implement the methods of the CompositeControl abstract class. Remarks: The CompositeControlDesigner can be used with other control types that implement the INamingContainer interface. Otherwise CompositeControlDesigner functions similarly to its base class, ControlDesigner. For an example, see ControlDesigner. Topic Location Walkthrough: Creating a Basic Control Designer for an ASP.NET Web Server Control Authoring ASP.NET Controls Walkthrough: Creating a Basic Control Designer for an ASP.NET Web Server Control Authoring ASP.NET Controls ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override string GetPersistenceContent() Return Value Type: System.String The persistable inner HTML of the control. Summary: Gets the persistable inner HTML of the control.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: void IDataBindingSchemaProvider.RefreshSchema( bool preferSilent ) Parameters preferSilentType: System.Boolean Indicates whether to suppress any events raised while refreshing the schema. Implements IDataBindingSchemaProvider.RefreshSchema(Boolean) Summary: For a description of this member, see RefreshSchema. Remarks: This member is an explicit interface member implementation. It can be used only when the DataBoundControlDesigner instance is cast to an IDataBindingSchemaProvider interface.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: IDataSourceViewSchema IDataBindingSchemaProvider.Schema { get; } Property Value Type: System.Web.UI.Design.IDataSourceViewSchema An IDataSourceViewSchema object that describes the data source. Implements IDataBindingSchemaProvider.Schema Summary: For a description of this member, see Schema. Remarks: This member is an explicit interface member implementation. It can be used only when the DataBoundControlDesigner instance is cast to an IDataBindingSchemaProvider interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SupportsPreviewControlAttribute(true)] [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class DataListDesigner : BaseDataListDesigner Summary: Extends design-time behavior for the DataList Web server control. Example: The following code example demonstrates how to extend the DataListDesigner class. The code overrides the GetDesignTimeHtml method to display a five-point border that is purple if the DataList control is enabled.  The following code example shows how to use the DesignerAttribute to associate the designer with the DataList control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public override DesignerAutoFormatCollection AutoFormats { get; } Property Value Type: System.Web.UI.Design.DesignerAutoFormatCollection The DesignerAutoFormatCollection associated with this designer. Summary: Gets the DesignerAutoFormatCollection object associated with this designer.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202#)] public override void SetTemplateContent( ITemplateEditingFrame editingFrame, string templateName, string templateContent ) Parameters editingFrameType: System.Web.UI.Design.ITemplateEditingFrame The ITemplateEditingFrame instance for which to set the content. templateNameType: System.String The name of the template.  templateContentType: System.String The new content for the template. Summary: Sets the content for the specified template and frame. Remarks: Rather than using editing verbs, use template groups and designer editing regions. For more information, see TemplateGroups and DesignerRegion.",0,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public override DesignerAutoFormatCollection AutoFormats { get; } Property Value Type: System.Web.UI.Design.DesignerAutoFormatCollection A DesignerAutoFormatCollection that contains the predefined schemes for the FormView. Summary: Gets the collection of automatic formatting schemes for display in the Auto Format dialog box. Remarks: The DesignerAutoFormatCollection object is populated from an XML-encoded member of an internal class.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public class GridViewDesigner : DataBoundControlDesigner Summary: Provides design-time support in a visual designer for the GridView control. Remarks: In a visual designer, when you switch from Source to Design view, the markup source code that describes the GridView control is parsed and a design-time version of the control is created on the design surface. When you switch back to Source view, the design-time control is persisted to the markup source code and edited into the markup for the Web page. The properties of the GridViewDesigner class provide the following functionality: The ActionLists property returns a DesignerActionListCollection object, which typically contains an object that is derived from the DesignerActionList class for each level in the inheritance tree of the designer. The AutoFormats property returns a collection of formatting schemes for display in the Auto Format dialog box. The TemplateGroups property returns a collection of template groups for the fields of the associated GridView control and the top-level GridView templates. The UsePreviewControl property always returns true, indicating that the designer creates a temporary copy of the associated GridView to generate the design-time markup. The methods of the GridViewDesigner class provide the following functionality: The DataBind method binds the associated GridView control to a design-time data source. The GetDesignTimeHtml method returns the markup that is used to render the associated GridView at design time. The Initialize method prepares the designer to view, edit, and design the associated GridView. The OnClick method is called when a region of the design-time view of the associated GridView is clicked. The OnSchemaRefreshed method is called when the schema of the data source of the associated GridView changes. The PreFilterProperties method is used to remove or add properties or to shadow properties of the associated GridView. Design-time editable regions are not supported in the GridView control, so the GetEditableDesignerRegionContent and SetEditableDesignerRegionContent methods have no functionality. Example: The following code example shows how to extend the GridViewDesigner class to change the appearance of controls that are derived from the GridView control at design time. The example derives the MyGridView control from the GridView. The MyGridView is simply a copy of the GridView. The example also derives the MyGridViewDesigner class from the GridViewDesigner class and places a DesignerAttribute object for the MyGridViewDesigner on the MyGridView control. The MyGridViewDesigner overrides the PreFilterProperties method to make the Page property visible in the Properties grid at design time. It overrides the GetDesignTimeHtml method to include the Caption property, if it is specified, as a new first row in the MyGridView control at design time. If the BorderStyle property of the MyGridView control has the NotSet or None value, the GetDesignTimeHtml draws a blue dashed border around the control to make its extent more visible. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public class HierarchicalDataSourceIDConverter : DataSourceIDConverter Summary: Creates a user-selectable list of hierarchical data source names. Remarks: The HierarchicalDataSourceIDConverter class is a TypeConverter object that is typically referenced by the TypeConverterAttribute attribute. All members except the IsValidDataSource method are inherited from the DataSourceIDConverter. The IsValidDataSource method indicates whether the specified component implements the IHierarchicalDataSource interface. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,1,0
"Additional online Documentation: Syntax: public HierarchicalDataSourceIDConverter() Summary: Initializes a new instance of the HierarchicalDataSourceIDConverter class. Remarks: The .NET Framework internally constructs a new instance of the HierarchicalDataSourceIDConverter class when the class is referenced by a TypeConverterAttribute attribute.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class HotSpotCollectionEditor : CollectionEditor Summary: Provides a component editor for HotSpotCollection objects in an ImageMap or a similar control. Remarks: The HotSpotCollectionEditor class provides a user interface for editing the HotSpot elements of the HotSpotCollection object that is embedded in an ImageMap or a similar control. The HotSpotCollectionEditor is invoked by selecting the ellipsis button (.) on the HotSpots property in the visual designer's Properties grid. The CanSelectMultipleInstances method always returns false to indicate that only one object can be selected at a time in the editor. The CreateNewItemTypes method returns an array of types that the editor can create. The HelpTopic property returns the name of the Help topic that the editor displays. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: bool IDataBindingSchemaProvider.CanRefreshSchema { get; } Property Value Type: System.Boolean true, if the schema can be refreshed; otherwise, false. Implements IDataBindingSchemaProvider.CanRefreshSchema Summary: Gets a value indicating whether the provider can refresh the schema. For a description of this member, see the IDataBindingSchemaProvider.CanRefreshSchema property. Remarks: This member is an explicit interface member implementation. It can be used only when the MenuDesigner instance is cast to an IDataBindingSchemaProvider interface.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class MenuItemStyleCollectionEditor : CollectionEditor Summary: Provides a component editor for MenuItemStyleCollection objects in the associated Menu control. Remarks: The MenuItemStyleCollectionEditor class provides a user interface for editing the MenuItemStyle elements of MenuItemStyleCollection objects in the associated Menu control at design time, under the control of the MenuDesigner object. There is a MenuItemStyleCollection associated with each of the LevelMenuItemStyles and LevelSelectedStyles properties of the Menu control. These MenuItemStyleCollection objects are used to apply styles to menu items that depend on their level (nesting depth) in the menu structure. The MenuItemStyleCollectionEditor is invoked, for example, by selecting the ellipsis button (.) on the LevelMenuItemStyles or LevelSelectedStyles row in the Properties grid of the visual designer. The CanSelectMultipleInstances method always returns false to indicate that only one object can be selected at a time in the editor. The CreateCollectionForm method creates a new form to display and edit the current MenuItemStyleCollection. The CreateInstance method creates a new instance of the specified collection item type. The CreateNewItemTypes method returns an array of types that the editor can create. Example: The following code example shows how to use the EditorAttribute attribute to associate the MenuItemStyleCollectionEditor and UITypeEditor classes (the collection editor base class) with a property in a custom control, derived from the WebControl class, that gets and sets a MenuItemStyleCollection collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class MultiViewDesigner : ContainerControlDesigner Summary: Provides design-time support in a visual designer for the MultiView Web server control. Remarks: The MultiView control is a container for a group of View controls. An application renders a specific View control to the client browser based on criteria that the application defines. In a visual designer, when you switch from Source to Design view, the markup source code that describes the MultiView control is parsed and a design-time version of the control is created on the design surface. When you switch back to Source view, the design-time control is persisted to the markup source code and edited into the markup for the Web page. The MultiViewDesigner class provides design-time support for the MultiView control in a visual designer. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,0,0,1,0
"Additional online Documentation: Syntax: public override string[] GetViewNames() Return Value Type: System.String() A string array containing the names of the ObjectDesignerDataSourceView objects of the associated ObjectDataSource. Implements IDataSourceDesigner.GetViewNames Summary: Returns a list of data source view names for the associated control. Remarks: The GetViewNames method gets the view names from the names of the schema data tables of the associated control.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The recommended alternative is PanelContainerDesigner because it uses an EditableDesignerRegion for editing the content. Designer regions allow for better control of the content being edited. http://go.microsoft.com/fwlink/?linkid=14202#)] [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class PanelDesigner : ReadWriteControlDesigner Summary: Provides design-time support in a visual designer for the Panel control. Remarks: The Panel control is used as a container for other controls, especially when controls are generated programmatically. The PanelDesigner class provides design-time support for Panel controls in a visual designer. However, for all new implementations of the Panel control, use the PanelContainerDesigner instead of the PanelDesigner. In a visual designer, when you switch from Source to Design view, the markup source code that describes the associated Panel control is parsed and a design-time version of the control is created on the design surface. When you switch back to Source view, the design-time control is persisted to markup source code and edited into the markup for the Web page. The MapPropertyToStyle method maps a specified property and value to a specified markup style. The OnBehaviorAttached method provides notification when a behavior is attached to the designer. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public class ParameterEditorUserControl : UserControl Summary: Provides a reusable UserControl object for editing ParameterCollection objects. Remarks: The ParameterCollectionEditor class provides a user interface for editing the Parameter elements of ParameterCollection objects that are referenced by several different properties of controls at design time. The ParameterEditorUserControl class encapsulates most of the functionality of the ParameterCollectionEditor. The ParameterCollectionEditor consists of an enclosing form that holds the ParameterEditorUserControl, and OK and Cancel buttons. The AddParameters method adds an array of existing parameters to the ParameterEditorUserControl. The ClearParameters method removes all parameters from the ParameterEditorUserControl. The GetParameters method gets all parameters from the ParameterEditorUserControl. The SetAllowCollectionChanges method controls whether additions and deletions can be made to the parameters in the ParameterEditorUserControl. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string DataSource { get; set; } Property Value Type: System.String A data binding expression. Summary: A data-binding expression that identifies the source of data for the associated Repeater control.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class RoleGroupCollectionEditor : CollectionEditor Summary: Provides a design-time editor for the RoleGroupCollection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Syntax: DesignerDataSourceView IDataSourceDesigner.GetView( string viewName ) Parameters viewNameType: System.String The name of the view to get. Return Value Type: System.Web.UI.Design.DesignerDataSourceView A designer data-source view that contains information about the identified view, or Nothing if a view with the specified name is not found. Implements IDataSourceDesigner.GetView(String) Summary: For a description of this member, see IDataSourceDesigner.GetView. Remarks: This member is an explicit interface member implementation. It can be used only when the SiteMapDataSourceDesigner instance is cast to an IDataSourceDesigner interface.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected override void SetProviderName( Object instance, DesignerDataConnection connection ) Parameters instanceType: System.Object The SqlDataSource that the connection string applies to. connectionType: System.ComponentModel.Design.Data.DesignerDataConnection The DesignerDataConnection associated with the SqlDataSource. Summary: Sets the ProviderName property of the SqlDataSource object.",1,0,0,1,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public override DesignerDataSourceView GetView( string viewName ) Parameters viewNameType: System.String The name of the view to get. Return Value Type: System.Web.UI.Design.DesignerDataSourceView A DesignerDataSourceView object if found in the data source; otherwise Nothing. Implements IDataSourceDesigner.GetView(String) Summary: Retrieves a DesignerDataSourceView object that is identified by the view name.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class SqlDesignerDataSourceView : DesignerDataSourceView Summary: Provides a design-time view of data for the SqlDataSourceDesigner class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: protected override bool CanSelectMultipleInstances() Return Value Type: System.Boolean Always false. Summary: Gets a value indicating whether multiple SubMenuStyle elements can be selected in the editor at one time. Remarks: The CanSelectMultipleInstances method always returns false; thus, only one SubMenuStyle object can be selected at a time in the SubMenuStyleCollectionEditor object.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class TableCellsCollectionEditor : CollectionEditor Summary: Provides a user interface for editing the collection of cells in a table row. Example: The following code example uses the EditorAttribute to associate the TableCellsCollectionEditor class and the UITypeEditor class (the collection editor's base class) with a custom TestCells property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: protected override bool CanSelectMultipleInstances() Return Value Type: System.Boolean true if multiple items can be selected at once; otherwise, false. This implementation always returns false. Summary: Indicates whether multiple instances may be selected.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class TreeNodeStyleCollectionEditor : StyleCollectionEditor Summary: Provides a design-time editor in a design host, such as Microsoft Visual Studio 2005, for a TreeNodeStyleCollection object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,1,0,0,0,0,1,1,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class ViewDesigner : ContainerControlDesigner Summary: Provides design-time support in a visual designer for the View control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,1,0,1,1
"Additional online Documentation:",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class XmlDataSourceDesigner : HierarchicalDataSourceDesigner, IDataSourceDesigner Summary: Provides design-time support in a visual designer for the XmlDataSource control. Remarks: The XmlDataSourceDesigner class is intended for use by the XmlDataSource control, and not intended for use by developers of custom XML data source controls. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: event EventHandler IDataSourceDesigner.SchemaRefreshed Implements IDataSourceDesigner.SchemaRefreshed Summary: For a description of this member, see IDataSourceDesigner.SchemaRefreshed. Remarks: This member is an explicit interface member implementation. It can be used only when the XmlDataSourceDesigner instance is cast to an IDataSourceDesigner interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class PageCatalogPartDesigner : CatalogPartDesigner Summary: Provides design-time support in a visual designer for a PageCatalogPart control. Remarks: The PageCatalogPart class acts as a page catalog to maintain any controls previously added to the page that a user has closed, so that the user can add them back to the page. This control is visible only when a Web page is in catalog display mode. The PageCatalogPartDesigner class provides design-time support for the PageCatalogPart class. In a visual designer, when you switch from Source to Design view, the markup source code that describes the PageCatalogPart control is parsed and a design-time version of the control is created on the design surface. When you switch back to Source view, the design-time control is persisted to the markup source code and edited into the markup for the Web page. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public abstract class PartDesigner : CompositeControlDesigner Summary: Extends design-time behavior for controls that implement the Part abstract class. Remarks: The PartDesigner class is the base class for many of the various designers in the System.Web.UI.Design.WebControls.WebParts namespace, which provide visual representations of Web Parts controls at design time. The UsePreviewControl property is overridden to always return true, so PartDesigner will always render a copy of the associated control rather than the control itself. Notes to Inheritors The PartDesigner class does not have a public constructor, so you cannot inherit from it directly outside the System.Web.UI.Design.WebControls.WebParts namespace. Instead, use WebPartDesigner, EditorPartDesigner, or CatalogPartDesigner, which derive from PartDesigner and provide the same functionality with a public constructor. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class ProxyWebPartManagerDesigner : ControlDesigner Summary: Provides minimal design-time support for ProxyWebPartManager controls. Remarks: The ProxyWebPartManagerDesigner class is identical to the WebPartManagerDesigner class and provides design-time support for ProxyWebPartManager controls. It appears on the design surface as a plain gray box showing the name of the class and the ID of the specific ProxyWebPartManager control. You can change the rendering of a custom ProxyWebPartManager control by overriding the GetDesignTimeHtml method in the same manner as with any standard ControlDesigner. The UsePreviewControl property is overridden to always return true. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,1,0
"Additional online Documentation: Syntax: public class AxImporter Summary: Imports ActiveX controls and generates a wrapper that can be accessed by a designer. Remarks: To generate an ActiveX wrapper for an ActiveX control, first create or obtain an instance of the AxImporter class. The AxImporter constructor accepts an AxImporter.Options object, which sets options for the importer, such as the filename for the wrapper .dll to generate and the output directory to generate the wrapper to. To generate the ActiveX wrapper, call the appropriate Generate method. To generate from a file, call GenerateFromFile. To generate from a type library, call GenerateFromTypeLibrary. The string that is returned will consist of an assembly qualified name (example: #Namespace.Type,Assembly#) for the type an ActiveX wrapper was generated for. The wrapper for the ActiveX control will be generated in the .dll file specified in the outputName property of the AxImporter.Options passed to the AxImporter constructor. The type can be loaded or queried using System.Reflection and treated as an ordinary managed type. You can also call the GetOcx method of the type to retrieve a COM interface to the object, if the object supports this. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: public bool IsOut { get; } Property Value Type: System.Boolean true if the parameter data is out; otherwise, false. Summary: Indicates whether the parameter data is out.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: Object IRootDesigner.GetView( ViewTechnology technology ) Parameters technologyType: System.ComponentModel.Design.ViewTechnology A ViewTechnology that indicates a particular view technology. Return Value Type: System.Object An object that represents the view for this designer. Implements IRootDesigner.GetView(ViewTechnology) Summary: For a description of this member, see System.ComponentModel.Design.ViewTechnology. Remarks: This member is an explicit interface member implementation. It can be used only when the ComponentDocumentDesigner instance is cast to an IRootDesigner interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected IMenuEditorService menuEditorService Summary: Initializes the menuEditorService variable to Nothing.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler EventHandlerChanged Summary: Fires an OnEventHandlerChanged event.",1,0,0,0,0,0,0,0,0,0,0,1
"The user's file templates.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual CultureInfo Culture { get; } Property Value Type: System.Globalization.CultureInfo A CultureInfo representing the locale the mask is authored for. Summary: Gets the CultureInfo representing the locale the mask is authored for.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ParentControlDesigner : ControlDesigner Summary: Extends the design mode behavior of a Control that supports nested controls. Remarks: ParentControlDesigner provides a base class for designers of controls that can contain child controls. In addition to the methods and functionality inherited from the ControlDesigner and ComponentDesigner classes, ParentControlDesigner enables child controls to be added to, removed from, selected within, and arranged within the control whose behavior it extends at design time. You can associate a designer with a type using a DesignerAttribute. For an overview of customizing design time behavior, see Extending Design-Time Support. Example: The following example demonstrates how to implement a custom ParentControlDesigner. This code example is part of a larger example provided for the IToolboxUser interface. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Summary: Indicates whether the specified control can be a child of the control managed by a designer.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected override void OnDragEnter( DragEventArgs de ) Parameters deType: System.Windows.Forms.DragEventArgs A DragEventArgs that provides data for the event. Summary: Called when a drag-and-drop operation enters the control designer view.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class Behavior Summary: Represents the Behavior objects that are managed by a BehaviorService. Remarks: This class can be extended to develop any type of user interface behavior, including selection, drag, and resize behaviors. For more information, see Behavior Service Overview. Note Your Behavior type must be associated with a Glyph type. Glyph-independent behaviors are not supported. Example: The following code example demonstrates how to create your own class based on the Behavior class that responds to user clicks. This code example is part of a larger example provided for the BehaviorService class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public virtual void OnGiveFeedback( Glyph g, GiveFeedbackEventArgs e ) Parameters gType: System.Windows.Forms.Design.Behavior.Glyph A Glyph on which to invoke drag-and-drop behavior. eType: System.Windows.Forms.GiveFeedbackEventArgs A GiveFeedbackEventArgs that contains the event data. Summary: Permits custom drag-and-drop feedback behavior. Remarks: Notes to Inheritors You can override the OnGiveFeedback method so that a Behavior can specify its own drag-and-drop rules.",0,0,0,1,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public delegate void BehaviorDragDropEventHandler( Object sender, BehaviorDragDropEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs A BehaviorDragDropEventArgs that contains the event data. Summary: Represents the methods that will handle the BeginDrag and EndDrag events of a BehaviorService. This class cannot be inherited. Remarks: When you create a BehaviorDragDropEventHandler delegate, you identify a method to handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see Events and Delegates.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class BehaviorService : IDisposable Summary: Manages user interface in the designer. This class cannot be inherited. Remarks: When the BehaviorService is created, it adds a transparent window over the designer frame. The BehaviorService can then use this window to render user interface elements, called Glyph objects, as well as catch all mouse messages. In this way, the BehaviorService can control designer behavior. The BehaviorService class supports a behavior stack, onto which Behavior objects can be pushed. When a message is intercepted through the transparent window, the BehaviorService can send the message to the Behavior at the top of the stack. This enables different user interface modes depending on the currently pushed Behavior. The BehaviorService is used to render all Glyph objects, such as selection borders, sizing handles, and smart tags. The BehaviorService also controls many design-time behaviors, such as using snaplines, dragging, and selecting. For more information, see Behavior Service Overview. Example: The following code example demonstrates how to create your own Behavior based class that responds to user clicks. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,1,1,0,1,0
"Additional online Documentation: Syntax: public sealed class BehaviorServiceAdornerCollection : CollectionBase Summary: Stores Adorner objects in a strongly typed collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool MoveNext() Return Value Type: System.Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator was past the end of the collection. Summary: Advances the enumerator to the next element of the BehaviorServiceAdornerCollection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ComponentGlyph : Glyph Summary: Associates a Glyph with its component. Remarks: The ComponentGlyph class contains the RelatedComponent property, which points back to the glyph's related component. This property can be used to trace Glyph objects back to their component, such as during drag operations. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override Rectangle Bounds { get; } Property Value Type: System.Drawing.Rectangle A Rectangle representing the bounds of the Glyph. Summary: Gets the bounds of the Glyph.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class Glyph Summary: Represents a single user interface (UI) entity managed by an Adorner. Remarks: The sole purpose of a Glyph is to paint and hit test. A Glyph does not have a window handle (HWND), as it is rendered on the adorner window control of the BehaviorService. Each Glyph can have a Behavior associated with it. A successfully hit-tested Glyph has the opportunity to push a new or different Behavior onto the behavior stack of the BehaviorService. For more information, see Behavior Service Overview. Example: The following example demonstrates how to create your own Glyph based class with Behavior associated with it. This code example is part of a larger example provided for the BehaviorService class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,0,1,0,1,0
"The Glyph is selected.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the SnapLine class. Remarks: You should only explicitly create snaplines to replace or supplement the default snapline behavior offered by the visual designer. To create a snapline, you should instance a snapline and then add it to the SnapLines property of the ControlDesigner class.",1,0,1,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public enum SnapLinePriority Summary: Specifies the relative importance of a snapline. Remarks: A snapline's priority acts as a suggestion to visual designers about how to treat a snapline with respect to its peers. The layout engine uses a simple method of determining whether to display the snaplines for a control: only the highest priority snaplines, including those with a value of Always, are shown for each orientation-vertical or horizontal. To set the priority of a snapline, a SnapLinePriority enumeration is specified when creating an instance of the SnapLine class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsUnknown { get; } Property Value Type: System.Boolean true if the CivicAddress is equal to Unknown; otherwise, false. Summary: Gets a value that indicates whether the CivicAddress contains data. Example: The following example uses IsUnknown to check the CivicAddress that is returned from ResolveAddress before the civic address is printed out.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class CivicAddressResolver : ICivicAddressResolver Summary: Provides functionality for resolving a coordinate-based location to a civic address. Remarks: The CivicAddressResolver class provides an implementation of ICivicAddressResolver that resolves a coordinate-based location to a civic address if the location provider provides both coordinates and civic address data. Example: The following program shows how to call ResolveAddress to resolve a civic address synchronously.  The following program shows how to call ResolveAddressAsync to resolve a civic address asynchronously. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<ResolveAddressCompletedEventArgs> ResolveAddressCompleted Implements ICivicAddressResolver.ResolveAddressCompleted Summary: Occurs when the address resolution that was initiated by a call to ResolveAddressAsync completes. Example: The following program shows how to call ResolveAddressAsync to resolve a civic address asynchronously.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public interface ICivicAddressResolver Summary: Provides a method that when implemented, resolves a latitude/longitude location to a civic address. Remarks: To resolve a GeoCoordinate to a CivicAddress asynchronously, implement ResolveAddressAsync, and provide the civic address data to the ResolveAddressCompleted event.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: void Start() Summary: Initiate the acquisition of location data.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ResolveAddressCompletedEventArgs : AsyncCompletedEventArgs Summary: Provides data for the ResolveAddressCompleted event. Example: The following example shows how to use the ResolveAddressCompletedEventArgs. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: [DirectoryRdnPrefixAttribute(#CN#)] [DirectoryServicesPermissionAttribute(SecurityAction.InheritanceDemand, Unrestricted = true)] [DirectoryServicesPermissionAttribute(SecurityAction.LinkDemand, Unrestricted = true)] public class AuthenticablePrincipal : Principal Summary: Encapsulates the account and contact data common to principals that can be authenticated. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public void RefreshExpiredPassword() Summary: Refreshes an expired password.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [DirectoryRdnPrefixAttribute(#CN#)] [DirectoryServicesPermissionAttribute(SecurityAction.LinkDemand, Unrestricted = true)] [DirectoryServicesPermissionAttribute(SecurityAction.InheritanceDemand, Unrestricted = true)] public class ComputerPrincipal : AuthenticablePrincipal Summary: Encapsulates principals that are computer accounts. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"The channel is encrypted by using the Secure Sockets Layer (SSL). Active Directory requires that the Certificate Services be installed to support SSL.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Instantiates a new instance of the MultipleMatchesException class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Returns a Boolean value that specifies whether the group is a member of the specified group.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public string UserPrincipalName { get; set; } Property Value Type: System.String The UPN associated with this principal or null if no if the UPN has not been set. Summary: Gets or sets the user principal name (UPN) associated with this principal. Remarks: Setting this property to null removes the existing UPN, if one exists.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class PrincipalOperationException : PrincipalException Summary: Thrown when ADSI returns an error during an operation to update the store. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [DirectoryServicesPermissionAttribute(SecurityAction.LinkDemand, Unrestricted = true)] [DirectoryServicesPermissionAttribute(SecurityAction.InheritanceDemand, Unrestricted = true)] public class PrincipalSearcher : IDisposable Summary: Encapsulates the methods and search patterns used to execute a query against the underlying principal store. Remarks: The default page size of 256 KB is used when the PrincipalSearcher class performs a query for domain principals. The application may override the default value by setting the PageSize property in the underlying DirectorySearcher object that is returned from the GetUnderlyingSearcher method. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,1,0
"Additional online Documentation: Syntax: public virtual void Dispose() Implements IDisposable.Dispose Summary: Disposes the current instance of the PrincipalSearcher object.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public int Count { get; } Property Value Type: System.Int32 Implements ICollection(Of T).Count Summary: Gets the number of objects in the collection.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class AddResponse : DirectoryResponse Summary: The AddResponse class is returned by SendRequest as a response to AddRequest. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class BerConversionException : DirectoryException Summary: The BerConversionException class is an exception thrown when converting data using a BerConverter object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class BerConverter Summary: The BerConverter class encodes and decodes structured data using basic encoding rules (BER). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public delegate void DereferenceConnectionCallback( LdapConnection primaryConnection, LdapConnection connectionToDereference ) Parameters primaryConnectionType: System.DirectoryServices.Protocols.LdapConnection An LdapConnection object that specifies the primary connection. connectionToDereferenceType: System.DirectoryServices.Protocols.LdapConnection An LdapConnection object that specifies the connection to dereference. Summary: The DereferenceConnectionCallback delegate dereferences a connection that is no longer required. The connection was probably established through a successful call to the QueryForConnectionCallback or NotifyOfNewConnectionCallback delegate.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public DirectoryAttributeOperation Operation { get; set; } Property Value Type: System.DirectoryServices.Protocols.DirectoryAttributeOperation The DirectoryAttributeOperation modification to perform. Summary: The Operation property specifies one of DirectoryAttributeOperation modifications to perform. Remarks: The default Operation is DirectoryAttributeOperation. Exceptions Exceptions Condition InvalidEnumArgumentException The property value is not one of the DirectoryAttributeOperation values.",1,0,0,0,0,0,1,0,0,0,0,0
"Replace an attribute value. The value is equal to 2.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class DirectoryOperation Summary: The DirectoryOperation class is an abstract class used as a base for request and response elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string RequestId { get; set; } Property Value Type: System.String The requestID specified in the request. Summary: The RequestId property contains the requestID specified in the request.",0,0,0,0,0,0,0,0,0,0,0,1
"If this option is used, only changed values are returned. If this option is not used, all values, up to a server-specified limit, in a multi-valued attribute, are returned when a value changes. The value equals 2147483648 or 0x80000000.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum DsmlDocumentProcessing Summary: The DsmlDocumentProcessing enumeration specifies the processing method for a DSML document.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public int IndexOf( DirectoryRequest value ) Parameters valueType: System.DirectoryServices.Protocols.DirectoryRequest The DirectoryRequest object for which the index is returned. Return Value Type: System.Int32 The index value of the specified DirectoryRequest object, if found; otherwise, -1. Summary: The IndexOf method returns the zero-based index of the first occurrence of the specified DirectoryRequest object in the DsmlRequestDocument collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [DirectoryServicesPermissionAttribute(SecurityAction.LinkDemand, Unrestricted = true)] public abstract void BeginSession() Summary: The BeginSession method instructs the DSML server to start a new session. Remarks: The method will block while waiting for a response from the DSML server and will timeout according to the Timeout property.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract string SessionId { get; } Property Value Type: System.String The active session ID. Summary: The SessionId property contains the active session ID. Remarks: A null value signifies no active session.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: The ErrorResponseCategory enumeration contains possible DSML error responses.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum ExtendedDNFlag Summary: The ExtendedDNFlag enumeration specifies the format of an extended distinguished name.",1,0,0,0,0,0,0,0,0,0,0,0
"Specifies that the GUID and SID values are returned in hexadecimal format. The value is equal to 0.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class LazyCommitControl : DirectoryControl Summary: The LazyCommitControl class instructs the server to return the results of a DS modification command, such as add, delete, or replace, after it has been completed in memory, but before it has been committed to disk. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class LdapException : DirectoryException, ISerializable Summary: The LdapException class is an exception that occurs when LDAP returns an error code not included in ResultCode. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public void StartTransportLayerSecurity( DirectoryControlCollection controls ) Parameters controlsType: System.DirectoryServices.Protocols.DirectoryControlCollection A DirectoryControlCollection object that contains the controls to use. Summary: The StartTransportLayerSecurity method starts transport layer security encryption.",0,0,0,0,0,0,0,0,0,0,0,1
"Specifies that the domain controller returned should not be the current computer. The value is equal to 16384 or 0x4000.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ModifyDNRequest : DirectoryRequest Summary: The ModifyDNRequest class modifies the distinguished name of an object. This class moves an object to a new parent and/or renames the object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ModifyDNResponse : DirectoryResponse Summary: The ModifyDNResponse class is returned by SendRequest as a response to ModifyDNRequest. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public int TotalCount { get; } Property Value Type: System.Int32 The estimated value of the total count of the entries returned. Summary: The TotalCount property contains the estimated result set size.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class PermissiveModifyControl : DirectoryControl Summary: The PermissiveModifyControl class is used to modify the behavior of a ModifyRequest object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public delegate X509Certificate QueryClientCertificateCallback( LdapConnection connection, byte[][] trustedCAs ) Parameters connectionType: System.DirectoryServices.Protocols.LdapConnection A LdapConnection object that specifies the connection. trustedCAsType: System.Byte()() An array of Byte arrays that specifies the trusted certification authorities (CAs). Return Value Type: System.Security.Cryptography.X509Certificates.X509Certificate The default callback function used to specify the client certificates while establishing an SSL connection. Summary: The QueryClientCertificateCallback delegate gets or sets the default callback function used to specify the client certificates while establishing an SSL connection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: The QuotaControl constructor creates an instance of the QuotaControl class.",0,0,0,0,0,0,0,0,0,0,0,1
"The attribute and known values do not match. The value is equal to 5.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int IndexOf( SearchResultReference value ) Parameters valueType: System.DirectoryServices.Protocols.SearchResultReference The SearchResultReference object for which the index is returned. Return Value Type: System.Int32 The index value of the specified SearchResultReference object, if found. If the object is not found, this method returns -1. Summary: The IndexOf method returns the zero-based index of the first occurrence of the specified SearchResultReference object in SearchResultReferenceCollection.",1,0,0,0,0,0,0,0,0,0,0,0
"Indicates that the server is using the SSL3 protocol. The value is equal to 16.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class TreeDeleteControl : DirectoryControl Summary: The TreeDeleteControl class is used with DeleteRequest to delete an entire subtree in the directory. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class VlvRequestControl : DirectoryControl Summary: The VlvRequestControl class is used to request virtual list view (VLV) support from the server. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the ActiveDirectoryAccessRule class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the ActiveDirectoryAccessRule class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ActiveDirectoryAuditRule : ObjectAuditRule Summary: The ActiveDirectoryAuditRule is used to set an access control entry (ACE) on a system access control list (SACL). The ActiveDirectoryAccessRule contains the trustee, which is represented as an IdentityReference object. It also contains information about the access control type, access mask, and other properties such as inheritance flags. This rule is set on an ActiveDirectorySecurity object. After the ActiveDirectorySecurity is committed to the directory store, it will modify the security descriptor object according to the rules that are set on ActiveDirectoryAuditRule. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,0,0,0,0,0
"The right to modify the DACL in the object security descriptor.",0,1,0,0,0,0,0,0,0,0,0,0
"The right to delete children of the object.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Creates an AuditRule object.",0,0,0,0,0,0,1,0,0,0,0,0
"Indicates inheritance that includes the object to which the ACE is applied, the object's immediate children, and the descendents of the object's children.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum DereferenceAlias Summary: The DereferenceAlias enumeration specifies how aliases are resolved. This enumeration provides values for the DirectorySearcher.DerefAlias property.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IEnumerator GetEnumerator() Return Value Type: System.Collections.IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements IEnumerable.GetEnumerator Summary: Returns an enumerator that iterates through the collection.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the DirectoryEntry class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Loads the property values for this DirectoryEntry object into the property cache.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public DirectoryServicesPermissionEntryCollection PermissionEntries { get; } Property Value Type: System.DirectoryServices.DirectoryServicesPermissionEntryCollection A DirectoryServicesPermissionEntryCollection object that contains the permission entries for this permission. Summary: Gets the collection of permission entries for this permission.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class DirectoryVirtualListView Summary: The DirectoryVirtualListView class specifies how to conduct a virtual list view search. A virtual list view search enables users to view search results as address-book style virtual list views. It is specifically designed for very large result sets. Search data is retrieved in contiguous subsets of a sorted directory search. Example: The following  example shows how to retrieve the first 30 entries in a result set.  The following  example shows how to retrieve the first 50 entries in a result set that start with the letters #Ha#.    The following  example shows how to retrieve the first 100 entries at the 60% approximate target. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,1,0,0,0,1,0,0,0
"Additional online Documentation:",1,0,0,1,0,0,0,1,1,0,0,1
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [TypeConverterAttribute(#System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a#)] [DSDescriptionAttribute(#DSTarget#)] public string Target { get; set; } Property Value Type: System.String A string that contains the target entry that was requested by the client. Summary: The Target property gets or sets a value to indicate the target entry that was requested by the client.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public sealed class PropertyAccessRule : ActiveDirectoryAccessRule Summary: The PropertyAccessRule class represents a specific type of access rule that is used to allow or deny access to an Active Directory Domain Services property. Remarks: This class is provided to simplify construction of an access rule for an Active Directory Domain Services property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class PropertySetAccessRule : ActiveDirectoryAccessRule Summary: The PropertySetAccessRule class represents a specific type of access rule that is used to allow or deny access to an Active Directory Domain Services property set. For a list of property sets that are defined for Active Directory Domain Services, see the topic Property Sets in the MSDN Library at http://msdn.microsoft.com/library. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: int IList.Add( Object value ) Parameters valueType: System.Object The item to add to the list. Return Value Type: System.Int32 The position into which the new item was inserted. Implements IList.Add(Object) Summary: Adds an item to the list.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ResultPropertyCollection Properties { get; } Property Value Type: System.DirectoryServices.ResultPropertyCollection A ResultPropertyCollection of properties set on this object. Summary: Gets a ResultPropertyCollection collection of properties for this object. Remarks: This collection only contains properties that were explicitly requested through DirectorySearcher.PropertiesToLoad. Example: The following example is an excerpt of the example in SearchResult. The original example creates a new DirectoryEntry object with the desired path and uses the FindOne method to initiate the search. After performing the search, the example uses the GetDirectoryEntry method to retrieve the live directory entry that is identified in the search results. In this example, the search result is put into a ResultPropertyCollection. Then, each property is displayed to the console window.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [DirectoryServicesPermissionAttribute(SecurityAction.LinkDemand, Unrestricted = true)] public class SearchResultCollection : MarshalByRefObject, ICollection, IEnumerable, IDisposable Summary: The SearchResultCollection class contains the SearchResult instances that the Active Directory hierarchy returned during a DirectorySearcher query. Remarks: Due to implementation restrictions, the SearchResultCollection class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the Dispose method when the SearchResultCollection object is no longer needed. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int Count { get; } Property Value Type: System.Int32 The number of SearchResult objects in this collection. Implements ICollection.Count Summary: Gets the number of SearchResult objects in this collection.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum SearchScope Summary: Specifies the possible scopes for a directory search that is performed using the DirectorySearcher object.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [TypeConverterAttribute(typeof(ExpandableObjectConverter))] public class SortOption Summary: Specifies how to sort the results of a search. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IgnoreReplicationSchedule { get; set; } Property Value Type: System.Boolean A Boolean value that indicates whether to ignore the replication schedule. true if the replication schedule is ignored; otherwise, false. Summary: Gets or sets a value that indicates whether the replication schedule is ignored. Remarks: When the ActiveDirectoryInterSiteTransport.IgnoreReplicationSchedule is true, any site link availability schedules that have been configured are ignored, and all site links become always-available for replication. When set to false, any previously configured site link availability schedules go back into effect. If no site link availability schedules have been configured, setting this property has no effect.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ActiveDirectorySchemaClassCollection : CollectionBase Summary: The ActiveDirectorySchemaClassCollection class is a read/write collection that contains ActiveDirectorySchemaClass objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool NotificationEnabled { get; set; } Property Value Type: System.Boolean true if notifications are enabled; false if notifications are disabled. Summary: Gets or sets a value indicating whether notifications are enabled.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the ActiveDirectorySubnet class.",1,0,0,0,0,0,0,0,0,0,0,1
"An OR-Name object type.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected override void Finalize() Summary: Overrides the Object.Finalize method.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool Contains( AdamInstance adamInstance ) Parameters adamInstanceType: System.DirectoryServices.ActiveDirectory.AdamInstance The AdamInstance object to search for in this collection. Return Value Type: System.Boolean true if the AdamInstance object is in this collection; otherwise, false. Summary: Determines if the specified AdamInstance object is in this collection.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class AdamRoleCollection : ReadOnlyCollectionBase Summary: The AdamRoleCollection class is a read-only collection that contains AdamRole items. Remarks: Note The AdamRoleCollection class refers to Active Directory Application Mode (ADAM) which has been renamed to Active Directory Lightweight Directory Services (AD LDS). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Releases the resources that are used by the ApplicationPartition object.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ApplicationPartitionCollection : ReadOnlyCollectionBase Summary: The ApplicationPartitionCollection class is a read-only collection that contains ApplicationPartition objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class AttributeMetadata Summary: The AttributeMetadata class is used to contain replication metadata for an Active Directory Domain Services attribute. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [DirectoryServicesPermissionAttribute(SecurityAction.LinkDemand, Unrestricted = true)] public abstract class DirectoryServer : IDisposable Summary: The DirectoryServer class is an abstract class that represents an Active Directory Domain Services server or AD LDS instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract SyncUpdateCallback SyncFromAllServersCallback { get; set; } Property Value Type: System.DirectoryServices.ActiveDirectory.SyncUpdateCallback The delegate that this directory server will use for synchronization notifications. Summary: Gets or sets the synchronization delegate for this directory server.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class DirectoryServerCollection : CollectionBase Summary: The DirectoryServerCollection class is a read/write collection that contains DirectoryServer objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public int Add( DirectoryServer server ) Parameters serverType: System.DirectoryServices.ActiveDirectory.DirectoryServer The DirectoryServer object to append to this collection. Return Value Type: System.Int32 The zero-based DirectoryServer object that is appended to this collection. Summary: Appends the specified DirectoryServer object to this collection.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public DomainController PdcRoleOwner { get; } Property Value Type: System.DirectoryServices.ActiveDirectory.DomainController An DomainController object that represents the domain controller that holds the PDC emulator role for this domain. Summary: Gets the DomainController object that holds the primary domain controller (PDC) for this domain.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum DomainCollisionOptions Summary: Specifies additional information about a forest trust collision when the CollisionType property value is Domain.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Forest Forest { get; } Property Value Type: System.DirectoryServices.ActiveDirectory.Forest A Forest object that represents the forest that this domain controller is a member of. Summary: Gets the forest that this domain controller is a member of.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [DirectoryServicesPermissionAttribute(SecurityAction.InheritanceDemand, Unrestricted = true)] [DirectoryServicesPermissionAttribute(SecurityAction.LinkDemand, Unrestricted = true)] public virtual bool IsGlobalCatalog() Return Value Type: System.Boolean true if this domain controller is a global catalog server or false otherwise. Summary: Determines if this domain controller is a global catalog server.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum ForestTrustCollisionType Summary: Specifies the collision type of a ForestTrustRelationshipCollision object.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void CopyTo( GlobalCatalog[] globalCatalogs, int index ) Parameters globalCatalogsType: System.DirectoryServices.ActiveDirectory.GlobalCatalog() The array of GlobalCatalog objects that receives the elements of this collection. indexType: System.Int32 The zero-based index in globalCatalogs where this method starts copying this collection. Summary: Copies all GlobalCatalog objects in this collection to the specified array, starting at the specified index of the target array.",1,0,0,0,0,0,0,0,0,0,0,0
"10:00 A.M.",1,0,0,0,0,0,0,0,0,0,0,0
"Search only for domain controllers that are currently running the Kerberos Key Distribution Center service.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ReadOnlyActiveDirectorySchemaClassCollection : ReadOnlyCollectionBase Summary: The ReadOnlyActiveDirectorySchemaClassCollection class is a read-only collection that contains ActiveDirectorySchemaClass objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum ReplicationNeighborOptions Summary: Specifies the options for a ReplicationNeighbor object.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ReplicationNeighborCollection : ReadOnlyCollectionBase Summary: The ReplicationNeighborCollection class is a read-only collection that contains ReplicationNeighbor objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum ReplicationSecurityLevel Summary: Specifies the Active Directory Lightweight Directory (AD LDS) Services replication authentication mode.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Determines the span of a replication connection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum SyncFromAllServersEvent Summary: Used in the SyncUpdateCallback delegate to specify the type of synchronization event.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class TopLevelName Summary: Contains forest trust account information about a top-level domain in a Forest. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class TopLevelNameCollection : ReadOnlyCollectionBase Summary: The TopLevelNameCollection class is a read-only collection that contains TopLevelName objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class ColorEditor : UITypeEditor Summary: Provides a UITypeEditor for visually picking a color. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class ToolboxItemContainer : ISerializable Summary: Encapsulates a ToolboxItem. Remarks: ToolboxItemContainer is a simple class that encapsulates a ToolboxItem for efficiency. By having a single class that is always loaded, you can defer the loading of the ToolboxItem until it is needed. Because new classes can be derived from ToolboxItem, you could load a ToolboxItem that could, in turn, load an assembly that is not already in memory. For a large collection of ToolboxItem objects, this could cause a large number of assemblies to be loaded, which decreases performance. Instead, the toolbox service deals only with ToolboxItemContainer objects and retrieves their contained ToolboxItem only when necessary. The ToolboxItemContainer is designed to hold any cached data from the ToolboxItem. The default implementation only holds the filter of the ToolboxItem, but deriving classes may choose to cache the name, image, and other information. ToolboxItemContainer objects support two forms of serialization: they can be serialized through standard runtime serialization, and they can also load and save themselves from a System.Windows.Forms.IDataObject. The former provides a very easy way to save ToolboxItemContainer objects to a persistent storage. The latter provides a way to integrate ToolboxItemContainer objects with mixed data storage formats. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,1,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual IDataObject ToolboxData { get; } Property Value Type: System.Windows.Forms.IDataObject An IDataObject that describes this ToolboxItemContainer. Summary: Gets an System.Windows.Forms.IDataObject that describes this ToolboxItemContainer. Remarks: The ToolboxData property creates the serialized version of the ToolboxItem. The data object can be used by an application to store this ToolboxItem. This data object is fabricated from the ToolboxItem, if necessary. Notes to Inheritors Implementers may override this to provide additional storage information in the data object.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Returns an ICollection of ToolboxItem objects.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: void IToolboxService.RemoveCreator( string format, IDesignerHost host ) Parameters formatType: System.String The data format of the creator to remove. hostType: System.ComponentModel.Design.IDesignerHost The IDesignerHost that is associated with the creator to remove. Implements IToolboxService.RemoveCreator(String, IDesignerHost) Summary: Removes a previously added toolbox creator that is associated with the specified data format and the specified designer host.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Locks a Bitmap into system memory.",1,0,1,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public static Brush Gray { get; } Property Value Type: System.Drawing.Brush A Brush object set to a system-defined color. Summary: Gets a system-defined Brush object. Remarks: To see the color represented by this brush and other brushes in this class, see Colors by Name.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public static Brush Sienna { get; } Property Value Type: System.Drawing.Brush A Brush object set to a system-defined color. Summary: Gets a system-defined Brush object. Remarks: To see the color represented by this brush and other brushes in this class, see Colors by Name.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public static Color Brown { get; } Property Value Type: System.Drawing.Color A Color representing a system-defined color. Summary: Gets a system-defined color that has an ARGB value of \#FFA52A2A. Remarks: For an example of this color, see Colors by Name.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Creates a Color structure from the four 8-bit ARGB components (alpha, red, green, and blue) values.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static Color IndianRed { get; } Property Value Type: System.Drawing.Color A Color representing a system-defined color. Summary: Gets a system-defined color that has an ARGB value of \#FFCD5C5C. Remarks: For an example of this color, see Colors by Name.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] public enum CopyPixelOperation Summary: Determines how the source color in a copy pixel operation is combined with the destination color to result in a final color. Remarks: The CopyPixelOperation enumeration is used by the CopyFromScreen method of the Graphics class.",0,0,0,0,0,0,0,0,0,0,0,0
"The colors of the source and destination areas are combined using the Boolean OR operator.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new Font that uses the specified existing Font and FontStyle.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public byte GdiCharSet { get; } Property Value Type: System.Byte A byte value that specifies the GDI character set that this Font uses. The default is 1. Summary: Gets a byte value that specifies the GDI character set that this Font uses. Remarks: This property returns 1, unless a different character set is specified in the Font(String, Single, FontStyle, GraphicsUnit, Byte) constructor. This property takes a value from the list defined in the Windows SDK header file WinGDI.h. The character sets and byte values are listed in the following table. Character set Value ANSI 0 DEFAULT 1 SYMBOL 2 SHIFTJIS 128 HANGEUL 129 HANGUL 129 GB2312 134 CHINESEBIG5 136 OEM 255 JOHAB 130 HEBREW 177 ARABIC 178 GREEK 161 TURKISH 162 VIETNAMESE 163 THAI 222 EASTEUROPE 238 RUSSIAN 204 MAC 77 BALTIC 186",1,0,0,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Summary: Initializes a new FontFamily that uses the specified name.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static FontFamily[] Families { get; } Property Value Type: System.Drawing.FontFamily() An array of FontFamily objects associated with the current graphics context. Summary: Returns an array that contains all the FontFamily objects associated with the current graphics context. Example: The following code example shows all the font families in the Families property of the FontFamily class. This example is designed to be used with a Windows Form. To run this example, add a ListBox named listBox1 to a form and call the PopulateListBoxWithFonts method from the form's constructor.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public int GetCellDescent( FontStyle style ) Parameters styleType: System.Drawing.FontStyle A FontStyle that contains style information for the font. Return Value Type: System.Int32 The cell descent metric for this FontFamily that uses the specified FontStyle. Summary: Returns the cell descent, in design units, of the FontFamily of the specified style. Example: The following code example is designed for use with Windows Forms, and it requires PaintEventArgs e, which is a parameter of the Paint event handler. The code performs the following actions: Creates a FontFamily. Gets the cell descent for that font family. Draws the value of the cell descent to the screen as text.",1,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: public void Clear( Color color ) Parameters colorType: System.Drawing.Color Color structure that represents the background color of the drawing surface. Summary: Clears the entire drawing surface and fills it with the specified background color. Remarks: The Clear method clears the state of the graphics object and should not be called when the graphics object cannot be updated. For example, if the Clear method is called on a secure desktop in a terminal server session, an ExternalException may occur, leaving the Graphics object in an inconsistent state. Example: The following code example is designed for use with Windows Forms, and it requires PaintEventArgs e, which is a parameter of the Paint event handler. The code clears the drawing surface of the Graphics and sets the background color to the system-defined teal color.",1,0,1,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public CompositingMode CompositingMode { get; set; } Property Value Type: System.Drawing.Drawing2D.CompositingMode This property specifies a member of the CompositingMode enumeration. The default is SourceOver. Summary: Gets a value that specifies how composited images are drawn to this Graphics. Remarks: The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels. Note You should not use a CompositingMode property value of SourceCopy when the TextRenderingHint property is set to ClearTypeGridFit. An exception could occur or the image may not render correctly.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void Dispose() Implements IDisposable.Dispose Summary: Releases all resources used by this Graphics. Remarks: Calling Dispose allows the resources used by this Graphics to be reallocated for other purposes. Example: The following code example is designed for use with Windows Forms, and it requires PaintEventArgs e, which is a parameter of the Paint event handler. The code performs the following actions: Creates an Image from a graphics file SampImag.jpg in the example directory. Creates a Graphics from the Image. Alters the image by filling a rectangle within it. Draws the Image to the screen. Releases the created Graphics.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Draws a series of line segments that connect an array of Point structures.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Sends the records in the specified Metafile, one at a time, to a callback method for display at a specified point.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Sends the records in the specified Metafile, one at a time, to a callback method for display at a specified point.",1,0,1,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Summary: Sends the records in the specified Metafile, one at a time, to a callback method for display at a specified point.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)] public IntPtr GetHdc() Return Value Type: System.IntPtr Handle to the device context associated with this Graphics. Implements IDeviceContext.GetHdc Summary: Gets the handle to the device context associated with this Graphics. Remarks: The device context is a Windows structure based on GDI that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output. This method returns that device context with the exception of a font. Because a font is not selected, calls to the FromHdc method using a handle returned from the GetHdc method will fail. Calls to the GetHdc and ReleaseHdc methods must appear in pairs. During the scope of a GetHdc and ReleaseHdc method pair, you usually make only calls to GDI functions. Calls in that scope made to GDI+ methods of the Graphics that produced the hdc parameter fail with an ObjectBusy error. Also, GDI+ ignores any state changes made to the Graphics of the hdc parameter in subsequent operations. Example: The following code example is designed for use with Windows Forms, and it requires PaintEventArgs e, which is a parameter of the Paint event handler. The example illustrates calling a Windows GDI function to perform the same task as a GDI+ Graphics method. The code performs the following actions: Defines the interoperability DllImportAttribute attribute for the Windows DLL file gdi32.dll. This DLL contains the desired GDI function. Defines the Rectangle function in that DLL as external. Creates a red pen. With the pen, draws a rectangle to the screen using the GDI+ DrawRectangle method. Defines an internal pointer type variable hdc and sets its value to the handle to the device context of the form. Draws a rectangle to the screen using the GDI Rectangle function. Releases the device context represented by the hdc parameter.",1,1,1,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public PixelOffsetMode PixelOffsetMode { get; set; } Property Value Type: System.Drawing.Drawing2D.PixelOffsetMode This property specifies a member of the PixelOffsetMode enumeration Summary: Gets or set a value specifying how pixels are offset during rendering of this Graphics. Remarks: Use this property to specify either higher quality, slower rendering, or lower quality, faster rendering of the contents of this Graphics object.",1,0,0,1,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void ResetTransform() Summary: Resets the world transformation matrix of this Graphics to the identity matrix. Remarks: The identity matrix represents a transformation with no scaling, rotation, or translation. Resetting the world transformation of this Graphics to the identity matrix means that its world transformation does not change the geometry of transformed items. Example: The following code example is designed for use with Windows Forms, and it requires PaintEventArgs e, which is a parameter of the Paint event handler. The code performs the following actions: Translates the world transform of the Windows Form by a vector (100, 0). Saves the graphics state of the form. Resets the world transform of the form to an identity and fills a rectangle with a solid red brush. Restores the translated graphics state and fills a rectangle with a solid blue brush. The result is an untranslated red-filled rectangle and a translated blue-filled rectangle.",1,1,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public delegate bool DrawImageAbort( IntPtr callbackdata ) Parameters callbackdataType: System.IntPtr Internal pointer that specifies data for the callback method. This parameter is not passed by all DrawImage overloads. You can test for its absence by checking for the value Zero. Return Value Type: System.Boolean This method returns true if it decides that the DrawImage method should prematurely stop execution. Otherwise it returns false to indicate that the DrawImage method should continue execution. Summary: Provides a callback method for deciding when the DrawImage method should prematurely cancel execution and stop drawing an image. Remarks: This method is used in conjunction with the DrawImage method of the Graphics class. Certain overloads of the DrawImage method call an application-defined callback method of this type to find out if the overloads should stop or continue execution. During execution, the relevant DrawImage overloads frequently call this callback method to find out if they should stop drawing the specified image or if they should continue drawing the image. The Graphics.DrawImageAbort callback method can determine whether to continue or not based on a chosen algorithm included in it, optionally using the data passed to it by the callbackdata parameter. For example, an algorithm might determine if the image has scrolled off the screen and signal a cancellation to the DrawImage method to stop drawing. A user declaration of this event-handling method must have the same parameters as the Graphics.DrawImageAbort delegate declaration. Example: This example is a simplistic implementation of the Graphics.DrawImageAbort delegate. It merely checks to see if the DrawImage method has passed it data using the callbackdata parameter. (Some DrawImage overloads have only a DrawImageAbort parameter and pass no data; some overloads have both DrawImageAbort and callbackdata parameters and can pass data.) If no data was passed, it returns true to signal to the calling DrawImage method that it should cancel the drawing. If data was passed, it returns false to signal that drawing should continue. A realistic implementation of this callback would involve the actual scrutiny of some criteria to cancel or continue the execution.",1,1,1,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the Icon class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Bitmap ToBitmap() Return Value Type: System.Drawing.Bitmap A Bitmap that represents the converted Icon. Summary: Converts this Icon to a GDI+ Bitmap. Remarks: The transparent areas of the icon are lost when it is converted to a bitmap, and the transparent color of the resulting bitmap is set to RGB(13,11,12). The returned bitmap has the same height and width as the original icon. Example: The following code example demonstrates how to use the ToBitmap method. This example is designed to be used with Windows Forms. Create a form and paste the following code into it. Call the IconToBitmap method in the form's .Paint event handler, passing e as PaintEventArgs .",1,0,0,0,1,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public interface IDeviceContext : IDisposable Summary: Defines methods for obtaining and releasing an existing handle to a Windows device context. Remarks: A device context defines the graphics object for drawing on a Windows-based device. An example of a class that implements the IDeviceContext interface is the Graphics class.",1,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] [ComVisibleAttribute(true)] [TypeConverterAttribute(typeof(ImageConverter))] public abstract class Image : MarshalByRefObject, ISerializable, ICloneable, IDisposable Summary: An abstract base class that provides functionality for the Bitmap and Metafile descended classes. Remarks: To draw an Image on a Windows Form, you should use one of the DrawImage(Image, Point) methods. Example: The following code example is designed for use with Windows Forms. It is a handler for the Paint event. A Graphics object is passed to the event and is used to draw the image on the form. The code performs the following actions: Creates an image from a file named SampImag.jpg. This file must be located in the same folder as the application executable file. Creates a point at which to draw the upper-left corner of the image. Draws the unscaled image on the form. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: [TypeConverterAttribute(typeof(StringConverter))] [BindableAttribute(true)] public Object Tag { get; set; } Property Value Type: System.Object The Object that provides additional data about the image. Summary: Gets or sets an object that provides additional data about the image.",1,0,0,0,0,0,0,0,0,0,0,0
"A system-defined color.",0,0,0,0,0,0,0,0,0,0,0,1
"A system-defined color.",0,0,0,0,0,0,0,0,0,0,0,1
"A system-defined color.",1,0,0,0,0,0,0,0,0,0,0,1
"A system-defined color.",1,0,0,0,0,0,0,0,0,0,0,1
"A system-defined color.",0,0,0,0,0,0,0,0,0,0,0,1
"A system-defined color.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class Pen : MarshalByRefObject, ICloneable, IDisposable Summary: Defines an object used to draw lines and curves. This class cannot be inherited. Remarks: A Pen draws a line of specified width and style. Use the DashStyle property to draw several varieties of dashed lines. The line drawn by a Pen can be filled in a variety of fill styles, including solid colors and textures. The fill style depends on brush or texture that is used as the fill object. Example: The following code example demonstrates constructing a Pen with a Brush and the effects of setting the LineJoin property on a Pen. This example is designed to be used with Windows Forms. Paste the code into a form and call the ShowLineJoin method when handling the form's Paint event, passing e as PaintEventArgs. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public static Pen MediumSpringGreen { get; } Property Value Type: System.Drawing.Pen A Pen object set to a system-defined color. Summary: A system-defined Pen object with a width of 1. Remarks: To see the color represented by this pen and other pens in this class, see Colors by Name.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public static Pen NavajoWhite { get; } Property Value Type: System.Drawing.Pen A Pen object set to a system-defined color. Summary: A system-defined Pen object with a width of 1. Remarks: To see the color represented by this pen and other pens in this class, see Colors by Name.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static Pen RosyBrown { get; } Property Value Type: System.Drawing.Pen A Pen object set to a system-defined color. Summary: A system-defined Pen object with a width of 1. Remarks: To see the color represented by this pen and other pens in this class, see Colors by Name.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation:",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Summary: Determines the RectangleF structure that represents the intersection of two rectangles.",1,0,0,0,0,0,0,0,0,0,0,1
"Specifies no clockwise rotation followed by a horizontal flip.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static readonly Size Empty Field Value Type: System.Drawing.Size A Size that has a Height and Width value of 0. Summary: Gets a Size structure that has a Height and Width value of 0.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static implicit operator SizeF ( Size p ) Parameters pType: System.Drawing.Size The Size structure to convert. Return Value Type: System.Drawing.SizeF The SizeF structure to which this operator converts. Summary: Converts the specified Size structure to a SizeF structure. Example: The following code example demonstrates the G, B, R, and A properties of a Color and the Widening member. This example is designed to be used with a Windows Form. Paste the code into the form and call the ShowPropertiesOfSlateBlue method from the form's Paint event-handling method, passing e as PaintEventArgs.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public static explicit operator PointF ( SizeF size ) Parameters sizeType: System.Drawing.SizeF The SizeF structure to be converted Return Value Type: System.Drawing.PointF The PointF structure to which this operator converts. Summary: Converts the specified SizeF structure to a PointF structure.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static SizeF Subtract( SizeF sz1, SizeF sz2 ) Parameters sz1Type: System.Drawing.SizeF The SizeF structure on the left side of the subtraction operator.  sz2Type: System.Drawing.SizeF The SizeF structure on the right side of the subtraction operator. Return Value Type: System.Drawing.SizeF A SizeF structure that is a result of the subtraction operation. Summary: Subtracts the width and height of one SizeF structure from the width and height of another SizeF structure.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class SizeFConverter : TypeConverter Summary: Converts SizeF objects from one type to another. Remarks: Most commonly, the SizeFConverter type converter is used to convert Font instances to and from their corresponding string representations. Access the FontConverter class through the TypeDescriptor. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum StringUnit Summary: Specifies the units of measure for a text string. Remarks: This enumeration is not currently used in the .NET Framework.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class SystemBrushes Summary: Each property of the SystemBrushes class is a SolidBrush that is the color of a Windows display element. Example: The following code example shows how to set a keyboard shortcut using the HotkeyPrefix property. It also demonstrates how to use the FromSystemColor method. To run this example, paste the code into a form, handle the form's Paint event and call the following method, passing e as PaintEventArgs. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public static Brush Control { get; } Property Value Type: System.Drawing.Brush A SolidBrush that is the face color of a 3-D element. Summary: Gets a SolidBrush that is the face color of a 3-D element.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public static Color ControlDark { get; } Property Value Type: System.Drawing.Color A Color that is the shadow color of a 3-D element. Summary: Gets a Color structure that is the shadow color of a 3-D element. Remarks: This color is applied to parts of a 3-D element that face away from the light source.",1,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static Color ControlLight { get; } Property Value Type: System.Drawing.Color A Color that is the light color of a 3-D element. Summary: Gets a Color structure that is the light color of a 3-D element. Remarks: This color is applied to parts of a 3-D element that face the light source.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static Font CaptionFont { get; } Property Value Type: System.Drawing.Font A Font that is used to display text in the title bars of windows. Summary: Gets a Font that is used to display text in the title bars of windows.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static Icon Error { get; } Property Value Type: System.Drawing.Icon An Icon object that contains the system error icon. Summary: Gets an Icon object that contains the system error icon (WIN32: IDI_ERROR).",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static Pen ButtonHighlight { get; } Property Value Type: System.Drawing.Pen A Pen that is the highlight color of a 3-D element. Summary: Gets a Pen that is the highlight color of a 3-D element. Remarks: This color is applied to parts of a 3-D element that face the light source. Example: The following code example demonstrates how to use the ButtonHighlight property. To run this example, paste it into a Windows Form. Handle the form's Paint event and call the DrawWithButtonHighlightPen method from the Paint event-handling method, passing e as PaintEventArgs.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public void ResetTransform() Summary: Resets the Transform property of this TextureBrush object to identity. Example: The following example is designed for use with Windows Forms, and it requires PaintEventArgs e, which is a parameter of the Paint event handler. The code performs the following actions: Creates a TextureBrush object. Rotates the texture image by 90 degrees. Fills a rectangle. Resets the transformation matrix to identity. Fills a second rectangle.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public Matrix Transform { get; set; } Property Value Type: System.Drawing.Drawing2D.Matrix A copy of the Matrix object that defines a geometric transformation that applies only to fills drawn by using this TextureBrush object. Summary: Gets or sets a copy of the Matrix object that defines a local geometric transformation for the image associated with this TextureBrush object. Remarks: A geometric transformation can be used to translate, scale, rotate, or skew the image that defines the texture of this brush. Because the matrix returned and by the Transform property is a copy of the brush's geometric transform, you should dispose of the matrix when you no longer need it.",1,0,1,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: public delegate void PropertyValueUIHandler( ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList ) Parameters contextType: System.ComponentModel.ITypeDescriptorContext An ITypeDescriptorContext that can be used to obtain context information.  propDescType: System.ComponentModel.PropertyDescriptor A PropertyDescriptor that represents the property being queried.  valueUIItemListType: System.Collections.ArrayList An ArrayList of PropertyValueUIItem objects containing the UI items associated with the property. Summary: Represents the method that adds a delegate to an implementation of IPropertyValueUIService. Remarks: When this delegate is invoked, it can add a PropertyValueUIItem containing UI items for the specified property to the ArrayList passed as the valueUIItemList parameter. Example: This following code example demonstrates creating a PropertyValueUIHandler event handler method that provides PropertyValueUIItem objects for any properties named HorizontalMargin or VerticalMargin.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] public class PropertyValueUIItem Summary: Provides information about a property displayed in the Properties window, including the associated event handler, pop-up information string, and the icon to display for the property. Example: The following code example provides a PropertyValueUIItem object for any properties of the component named HorizontalMargin or VerticalMargin. The PropertyValueUIItem for these properties provides an image, a ToolTip, and an event handler that displays a message box when the image for the property is clicked. This code example is part of a larger example provided for the IPropertyValueUIService interface. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public virtual PropertyValueUIItemInvokeHandler InvokeHandler { get; } Property Value Type: System.Drawing.Design.PropertyValueUIItemInvokeHandler A PropertyValueUIItemInvokeHandler indicating the event handler for this user interface (UI) item. Summary: Gets the handler that is raised when a user double-clicks this item.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IComponent[] Components { get; } Property Value Type: System.ComponentModel.IComponent() An array of type IComponent indicating the components to add to the toolbox. Summary: Gets or sets an array containing the components to add to the toolbox.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event ToolboxComponentsCreatedEventHandler ComponentsCreated Summary: Occurs immediately after components are created. Remarks: The ComponentsCreated event is raised each time components of this toolbox item are created. For more information about handling events, see Consuming Events.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Gets the editor style used by the EditValue method.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Paints a representation of the value of an object.",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public float[] Positions { get; set; } Property Value Type: System.Single() An array of blend positions that specify the percentages of distance along the gradient line. Summary: Gets or sets an array of blend positions for the gradient. Remarks: The elements of this array specify percentages of distance along the gradient line. For example, an element value of 0.2f specifies that this point is 20 percent of the total distance from the starting point. The elements in this array are represented by float values between 0.0f and 1.0f. The first element of the array must be 0.0f, and the last element must be 1.0f. Example: The following code example demonstrates how to use the Blend class by setting the Factors and Positions properties. This example is designed to be used with Windows Forms. Paste the code into a form that imports the System.Drawing.Drawing2D namespace. Handle the form's Paint event and call the DemonstrateBlend method, passing e as PaintEventArgs.",1,1,1,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public enum CoordinateSpace Summary: Specifies the system to use when evaluating coordinates.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Specifies the type of graphic shape to use on both ends of each dash in a dashed line.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Specifies whether commands in the graphics stack are terminated (flushed) immediately or executed as soon as possible.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void CloseAllFigures() Summary: Closes all open figures in this path and starts a new figure. It closes each open figure by connecting a line from its endpoint to its starting point. Example: The following code example is designed for use with Windows Forms, and it requires PaintEventArgs e, an OnPaint event object. The code performs the following actions: Creates a path. Adds several open figures to the path. Closes all figures in the path. Draws the path to the screen.",1,1,0,0,0,0,0,1,1,0,0,0
"Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice the width of Horizontal.",1,0,0,0,1,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum InterpolationMode Summary: The InterpolationMode enumeration specifies the algorithm that is used when images are scaled or rotated.",1,0,0,0,0,0,0,0,0,0,1,0
"Specifies high-quality, bilinear interpolation. Prefiltering is performed to ensure high-quality shrinking.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class PathGradientBrush : Brush Summary: Encapsulates a Brush object that fills the interior of a GraphicsPath object with a gradient. This class cannot be inherited. Remarks: The color gradient is a smooth shading of colors from the center point of the path to the outside boundary edge of the path. Blend factors, positions, and style affect where the gradient starts and ends, and how fast it changes shade. Path gradient brushes do not obey the SmoothingMode property of the Graphics object used to do the drawing. Areas filled using a PathGradientBrush object are rendered the same way (aliased) regardless of the smoothing mode. Example: The following code example shows how to create a PathGradientBrush. This example is designed for use with Windows Forms, and it requires the PaintEventArgs e, which is a parameter of PaintEventHandler. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,0,1,0,0,0
"The corresponding segment is dashed.",1,0,0,0,0,0,0,0,0,0,0,1
"Specifies that pixels are offset by -.5 units, both horizontally and vertically, for high speed antialiasing.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum QualityMode Summary: Specifies the overall quality when rendering GDI+ objects. Remarks: The quality level is inversely proportional to the amount of time spent rendering. This mode does not affect text. To set the text rendering quality, use the TextRenderingHint enumeration.",1,1,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class RegionData Summary: Encapsulates the data that makes up a Region object. This class cannot be inherited. Example: The following example is designed for use with Windows Forms, and it requires PaintEventArgs e, which is a parameter of the Paint event handler. The code performs the following actions: Creates a rectangle and draw its to the screen in black. Creates a region using the rectangle. Gets the RegionData. Draws the region data (an array of bytes) to the screen, by using the DisplayRegionData helper function. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Summary: Specifies whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum WrapMode Summary: Specifies how a texture or gradient is tiled when it is smaller than the area being filled. Remarks: Brushes use this enumeration to determine how shapes are filled. To see examples of the effects the WrapMode enumeration values have on a tiled image, see How to: Tile a Shape with an Image. Example: The following code example demonstrates how to obtain a new bitmap using the FromFile method. It also demonstrates a TextureBrush and the WrapMode enumeration. This example is designed to be used with Windows Forms. Create a form containing a button named Button2. Paste the code into the form and associate the Button2_Click method with the button's Click event.",1,0,0,1,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public enum ColorMapType Summary: Specifies the types of color maps.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public float Matrix21 { get; set; } Property Value Type: System.Single The element at the second row and first column of this ColorMatrix. Summary: Gets or sets the element at the second row and first column of this ColorMatrix.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public float Matrix42 { get; set; } Property Value Type: System.Single The element at the fourth row and second column of this ColorMatrix. Summary: Gets or sets the element at the fourth row and second column of this ColorMatrix.",1,0,0,0,0,0,1,0,0,0,0,0
"See #Windows-Format Metafiles# in the GDI section of the MSDN Library.",0,0,0,0,0,0,0,0,0,0,0,1
"See #Enhanced-Format Metafiles# in the GDI section of the MSDN Library.",0,0,0,0,0,0,0,0,0,0,1,0
"See DrawRectangles methods.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the EncoderParameter class with the specified Encoder object and value.",1,0,1,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum EncoderValue Summary: Used to specify the parameter value passed to a JPEG or TIFF image encoder when using the Image.Save or Image.SaveAdd methods. Remarks: When you call the Save or SaveAdd method of an Image object, you can pass parameters to the image encoder by passing an EncoderParameters object to the Save or SaveAdd method. An EncoderParameters object contains an array of EncoderParameter objects. Each EncoderParameter object has an array of values and an Encoder property that specifies the parameter category. The EncoderValue enumeration provides names for some of the values that can be passed to the JPEG and TIFF image encoders.",1,0,0,1,0,0,1,0,0,0,0,0
"Specifies the LZW compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the Compression category.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ImageAttributes : ICloneable, IDisposable Summary: Contains information about how bitmap and metafile colors are manipulated during rendering. Remarks: An ImageAttributes object maintains several color-adjustment settings, including color-adjustment matrices, grayscale-adjustment matrices, gamma-correction values, color-map tables, and color-threshold values. During rendering, colors can be corrected, darkened, lightened, and removed. To apply such manipulations, initialize an ImageAttributes object and pass the path of that ImageAttributes object (along with the path of an Image) to the DrawImage method. Example: The following example takes an image that is all one color (0.2, 0.0, 0.4, 1.0) and doubles the red component adds 0.2 to the red, green, and blue components The following illustration shows the original image on the left and the transformed image on the right. The code in the following example uses the following steps to perform the recoloring: Initialize a ColorMatrix object. Create an ImageAttributes object and pass the ColorMatrix object to the SetColorMatrix method of the ImageAttributes object. Pass the ImageAttributes object to the DrawImage method of a Graphics object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Summary: Sets the CMYK (cyan-magenta-yellow-black) output channel.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [TypeConverterAttribute(typeof(ImageFormatConverter))] public sealed class ImageFormat Summary: Specifies the file format of the image. Not inheritable. Remarks: The properties of the ImageFormat class indicate image formats such as bitmap (Bmp), enhanced metafile (Emf), and icon (Icon). For example, you can use the properties of the ImageFormat class to specify an image format when saving an image using the Save method. You can compare two image formats by using the Equals method. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class Metafile : Image Summary: Defines a graphic metafile. A metafile contains records that describe a sequence of graphics operations that can be recorded (constructed) and played back (displayed). This class is not inheritable. Remarks: When you use the Save method to save a graphic image as a Windows Metafile Format (WMF) or Enhanced Metafile Format (EMF) file, the resulting file is saved as a Portable Network Graphics (PNG) file instead. This behavior occurs because the GDI+ component of the .NET Framework does not have an encoder that you can use to save files as .wmf or .emf files. Example: The following code example demonstrates how to create a Metafile and use the PlayRecord method. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the Metafile class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public int MetafileSize { get; } Property Value Type: System.Int32 The size, in bytes, of the associated Metafile. Summary: Gets the size, in bytes, of the associated Metafile.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum PixelFormat Summary: Specifies the format of the color data for each pixel in the image. Remarks: The pixel format defines the number of bits of memory associated with one pixel of data. The format also defines the order of the color components within a single pixel of data. PixelFormat48bppRGB, PixelFormat64bppARGB, and PixelFormat64bppPARGB use 16 bits per color component (channel). GDI+ version 1.0 and 1.1 can read 16-bits-per-channel images, but such images are converted to an 8-bits-per-channel format for processing, displaying, and saving. Each 16-bit color channel can hold a value in the range 0 through 2^13. Some of the pixel formats contain premultiplied color values. Premultiplied means that the color values have already been multiplied by an alpha value.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public short Inch { get; set; } Property Value Type: System.Int16 The number of twips per inch. Summary: Gets or sets the number of twips per inch. Remarks: Normally, there are 1440 twips per inch; however, this number can be changed to scale the image. A value of 720 indicates that the image is double its normal size, or scaled to a factor of 2:1. A value of 360 indicates a scale of 4:1. Conversely, a value of 2880 indicates that the image is scaled down in size by a factor of two. A value of 1440 indicates a 1:1 scale ratio.",1,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public float HardMarginY { get; } Property Value Type: System.Single The y-coordinate, in hundredths of an inch, of the hard margin at the top of the page. Summary: Gets the y-coordinate, in hundredths of an inch, of the hard margin at the top of the page. Remarks: The hard margin represents the physical margin set by the printer.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public PaperSource PaperSource { get; set; } Property Value Type: System.Drawing.Printing.PaperSource A PaperSource that specifies the source of the paper. The default is the printer's default paper source. Summary: Gets or sets the page's paper source; for example, the printer's upper tray. Remarks: A PaperSource represents the source of the paper through the PaperSource.Kind property, which contains one of the PaperSourceKind values. Set the PaperSource property for the page to a valid PaperSource, available through the PrinterSettings.PaperSources collection. Example: The following code example sets three properties for the document's default page, including the paper source based upon the source selected in the comboPaperSource combo box, and then prints the document using the Print method. The example requires that a PrintDocument variable named printDoc exists and that the specific combo boxes exist.",1,0,0,0,0,0,1,0,1,0,0,0
"A5 paper (148 mm by 210 mm).",1,0,0,0,0,0,1,0,0,0,0,1
"Standard paper (11 in. by 17 in.).",0,0,0,0,0,0,1,0,0,0,0,1
"German standard fanfold (8.5 in. by 12 in.).",1,0,0,0,0,0,1,0,0,0,0,1
"Letter extra paper (9.275 in. by 12 in.). This value is specific to the PostScript driver and is used only by Linotronic printers in order to conserve paper.",0,1,0,1,0,0,0,0,0,0,0,0
"A3 extra transverse paper (322 mm by 445 mm).",0,1,0,0,0,0,0,0,0,0,0,0
"People's Republic of China 32K paper (97 mm by 151 mm). Requires Windows 98, Windows NT 4.0, or later.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class PaperSource Summary: Specifies the paper tray from which the printer gets paper. Remarks: This class is used by PrinterSettings.PaperSources and PageSettings.PaperSource properties to get the paper source trays that are available on the printer and to set the paper source for a page, respectively. For more information about printing, see the System.Drawing.Printing namespace overview. Example: The following code example populates the comboPaperSource combo box with the printer's supported paper sources. The SourceName is identified as the property that provides the display string for the item being added through the DisplayMember property of the combo box. The example requires that a PrintDocument variable named printDoc exists and that the specific combo box exists. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public PaperSourceKind Kind { get; } Property Value Type: System.Drawing.Printing.PaperSourceKind One of the PaperSourceKind values. Summary: Gets the paper source.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event QueryPageSettingsEventHandler QueryPageSettings Summary: Occurs immediately before each PrintPage event. Remarks: It is possible to print each page of a document using different page settings. You set page settings by modifying individual properties of the QueryPageSettingsEventArgs.PageSettings property or by setting the property to a PageSettings. Changes made to the PageSettings affect only the current page, not the document's default page settings. The print job can also be canceled by setting the Cancel property to true for the QueryPageSettingsEventArgs. To associate the event with your event handler, add an instance of the QueryPageSettingsEventHandler delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see Events and Delegates. Example: The following code example prints a document with the first page in color, if the printer supports it. The example requires that a PrintDocument variable named printDoc has been created, and the PrintPage and QueryPageSettings events are handled. The currentPageNumber variable is incremented after every page is printed in the PrintPage event, which is not shown. Use the System.Drawing and System.Drawing.Printing namespaces for this example.",1,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public class PaperSizeCollection : ICollection, IEnumerable Summary: Contains a collection of PaperSize objects. Remarks: The PrinterSettings.PaperSizeCollection contains PaperSize instances that represents the paper sizes through the PaperSize.Kind property, which contains one of the PaperKind values. Typically, you set a page's paper size through the PageSettings.PaperSize property to a valid PaperSize instance available through the PaperSizes collection. See the PaperSize constructor to find out how you can specify a custom paper size. Example: The following code example populates the comboPaperSize combo box with the printer's supported paper sizes. In addition, a custom paper size is created and added to the combo box. The PaperName is identified as the property that provides the display string for the item being added through the DisplayMember property of the combo box. The example requires that a PrintDocument variable named printDoc exists and that the specific combo box exists. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public IEnumerator GetEnumerator() Return Value Type: System.Collections.IEnumerator An IEnumerator for the PrinterSettings.StringCollection. Summary: Returns an enumerator that can iterate through the collection. Remarks: This method instantiates an enumerator that takes a snapshot of the current state of the collection. The enumerator does not have exclusive access to the collection, so multiple enumerators can have access to the same collection at the same time. Therefore, any changes made to the collection, either directly or through another enumerator, can cause Current or MoveNext to throw an exception. Two enumerators instantiated from the same collection at the same time can contain different snapshots of the collection. Removing objects from the enumerator also removes them from the collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class PrintingPermission : CodeAccessPermission, IUnrestrictedPermission Summary: Controls access to printers. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.All, AllowMultiple = true)] public sealed class PrintingPermissionAttribute : CodeAccessSecurityAttribute Summary: Allows declarative printing permission checks. Remarks: For more information about using attributes, see Extending Metadata Using Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Provides printing only from a restricted dialog box. SafePrinting is a subset of DefaultPrinting.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class FontCollection : IDisposable Summary: Provides a base class for installed and private font collections. Remarks: The FontCollection allows you to get a list of the font families contained in the collection with its Families property. For additional information on fonts and text, including example code, see Using Fonts and Text. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Assembly, Inherited = true)] [ComVisibleAttribute(false)] public sealed class ApplicationQueuingAttribute : Attribute Summary: Enables queuing support for the marked assembly and enables the application to read method calls from Message Queuing queues. This class cannot be inherited. Remarks: For a list of initial property values for an instance of ApplicationQueuingAttribute, see the ApplicationQueuingAttribute constructor. For more information about using attributes, see Extending Metadata Using Attributes. Example: The following code example demonstrates the use of the ApplicationQueuingAttribute type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Summary: Specifies the remote procedure call (RPC) authentication mechanism. Applicable only when the ActivationOption is set to Server.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Sets the application to AutoComplete.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ComVisibleAttribute(false)] public struct BOID Summary: Represents the unit of work associated with a transaction. This structure is used in XACTTRANSINFO. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class BYOT Summary: Wraps the COM+ ByotServerEx class and the COM+ DTC interfaces ICreateWithTransactionEx and ICreateWithTipTransactionEx. This class cannot be inherited. Remarks: BYOT (Bring Your Own Transaction) allows a component to be created with or to inherit an external transaction. That is, a component that does not already have an associated transaction can acquire a transaction. COM+ allows setting an arbitrary pre-existing Distributed Transaction Coordinator (DTC) or Transaction Internet Protocol (TIP) transaction as the transaction property of a new component's context. This allows COM+ components to be associated with transactions whose lifetimes are controlled by a transaction processing (TP) monitor, Object/Task Selector (OTS), or database management system (DBMS). BYOT transactions must be used with caution. In certain situations, they can result in a transaction spanning multiple synchronization domains-that is, they allow parallelism with another transaction, causing a deadlock condition. Automatic transactions, rather than BYOT transactions, are the preferred programming model for writers of business components. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ComVisibleAttribute(false)] [AttributeUsageAttribute(AttributeTargets.Class, Inherited = true)] public sealed class ComponentAccessControlAttribute : Attribute Summary: Enables security checking on calls to a component. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, Inherited = true)] [ComVisibleAttribute(false)] public sealed class ConstructionEnabledAttribute : Attribute Summary: Enables COM+ object construction support. This class cannot be inherited. Remarks: For a list of initial property values for an instance of ConstructionEnabledAttribute, see the ConstructionEnabledAttribute constructor. For more information about using attributes, see Extending Metadata Using Attributes. Example: The following code example demonstrates the use of this attribute to associate an object constructor string with a ServicedComponent class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class ContextUtil Summary: Obtains information about the COM+ object context. This class cannot be inherited. Remarks: ContextUtil is the preferred class to use for obtaining COM+ context information. Because the members of this class are all static (shared in Visual Basic), it is not necessary to instantiate it before using them. Example: The following code example demonstrates how to use ContextUtil to create a transactional ServicedComponent. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public static Guid ApplicationId { get; } Property Value Type: System.Guid The GUID for the current application. Summary: Gets a GUID for the current application. Example: The following code example demonstrates the use of this property.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, Inherited = true)] [ComVisibleAttribute(false)] public sealed class EventClassAttribute : Attribute Summary: Marks the attributed class as an event class. This class cannot be inherited. Remarks: If EventClass is specified, it must not be disabled in the COM+ catalog; if enabled in the COM+ catalog, it must be specified on the component. Method calls on an event class are never delivered to the implementation; they are instead delivered to event subscribers. For a list of initial property values for an instance of EventClassAttribute, see the EventClassAttribute constructor. For more information about using attributes, see Extending Metadata Using Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: string RemoteDispatchNotAutoDone( string s ) Parameters sType: System.String A string to be converted into a request object implementing the IMessage interface. Return Value Type: System.String A string converted from a response object implementing the IMethodReturnMessage interface. Summary: Does not ensure that, in the COM+ context, the ServicedComponent class object's done bit is set to true after a remote method invocation. Remarks: The RemoteDispatchNotAutoDone method does not belong to the published interface of the ServicedComponent class and does not need to be implemented elsewhere.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the MustRunInClientContextAttribute class.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public bool AfterSaveChanges( Hashtable info ) Parameters infoType: System.Collections.Hashtable A hash table that contains internal objects referenced by internal keys. Return Value Type: System.Boolean true if the method has made changes. Summary: Called internally by the .NET Framework infrastructure while installing and configuring assemblies in the COM+ catalog. Remarks: Even though it is a public method, the AfterSaveChanges method is intended only to be used from within the .NET Framework infrastructure. It is sufficient for a developer to apply the ObjectPoolingAttribute class attribute and set other members in its interface.",0,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The RegistrationHelperTx class has been deprecated.#)] [GuidAttribute(#c89ac250-e18a-4fc7-abd5-b8897b6a78a5#)] public sealed class RegistrationHelperTx : ServicedComponent Summary: Used by the .NET Framework infrastructure to install and configure assemblies in the COM+ catalog while maintaining a newly established transaction. Remarks: A TransactionAttribute class attribute is applied to the RegistrationHelperTx class, with a parameter of the RequiresNew field. This type does not need to be used directly from your code. Instead, use the RegistrationHelper class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public delegate void TransactionEndDelegate( Object resource ) Parameters resourceType: System.Object The object that is passed back to the delegate. Summary: Represents the method that handles the ending of a transaction. Remarks: When you create a ResourcePool.TransactionEndDelegate delegate, you identify the method that will handle the event. For more information about event handler delegates, see Events and Delegates.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class|AttributeTargets.Method, Inherited = true, AllowMultiple = false)] [ComVisibleAttribute(false)] public sealed class SecureMethodAttribute : Attribute Summary: Ensures that the infrastructure calls through an interface for a method or for each method in a class when using the security service. Classes need to use interfaces to use security services. This class cannot be inherited. Remarks: If SecureMethod is specified, it must not be disabled in the COM+ catalog; if enabled in the COM+ catalog, it must be specified on the component. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Releases the resources used by the ServicedComponent.",1,0,1,0,0,1,1,0,0,0,1,0
"Additional online Documentation: Syntax: public SharedPropertyGroupManager() Summary: Initializes a new instance of the SharedPropertyGroupManager class. Example: The following code example shows how to use the SharedPropertyGroupManager constructor to create an instance of the SharedPropertyGroupManager class.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] [ComVisibleAttribute(false)] public enum SxsOption Summary: Indicates how side-by-side assemblies are configured for ServiceConfig. Remarks: SxsOption is used for the value of Inheritance.",0,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the SynchronizationAttribute class.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] [ComVisibleAttribute(false)] public enum TransactionStatus Summary: Indicates the transaction status. Remarks: TransactionStatus is the value returned by Leave.",0,1,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class Clerk Summary: Writes records of transactional actions to a log. Remarks: Each clerk is associated with a compensator, which is called back to perform actions during the two-phase commit of the transaction. Example: The following code example demonstrates the use of this class.  The following code example demonstrates the corresponding Compensator class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class ClerkInfo Summary: Contains information describing an active Compensating Resource Manager (CRM) Clerk object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ClerkMonitor : IEnumerable Summary: Contains a snapshot of all Clerks active in the process. Remarks: The Compensating Resource Manager (CRM) Monitor can be used to examine the list of active Clerks performing transaction recovery in the current process. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual void EndCommit() Summary: Notifies the Compensating Resource Manager (CRM) Compensator that it has delivered all the log records available during the commit phase. Example: The following code example demonstrates the implementation of this method.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public ClientRemotingConfig() Summary: Initializes a new instance of the ClientRemotingConfig class.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [GuidAttribute(#d8013ff0-730b-45e2-ba24-874b7242c425#)] public interface IComSoapMetadata Summary: Specifies methods for generating common language runtime (CLR) metadata for a COM+ component. Remarks: The IComSoapMetadata interface does not need to be implemented directly in your code. It is implemented by the GenerateMetadata class in the .NET Framework infrastructure. If necessary, IComSoapMetadata specifies that an assembly that contains CLR metadata is generated for a specified type library. IComSoapMetadata is used internally by the .NET Framework. You do not need to use it directly in your code.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public void CreateVirtualRoot( string Operation, string FullUrl, out string BaseUrl, out string VirtualRoot, out string PhysicalPath, out string Error ) Parameters OperationType: System.String The operation to perform.  FullUrlType: System.String The complete URL address for the virtual root.  BaseUrlType: System.String% When this method returns, this parameter contains the base URL address.  VirtualRootType: System.String% When this method returns, this parameter contains the name of the virtual root.  PhysicalPathType: System.String% When this method returns, this parameter contains the file path for the virtual root.  ErrorType: System.String% When this method returns, this parameter contains an error message if a problem was encountered. Implements IComSoapPublisher.CreateVirtualRoot(String, String, String, String, String, String) Summary: Creates a SOAP-enabled COM+ application virtual root. Remarks: It is recommended that CreateVirtualRootEx be used instead of CreateVirtualRoot.",1,1,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class FileRecordSequence : IRecordSequence, IDisposable Summary: Implements an IRecordSequence on top of a file. This class cannot be inherited. Remarks: The FileRecordSequence is a record sequence based on a single log file in the file system. It is a simple implementation of the IRecordSequence interface, on top of a simple file-based log. To manipulate a file-based log, the account that your application is running in must have sufficient privileges, as dictated by the file system security at the time the FileRecordSequence is constructed. In addition, a demand for FullTrust is made at construction time. The permission verification results are cached thereafter in keeping with the Windows security model. You should ensure that you do not accidentally expose the contents of the record sequence to an unauthorized user. Example: The following example creates a record sequence, appends record to it, and finally reads the records. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,1,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Automatically makes a single reservation and appends a record to the sequence.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IRecordSequence : IDisposable Summary: Provides a generic interface to a sequence of records. Remarks: The IRecordSequence interface provides an abstract interface to a record-oriented stream. A IRecordSequence instance can be used to read and write log records. The IRecordSequence interface provides the following capabilities, Append log records using the Append methods. Read the appended records using the ReadLogRecords method. Write a special restart record using the WriteRestartArea method. Read restart records from the most recently written restart record using the ReadRestartAreas method. Flush the records to durable store using the Flush method. Reserve space for appending records. Free log space by advancing the base of the log. Receive TailPinned event notifications to move the base of the log to free space. Log records are appended to a IRecordSequence instance, and each log record is given a unique sequence number. Sequence numbers are strictly monotonically increasing within a given record sequence. A log record consists of opaque data, supplied to the IRecordSequence instance in an IList of ArraySegments of bytes. The IRecordSequence interface also exposes a few basic properties which provides information about log boundaries. The BaseSequenceNumber property contains the sequence number of the first valid record in the record sequence. The LastSequenceNumber property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. The RestartSequenceNumber property contains the sequence number of the last written restart area. The MaximumRecordLength property contains the size of the largest record that can be appended to, or read from the sequence. The ReservedBytes property contains the total size of all reservations made in this record sequence. If the RetryAppend property is set to true, and an Append operation fails because there is no space in the sequence, the record sequence will attempt to free space, and retry the Append operation.",1,1,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Creates a new LogExtent and adds it to the collection.",1,0,0,0,0,0,0,0,0,0,0,1
"The LogExtent instance does not contain any active data, but contains data that has not yet been archived.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class LogPolicy Summary: Represents the policy associated with a LogStore. Remarks: A policy is a set of rules to be followed by a LogStore instance and its clients. A LogPolicy instance is used to examine and modify the policy associated with a specific LogStore. A policy can describe the minimum and maximum allowable log sizes, or how the LogStore instance is allowed to grow. In addition, you can also control whether a LogStore instance can be archived. After changing any of the properties, you should use the Commit method to ensure that the changes are applied to the LogStore. You can call the Refresh method to discard changes or to get the most current policy. Example: This example shows how to use the LogPolicy class to set policy for a log record sequence. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public IAsyncResult BeginFlush( SequenceNumber sequenceNumber, AsyncCallback callback, Object state ) Parameters sequenceNumberType: System.IO.Log.SequenceNumber The sequence number of the latest record that must be written. If this SequenceNumber is invalid, then all records must be written.  callbackType: System.AsyncCallback An optional asynchronous callback, to be called when the flush is complete.  stateType: System.Object A user-provided object that distinguishes this particular asynchronous flush request from other requests. Return Value Type: System.IAsyncResult An IAsyncResult that represents the asynchronous flush operation, which could still be pending. Implements IRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object) Summary: Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited. Remarks: You should pass the IAsyncResult returned by the current method to the EndFlush method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the EndFlush method is called with the IAsyncResult returned by this method. Calling this method ensures that all records that have been appended to the LogRecordSequence are durably written. If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the EndFlush method is called.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public SequenceNumber EndAppend( IAsyncResult result ) Parameters resultType: System.IAsyncResult A reference to the outstanding asynchronous I/O request. Return Value Type: System.IO.Log.SequenceNumber The sequence number of the appended log record. Implements IRecordSequence.EndAppend(IAsyncResult) Summary: Ends an asynchronous append operation. This method cannot be inherited. Remarks: This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when EndAppend is called. This method must be called exactly once on every IAsyncResult returned by the BeginAppend method.",1,0,1,0,1,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class LogStore : IDisposable Summary: Represents a log-structured storage. Remarks: The LogRecordSequence class provides an implementation of the record sequence interface on top of a Common Log File System (CLFS) log. It works with the LogStore class, which provides an interface for directly manipulating and managing a CLFS log file. A log store provides append-only storage across a set of disk extents. The LogStore class represents this storage, and provides methods for adding and removing containers, setting policy, and creating archives. It does not provide methods for reading from and writing to the storage; these methods are provided by the LogRecordSequence class. The relationship between the LogStore class and the LogRecordSequence class is similar to the relationship between a disk file and a FileStream object. The disk file provides the actual storage and has attributes such as length and last access time, while the FileStream object provides a view on the file that can be used to read from it and write to it. Similarly, the LogStore class has attributes like a policy and a collection of disk extents, and the LogRecordSequence class provides a record-oriented mechanism for reading and writing data. Unlike the file record sequence represented by the FileRecordSequence class, a LogStore instance stores its data in a collection of disk extents, represented by LogExtent instances. The extents in a given LogStore instance are all of uniform size, and space is added to and removed from a LogStore instance in extent increments. To add and remove log extents, use the Add and Remove methods of the LogExtentCollection object, which can be returned by the Extents property. A LogStore instance can have policies associated with it. These are represented by LogPolicy instances that can be returned by the Policy property. A policy dictates rules that the log will attempt to follow, such as maximum number of extents and minimum size, and instructions on growing or shrinking the LogStore under certain conditions. In addition, you can specify whether a LogStore instance can be archived. Policies are set per log and are volatile, which means that once every handle to the log is closed, the policy no longer exists. Example: The following example shows how to archive a LogStore to an XML document. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"The record sequence should flush any internal buffers after this record is appended. When the Append operation completes, the specified record has been durably written.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class CardSpaceException : Exception Summary: The exception that is thrown when one or more exceptions have occurred at the service level. The cause of the error will be logged in the event log. Remarks: Conditions that cause this exception to be thrown include: The user interface is already being displayed. There was an error in loading a store or ledger. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public int PolicyNoticeVersion { get; set; } Property Value Type: System.Int32 The version of the privacy information. Summary: Gets or sets the version of the privacy information.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class ServiceNotStartedException : Exception Summary: The exception that is thrown when has not been started on the user's computer. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override int GetHashCode() Return Value Type: System.Int32 The hash code for the claim. Summary: Returns a hash code for the current claim. Remarks: This method generates the same hash code for two objects that are equal according to the Equals method.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [DataContractAttribute(Namespace = #http://schemas.xmlsoap.org/ws/2005/05/identity#)] public abstract class ClaimSet : IEnumerable<Claim>, IEnumerable Summary: Represents the collection of claims that are associated with an entity. Remarks: After the ClaimSet class has been created, it cannot be changed. Examining the content of a ClaimSet for particular types of claims is a common task when using claim-based authorization. To examine a ClaimSet for the presence of particular claims, use the FindClaims method. The method provides better performance than iterating directly over the ClaimSet. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,1,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public static string Hash { get; } Property Value Type: System.String The URI for a claim that specifies a hash value. Summary: Gets the URI for a claim that specifies a hash value. Remarks: The string returned by this property is http://schemas.xmlsoap.org/ws/2005/05/identity/claims/hash.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static string Webpage { get; } Property Value Type: System.String The URI for a claim that specifies the Web page of an entity. Summary: Gets the URI for a claim that specifies the Web page of an entity. Remarks: The string returned by this property is http://schemas.xmlsoap.org/ws/2005/05/identity/claims/webpage.",0,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public abstract class EvaluationContext Summary: When overridden in a derived class, represents the results of the authorization policies that have been evaluated. Remarks: Claims are added to an EvaluationContext by authorization policies. An authorization policy takes a set of claims, such as those found in a security token, and adds additional claims based on the current set. For instance, an authorization policy might evaluate a claim that contains the date of birth and add a claim that states the user is over 21 years old and add an Over21 claim to the EvaluationContext. Classes that implement the IAuthorizationPolicy interface do not authorize users, but they enable the ServiceAuthorizationManager class to do so. The ServiceAuthorizationManager calls the Evaluate method for each authorization policy in effect. The Evaluate method determines whether additional claims should be added for the user based on the current claims. An authorization policy's Evaluate method may be called multiple times, as claims are added to the EvaluationContext by other authorization policies. When all authorization policies in effect are done, the ServiceAuthorizationManager class makes authorization decisions based upon the final set of claims. The ServiceAuthorizationManager class then creates an AuthorizationContext that contains an immutable set of claims that reflects these authorization decisions. An evaluation context contains a set of ClaimSet objects: an expiration time, which specifies the span of time during which the evaluation context is valid, and a unique identifier. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IAuthorizationPolicy : IAuthorizationComponent Summary: Defines a set of rules for authorizing a user, given a set of claims. Remarks: Implement the IAuthorizationPolicy interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the EvaluationContext. Classes that implement the IAuthorizationPolicy interface do not authorize users, but they enable the ServiceAuthorizationManager class to do so. The ServiceAuthorizationManager calls the Evaluate method for each authorization policy in effect. The Evaluate method determines whether additional claims should be added for the user, based on the current context. An authorization policy's Evaluate method may be called multiple times, as claims are added to the EvaluationContext by other authorization policies. When all authorization policies in effect are done, the ServiceAuthorizationManager class makes authorization decisions based upon the final set of claims. The ServiceAuthorizationManager class then creates an AuthorizationContext that contains an immutable set of claims that reflects these authorization decisions.",1,0,0,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public static class AudienceUriModeValidationHelper Summary: A helper class for the SamlSecurityTokenAuthenticator class that verifies that the AudienceUriMode property is set to a valid value. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected override ReadOnlyCollection<IAuthorizationPolicy> ValidateUserNamePasswordCore( string userName, string password ) Parameters userNameType: System.String The user name associated with the security token. passwordType: System.String The password associated with the security token. Return Value Type: System.Collections.ObjectModel.ReadOnlyCollection(Of IAuthorizationPolicy) A ReadOnlyCollection(Of T) of type IAuthorizationPolicy that contains the set of authorization policies in effect for this application. Summary: Authenticates the specified user name and password and returns the set of authorization policies for UserNameSecurityToken security tokens. Remarks: The ValidateUserNamePasswordCore method uses the UserNamePasswordValidator passed into the CustomUserNameSecurityTokenAuthenticator constructor to authenticate the user. When the username and password cannot be validated, throw the SecurityTokenValidationException. When there are no authorization policies in effect for this application, return an empty ReadOnlyCollection(Of T) of type IAuthorizationPolicy. When null is returned from the ValidateUserNamePasswordCore method, throws the SecurityTokenValidationException.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the KerberosSecurityTokenProvider class.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class RsaSecurityTokenAuthenticator : SecurityTokenAuthenticator Summary: Authenticates a RsaSecurityToken security token. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static string PeerAuthenticationMode { get; } Property Value Type: System.String The name of the index in the Properties collection for a property that specifies the peer authentication method. Summary: Gets the name of the index in the Properties collection for a property that specifies the peer authentication method. Remarks: To add the capability to set the peer authentication mode, derive a class from SecurityTokenRequirement and expose a property or constructor. Within the constructor or property add the peer authentication mode to the Properties collection using the value of the PeerAuthenticationMode property as an index into the collection.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Attempts to retrieve the key that is referenced in the specified object.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the WindowsUserNameSecurityTokenAuthenticator class.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public X509Certificate2 Certificate { get; } Property Value Type: System.Security.Cryptography.X509Certificates.X509Certificate2 Gets an X509Certificate2 that represents the X.509 certificate of a security token. Summary: Gets the X.509 certificate associated with the X509SecurityToken security token. Remarks: The GetTokenCore method gets a security token based on the certificate represented by the Certificate property.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract AsymmetricAlgorithm GetAsymmetricAlgorithm( string algorithm, bool privateKey ) Parameters algorithmType: System.String The asymmetric algorithm to create. privateKeyType: System.Boolean true when a private key is required to create the algorithm; otherwise, false. Return Value Type: System.Security.Cryptography.AsymmetricAlgorithm An AsymmetricAlgorithm that represents the specified asymmetric cryptographic algorithm. Typically, true is passed into the privateKey parameter, as a private key is typically required for decryption. Summary: When overridden in a derived class, gets the specified asymmetric cryptographic algorithm. Remarks: Use the static fields of the SecurityAlgorithms class to specify the algorithm.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class GenericXmlSecurityToken : SecurityToken Summary: Represents a security token that is based upon XML. Remarks: Use the GenericXmlSecurityToken class when you receive a token over the wire that is not defined in a specification or there is no way for you to determine the type of the security token. For example, in a federation scenario when you send a Request Security Token (RST) to a Security Token Service (STS) you do not always know the type of the security token returned by the STS. In such cases, you can use a GenericXmlSecurityToken to store the security token as XML along with its internal and external references. Use the GenericXmlSecurityToken class to define claims using XML when one of the built-in security tokens does not suffice. Other security tokens can define their claims using XML, however the GenericXmlSecurityToken security token generically allows a security token to have an application-defined set of XML. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public class KerberosRequestorSecurityToken : SecurityToken Summary: Represents a security token that is based upon a Kerberos ticket that is sent in an SOAP request. Remarks: Typically, application developers do not need to use the KerberosRequestorSecurityToken class, unless a Web service must get the service principal name associated with the Kerberos ticket. To get the value of the service principal name, get the value of the ServicePrincipalName property. There are two classes that represent security tokens that are based upon a Kerberos ticket: KerberosRequestorSecurityToken and KerberosReceiverSecurityToken. The KerberosRequestorSecurityToken security token is used by clients that use the KerberosRequestorSecurityToken security token in an outgoing SOAP messages, whereas the KerberosReceiverSecurityToken security token is used by a Web service that receives SOAP messages that contain the security token. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the LocalIdKeyIdentifierClause class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class SamlAssertion Summary: Represents a Security Assertion Markup Language 1.1 (SAML 1.1) assertion. Remarks: The SamlAssertion class corresponds to the <saml:Assertion> XML element that is defined in the OASIS SAML 1.1 specification. The claims for SamlSecurityToken security tokens are contained within a SamlAssertion. A SamlAssertion has an extensible set of claims known as SAML statements that are represented by the Statements property. The SAML authority that issued the SAML assertion is specified in the Issuer property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public class SamlAttribute Summary: Represents an attribute that is associated with the subject of a SamlAttributeStatement. Remarks: The SamlAttribute class corresponds to the <saml:Attribute> XML element that is defined in the OASIS SAML 1.1 specification. A SamlAttribute instance contains PossessProperty claims for the subject of a SamlAttributeStatement. For example, a SamlAttribute might contain an Over21 claim, whose type would be specified in the Namespace property and whose resource would be specified as a member of the collection in the AttributeValues property. When the CreatePolicy method is called, this Over21 claim is added to the authorization policy that is returned by returned from by the SamlAttributeStatement. When the AttributeValues property contains multiple elements then one claim is returned for each element. SamlAttribute position in the SAML object hierarchy is: SamlSecurityToken   SamlAssertion     SamlAttributeStatement       SamlAttribute ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,1,0,0,1
"Additional online Documentation: Syntax: public class SamlAudienceRestrictionCondition : SamlCondition Summary: Specifies that a SAML assertion is addressed to a particular audience. Remarks: The SamlAudienceRestrictionCondition class corresponds to the <saml:AudienceRestrictionCondition> XML element, which is defined in the OASIS SAML 1.1 specification. The SamlAudienceRestrictionCondition is one of several SamlConditions that can be used to scope a SAML assertion Use the SamlAudienceRestrictionCondition class to specify a SamlAssertion is intended for a specific audience and that the issuing SAML authority does not warrant the SAML assertion for other audiences that receive the security token. The claims for SamlSecurityToken security tokens are expressed as part of a SamlAssertion, which can optionally have a set of conditions affect the validity of the assertion. One of those conditions is a SamlAudienceRestrictionCondition, which specifies that the assertion is addressed to one or more specific audiences. The issuing SAML authority cannot prevent an unintended recipient from taking action on the basis of the information provided in the SAML assertion. However, the SamlAudienceRestrictionCondition class allows the SAML authority to state explicitly that no warranty is provided to such a party in a machine- and human-readable form. To specify the set of intended audiences, use the SamlAudienceRestrictionCondition(IEnumerable(Of Uri)) constructor that accepts a set of audiences. To get the set of intended audiences, access the Audiences property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the SamlAuthorizationDecisionStatement class.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public SamlEvidence Evidence { get; set; } Property Value Type: System.IdentityModel.Tokens.SamlEvidence A SamlEvidence that contains a set of SAML assertions that the SAML authority relied on to render the authorization decision. Summary: Gets or sets the evidence that the SAML authority relied on to render the authorization decision. Remarks: The AccessDecision property corresponds to the <Evidence> element that is defined in the Assertions and Protocol for the OASIS Security Assertion Markup Language (SAML) specification.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static string EmailName { get; } Property Value Type: System.String The name of the attribute used to specify that the subject of a SAML assertion is specified as an e-mail address. This field is constant. Summary: Gets the name of the attribute used to specify that the subject of a SAML assertion is specified as an e-mail address. This field is constant. Remarks: Use the EmailName property when serializing SAML assertions.",1,0,0,0,1,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public class SamlDoNotCacheCondition : SamlCondition Summary: Represents a condition that must be taken into account when assessing the validity of a SAML assertion. Remarks: SamlSecurityToken security tokens specify their claims using SAML assertions and a set of conditions that must be taken into account when assessing the validity of the SAML assertion. The SamlDoNotCacheCondition class represents one of the conditions defined by the SAML specification and it asserts that the SAML assertion must not be cached. To specify this condition for a SAML assertion, add the SamlDoNotCacheCondition class to the collection returned by the Conditions property. Note When the SamlDoNotCacheCondition is added as a condition to a SamlSecurityToken security token that is issued by a security token service for the client, a client does cache the security token. Because the client does not inspect the contents of the issued token, the token is cached. The client is token agnostic for issued tokens type and processes it the returned issued token as an opaque XML element. However, security never caches the received issued token on the service side; it only caches the claims that are extracted from it during the token authentication process. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class SamlStatement Summary: Represents a claim for a SamlSecurityToken security token. Remarks: SamlSecurityToken security tokens specify their claims using SAML assertions, which can specify when the subject was authenticated. The claims in a SAML assertion are represented by SAML statements, which are represented by the SamlStatement class. The SAML specification defines the following statement types: SamlAttributeStatement SamlAuthenticationStatement SamlAuthorizationDecisionStatement SamlSubjectStatement ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class SamlSubject Summary: Represents the subject of a SAML security token. Remarks: SamlSecurityToken security tokens specify their claims using SAML assertions, which can specify the subject of the security token. The claims in a SAML assertion are represented by SAML statements. The SAML specification defines a set of SAML statement types and one of them is a SamlSubjectStatement. A SamlSubjectStatement asserts the principal that is the subject of the SamlSecurityToken security token. This principal is specified using a SamlSubject class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual ClaimSet ExtractSubjectKeyClaimSet( SamlSecurityTokenAuthenticator samlAuthenticator ) Parameters samlAuthenticatorType: System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator A SamlSecurityTokenAuthenticator that authenticates the portion of a SamlSecurityToken security token that corresponds to the <saml:Subject> element. Return Value Type: System.IdentityModel.Claims.ClaimSet A ClaimSet that contains the set of claims represented by this SamlSubject instance. Summary: Gets a set of claims using the properties of this class and the specified SAML security token authenticator. Remarks: Use the ExtractSubjectKeyClaimSet(SamlSecurityTokenAuthenticator) method to get a set of claims associated with the identity of a SamlSecurityToken security token.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the SecurityTokenValidationException class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected SymmetricSecurityKey() Summary: Initializes a new instance of the SymmetricSecurityKey class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string AuthenticationType { get; } Property Value Type: System.String Returns String. Summary: Gets the authentication type for the token.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Returns a value that indicates whether the key identifier for this instance matches the specified object.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Summary: Returns a value that indicates whether the key identifier for this instance matches the specified object.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class X509RawDataKeyIdentifierClause : BinaryKeyIdentifierClause Summary: Represents a key identifier clause that identifies a X509SecurityToken security token using the X.509 certificate's raw data. Remarks: Typically, the X509RawDataKeyIdentifierClause does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token. Use the X509RawDataKeyIdentifierClause class to reference a X509SecurityToken security token using the X.509 certificate's raw data. The GetX509RawData method returns the raw data. supports the following types of security token references for X509SecurityToken security tokens. X509IssuerSerialKeyIdentifierClause X509RawDataKeyIdentifierClause X509SubjectKeyIdentifierClause X509ThumbprintKeyIdentifierClause ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class X509WindowsSecurityToken : X509SecurityToken Summary: Represents a security token that is based upon an X.509 certificate and that the certificate is mapped to a Windows domain user or local computer user account. Remarks: Typically, application developers do not need to use the X509WindowsSecurityToken class, unless a Web service must gain access to details about a X.509 certificate referenced in an incoming SOAP message or the domain or computer account that the certificate is mapped to. To get the details of the X.509 certificate, access the Certificate property. To get the user identity, see the WindowsIdentity property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public static void RegisterAssembly( Assembly managementAssembly ) Parameters managementAssemblyType: System.Reflection.Assembly  The assembly to register. Summary: Registers an assembly with the WMI infrastructure.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] [ClassInterfaceAttribute(ClassInterfaceType.None)] [GuidAttribute(#2A7B042D-578A-4366-9A3D-154C0498458E#)] public class ManagedCommonProvider Summary: The class is used internally by the WMI.NET Provider Extensions infrastructure. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum AuthenticationLevel Summary: Describes the authentication level to be used to connect to WMI. This is used for the COM connection to WMI.",0,0,0,1,0,0,0,0,0,0,0,0
"Call-level COM authentication.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public enum CimType Summary: Describes the possible CIM types for properties, qualifiers, or method parameters.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ConnectionOptions : ManagementOptions Summary: Specifies all settings required to make a WMI connection. Example: The following example connects to a remote computer and displays information about the operating system on the remote computer. A ConnectionOptions is created to connect to the remote computer with default connection options. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class DeleteOptions : ManagementOptions Summary: Specifies options for deleting a management object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class EventArrivedEventArgs : ManagementEventArgs Summary: Holds event data for the EventArrived event. Remarks: The following asynchronous example sets up a WMI timer to raise an event every second, and removes it when no longer needed. The ManagementEventWatcher defines several .NET Framework events which are raised when WMI events are delivered. Delegates are attached to these events for handling the incoming data. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public class EventWatcherOptions : ManagementOptions Summary: Specifies options for management event watching. Example: The following example shows how the client receives notification when an instance of Win32_Process is created because the event class is __InstanceCreationEvent. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at http://msdn.microsoft.com/library. The client receives events synchronously by calling the WaitForNextEvent method. This example can be tested by starting a process, such as Notepad, while the example code is running. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public enum ImpersonationLevel Summary: Describes the impersonation level to be used to connect to WMI.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Retrieves relationship classes that relate the class to others. Remarks: .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ObjectGetOptions Options { get; set; } Property Value Type: System.Management.ObjectGetOptions An ObjectGetOptions to use when retrieving the object. Summary: Gets or sets additional information to use when retrieving the object. Remarks: When the property is changed after the management object has been bound to a WMI object, the management object is disconnected from the original WMI object and later rebound using the new options. .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code. Example: The following example initializes a new instance of the ManagementObject class and then change the default options for the ManagementObject.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public ObjectQuery Query { get; set; } Property Value Type: System.Management.ObjectQuery Returns an ObjectQuery that contains the query to be invoked in the searcher. Summary: Gets or sets the query to be invoked in the searcher (that is, the criteria to be applied to the search for management objects). Remarks: When the value of this property is changed, the ManagementObjectSearcher is reset to use the new query. Property Value The criteria to apply to the query. .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code.",1,1,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class ManagementOperationObserver Summary: Manages asynchronous operations and handles management information and events received asynchronously. Example: The following example demonstrates how to perform an asynchronous instance enumeration. The example uses the ManagementOperationObserver class to handle management information and events asynchronously. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public event ObjectReadyEventHandler ObjectReady Summary: Occurs when a new object is available. Remarks: Event Data The event handler receives an argument of type ObjectReadyEventArgs containing data related to this event. The following ObjectReadyEventArgs properties provide information specific to this event. Property Description Context (inherited from ManagementEventArgs) Gets the operation context echoed back from the operation that triggered the event. NewObject Gets the newly-returned object. .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code. Example: The following example demonstrates how to perform an asynchronous instance enumeration. The example uses the ManagementOperationObserver class to handle management information and events asynchronously.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class ManagementScope : ICloneable Summary: Represents a scope (namespace) for management operations. Example: The following example initializes a new ManagementScope with a specific path and then connects the scope object to a WMI namespace. The example connects to a namespace on a remote computer. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,1,0,0,0
"COM cannot locate a provider referenced in the schema.",1,0,0,0,0,0,0,0,0,0,0,0
"The requested operation is not valid. This error usually applies to invalid attempts to delete classes or properties.",0,1,0,1,0,0,0,0,0,0,0,0
"An attempt has been made to delete or modify a class that has instances.",1,0,0,1,0,0,0,0,0,0,0,0
"The CIM type specified is not valid.",0,0,0,0,0,0,0,0,0,0,0,1
"An attempt was made to reuse an existing method name from a superclass, and the signatures did not match.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual PropertyData this[ string propertyName ] { get; } Parameters propertyNameType: System.String The name of the property to retrieve. Property Value Type: System.Management.PropertyData Returns a PropertyData containing the data for a specified property in the collection. Summary: Gets the specified property from the PropertyDataCollection, using [] syntax. This property is the indexer for the PropertyDataCollection class. Remarks: Property Value A PropertyData, based on the name specified. .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code. Example: The following example gets the Freespace property from a ManagementClass.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class PutOptions : ManagementOptions Summary: Specifies options for committing management object changes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum PutType Summary: Describes the possible effects of saving an object to WMI when using Put.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class RelationshipQuery : WqlObjectQuery Summary: Represents a WQL REFERENCES OF data query. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string RelationshipQualifier { get; set; } Property Value Type: System.String Returns a String value containing the name of the qualifier required on the relationship objects. Summary: Gets or sets a qualifier required on the relationship objects. Remarks: Setting this property value overrides any previous value stored in the object. The query string is rebuilt to reflect the new qualifier. Property Value A string containing the name of the qualifier required on the relationship objects. .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public TimeSpan GroupWithinInterval { get; set; } Property Value Type: System.TimeSpan Returns a TimeSpan value containing the interval used for grouping events of the same type. Summary: Gets or sets the interval to be used for grouping events of the same type. Remarks: Setting this property value overrides any previous value stored in the object. The query string is rebuilt to reflect the new interval. Property Value Null, if there is no grouping involved; otherwise, the interval in which WMI should group events of the same type. .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code. Example: The following example initializes a new WqlEventQuery and displays the event query string.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string Name { get; } Property Value Type: System.String Returns a T:System.String value containing the name of the managed entity. Summary: Gets the name of the managed entity. Remarks: Property Value Contains the name of the managed entity. .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum AccessControlEntryType Summary: Specifies whether to allow, deny, or revoke access rights for a trustee. Remarks: When you use the AccessControlEntry class to specify a new access right for a trustee, you set its EntryType property to describe whether to grant the right or deny it. Furthermore, you can define whether the new right is appended to an existing list (if the trustee already exists in the context for which you are adding or removing access privileges) or if the new right overwrites and deletes any previously defined rights. When creating a new Allow entry, there might be a preexisting Deny entry for the same trustee that takes precedence and must be addressed. Similarly, when creating a new Deny entry, there might be an existing Allow entry that takes precedence. For information about the order in which access rights are applied, see AccessControlList.",1,0,1,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class AccessControlList : CollectionBase Summary: Contains a list of access control entries, specifying access rights for one or more trustees. Remarks: Use the AccessControlList class to specify multiple trustees and access rights to add with a single call when setting permissions. Construct your access control list by adding an access control entry for each trustee and access rights combination. A AccessControlList identifies the trustees that are allowed or denied access to a securable object. When a process tries to access a securable object, the system checks the access control entries in the object's access control list to determine whether to grant access to it. If the object does not have an access control list, the system grants full access to everything. If the object's access control list has no entries, the system denies all attempts to access the object. The system checks the access control entries in sequence until it finds one or more that allow all the requested access rights or until any of the requested access rights are denied. The system examines each AccessControlEntry in sequence until one of the following events occurs: An access-denied AccessControlEntry explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token. One or more access-allowed AccessControlEntry items for trustees listed in the thread's access token explicitly grant all the requested access rights. All AccessControlEntry items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum AcknowledgeTypes Summary: Specifies the types of acknowledgment message that Message Queuing returns to the sending application. Remarks: The AcknowledgeTypes class provides a set of flags that you can combine to request one or more categories of acknowledgment messages. When an application sends a message, it can request that Message Queuing return acknowledgment messages indicating the success or failure of the original message. Message Queuing sends these acknowledgment messages to the administration queue you specify. Acknowledgment types can be divided broadly into four groups: positive arrival acknowledgments, positive read acknowledgments, negative arrival acknowledgments, and negative read acknowledgments. Requesting acknowledgments enables your application to receive notification of certain occurrences-for example, a message reaching its destination queue, a message being retrieved, or a time-out preventing a message from reaching or being retrieved from the destination queue. When you are using the Message class to send messages to a queue, you specify the types of acknowledgments your application should receive in the AcknowledgeType property, as well as the administration queue that receives the acknowledgment messages in the AdministrationQueue property. When you use the Message class to read acknowledgment messages in the administration queue, the instance's Acknowledgment property indicates the condition responsible for the acknowledgment message, for example, if a time-out expired before the original message was read from the queue. Example: The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.",1,1,0,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class BinaryMessageFormatter : IMessageFormatter, ICloneable Summary: Serializes or deserializes an object, or an entire graph of connected objects, to or from the body of a Message Queuing message, using a binary format. Remarks: The BinaryMessageFormatter is very efficient and can be used to serialize most objects. The result is very compact and fast to parse, but does not allow for loosely coupled messaging as the XmlMessageFormatter does. Loosely coupled means that the client and the server can independently version the type that is sent and received. When the application sends a message to the queue using an instance of the MessageQueue class, the formatter serializes the object into a stream and inserts it into the message body. When reading from a queue using a MessageQueue, the formatter deserializes the message data into the Body property of a Message. BinaryMessageFormatter provides faster throughput than the XmlMessageFormatter. Use the BinaryMessageFormatter when pure speed rather than loosely coupled messaging is desired. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,1,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public enum CryptographicProviderType Summary: Specifies the cryptographic service providers available for validating digital signatures. Remarks: A cryptographic service provider contains implementations of cryptographic standards and algorithms. Applications can require the authentication provider name or authentication provider type of a cryptographic service provider to validate the digital signatures.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [MessagingDescriptionAttribute(#MsgAppSpecific#)] public int AppSpecific { get; set; } Property Value Type: System.Int32 Information specific to the application. The default is 0. Summary: Gets or sets additional, application-specific information. Remarks: The AppSpecific property contains additional, application-specific information that can be used to organize different types of messages, for example, using application-specific indexes. It is the responsibility of the application to interpret AppSpecific information. Where possible, message data should be included in the body of the message rather than in the AppSpecific property. When working with foreign queues, use the Extension property to specify non-Message Queuing message properties. As with AppSpecific, it is the responsibility of the application to understand the content of the Extension property.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [FlagsAttribute] public enum GenericAccessRights Summary: Uses the Windows 2000 and Windows NT access format to specify a set of common access rights that Message Queuing maps to both standard and object-specific access rights for reading, writing, and executing. Remarks: The GenericAccessRights enumeration provides less detail in what you can specify, but is typically simpler than specifying all the corresponding standard and specific rights. Each object type can map generic access rights to a set of standard (common to most types of securable objects) and object-specific rights. For example, giving a user GenericAccessRights.Read and GenericAccessRights.Write access to a message queue enables sending, peeking, and receiving messages from a queue. However, for finer access rights control, you can use the StandardAccessRights and the MessageQueueAccessRights enumeration to specify, for example, that a user can peek but not receive messages, can delete queues or messages, or can set queue properties.",1,0,0,0,0,0,1,1,0,0,0,0
"MD2 hashing algorithm.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [MessagingDescriptionAttribute(#MsgTransactionStatusQueue#)] public MessageQueue TransactionStatusQueue { get; set; } Property Value Type: System.Messaging.MessageQueue The transaction status queue on the source computer, which is used for sending acknowledgement messages back to the sending application. The default is Nothing. Summary: Gets the transaction status queue on the source computer. Remarks: The TransactionStatusQueue property identifies the transactional queue on the source computer that receives read-receipt acknowledgments from connector applications. Message Queuing sets the property, and connector applications use the property when retrieving transactional messages sent to foreign queues. A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application. The connector application can use the transaction status queue to send acknowledgment messages back to the sending application. The transaction status queue should receive these acknowledgments even if the sending application does not request other acknowledgments. Example: The following code example displays the value of a message's TransactionStatusQueue property.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [MessagingDescriptionAttribute(#MsgSenderCertificate#)] public bool SenderCertificate { get; set; } Property Value Type: System.Boolean true to receive Message.SenderCertificate information; otherwise, false. The default is false. Summary: Gets or sets a value that indicates whether to retrieve Message.SenderCertificate property information when receiving or peeking a message. Remarks: The SenderCertificate property of the Message class specifies the security certificate used to authenticate messages. Example: The following code example demonstrates the use of the SenderCertificate property.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the MessageQueue class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [MessagingDescriptionAttribute(#MQ_CanRead#)] [BrowsableAttribute(false)] public bool CanRead { get; } Property Value Type: System.Boolean true if the MessageQueue exists and the application can read from it; otherwise, false. Summary: Gets a value that indicates whether the MessageQueue can be read. Remarks: CanRead indicates whether the application is able to peek or receive messages from the queue. If CanRead is true, the MessageQueue can receive or peek messages from the queue. Otherwise, it cannot. CanRead is false if a queue is already open with exclusive read access (or if it's open with non-exclusive access and this MessageQueue requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to read from a queue when CanRead is false, access is denied. The following table shows whether this property is available in various Workgroup modes. Workgroup mode Available Local computer Yes Local computer and direct format name Yes Remote computer No Remote computer and direct format name Yes Example: The following code example displays the value of a message queue's CanRead property.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [MessagingDescriptionAttribute(#MQ_Category#)] public Guid Category { get; set; } Property Value Type: System.Guid A Guid that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues. The default is Guid.empty. Summary: Gets or sets the queue category. Remarks: The queue category allows an application to categorize its queues. For example, you can place all Billing queues in one category and all Order queues in another. The Category property provides access to the Message Queuing Type ID property (which is read/write), accessible through the Queue Properties dialog box in the Computer Management Console. You can define a new category. Although you can use NewGuid to create a category value that is unique across all Guid values, such an action is unnecessary. The category value needs to be distinct only from other categories, not from all other Guid values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the Category for one set of queues and {00000000-0000-0000-0000-000000000002} as the Category for another set. It is not necessary to set the Category. The value can be Nothing. Setting this property modifies the Message Queuing queue. Therefore, any other MessageQueue instances are affected by the change. The following table shows whether this property is available in various Workgroup modes. Workgroup mode Available Local computer Yes Local computer and direct format name Yes Remote computer No Remote computer and direct format name No Example: The following code example gets and sets the value of a message queue's Category property.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [MessagingDescriptionAttribute(#MQ_MachineName#)] [BrowsableAttribute(false)] public string MachineName { get; set; } Property Value Type: System.String The name of the computer where the queue is located. The Message Queuing default is #.#, the local computer. Summary: Gets or sets the name of the computer where the Message Queuing queue is located. Remarks: The MachineName is an integral component of the friendly name syntax of the queue Path. The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name. Queue type Syntax Public queue MachineName\\QueueName Private queue MachineName\\Private$\\QueueName Journal queue MachineName\\QueueName\\Journal$ Machine journal queue MachineName\\Journal$ Machine dead-letter queue MachineName\\Deadletter$ Machine transactional dead-letter queue MachineName\\XactDeadletter$ Use #.# for the local computer when specifying the MachineName. Only the computer name is recognized for this property, for example, Server0. The MachineName property does not support the IP address format. If you define the Path in terms of the MachineName, the application throws an exception when working offline because the domain controller is required for path translation. Therefore, you must use the FormatName for the Path syntax when working offline. The MachineName, Path, and QueueName properties are related. Changing the MachineName property causes the Path property to change. It is built from the new MachineName and the QueueName. Changing the Path (for example, to use the format name syntax) resets the MachineName and QueueName properties to refer to the new queue. If the QueueName property is empty, the Path is set to the Journal queue of the computer you specify. The following table shows whether this property is available in various Workgroup modes. Workgroup mode Available Local computer Yes Local computer and direct format name Yes Remote computer Yes Remote computer and direct format name No Example: The following code example gets and sets the value of a message queue's MachineName property.",1,0,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Returns a copy of the first message in the queue without removing the message from the queue.",1,0,0,1,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Returns a copy of the message that has the specified message identifier without removing the message from the queue.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Summary: Receives the first message in the queue, removing it from the queue.",1,0,0,0,0,0,0,0,0,0,0,0
"A combination of GetQueueProperties, GetQueuePermissions, and WriteMessage.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public DateTime CreatedAfter { get; set; } Property Value Type: System.DateTime A DateTime that specifies the lower boundary for a queue's creation date and time. Summary: Gets or sets the lower boundary of the queue creation date and time by which to filter queues on the network. Remarks: The MessageQueueCriteria properties are combined using a logical AND, so setting both CreatedAfter and CreatedBefore bounds a time interval for the queues' creation. If you set only CreatedAfter, there is no upper boundary on the date. If you try to set CreatedAfter to a later DateTime value than CreatedBefore, CreatedBefore is reset to the same (new) value as CreatedAfter.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Releases the resources used by the MessageQueueEnumerator.",1,0,0,0,0,0,1,1,0,0,1,0
"Message text: Access is denied. Message Queuing returns this error if access to the specified queue or computer is denied. If this error is returned, verify that you have access rights for the operation, such as creating, deleting, or setting properties for a queue. For information about changing access rights for a queue, see the MessageQueueAccessRights and MessageQueue.SetPermissions topics.",1,0,0,0,0,0,0,1,0,0,0,1
"Message text: The internal Message Queuing certificate for the user does not exist. Message Queuing returns this error if no internal certificate is registered or the registered certificate is corrupted.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum MessageQueueTransactionStatus Summary: Specifies the state of an internal Message Queuing transaction. Remarks: When an instance of the MessageQueueTransaction class has been created, its Status property is set by the constructor to Initialized. After a transaction has begun, but before it is committed or rolled back, the Status is Pending.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum MessageQueueTransactionType Summary: Specifies the type of a Message Queuing transaction. Remarks: When you read or write a message using an overload of the MessageQueue class's Send or Receive methods (including ReceiveById and ReceiveByCorrelationId) that takes a transactionType parameter, you can specify how you are interacting with the queue. Automatic enables you to send and receive from external transactions (such as when you are interacting with database applications), while Single is used for single internal Message Queuing transactions. None enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue. This is useful, for example, when routing several messages sent within a single transaction. If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the MessageQueueTransaction class and pass it into an overload of the Send or Receive methods that takes a transaction parameter rather than one that takes a transactionType parameter.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public enum QueueAccessMode Summary: Specifies the access mode for a MessageQueue at creation time. Remarks: When creating a MessageQueue, if no access mode is specified, the access mode defaults to QueueAccessMode.SendAndReceive. Once the MessageQueue is created, the access mode cannot be changed.",1,0,0,0,0,0,0,0,0,0,0,0
"The queue can only send messages.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class Cloud : ISerializable, IEquatable<Cloud> Summary: Specifies the values that define a Peer Cloud object. Remarks: A Cloud is a set of nodes that can communicate with each other through the network. Cloud, peer mesh, and peer-to-peer graph are synonymous. A single peer or node may be connected to more than one cloud. Communication between nodes should never cross from one cloud to another. A Cloud instance is uniquely identified by its name, which is case-sensitive. Clouds are tied very closely to network interfaces. On a multi-homed machine with two network cards attached to different subnets, three clouds will be returned: one for each of the link local addresses per interface, and a single global scope cloud. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public CloudCollection() Summary: Initializes a new instance of the CloudCollection class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override string ToString() Return Value Type: System.String A string that represents the current PeerName, and specified in the following format: Authority.Classifier. For example, #0.MyInternetPeer#. Summary: Returns a string representation of the current PeerName object. Remarks: This method inherits the default signature and behavior from Object.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public override void FromXml( SecurityElement e ) Parameters eType: System.Security.SecurityElement The XML encoding to use to reconstruct the permission. Implements ISecurityEncodable.FromXml(SecurityElement) Summary: Reconstructs a security object with a specified state from an XML encoding. Remarks: Represents the XML object model for encoding security objects. This class cannot be inherited. This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.",1,0,1,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override IPermission CreatePermission() Return Value Type: System.Security.IPermission A new IPermission object. Summary: Creates and returns a new IPermission. Remarks: Notes to Inheritors This method is not used, and is included only to support inheritance from SecurityAttribute at compile time or during interpretation. When this class inherits from SecurityAttribute, it overrides CreatePermission automatically at compile time or at run-time.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public PeerEndPoint PeerEndPoint { get; } Property Value Type: System.Net.PeerToPeer.Collaboration.PeerEndPoint The PeerEndPoint that contains the endpoint for which application information has changed. Unless explicitly specified, the default value for all properties is Nothing for reference types and zero (0) for properties of type int. Summary: Gets the endpoint for which PeerApplication information has changed.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<ObjectChangedEventArgs> ObjectChanged Summary: Raised whenever an object within a contact's registered PeerObject objects has changed. Remarks: Before this event can be raised, the current user of the remote peer must subscribe to the collaboration events of the host peer. Subscription is accomplished via the PeerContact Subscribe methods. This event requires a PermissionState of Unrestricted.",0,0,1,0,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class CreateContactCompletedEventArgs : AsyncCompletedEventArgs Summary: Provides qualifying information to a callback method when a CreateContactCompleted event occurs. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Summary: Gets the collection of data objects that were registered by the peer from a local cache. Remarks: This functionality is only exposed on the PeerContact class. This functionality is not exposed on any other type of peer for security reasons. If no objects are found for the endpoint, a collection of size zero (0) is returned.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class PeerApplication : IDisposable, IEquatable<PeerApplication>, ISerializable Summary: Represents an application that is available for use with the Peer Collaboration infrastructure. Remarks: An application is a set of software or software features available to a peer from an endpoint. Commonly, this refers to network-enabled software packages such as games or other collaborative applications. A PeerApplication defines the set of software applications or components available for use with the PeerCollaboration network. This network enables infrastructure participants to initiate usage of this application. They may initiate a collaboration session using the application identified by this class. After constructing an instance of this class and setting the appropriate properties, this object may be used in System.Net.PeerToPeer collaboration sessions. Its use is accomplished by passing it to the peer collaboration RegisterApplication and UnregisterApplication methods, which will enable or disable it. The globally unique Id and PeerApplicationRegistrationType properties of this instance must be set before the application can successfully be registered. After registering an application with the Peer Collaboration infrastructure, the registration information persists in the registry. This makes the application available to collaboration applications even after the program which registered the application has exited. Changing the properties on an application instance after it has been registered has no effect on the registration. To update the registration, the application must be deregistered and then registered again with the new information. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: public byte[] Data { get; internal set; } Property Value Type: System.Byte() An array of bytes that containing the data associated with the PeerCollaboration invitation. Summary: Gets or sets application-defined binary data associated with the PeerApplication invitation. Remarks: This data blob is free form and is provided by the caller. The maximum amount of data that can be provided is 4,096 bytes. The Data cannot be Nothing.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static event EventHandler<PresenceChangedEventArgs> LocalPresenceChanged Summary: The PeerPresenceInfo of the local peer on the local host has changed.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<ApplicationChangedEventArgs> ApplicationChanged Summary: This event is raised whenever an application associated with the PeerContact has changed.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<PresenceChangedEventArgs> PresenceChanged Summary: This event is raised whenever the PeerContact has changed its presence status.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class PeerInvitationResponse Summary: Represents a response received from a remote peer to an invitation sent via the Invite or Invite method. Remarks: This class does not have a public constructor. The PeerInvitationResponseType class is used to encapsulate the response to accommodate the return of any additional data with a future release. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter, SerializationFormatter = true)] void ISerializable.GetObjectData( SerializationInfo info, StreamingContext context ) Parameters infoType: System.Runtime.Serialization.SerializationInfo The SerializationInfo to populate with data. contextType: System.Runtime.Serialization.StreamingContext The destination for the serialization. Implements ISerializable.GetObjectData(SerializationInfo, StreamingContext) Summary: Populates the current PeerNearMe instance with the data obtained from the serialized source.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class PeerNearMeChangedEventArgs : EventArgs Summary: Provides qualifying information to a callback method when a PeerNearMeChanged event occurs. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public PeerContact PeerContact { get; } Property Value Type: System.Net.PeerToPeer.Collaboration.PeerContact PeerContact object associated with the PeerEndPoint on which the presence information has changed. Summary: Specifies the PeerContact on which the presence information has changed. Remarks: If the PeerEndPoint specified by PeerEndPoint is not associated with a PeerContact, this value is Nothing.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class RefreshDataCompletedEventArgs : AsyncCompletedEventArgs Summary: Provides qualifying information to the OnRefreshDataCompleted method when RefreshDataCompleted events occur. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static int Compare( BigInteger left, BigInteger right ) Parameters leftType: System.Numerics.BigInteger The first value to compare. rightType: System.Numerics.BigInteger The second value to compare. Return Value Type: System.Int32 A signed integer that indicates the relative values of left and right, as shown in the following table. Value 	 Condition Less than zero 	 left is less than right. Zero 	 left equals right. Greater than zero 	 left is greater than right. Summary: Compares two BigInteger values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value. Remarks: Although the BigInteger type has no fixed range, comparisons of BigInteger values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers. The following example compares two BigInteger values that differ by one and that each have 1,896 digits. The Compare method correctly reports that the two values are not equal.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public bool IsEven { get; } Property Value Type: System.Boolean true if the value of the BigInteger object is an even number; otherwise, false. Summary: Indicates whether the value of the current BigInteger object is an even number. Remarks: This property is a convenience feature that indicates whether a BigInteger value is evenly divisible by two. It is equivalent to the following expression: [C\#]  [Visual Basic]    If the value of the current BigInteger object is BigInteger.Zero, the property returns true.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Summary: Returns a value that indicates whether two values are equal.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Returns a value that indicates whether a specified value is less than a second specified value.",1,0,0,1,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public struct Complex : IEquatable<Complex>, IFormattable Summary: Represents a complex number. Remarks: A complex number is a number that comprises a real number part and an imaginary number part. A complex number z is usually written in the form z = x + yi, where x and y are real numbers, and i is the imaginary unit that has the property i2 = -1. The real part of the complex number is represented by x, and the imaginary part of the complex number is represented by y. The Complex type uses the Cartesian coordinate system (real, imaginary) when instantiating and manipulating complex numbers. A complex number can be represented as a point in a two-dimensional coordinate system, which is known as the complex plane. The real part of the complex number is positioned on the x-axis (the horizontal axis), and the imaginary part is positioned on the y-axis (the vertical axis). Any point in the complex plane can also be expressed based on its absolute value, by using the polar coordinate system., In polar coordinates, a point is characterized by two numbers: Its magnitude, which is the distance of the point from the origin (that is, 0,0, or the point at which the x-axis and the y-axis intersect). Its phase, which is the angle between the real axis and the line drawn from the origin to the point. Instantiating a Complex Number You can assign a value to a complex number in one of the following ways: By passing two Double values to its constructor. The first value represents the real part of the complex number, and the second value represents its imaginary part. These values represent the position of the complex number in the two-dimensional Cartesian coordinate system. By calling the static (Shared in Visual Basic) Complex.FromPolarCoordinates method to create a complex number from its polar coordinates. By assigning a Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, or Double value to a Complex object. The value becomes the real part of the complex number, and its imaginary part equals 0. By casting (in ) or converting (in Visual Basic) a Decimal or BigInteger value to a Complex object. The value becomes the real part of the complex number, and its imaginary part equals 0. By assigning the complex number that is returned by a method or operator to a Complex object. For example, Complex.Add is a static method that returns a complex number that is the sum of two complex numbers, and the Complex.Addition operator adds two complex numbers and returns the result. The following example demonstrates each of these five ways of assigning a value to a complex number.  Operations with Complex Numbers The Complex structure in the .NET Framework includes members that provide the following functionality: Methods to compare two complex numbers to determine whether they are equal. Operators to perform arithmetic operations on complex numbers. Complex operators enable you to perform addition, subtraction, multiplication, division, and unary negation with complex numbers. Methods to perform other numerical operations on complex numbers. In addition to the four basic arithmetic operations, you can raise a complex number to a specified power, find the square root of a complex number, and get the absolute value of a complex number. Methods to perform trigonometric operations on complex numbers. For example, you can calculate the tangent of an angle represented by a complex number. Precision and Complex Numbers The real and imaginary parts of a complex number are represented by two double-precision floating-point values. This means that Complex values, like double-precision floating-point values, can lose precision as a result of numerical operations. This means that strict comparisons for equality of two Complex values may fail, even if the difference between the two values is due to a loss of precision. For more information, see Double. For example, performing exponentiation on the logarithm of a number should return the original number. However, in some cases, the loss of precision of floating-point values can cause slight differences between the two values, as the following example illustrates.    Similarly, the following example, which calculates the square root of a Complex number, produces slightly different results on the 32-bit and IA64 versions of the .NET Framework.    Complex Numbers, Infinity, and NaN The real and imaginary parts of a complex number are represented by Double values. In addition to ranging from Double.MinValue to Double.MaxValue, the real or imaginary part of a complex number can have a value of Double.PositiveInfinity, Double.NegativeInfinity, or Double.NaN. Double.PositiveInfinity, Double.NegativeInfinity, and Double.NaN all propagate in any arithmetic or trigonometric operation. In the following example, division by Zero produces a complex number whose real and imaginary parts are both Double.NaN. As a result, performing multiplication with this value also produces a complex number whose real and imaginary parts are Double.NaN. Similarly, performing a multiplication that overflows the range of the Double type produces a complex number whose real part is Double.NaN and whose imaginary part is Double.PositiveInfinity. Subsequently performing division with this complex number returns a complex number whose real part is Double.NaN and whose imaginary part is Double.PositiveInfinity.    Mathematical operations with complex numbers that are invalid or that overflow the range of the Double data type do not throw an exception. Instead, they return a Double.PositiveInfinity, Double.NegativeInfinity, or Double.NaN under the following conditions: The division of a positive number by zero returns Double.PositiveInfinity. Any operation that overflows the upper bound of the Double data type returns Double.PositiveInfinity. The division of a negative number by zero returns Double.NegativeInfinity. Any operation that overflows the lower bound of the Double data type returns Double.NegativeInfinity. The division of a zero by zero returns Double.NaN. Any operation that is performed on operands whose values are Double.PositiveInfinity, Double.NegativeInfinity, or Double.NaN returns Double.PositiveInfinity, Double.NegativeInfinity, or Double.NaN, depending on the specific operation. Note that this applies to any intermediate calculations performed by a method. For example, the multiplication of new Complex(9e308, 9e308) and new Complex(2.5, 3.5) uses the formula (ac - bd) + (ad + bc)i. The calculation of the real component that results from the multiplication evaluates the expression 9e308 * 2.5 - 9e308 * 3.5. Each intermediate multiplication in this expression returns Double.PositiveInfinity, and the attempt to subtract Double.PositiveInfinity from Double.PositiveInfinity returns Double.NaN. Formatting a Complex Number By default, the string representation of a complex number takes the form (real, imaginary), where real and imaginary are the string representations of the Double values that form the complex number's real and imaginary components. Some overloads of the ToString method allow customization of the string representations of these Double values to reflect the formatting conventions of a particular culture or to appear in a particular format defined by a standard or custom numeric format string. (For more information, see Standard Numeric Format Strings and Custom Numeric Format Strings.) One of the more common ways of expressing the string representation of a complex number takes the form a + bi, where a is the complex number's real component, and b is the complex number's imaginary component. In electrical engineering, a complex number is most commonly expressed as a + bj. You can return the string representation of a complex number in either of these two forms. To do this, define a custom format provider by implementing the ICustomFormatter and IFormatProvider interfaces, and then call the String.Format(IFormatProvider, String, Object()) method. The following example defines a ComplexFormatter class that represents a complex number as a string in the form of either a + bi or a + bj.    The following example then uses this custom formatter to display the string representation of a complex number. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,1,0,1,1,0,0,0
"Additional online Documentation: Summary: Converts the value of a complex number to its equivalent string representation.",1,0,0,0,0,0,0,0,0,0,0,1
"A print queue that keeps jobs in the queue after printing them.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class PrintJobSettings Summary: Describes a print job. Remarks: The PrintTicket object, which is the value of the CurrentPrintTicket property, holds all the detailed settings for a print job. The parent, PrintJobSettings, adds only a description. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"The print job is in an error state.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class PrintPort : PrintSystemObject Summary: Represents a printer port on a print server. Each print queue has a print port assigned to it. Remarks: The PrintQueue.QueuePort property holds the PrintPort object that is assigned to the queue. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the PrintQueue class.",1,0,0,0,0,0,1,0,0,0,0,1
"The printer language file is not deleted after the file prints.",1,0,0,0,0,0,0,0,0,0,0,0
"The queue holds its jobs when the document and printer configurations do not match.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class PrintQueueStream : Stream Summary: A stream that represents a spooled print job in a print queue. Remarks: Use this class to write device specific information to a spool file that is not automatically included by the Microsoft Windows spooler. Of course, you need to know whether the spool file is Enhanced Metafile (EMF) or XML Paper Specification (XPS). If you prefer working with a Byte array, you can also use two of the overloads of the AddJob method and the JobStream property to write to the spool file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,0,0,0,0
"The property that specifies the kind of event logging that is provided by the print server.",1,0,0,0,0,0,0,0,0,0,0,0
"The property that specifies the priority of the scheduler.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum PrintSystemDesiredAccess Summary: Specifies the different access rights (or levels of access) for printing objects. Remarks: The access rights that are available at each level of access vary according to the following: Whether the print server is a computer or a print server appliance. The operating system that is used. The security updates that are installed. The security policies that are supported. For this reason, access right descriptions in the #Members# section are typical of the rights that will correspond to each access level, but the access levels listed may provide more or fewer rights on particular systems. These values are primarily used as parameters for PrintServer and PrintQueue constructors. The constructors will throw exceptions if you use a value that can apply only to another kind of object. For example, do not pass PrintSystemDesiredAccess.AdministratePrinter to a PrintServer constructor. Example: The following example shows how to use this enumeration to install a second printer that differs in its properties from an existing printer only in location, port, and shared status.",1,0,0,1,0,1,1,0,1,0,0,0
"Additional online Documentation: Summary: Releases the resources used by the PrintSystemObjectPropertiesChangedEventArgs object.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class PrintSystemObjectPropertyChangedEventArgs : EventArgs, IDisposable Summary: Provides data for a PropertyChanged event, which you must create. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class PrintSystemObjects : IDisposable Summary: Represents a collection of print system objects. Remarks: If you derive a class from PrintSystemObject, you may want to derive a collection of objects of that class from PrintSystemObjects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class PrintBooleanProperty : PrintProperty Summary: Represents a Boolean property (and its value) of a printing system hardware or software component. Example: The following example shows how to use this class while installing a second printer whose properties differ from an existing printer only in location, port, and shared status. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class PrintByteArrayProperty : PrintProperty Summary: Represents a property of a printing system hardware or software component whose value is an array of Byte values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class PrintDateTimeProperty : PrintProperty Summary: Represents a DateTime property (and its value) of a printing system hardware or software component. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the PrintQueueAttributeProperty class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override Object Value { get; set; } Property Value Type: System.Object A boxed PrintQueueAttributes value. Summary: Gets or sets the value of the property that the PrintQueueAttributeProperty represents.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the PrintQueueProperty class.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public override Object Value { get; set; } Property Value Type: System.Object A boxed PrintQueueStatus. Summary: Gets or sets the value of the property that the PrintQueueStatusProperty represents.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override Object Value { get; set; } Property Value Type: System.Object A Object that can be cast as a PrintServer. Summary: Gets or sets the value of the property that the PrintServerProperty represents.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class PrintStringProperty : PrintProperty Summary: Represents a String property (and its value) of a printing system hardware or software component. Example: The following example shows how to use this class to install a second printer that differs in its properties from an existing printer only in location, port, and shared status. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Writes a Visual synchronously to an XpsDocument or a PrintQueue.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Summary: Writes asynchronously to the XpsDocument or PrintQueue that created the XpsDocumentWriter.",1,0,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: public abstract class CacheEntryChangeMonitor : ChangeMonitor Summary: Provides a base class that represents a ChangeMonitor type that can be implemented in order to monitor changes to cache entries. Remarks: The CacheEntryChangeMonitor class provides abstract, read-only properties that can be implemented for monitoring cache entries. This class is used when a cache implementation has to monitor changes to entries in its own cache. For caches that are ObjectCache cache implementations, an instance of the CacheEntryChangeMonitor type is returned by the CreateCacheEntryChangeMonitor(IEnumerable(Of String), String) method. Notes to Inheritors For information about the inheritance contract that must be followed, see the information for inheritors in the ChangeMonitor class overview. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class CacheEntryRemovedArguments Summary: Provides information about a cache entry that was removed from the cache. Remarks: The properties of CacheEntryRemovedArguments class represent the cache entry itself, the ObjectCache instance that the entry was removed from, and the reason for the removal. The constructor of the CacheEntryRemovedArguments class uses these arguments to create a new instance of the class. A CacheEntryRemovedArguments object is typically created in a callback method to pass information about a removed cache entry back to an application when a cache entry is removed from the cache. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,0,0,0,1
"Additional online Documentation: Syntax: public CacheEntryRemovedReason RemovedReason { get; } Property Value Type: System.Runtime.Caching.CacheEntryRemovedReason One of the enumeration values that describes why a cache entry is being removed. Summary: Gets the reason that a cache entry is about to be removed from the cache.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected ChangeMonitor() Summary: Initializes a new instance of the ChangeMonitor class. This constructor is called from constructors in derived classes to initialize the base class. Remarks: The ChangeMonitor class has a default constructor. However, classes that inherit from the base ChangeMonitor class and define custom change-monitoring behavior must perform initialization in the constructor. For more information, see the Notes for Inheritors section. Notes to Inheritors The constructor of a derived class must set the UniqueId property, begin monitoring, and call the InitializationComplete class before it returns. If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the OnChanged method before it calls the InitializationComplete method. In this case, constructor can call the Dispose method only after the InitializationComplete method is called, because the Dispose method throws an exception if initialization is not completed.",0,0,1,0,0,1,1,0,0,0,0,1
"A cache implementation supports the ability to automatically remove cache entries at a specific date and time.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public delegate void OnChangedCallback( Object state ) Parameters stateType: System.Object The state of the dependent object that was changed. Summary: Defines a reference to a method that handles changes to monitored items. Remarks: The OnChangedCallback delegate is used by a change monitor to signal to a cache implementation that a change has occurred in an object whose contents are cached. The task of any implementation of the ChangeMonitor type is to monitor for changes in objects that are cached. For example, if the contents of a file are contained in a cache entry, and if the file is updated, its related cache entry must be changed also. In a typical cache implementation, a derived ChangeMonitor instance uses a OnChangedCallback delegate to notify the cache about a change.",0,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(MemoryCacheElement), CollectionType = ConfigurationElementCollectionType.AddRemoveClearMap)] public sealed class MemoryCacheSettingsCollection : ConfigurationElementCollection Summary: Represents a collection of MemoryCacheSettingsCollection elements. This class cannot be inherited. Remarks: The MemoryCacheSettingsCollection class represents the collection of configuration elements and settings that configure an instance of the MemoryCache class. In other words, this settings collection contains objects that represent elements and settings that are children of a memoryCache element. The MemoryCacheSettingsCollection class contains a namedCaches element. For more information about the configuration options that are related to this class, see <memoryCache> Element (Cache Settings) and <namedCaches> Element (Cache Settings). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class BinaryClientFormatterSink : IClientFormatterSink, IMessageSink, IClientChannelSink, IChannelSinkBase Summary: Provides the implementation for a client formatter sink that uses the BinaryFormatter. Remarks: The function of the formatter sink is to generate the necessary headers and serialize the message to the stream. After the formatter sink, the IMessage is forwarded to all sinks in the chain through the ProcessMessage or AsyncProcessRequest calls. At this stage the message has already been serialized and is provided as information only. Sinks that need to create or modify the message must be placed in the sink chain before the formatter. This is easily achieved by implementing the IClientFormatterSink interface, which gives the impression of having a reference to the formatter sink. The real formatter sink can then be placed later in the sink chain. Property Description includeVersions Specifies whether the formatter will include versioning information. Values are true or false. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,1,1,1,0,0,1,0
"Additional online Documentation: Syntax: public const string ConnectionId Summary: The transport key associated with a unique ID given to each incoming socket connection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IAuthorizeRemotingConnection Summary: The IAuthorizeRemotingConnection interface provides methods that indicate whether a client is authorized to connect on the current channel, based on the client's network address and user identity. Remarks: An instance of the IAuthorizeRemotingConnection interface is passed to TcpServerChannel(IDictionary, IServerChannelSinkProvider, IAuthorizeRemotingConnection). It provides a single point of authorization for all incoming connections on a TcpServerChannel. It allows for the authorization of the caller before any incoming messages are deserialized to minimize the security threat from untrusted sources.",1,0,0,1,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class SoapClientFormatterSink : IClientFormatterSink, IMessageSink, IClientChannelSink, IChannelSinkBase Summary: Provides the implementation for a client formatter sink that uses the SoapFormatter. Remarks: The function of the formatter sink is to generate the necessary headers and serialize the message to the stream. After reaching the formatter sink, the IMessage is forwarded to all sinks in the channel sink chain through the ProcessMessage or AsyncProcessRequest calls. At this stage the message has already been serialized and is provided as information only. Sinks that need to create or modify the message need to be placed in the sink chain before the formatter. This can be achieved by implementing both the IMessageSink and IClientChannelSink interfaces. The formatter sink can be placed in the sink chain later. Property Description includeVersions Specifies whether the formatter will include versioning information. Values are true or false. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,0,0,0,1
"Additional online Documentation: Syntax: public SoapClientFormatterSink( IClientChannelSink nextSink ) Parameters nextSinkType: System.Runtime.Remoting.Channels.IClientChannelSink The next sink in the channel sink chain. Summary: Initializes a new instance of the SoapClientFormatterSink class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the SoapClientFormatterSinkProvider class.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public enum Protocol Summary: Specifies the protocol to use with the SoapServerFormatterSink class.",1,0,0,0,0,0,0,0,0,0,0,1
"Indicates that a protocol other than HTTP is used with the current formatter sink.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IServerChannelSink ChannelSinkChain { get; } Property Value Type: System.Runtime.Remoting.Channels.IServerChannelSink The channel sink chain that the current channel is using. Implements IChannelReceiverHook.ChannelSinkChain Summary: Gets the channel sink chain that the current channel is using. Example: The following code example shows how to use the ChannelSinkChain property. This code example is part of a larger example provided for the HttpServerChannel class.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public override Object this[ Object key ] { get; set; } Parameters keyType: System.Object The key of the channel property to retrieve. Property Value Type: System.Object A Object that represents the channel property specified by key. Implements IDictionary.Item(Object) Summary: Returns the specified channel property.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class SUDSParserException : Exception Summary: The exception that is thrown if an error occurs during parsing of the Web Services Description Language (WSDL). Remarks: The SUDSParserException is generated by the remoting WSDL parser. The WSDL parser is used by the Soapsuds Tool (Soapsuds.exe), and can also be invoked programmatically using the MetaData class. SUDSParserException uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500. For a list of initial property values for an instance of SUDSParserException, see the Exception constructors. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: public sealed class SoapFormatter : IRemotingFormatter, IFormatter Summary: Serializes and deserializes an object, or an entire graph of connected objects, in SOAP format. Remarks: Note Beginning with the , this class is obsolete. Use BinaryFormatter instead. The SoapFormatter and BinaryFormatter classes implement the IRemotingFormatter interface to support remote procedure calls (RPCs), and the IFormatter interface (inherited by the IRemotingFormatter) to support serialization of a graph of objects. The SoapFormatter class also supports RPCs with ISoapMessage objects, without using the IRemotingFormatter functionality. During RPCs, the IRemotingFormatter interface allows the specification of two separate object graphs: the graph of objects to serialize, and an additional graph that contains an array of header objects that convey information about the remote function call (for example, transaction ID or a method signature). For proper serialization, the root object of the first graph must be an object that implements either the IMethodCallMessage interface or the IMethodReturnMessage interface. During deserialization of an RPC, a HeaderHandler delegate is specified to the Deserialize method of the formatter. The remoting infrastructure uses the HeaderHandler delegate to produce an object that supports the ISerializable interface. This object contains the information stored in the headers, and becomes the root of the graph returned by the deserializer. The SoapFormatter can also handle RPCs that are produced with objects that implement the ISoapMessage interface. To create an RPC without using the IRemotingFormatter functionality, place an object that supports the ISoapMessage interface at the root of a graph being serialized. To deserialize an RPC created in this manner the TopObject property must be set to another object that supports the ISoapMessage interface, and contains the relevant remote call information. TimeSpan Serialization TimeSpan objects are serialized according to the ISO 8601: 1998 section 5.5.3.2.1 #Alternative# standard. Version Information The SoapFormatter does not support serialization compatibility between versions of the .NET Framework. Serialization between versions 1.1 and 2.0 types in the Framework often fails. The following actions can be taken to remedy this issue: Convert to use the BinaryFormatter, which provides compatibility between 1.1 and 2.0. Convert existing persisted data to the new format. Convert all producers and consumers of serialized data to version 2.0. Avoid using types that changed from 1.1 to 2.0. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,1,1,1,0
"Additional online Documentation: Syntax: public TypeFilterLevel FilterLevel { get; set; } Property Value Type: System.Runtime.Serialization.Formatters.TypeFilterLevel The TypeFilterLevel that represents the current automatic deserialization level. Summary: Gets or sets the TypeFilterLevel of automatic deserialization for .NET Framework remoting. Remarks: Supported values are Low and Full (the default). For details about deserialization levels, see Automatic Deserialization in .NET Remoting.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class|AttributeTargets.Struct, Inherited = false, AllowMultiple = false)] public sealed class CollectionDataContractAttribute : Attribute Summary: When applied to a collection type, enables custom specification of the collection item elements. This attribute can be applied only to types that are recognized by the DataContractSerializer as valid, serializable collections. Remarks: The CollectionDataContractAttribute is intended to ease interoperability when working with data from non- providers and to control the exact shape of serialized instances. To this end, the ItemName property enables you to control the names of the repeating items inside a collection. This is especially useful when the provider does not use the XML element type name as the array item name, for example, if a provider uses #String# as an element type name instead of the XSD type name #string#. The CollectionDataContractAttribute is also intended to be used with dictionary types to handle keyed collections. Dictionary types are classes that implement either the IDictionary or the IDictionary(Of TKey, TValue) interface, for example, the Dictionary(Of TKey, TValue). Use the KeyName and ValueName properties to set custom names when using the Dictionary(Of TKey, TValue) class. For more information about using the DataContractSerializer, see Data Contracts Overview. Example: The following example applies the CollectionDataContractAttribute to a class that inherits from the List(Of T) class. The code sets the Name and ItemName properties to custom values.  When the Service Model Metadata Utility Tool (Svcutil.exe) is used to generate code for the client, the code resembles the following example. Notice that the name of the class is changed, as well as the ItemName. When using generics, the type parameter name is used to create the resulting type name. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public string KeyName { get; set; } Property Value Type: System.String The name to use instead of the default dictionary key name. Summary: Gets or sets the custom name for a dictionary key name.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Assembly|AttributeTargets.Module, Inherited = false, AllowMultiple = true)] public sealed class ContractNamespaceAttribute : Attribute Summary: Specifies the CLR namespace and XML namespace of the data contract. Remarks: Apply the ContractNamespaceAttribute attribute to an assembly that contains types to which the DataContractAttribute has been applied. The ContractNamespaceAttribute enables you to set a namespace that is different than the one generated when the type is serialized. For more information about how names are generated, see Data Contract Names. If you are using a type to conform to an existing data contract, you must match the namespace of the existing contract by using the ContractNamespaceAttribute (or the Namespace property of the DataContractAttribute class). Note In any code, you can use the word ContractNamespace instead of the longer ContractNamespaceAttribute. Example: The following example shows the ContractNamespaceAttribute applied to an assembly. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public abstract bool TryResolveType( Type type, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace ) Parameters typeType: System.Type The type to map. declaredTypeType: System.Type The type declared in the data contract. knownTypeResolverType: System.Runtime.Serialization.DataContractResolver The known type resolver. typeNameType: System.Xml.XmlDictionaryString% The xsi:type name. typeNamespaceType: System.Xml.XmlDictionaryString% The xsi:type namespace. Return Value Type: System.Boolean true if mapping succeeded; otherwise, false. Summary: Override this method to map a data contract type to an xsi:type name and namespace during serialization. Remarks: If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the knownTypeResolver parameter. Example: The following example shows an implementation of the TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString) method.",0,0,0,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DataContractSerializer class.",0,1,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property|AttributeTargets.Field, Inherited = false, AllowMultiple = false)] public sealed class DataMemberAttribute : Attribute Summary: When applied to the member of a type, specifies that the member is part of a data contract and is serializable by the DataContractSerializer. Remarks: Apply the DataMemberAttribute attribute in conjunction with the DataContractAttribute to identify members of a type that are part of a data contract. One of the serializers that can serialize data contracts is the DataContractSerializer. The data contract model is an #opt-in# model. Applying the DataMemberAttribute to a field or property explicitly specifies that the member value will be serialized. In contrast, the BinaryFormatter serializes public and private fields of a type, and the XmlSerializer serializes only public fields and properties of a type. Caution You can apply the DataMemberAttribute to private fields or properties. Be aware that the data returned by the member (even if it private) will be serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process. By default, the CLR member name is used as the name of the data member. By setting the Name property, you can customize the name of the data member. This can be used to provide a name that may not be allowed as a CLR member name. When mapping to XML using the DataContractSerializer, this name is used as the name of the schema element in a type. Note Properties to which the DataMemberAttribute attribute has been applied must have both get and set fields; they cannot be get-only or set-only. For more information about data contracts and data members, see Using Data Contracts. For more information about member names, see Data Member Default Values. Example: The following example shows two types to which the DataContractAttribute and DataMemberAttribute attributes have been applied. The Name property is set to #Customer#. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,1,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public ICollection<Type> ReferencedTypes { get; } Property Value Type: System.Collections.Generic.ICollection(Of Type) A IList(Of T) that contains the referenced types. Summary: Gets a IList(Of T) containing types referenced in generated code.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Determines whether the reader is positioned on an object that can be deserialized. Remarks: This is equivalent to using the ReadObject method of the IFormatter interface.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the XsdDataContractExporter class.",0,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#type#, DefaultValue = ##, Options = ConfigurationPropertyOptions.IsKey)] public string Type { get; set; } Property Value Type: System.String The name of the declared type. Summary: Gets or sets the name of the declared type that requires a collection of known types.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Serializes an object to a JavaScript Object Notation (JSON) document. Remarks: Some overloads of this method deal with XML. These overloads are only intended for advanced scenarios when working with the XML/JSON mapping.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IXmlJsonWriterInitializer Summary: Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream. Remarks: The XmlDictionaryWriter objects created by the CreateJsonWriter methods implement this interface and when created are immediately ready to write JSON-encoded data. But if a user wants to reuse the same XmlDictionaryWriter object to write a new JSON document to another output stream, then the writer must be initialized to the appropriate stream by using the SetOutput(Stream, Encoding, Boolean) method.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public interface IFragmentCapableXmlDictionaryWriter Summary: Contains properties and methods that when implemented by a XmlDictionaryWriter, allows processing of XML fragments. Remarks: This class defines the properties and methods related to the capability of an XmlDictionaryWriter to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IXmlDictionary Summary: An interface that defines the contract that an Xml dictionary must implement to be used by XmlDictionaryReader and XmlDictionaryWriter implementations. Remarks: This interface is implemented by XmlDictionary, which is used in to optimize the performance of serialization and deserialization of XML messages. Implement this interface to provide custom XmlDictionaryString management.",1,0,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public interface IXmlTextReaderInitializer Summary: Specifies implementation requirements for XML text readers that derive from this interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class XmlBinaryReaderSession : IXmlDictionary Summary: Enables optimized strings to be managed in a dynamic way. Remarks: Session objects (this class together with XmlBinaryWriterSession) enable dynamic string atomization that can span an entire conversation. These session objects manage dynamic dictionaries of XmlDictionaryString instances. For more information about dynamic dictionaries see XmlDictionary. Due to asynchronous processing, it is possible for messages that arrive synchronously to be processed in a different order than they order in which they were sent. String atomization that spans messages must ensure the message are processed in the original order, or the atomized strings must be conveyed using a different mechanism. To use them you create a session object and pass it to the constructor or initializer for a binary XML reader or writer. To reuse a dynamic dictionary simply pass the same session object to all subsequent readers and/or writers. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,1,0,0,0,1
"Additional online Documentation: Summary: Reads repeated occurrences of a data type into a typed array.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Reads repeated occurrences of a data type into a typed array.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Reads repeated occurrences of a data type into a typed array.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public int MaxBytesPerRead { get; set; } Property Value Type: System.Int32 The maximum allowed bytes returned for each read. The default is 4096. Summary: Gets and sets the maximum allowed bytes returned for each read. Remarks: This quota limits the number of bytes that can be consumed by the reader during a single call to Read(). This quota is an approximation, because transformations in the encoding layer happen before this quota is applied. This quota is closely tied to the number of bytes received on the wire at the transport level, but its purpose is to control the quantity of data we receive for each read. In practice, it is used to limit the size of start tags. Because the entire start tag must be buffered to be processed (attributes uniqueness must be verified), the size must be limited to mitigate DOS attacks. Instances created with the public constructor have properties that can be set.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected virtual void WriteTextNode( XmlDictionaryReader reader, bool isAttribute ) Parameters readerType: System.Xml.XmlDictionaryReader The XmlDictionaryReader to get the text value from. isAttributeType: System.Boolean Specifies whether the reader is positioned on an attribute value or element content. Summary: Writes the text node that an XmlDictionaryReader is currently positioned on. Remarks: If positioned on element content, this method advances the XmlDictionaryReader.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: System.Object    System.Runtime.Persistence.InstanceKey     System.ServiceModel.Channels.CorrelationKey Summary: Represents an instance key and contains an identifier and metadata associated with the instance key. An instance key acts as a non-unique alias for an instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IDictionary<XName, InstanceValue> Metadata { get; private set; } Property Value Type: System.Collections.Generic.IDictionary(Of XName, InstanceValue) The dictionary that contains metadata associated with the instance key. Summary: Gets the dictionary that contains metadata associated with the instance key.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: System.Object    System.Exception     System.Runtime.Persistence.InstancePersistenceException       System.Runtime.Persistence.InstancePersistenceCommandException         System.Runtime.Persistence.InstanceKeyNotReadyException Summary: A persistence provider throws this exception when it expects to find an instance key in the associated state, but finds the key in the unassociated state. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: System.Object    System.Runtime.Persistence.InstanceOwner Summary: Represents the owner of an instance in the instance store. An instance owner is an interaction participant with an instance in the instance store. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Guid InstanceOwnerId { get; private set; } Property Value Type: System.Guid The ID of the instance owner. Summary: Gets ID of the instance owner as a GUID.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: System.Object    System.Runtime.Persistence.InstancePersistenceContext Summary: Represents execution state information while a persistence command is being executed. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void EndExecute( IAsyncResult result ) Parameters resultType: System.IAsyncResult The status of an asynchronous operation. Summary: Ends the asynchronous operation.",1,0,0,0,0,0,0,0,0,0,0,1
"Indicates that the instance is initialized. An initialized instance is an instance that has been persisted at least once and can be persisted again in the future.",0,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public IAsyncResult BeginExecute( InstanceHandle handle, InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, Object state ) Parameters handleType: System.Runtime.Persistence.InstanceHandle An instance handle. commandType: System.Runtime.Persistence.InstancePersistenceCommand The command to be executed. timeoutType: System.TimeSpan The timeout value for the command execution. callbackType: System.AsyncCallback The asynchronous callback delegate that receives notification of the completion of the asynchronous operation. stateType: System.Object The state information. Return Value Type: System.IAsyncResult The state of the asynchronous operation. Summary: Asynchronously executes persistence commands such as LoadWorkflowCommand and SaveWorkflowCommand. Remarks: A host calls the BeginExecute(InstanceHandle, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object) method to execute a persistence command against an instance handle asynchronously. The host obtains the instance handle by invoking the CreateInstanceHandle method.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: System.Object    System.Runtime.Persistence.InstanceStoreQueryResult     System.Runtime.Persistence.InstanceLockQueryResult     System.Runtime.Persistence.InstanceOwnerQueryResult Summary: Provides extensible mechanism for retrieving data from an instance store without requiring an instance handle from the caller. For example, a caller may want to retrieve owner metadata for all the instance owners in the store. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IDictionary<XName, InstanceValue> InstanceData { get; internal set; } Property Value Type: System.Collections.Generic.IDictionary(Of XName, InstanceValue) The instance data. Summary: Gets instance data as a dictionary of names and values.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class CryptographicAttributeObject Summary: Contains a type and a collection of values associated with that type. Remarks: This class corresponds to an ASN.1 structure defined in the Cryptographic Message Syntax standards specification. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class CryptographicAttributeObjectCollection : ICollection, IEnumerable Summary: Contains a set of CryptographicAttributeObject objects. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: CryptographicAttributeObject ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class CryptographicAttributeObjectEnumerator : IEnumerator Summary: Provides enumeration functionality for the CryptographicAttributeObjectCollection collection. This class cannot be inherited. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class AlgorithmIdentifier Summary: The AlgorithmIdentifier class defines the algorithm used for a cryptographic operation. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Creates an instance of the CmsSigner class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class Pkcs9ContentType : Pkcs9AttributeObject Summary: The Pkcs9ContentType class defines the type of the content of a CMS/PKCS \#7 message. Remarks: A Pkcs9ContentType object will be automatically generated and placed in the SignerInfo.SignedAttributes property whenever the CmsSigner.SignedAttributes property for the corresponding signer is not empty. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the Pkcs9DocumentName class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the Pkcs9SigningTime class.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: IEnumerator IEnumerable.GetEnumerator() Return Value Type: System.Collections.IEnumerator A RecipientInfoEnumerator object that can be used to enumerate the RecipientInfoCollection collection. Implements IEnumerable.GetEnumerator Summary: The IEnumerable.GetEnumerator method returns a RecipientInfoEnumerator object for the RecipientInfoCollection collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int Version { get; } Property Value Type: System.Int32 An int value that represents the CMS/PKCS \#7 message version. Summary: The Version property retrieves the version of the CMS/PKCS \#7 message. Remarks: The version determines whether the message is a PKCS \#7 message or a Cryptographic Message Syntax (CMS) message. CMS is a newer superset of PKCS \#7. Windows 98 Platform Note: CMS is not supported.",1,0,0,0,0,0,0,0,0,1,0,0
"Additional online Documentation: Summary: Creates a countersignature and adds the signature to the CMS/PKCS \#7 message.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum X509SelectionFlag Summary: Specifies the type of selection requested using the X509Certificate2UI.SelectFromCollection method. Remarks: This flag represents either a single or multiple certificate selection using the X509Certificate2UI.SelectFromCollection method. Example: The following code example demonstrates how to use the selection flag with the X509Certificate2UI.SelectFromCollection method. This code example is part of a larger example provided for the X509Store class. The larger example opens the current user's personal certificate store, allows the user to select a certificate, then writes certificate and certificate chain information to the console. The output depends on the certificate the user selects.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class CipherData Summary: Represents the <CipherData> element in XML encryption. This class cannot be inherited. Remarks: The CipherData class represents the <CipherData> element in XML encryption. It is a required element that provides the encrypted data. It must either contain the encrypted data as base64-encoded text of the <CipherValue> element, or provide a reference to an external location containing the encrypted data using the <CipherReference> element. In many cases, you do not need to directly create a new instance of the CipherData class. The EncryptedXml, EncryptedData, and EncryptedKey classes create instances for you. Note A CipherData object can have either a CipherReference property or a CipherValue property, but not both. A CryptographicException is thrown if both are assigned to a CipherData object. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: The following code example uses the EncryptedData class to create an <EncryptedData> element that contains a <CipherData> element, and then writes the XML to an XML file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class CipherReference : EncryptedReference Summary: Represents the <CipherReference> element in XML encryption. This class cannot be inherited. Remarks: This class represents the <CipherReference> element in XML encryption. It identifies a source which, when processed, yields the encrypted data. The actual encrypted data referenced by the <CipherReference> is obtained by the following process. The <CipherReference> URI property contains a Uniform Resource Identifier (URI) that is dereferenced. If the <CipherReference> element also contains a transform chain, the data resulting from dereferencing the URI is transformed as specified to produce the encrypted data. For example, if the encrypted data is base64-encoded within an XML document, the transforms would specify an XPath expression followed by a base64 decoding so the encrypted data can be extracted. The syntax of the URI and transforms is similar to that of XML digital signatures. However, in XML digital signatures, both generation and validation processing start with the same source data and perform that transform in the same order. In XML encryption, the decrypting application has only the encrypted data and the specified transforms. The transforms are enumerated in the order necessary to obtain the encrypted data. Note   By default, you cannot dereference cipher references from documents with unknown sources, such as files from a Web site, because the DocumentEvidence property is null. For example, when you attempt to decrypt a file containing a <CipherReference> element that references a file on the Web, a SecurityException is thrown, even if the request is made by a fully trusted assembly. If you are sure the documents you are decrypting can be trusted, you can change this behavior for fully trusted applications by using the following code:  Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: The following code example creates a new instance of CipherReference. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,0,1,0,0,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class DataObject Summary: Represents the object element of an XML signature that holds data to be signed. Remarks: Use the DataObject class to store information or metadata directly in an XML signature. For example, you can store the signature generation date or the signer's identity. The DataObject class may or may not be covered by the XML signature. The class corresponds to the <Object> element in the World Wide Web Consortium (W3C) specification for XML Signatures. For more information about the W3C specification, see http://www.w3.org/TR/xmldsig-core/. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: The following code example demonstrates how to generate an enveloping XML signature.  The following code example demonstrates how to check an XML signature. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public override void LoadXml( XmlElement value ) Parameters valueType: System.Xml.XmlElement The XML element to load the DSAKeyValue state from. Summary: Loads a DSAKeyValue state from an XML element. Remarks: This method can be used to add XML elements to a DSAKeyValue object.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class EncryptedData : EncryptedType Summary: Represents the <EncryptedData> element in XML encryption. This class cannot be inherited. Remarks: This class is used to represent the <EncryptedData> element in XML encryption. This element is the core element in XML encryption. Its child element, <CipherData>, contains encrypted data. The <EncryptedData> element replaces an encrypted element or serves as the new document root. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: The following example demonstrates how to encrypt and decrypt an XML element by using the EncryptedData class. This example then displays various properties of the EncryptedData class to the console. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,1
"Additional online Documentation: Syntax: public abstract void LoadXml( XmlElement value ) Parameters valueType: System.Xml.XmlElement An XmlElement object representing an XML element to use in the <EncryptedType> element. Summary: Loads XML information into the <EncryptedType> element in XML encryption. Remarks: Use this method to load an existing XML element into the EncryptedType object. Example: The following code example demonstrates how to encrypt and decrypt an XML element using the EncryptedData class that derives from the EncryptedType class.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public static void ReplaceElement( XmlElement inputElement, EncryptedData encryptedData, bool content ) Parameters inputElementType: System.Xml.XmlElement The element to replace with an <EncryptedData> element. encryptedDataType: System.Security.Cryptography.Xml.EncryptedData The EncryptedData object to replace the inputElement parameter with. contentType: System.Boolean true to replace only the contents of the element; false to replace the entire element. Summary: Replaces the specified element with the specified EncryptedData object. Remarks: The ReplaceElement method replaces the inputElement parameter with the value specified by the encryptedData parameter. Example: The following code example demonstrates how to encrypt an XML document using a symmetric key. This example does not include any key information in the encrypted XML document.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public int IndexOf( EncryptionProperty value ) Parameters valueType: System.Security.Cryptography.Xml.EncryptionProperty The EncryptionProperty object to locate in the EncryptionPropertyCollection object. Return Value Type: System.Int32 The index of value if found in the collection; otherwise, -1. Summary: Determines the index of a specific item in the EncryptionPropertyCollection object.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int Add( Object value ) Parameters valueType: System.Object A DataReference or KeyReference object to add to the ReferenceList collection. Return Value Type: System.Int32 The position at which the new element was inserted. Implements IList.Add(Object) Summary: Adds a DataReference or KeyReference object to the ReferenceList collection.",1,0,0,0,1,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string SignatureLength { get; set; } Property Value Type: System.String The length of the signature for the current SignedInfo object. Summary: Gets or sets the length of the signature for the current SignedInfo object.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public TransformChain() Summary: Initializes a new instance of the TransformChain class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Transform this[ int index ] { get; } Parameters indexType: System.Int32 The index into the TransformChain object that specifies which transform to return. Property Value Type: System.Security.Cryptography.Xml.Transform The transform at the specified index in the TransformChain object. Summary: Gets the transform at the specified index in the TransformChain object.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public struct X509IssuerSerial Summary: Represents the <X509IssuerSerial> element of an XML digital signature. Remarks: The X509IssuerSerial structure represents the <X509IssuerSerial> element of an XML digital signature defined by the XML digital signature specification. The <X509IssuerSerial> element is the subelement of the <X509Data> element that contains an X.509v3 certificate issuer's distinguished name and serial number pair. The distinguished name and serial number pair help identify a specific X.509v3 certificate. The issuer of an X.509 certificate is the name of the certification authority that issued the certificate. Certification authorities assign each certificate they issue a unique serial number for identification purposes. Use the X509IssuerSerial structure to specify a certificate issuer's distinguished name and serial number pair when using the KeyInfoX509Data class. You can add an X509IssuerSerial structure to the KeyInfoX509Data class using the IssuerSerials property. Alternatively, you can add string values that represent the X.509 certificate issuer's distinguished name and serial number pair using the AddIssuerSerial method. For more information about the <X509IssuerSerial> element, see the World Wide Web Consortium (W3C) specification at www.w3.org/TR/xmldsig-core/. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: The following code example demonstrates how to sign and verify an XML document using an X.509 certificate from a certificate store. This example saves key information to the signed document using the X509IssuerSerial object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class XmlDsigC14NTransform : Transform Summary: Represents the C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), without comments. Remarks: The XmlDsigC14NTransform class represents the C14N XML canonicalization transform that describes the canonical form of an XML document. This transform allows a signer to create a digest (used to create a digital signature) using the canonical form of an XML document. A recipient can then verify the XML digital signature using the same canonical form of the XML document with the same transform. Use the XmlDsigC14NTransform class when you need to sign an XML document that does not contain comments. In most cases, a new instance of a canonicalization transform class is not required. To specify a canonicalization transform, pass the Uniform Resource Identifier (URI) that describes the transform to the CanonicalizationMethod property, which is accessible from the SignedInfo property. To acquire a reference to the canonicalization transform, use the CanonicalizationMethodObject property, which is accessible from the SignedInfo property. The URI that describes the XmlDsigC14NTransform class is defined by the XmlDsigC14NTransformUrl field and the XmlDsigCanonicalizationUrl field. You would only need to create a new instance of a canonicalization transform class for manually hashing an XML document or for using your own canonicalization algorithm. For more information about the C14N transform, see Sections 6.5 and 6.6.1 of the XMLDSIG specification, which is available from the World Wide Web Consortium (W3C) at www.w3.org/TR/xmldsig-core/. The canonicalization algorithm is defined in the W3C Canonical XML specification, which is available at www.w3.org/TR/xml-c14n. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: This section contains two code examples. The first example demonstrates how to sign non-XML data using a detached signature. Example \#1 creates a signature of www.microsoft.com in an XML file and then verifies the file. The second example demonstrates how to call members of the XmlDsigC14NTransform class. Example \#1  Example \#2   using System; using System.IO; using System.Xml; using System.Security.Cryptography; using System.Security.Cryptography.Xml; using System.Security.Cryptography.X509Certificates; class Class1 { private static string Certificate = #..\\\\..\\\\my509.cer#; [STAThread] static void Main(string[] args) { // Encrypt an XML message XmlDocument productsXml = LoadProducts(); ShowTransformProperties(productsXml); SignDocument(ref productsXml); ShowTransformProperties(productsXml); // Use XmlDsigC14NTransform to resolve a Uri. Uri baseUri = new Uri(#http://www.contoso.com#); string relativeUri = #xml#; Uri absoluteUri = ResolveUris(baseUri, relativeUri); Console.WriteLine(#This sample completed successfully; # + #press Enter to exit.#); Console.ReadLine(); } // Encrypt the text in the specified XmlDocument. private static void ShowTransformProperties(XmlDocument xmlDoc) { XmlDsigC14NTransform xmlTransform = new XmlDsigC14NTransform(true); // Ensure the transform is using the appropriate algorithm. xmlTransform.Algorithm = SignedXml.XmlDsigExcC14NTransformUrl; // Retrieve the XML representation of the current transform. XmlElement xmlInTransform = xmlTransform.GetXml(); Console.WriteLine(#\Xml representation of the current transform: #); Console.WriteLine(xmlInTransform.OuterXml); // Retrieve the valid input types for the current transform. Type[] validInTypes = xmlTransform.InputTypes; // Verify the xmlTransform can accept the XMLDocument as an // input type. for (int i=0; i<validInTypes.Length; i++) { if (validInTypes[i] == xmlDoc.GetType()) { // Load the document into the transfrom. xmlTransform.LoadInput(xmlDoc); XmlDsigC14NTransform secondTransform = new XmlDsigC14NTransform(); string classDescription = secondTransform.ToString(); // This call does not perform as expected. // This transform does not contain inner XML elements secondTransform.LoadInnerXml(xmlDoc.SelectNodes(#//.#)); break; } } Type[] validOutTypes = xmlTransform.OutputTypes; for (int i=0; i<validOutTypes.Length;i++) { if (validOutTypes[i] == typeof(System.IO.Stream)) { try { Type streamType = typeof(System.IO.Stream); MemoryStream outputStream = (MemoryStream) xmlTransform.GetOutput(streamType); // Read the CryptoStream into a stream reader. StreamReader streamReader = new StreamReader(outputStream); // Read the stream into a string. string outputMessage = streamReader.ReadToEnd(); // Close the streams. outputStream.Close(); streamReader.Close(); // Display to the console the Xml before and after // encryption. Console.WriteLine(#Encoding the following xml: # + xmlDoc.OuterXml); Console.WriteLine(#Message encoded: # + outputMessage); } catch (Exception ex) { Console.WriteLine(#Unexpected exception caught: # + ex.ToString()); } break; } else { object outputObject = xmlTransform.GetOutput(); } } } // Create an XML document describing various products. private static XmlDocument LoadProducts() { XmlDocument xmlDoc = new XmlDocument(); string contosoProducts = #<PRODUCTS>#; contosoProducts += #<PRODUCT><ID>123</ID>#; contosoProducts += #<DESCRIPTION>Router</DESCRIPTION></PRODUCT>#; contosoProducts += #<PRODUCT><ID>456</ID>#; contosoProducts += #<DESCRIPTION>Keyboard</DESCRIPTION></PRODUCT>#; // Include a comment to test the comments feature of the transform. contosoProducts += #<!--Comments are included in the transform-->#; // Include the CDATA tag to test the transform results. contosoProducts += #<PARTNER_URL><![CDATA['http:\\\\\\\\www.contoso.com#; contosoProducts += #\\\\partner.asp?h1=en&h2=cr']]></PARTNER_URL>#; contosoProducts += #</PRODUCTS>#; xmlDoc.LoadXml(contosoProducts); return xmlDoc; } // Create a signature and add it to the specified document. private static void SignDocument(ref XmlDocument xmlDoc) { // Generate a signing key. RSACryptoServiceProvider Key = new RSACryptoServiceProvider(); // Create a SignedXml object. SignedXml signedXml = new SignedXml(xmlDoc); // Add the key to the SignedXml document. signedXml.SigningKey = Key; // Create a reference to be signed. Reference reference = new Reference(); reference.Uri = ##; // Add an enveloped transformation to the reference. reference.AddTransform(new XmlDsigC14NTransform()); // Add the reference to the SignedXml object. signedXml.AddReference(reference); try { // Create a new KeyInfo object. KeyInfo keyInfo = new KeyInfo(); // Load the X509 certificate. X509Certificate MSCert = X509Certificate.CreateFromCertFile(Certificate); // Load the certificate into a KeyInfoX509Data object // and add it to the KeyInfo object. keyInfo.AddClause(new KeyInfoX509Data(MSCert)); // Add the KeyInfo object to the SignedXml object. signedXml.KeyInfo = keyInfo; } catch (FileNotFoundException) { Console.WriteLine(#Unable to locate the following file: # + Certificate); } catch (CryptographicException ex) { Console.WriteLine(#Unexpected exception caught whild creating # + #the certificate:# + ex.ToString()); } // Compute the signature. signedXml.ComputeSignature(); // Add the signature branch to the original tree so it is enveloped. xmlDoc.DocumentElement.AppendChild(signedXml.GetXml()); } // Resolve the specified base and relative Uri's . private static Uri ResolveUris(Uri baseUri, string relativeUri) { XmlUrlResolver xmlResolver = new XmlUrlResolver(); xmlResolver.Credentials = System.Net.CredentialCache.DefaultCredentials; XmlDsigC14NTransform xmlTransform = new XmlDsigC14NTransform(); xmlTransform.Resolver = xmlResolver; Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri); if (absoluteUri != null) { Console.WriteLine( #\Resolved the base Uri and relative Uri to the following:#); Console.WriteLine(absoluteUri.ToString()); } else { Console.WriteLine( #Unable to resolve the base Uri and relative Uri#); } return absoluteUri; } } // // This sample produces the following output: // // Xml representation of the current transform: // <Transform Algorithm=#http://www.w3.org/TR/2001/REC-xml-c14n-20010315# xmln // s=#http://www.w3.org/2000/09/xmldsig\## /> // Encoding the following xml: <PRODUCTS><PRODUCT><ID>123</ID><DESCRIPTION>Rou // ter</DESCRIPTION></PRODUCT><PRODUCT><ID>456</ID><DESCRIPTION>Keyboard</DESC // RIPTION></PRODUCT><!--Comments are included in the transform--><PARTNER_URL // ><![CDATA['http:\\\\www.contoso.com\\partner.asp?h1=en&h2=cr']]></PARTNER_URL> // </PRODUCTS>Message encoded: <PRODUCTS><PRODUCT><ID>123</ID><DESCRIPTION>Rou // ter</DESCRIPTION></PRODUCT><PRODUCT><ID>456</ID><DESCRIPTION>Keyboard</DESC // RIPTION></PRODUCT><!--Comments are included in the transform--><PARTNER_URL // >'http:\\\\www.contoso.com\\partner.asp?h1=en&amp;h2=cr'</PARTNER_URL></PRODUC // TS> // Xml representation of the current transform: // <Transform Algorithm=#http://www.w3.org/TR/2001/REC-xml-c14n-20010315# xmln // s=#http://www.w3.org/2000/09/xmldsig\## /> // Encoding the following xml: <PRODUCTS><PRODUCT><ID>123</ID><DESCRIPTION>Rou // ter</DESCRIPTION></PRODUCT><PRODUCT><ID>456</ID><DESCRIPTION>Keyboard</DESC // RIPTION></PRODUCT><!--Comments are included in the transform--><PARTNER_URL // ><![CDATA['http:\\\\www.contoso.com\\partner.asp?h1=en&h2=cr']]></PARTNER_URL> // <Signature xmlns=#http://www.w3.org/2000/09/xmldsig\##><SignedInfo><Canonica // lizationMethod Algorithm=#http://www.w3.org/TR/2001/REC-xml-c14n-20010315# // /><SignatureMethod Algorithm=#http://www.w3.org/2000/09/xmldsig\#rsa-sha1# / // ><Reference URI=##><Transforms><Transform Algorithm=#http://www.w3.org/TR/2 // 001/REC-xml-c14n-20010315# /></Transforms><DigestMethod Algorithm=#http://w // ww.w3.org/2000/09/xmldsig\#sha1# /><DigestValue>BFN2s0/NA2NGgb/R0mvfnNM0Ito= // </DigestValue></Reference></SignedInfo><SignatureValue>vSfZUG5xHuNxzOSEbQjN // dtEt1D+O7I1LTJ13RrwLaJSfQPrdT/s8IeaA+idw2f2WGuGrdqMJUddpE4GxfK61HmPQ6S7lBG+ // +ND+YaUYf2AtTRs3SnToXQQrARa/pHVjsKxYHR/9tjy6maHBwxjgjFQABvYZu0gZHYRuXvvfxv0 // 8=</SignatureValue><KeyInfo><X509Data xmlns=#http://www.w3.org/2000/09/xmld // sig\##><X509Certificate>MIICCzCCAXSgAwIBAgIQ5eVQY8pRZ5xBF2WLkYPjijANBgkqhkiG // 9w0BAQQFADAbMRkwFwYDVQQDExBHcmVnc0NlcnRpZmljYXRlMB4XDTAzMDkxNzIzMzU0N1oXDTM // 5MTIzMTIzNTk1OVowGzEZMBcGA1UEAxMQR3JlZ3NDZXJ0aWZpY2F0ZTCBnzANBgkqhkiG9w0BAQ // EFAAOBjQAwgYkCgYEAmFJ4v7rS3BYTXgVW9PgBFfTYAcB/m9mOFCmUrrChcBpoEtu/tSESlNfEH // pECIdqg9vUrCNSkY08HRn3ueNeBSnSpssWd8/XoOboWLh1nd+79Y5uZd1WOJI4s0XM0MegZgCoJ // cEEhpxCd/HOPIQvEsbpN/DuFiovZLo+Ek3hHoxMCAwEAAaNQME4wTAYDVR0BBEUwQ4AQaCb19dl // yf/zSxPVYQZY9AKEdMBsxGTAXBgNAMTEEdyZWdzQ2VydGlmaWNhdGWCEOXlUGPKUWecQRdli5 // GD44owDQYJKoZIhvcNAQEEBQADgYEAZuZaFDGDJogh7FuT0hfaMAVlRONv6wWJVV++eUo38Xu // RfJ5nNJ0UnhiV2sEtLobYBPEIrNhuk8skdU0AHgx4ILiA4rR96ifWwxtrFQF+h+DL2ZB7xhwcOJ // +Pa7IC4wIaEp/oBmmX+JHSzfQt6/If4ohwikfxfljKMyIcMlwl4=</X509Certificate></X50 // 9Data></KeyInfo></Signature></PRODUCTS> // // Message encoded: <PRODUCTS><PRODUCT><ID>123</ID><DESCRIPTION>Router</DESCRI // PTION></PRODUCT><PRODUCT><ID>456</ID><DESCRIPTION>Keyboard</DESCRIPTION></P // RODUCT><!--Comments are included in the transform--><PARTNER_URL>'http:\\\\ww // w.contoso.com\\partner.asp?h1=en&amp;h2=cr'</PARTNER_URL><Signature><SignedI // nfo><CanonicalizationMethod Algorithm=#http://www.w3.org/TR/2001/REC-xml-c1 // 4n-20010315#></CanonicalizationMethod><SignatureMethod Algorithm=#http://ww // w.w3.org/2000/09/xmldsig\#rsa-sha1#></SignatureMethod><Reference URI=##><Tra // nsforms><Transform Algorithm=#http://www.w3.org/TR/2001/REC-xml-c14n-200103 // 15#></Transform></Transforms><DigestMethod Algorithm=#http://www.w3.org/200 // 0/09/xmldsig\#sha1#></DigestMethod><DigestValue>BFN2s0/NA2NGgb/R0mvfnNM0Ito= // </DigestValue></Reference></SignedInfo><SignatureValue>vSfZUG5xHuNxzOSEbQjN // dtEt1D+O7I1LTJ13RrwLaJSfQPrdT/s8IeaA+idw2f2WGuGrdqMJUddpE4GxfK61HmPQ6S7lBG+ // +ND+YaUYf2AtTRs3SnToXQQrARa/pHVjsKxYHR/9tjy6maHBwxjgjFQABvYZu0gZHYRuXvvfxv0 // 8=</SignatureValue><KeyInfo><X509Data xmlns=#http://www.w3.org/2000/09/xmld // sig\##><X509Certificate>MIICCzCCAXSgAwIBAgIQ5eVQY8pRZ5xBF2WLkYPjijANBgkqhkiG // 9w0BAQQFADAbMRkwFwYDVQQDExBHcmVnc0NlcnRpZmljYXRlMB4XDTAzMDkxNzIzMzU0N1oXDTM // 5MTIzMTIzNTk1OVowGzEZMBcGA1UEAxMQR3JlZ3NDZXJ0aWZpY2F0ZTCBnzANBgkqhkiG9w0BAQ // EFAAOBjQAwgYkCgYEAmFJ4v7rS3BYTXgVW9PgBFfTYAcB/m9mOFCmUrrChcBpoEtu/tSESlNfEH // pECIdqg9vUrCNSkY08HRn3ueNeBSnSpssWd8/XoOboWLh1nd+79Y5uZd1WOJI4s0XM0MegZgCoJ // cEEhpxCd/HOPIQvEsbpN/DuFiovZLo+Ek3hHoxMCAwEAAaNQME4wTAYDVR0BBEUwQ4AQaCb19dl // yf/zSxPVYQZY9AKEdMBsxGTAXBgNAMTEEdyZWdzQ2VydGlmaWNhdGWCEOXlUGPKUWecQRdli5 // GD44owDQYJKoZIhvcNAQEEBQADgYEAZuZaFDGDJogh7FuT0hfaMAVlRONv6wWJVV++eUo38Xu // RfJ5nNJ0UnhiV2sEtLobYBPEIrNhuk8skdU0AHgx4ILiA4rR96ifWwxtrFQF+h+DL2ZB7xhwcOJ // +Pa7IC4wIaEp/oBmmX+JHSzfQt6/If4ohwikfxfljKMyIcMlwl4=</X509Certificate></X50 // 9Data></KeyInfo></Signature></PRODUCTS> // // Resolved the base Uri and relative Uri to the following: // http://www.contoso.com/xml // This sample completed successfully; press Enter to exit. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,1
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class XmlDsigC14NWithCommentsTransform : XmlDsigC14NTransform Summary: Represents the C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), with comments. Remarks: The XmlDsigC14NWithCommentsTransform class represents the C14N XML canonicalization transform that describes the canonical form of an XML document. This transform allows a signer to create a digest using the canonical form of an XML document. A recipient can then verify the digital signature using the same canonical form of the XML document with the same transform. Use the XmlDsigC14NWithCommentsTransform class when you need to sign an XML document that contains comments. Note that you cannot directly create a new instance of a canonicalization transform class. To specify a canonicalization transform, pass the Uniform Resource Identifier (URI) that describes the transform to the CanonicalizationMethod property, which is accessible from the SignedInfo property. To acquire a reference to the canonicalization transform, use the CanonicalizationMethodObject property, which is accessible from the SignedInfo property. The URI that describes the XmlDsigExcC14NWithCommentsTransform class is defined by the XmlDsigExcC14NWithCommentsTransformUrl field. The URI that describes the XmlDsigC14NWithCommentsTransform class is defined by the XmlDsigC14NWithCommentsTransformUrl field and the XmlDsigCanonicalizationWithCommentsUrl field. For more information about the C14N with comments transform, see Sections 6.5 and 6.6.1 of the XMLDSIG specification, which is available from the World Wide Web Consortium (W3C) at www.w3.org/TR/xmldsig-core/. The canonicalization algorithm is defined in the W3C Canonical XML specification, which is available at www.w3.org/TR/xml-c14n. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: This section contains two code examples. The first example demonstrates how to sign an XML file using a detached signature. This example creates a signature of www.microsoft.com in an XML file and then verifies the file. The second example demonstrates how to sign an XML file using an envelope signature. This example creates a signature of an XML file and then saves the signature in new XML file. Example \#1  Example \#2 ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class XmlDsigEnvelopedSignatureTransform : Transform Summary: Represents the enveloped signature transform for an XML digital signature as defined by the W3C. Remarks: The XmlDsigEnvelopedSignatureTransform class removes the <Signature> element from an XML document before the digest is computed. With this transform, you can sign and verify all elements of an XML document except the XML digital signature elements. Although you can create and insert a signature into an XML document, verifying the modified document using the embedded signature will fail because the document now has additional elements. This transform removes the <Signature> element and allows you to verify the document using its original form. Use the XmlDsigEnvelopedSignatureTransform class whenever you create an enveloped signature. For more information about the enveloped signature transform, see Section 6.6.4 of the XMLDSIG specification, which is available from the W3C at www.w3.org/TR/xmldsig-core/. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: This section contains two code examples. The first example demonstrates how to sign an XML file using an envelope signature. The second example demonstrates how to use members of the XmlDsigEnvelopedSignatureTransform class. Example \#1  Example \#2 ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,1,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the XmlDsigExcC14NTransform class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DataProtectionPermissionFlags Flags { get; set; } Property Value Type: System.Security.Permissions.DataProtectionPermissionFlags A bitwise combination of the DataProtectionPermissionFlags values. The default is NoFlags. Summary: Gets or sets the data protection permissions. Example: The following code example shows the use of the Flags property. This code example is part of a larger example provided for the DataProtectionPermission class.",1,0,0,0,0,0,0,0,1,0,0,1
"No protection abilities.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static class ServiceHostingEnvironment Summary: Provides information about the current hosting environment in which services are running. Remarks: This class exposes AppDomain-wide settings not specifically associated with an individual service. This class can only be applied at the application or machine configuration level. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override void GenerateCode( AssemblyBuilder assemblyBuilder ) Parameters assemblyBuilderType: System.Web.Compilation.AssemblyBuilder The assembly builder that references the source code generated by the build provider. Summary: Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class Endpoint Summary: Represents an endpoint declared in XAML. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class CorrelationInitializer Summary: An abstract base class for correlation initializers that are used to tell the runtime what protocol is being used for the correlation. Remarks: The runtime uses the CorrelationHandle for correlation if it is present, otherwise the CorrelatesWith property of the messaging activity will be used. If both are absent, the ambient handle provided by CorrelationScope or the workflow service is used. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DurableInstancingOptions Summary: Used mainly to associate a concrete implementation of the InstanceStore such as SqlWorkflowInstanceStore with a workflow service host. This class is also used to add instance owner metadata. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public InArgument<CorrelationHandle> CorrelatesWith { get; set; } Property Value Type: System.Activities.InArgument(Of CorrelationHandle) The correlation handle. Summary: Gets or sets a correlation handle that is used to route the message to the appropriate workflow instance.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class ReceiveContent Summary: An abstract base class for classes that represent the data received by a workflow service. Example: The following example shows how to use the ReceiveContent class to specify the content for a Receive activity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public SerializerOption SerializerOption { get; set; } Property Value Type: System.ServiceModel.Activities.SerializerOption The serializer to use for this operation. Summary: Gets or sets a value that specifies the serializer to use when sending a message. Remarks: This property is set to one of the SerializerOption enumeration values. The default serializer is DataContractSerializer.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public Receive Request { get; set; } Property Value Type: System.ServiceModel.Activities.Receive A receive activity. Summary: Gets or sets a reference to the Receive activity paired with this SendReply activity. Remarks: This property must not be Nothing. Receive and SendReply activities are used together on the service side to model a request/response messaging pattern. This property specifies which Receive activity is paired. Example: The following example shows how to use this constructor.",0,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public enum SerializerOption Summary: A class that represents the types of serializers available.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool AllowBufferedReceive { get; set; } Property Value Type: System.Boolean true if the workflow service has buffered receive processing enabled for incoming messages; otherwise, false. Summary: Gets or sets a value that indicates whether the workflow service has buffered receive processing enabled for incoming messages. Remarks: The buffered receive feature enables a workflow service to process out-of-order messages without relying on complicated poison message handling.",0,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#runnableInstancesDetectionPeriod#, IsRequired = false, DefaultValue = #00:00:05.0#)] [PositiveTimeSpanValidatorAttribute] public TimeSpan RunnableInstancesDetectionPeriod { get; set; } Property Value Type: System.TimeSpan Returns the time interval. Summary: Gets or sets the RunnableInstancesDetectionPeriod property. Specifies the time period after which the SQL Workflow Instance Store runs a detection task to detect any runnable or activatable workflow instances in the persistence database after the previous detection cycle.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class WorkflowControlEndpointCollectionElement : StandardEndpointCollectionElement<WorkflowControlEndpoint, WorkflowControlEndpointElement> Summary: Represents a collection of WorkflowControlEndpointElement objects in a workflow control configuration element. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void Validate( ServiceDescription serviceDescription, ServiceHostBase serviceHostBase ) Parameters serviceDescriptionType: System.ServiceModel.Description.ServiceDescription The service description. serviceHostBaseType: System.ServiceModel.ServiceHostBase The service host. Implements IServiceBehavior.Validate(ServiceDescription, ServiceHostBase) Summary: Implements the IServiceBehavior.Validate method.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class EtwTrackingBehavior : IServiceBehavior Summary: A service behavior that allows a service to utilize ETW tracking using an EtwTrackingParticipant. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public InstanceCompletionAction InstanceCompletionAction { get; set; } Property Value Type: System.Activities.DurableInstancing.InstanceCompletionAction true if the instance state information is kept in the persistence database; otherwise false. Summary: Gets or sets the InstanceCompletionAction property. This property specifies whether the instance state information is kept in the persistence database after the instance is completed. Remarks: Keeping instances after completion causes the persistence database to grow rapidly and this affects the performance of the database. You should configure a database purge policy to delete these records periodically to ensure that the performance of the database is at the level that satisfy your performance requirements.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public void Validate( ContractDescription contractDescription, ServiceEndpoint endpoint ) Parameters contractDescriptionType: System.ServiceModel.Description.ContractDescription The contract description. endpointType: System.ServiceModel.Description.ServiceEndpoint The endpoint. Implements IContractBehavior.Validate(ContractDescription, ServiceEndpoint) Summary: Validates that the contract and endpoint are compatible with the behavior.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class WorkflowIdleBehavior : IServiceBehavior Summary: A service behavior that controls when idle workflow instances are unloaded and persisted. Remarks: Important When TimeToUnload is set to a value greater than the value of TimeToPersist and the workflow then goes idle (because of a Delay activity) if the workflow instance has not changed it will be removed from memory by calling Abort, rather than going through the normal unloading process.. This is a runtime optimization and no data is lost, but a developer looking at trace log may see an Abort trace when expecting an Unload trace. For an example of how to use this behavior see Workflow Service Host Extensibility ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static Binding NamedPipeControlEndpointBinding { get; } Property Value Type: System.ServiceModel.Channels.Binding The binding for the workflow instance control endpoint. Summary: Gets the binding for the workflow instance control endpoint when the net.pipe protocol is used. Remarks: The binding is automatically created based on the protocols configured for the service host's base address. Messages sent to the workflow instance control endpoint do not contain any personally identifiable information and therefore it need not be encrypted. Messages sent to the workflow control endpoint need to contain the user identity to use for authorization. When the net.pipe protocol is enabled, the NetNamedPipeBinding is used with the following settings. Transaction flow is enabled. Security mode is set to Transport. Transport security level is set to Sign. Windows client credentials are used.",1,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class ReceiveMessageRecord : CustomTrackingRecord Summary: Contains the tracking record sent to a tracking participant by the run-time tracking infrastructure when a message is received by a workflow service instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected override TrackingRecord Clone() Return Value Type: System.Activities.Tracking.TrackingRecord A copy of ReceiveMessageRecord. Summary: Creates a copy of the ReceiveMessageRecord.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ActivityScheduledQueryElement : TrackingQueryElement Summary: A configuration element that represents a ActivityScheduledQuery. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#states#)] public StateElementCollection States { get; } Property Value Type: System.ServiceModel.Activities.Tracking.Configuration.StateElementCollection The collection of states. Summary: Gets a StateElementCollection that contains the states to filter ActivityStateRecord on.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(ActivityStateQueryElement), CollectionType = ConfigurationElementCollectionType.BasicMap, AddItemName = #activityStateQuery#)] public class ActivityStateQueryElementCollection : TrackingConfigurationCollection<ActivityStateQueryElement> Summary: A collection of TrackingConfigurationElement elements that contains ActivityStateQueryElement elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(ProfileElement), AddItemName = #trackingProfile#, RemoveItemName = #remove#, ClearItemsName = #clear#)] public sealed class ProfileElementCollection : TrackingConfigurationCollection<ProfileElement> Summary: A configuration element that contains a collection of ProfileElement elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(ProfileWorkflowElement), CollectionType = ConfigurationElementCollectionType.BasicMap, AddItemName = #workflow#)] public class ProfileWorkflowElementCollection : TrackingConfigurationCollection<ProfileWorkflowElement> Summary: A collection of TrackingConfigurationElement elements that contains a collection of ProfileWorkflowElement elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class StateElement : TrackingConfigurationElement Summary: A configuration element that specifies workflow instance state or activity instance state the user subscribes tracking information for. Remarks: This element is placed within a StateElementCollection within a ActivityQueryElement to specify the activity states the query should filter on. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(StateElement), CollectionType = ConfigurationElementCollectionType.BasicMap, AddItemName = #state#)] public sealed class StateElementCollection : TrackingConfigurationCollection<StateElement> Summary: A configuration element that contains a collection of StateElement elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public VariableElementCollection() Summary: Initializes a new instance of the VariableElementCollection class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class WorkflowInstanceQueryElement : TrackingQueryElement Summary: A configuration element that represents a WorkflowInstanceQuery. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the SpnEndpointIdentityExtension class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public bool ShouldSerializeReaderQuotas() Return Value Type: System.Boolean true if the ReaderQuotas property value should be serialized; otherwise, false. Summary: Returns a value that indicates whether the ReaderQuotas property has changed from its default value and should be serialized.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ByteStreamMessageEncodingElement : BindingElementExtensionElement Summary: Enables construction of a configuration element that defines the settings for a byte stream message encoding element. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ServiceBehaviorAttribute(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)] public class AnnouncementService Summary: A self-hosted implementation of the announcement service. Remarks: This class listens for incoming messages on a standard announcement endpoint (AnnouncementEndpoint) and provides event notification when Hello or Bye announcement messages arrive. You can provide a custom announcement service implementation by deriving from this class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DiscoveryClient : ICommunicationObject, IDisposable Summary: Allows you to discover available services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void CancelAsync( Object userState ) Parameters userStateType: System.Object A user specified state object that is passed to the FindAsync method or one of the ResolveAsync methods. It identifies the pending asynchronous operation to cancel. Summary: Cancels a pending asynchronous operation. Remarks: An ArgumentNullException is thrown if userState is Nothing. If multiple FindAsync or ResolveAsync operations are called with the same userState value, and CancelAsync(Object) is called with that userState value, an InvalidOperationException is thrown,",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<AnnouncementEventArgs> ProxyAvailable Summary: Occurs when a multicast suppression message is received from a discovery proxy in response to the find or resolve operation.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override BindingElement Clone() Return Value Type: System.ServiceModel.Channels.BindingElement A copy of the binding element. Summary: Creates a copy of the binding element.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class DiscoveryService Summary: An abstract base class used to implement a discovery service. Remarks: When a ServiceDiscoveryBehavior is added to a service, a default DiscoveryService implementation is used to handle Find and Resolve requests. Extend this class to implement a custom discovery service that has behavior different from the default implementation, such as to reply to Find requests using a custom matching algorithm ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public Collection<XmlQualifiedName> ContractTypeNames { get; } Property Value Type: System.Collections.ObjectModel.Collection(Of XmlQualifiedName) A collection of contract type names. Summary: Gets a collection of contract type names implemented by the service described by the EndpointDiscoveryMetadata.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public TimeSpan Duration { get; set; } Property Value Type: System.TimeSpan The time-out period of the find operation. Summary: Gets or sets a Timespan that specifies the find operation time-out period.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ResolveResponse Summary: Represents the response from a resolve request. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Creates a new instance of the UdpAnnouncementEndpoint class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class UdpDiscoveryEndpoint : DiscoveryEndpoint Summary: A standard endpoint that is pre-configured for discovery operations over a UDP multicast binding. This endpoint inherits from DiscoveryEndpoint and similarly has a fixed contract and supports two WS-Discovery protocol versions. In addition, it has a fixed UDP binding and a default address as specified in the WS-Discovery specifications (WS-Discovery April 2005 or WS-Discovery V1.1). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class AnnouncementEndpointElement : StandardEndpointElement Summary: Defines a configuration element for an announcement endpoint. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ContractTypeNameElement : ConfigurationElement Summary: Represents a workflow element that identifies by name the workflow service contract being searched for. Remarks: A contract type name is a property that refers to the set of criteria typically used when searching for a service. The set of criteria, or contract, is a collection of operations that specify what the endpoint communicates to the outside world. Each operation is a message exchange. For example, a request message and an associated reply message form a request/reply message exchange. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#name#, Options = ConfigurationPropertyOptions.None|ConfigurationPropertyOptions.IsRequired|ConfigurationPropertyOptions.IsKey)] [StringValidatorAttribute(MinLength = )] public string Name { get; set; } Property Value Type: System.String An alphanumeric name. Summary: Gets or sets the name of the contract type.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ServiceDiscoveryElement : BehaviorExtensionElement Summary: Represents a configuration element that controls the discoverability of a service. Remarks: When this element is applied to a service's behavior configuration, all of the exposed endpoints can then be discovered by the service. The following example shows how to mark a service as discoverable. You can use EndpointDiscoveryElement to control the discoverability of a particular endpoint. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#announcementEndpoints#)] public AnnouncementChannelEndpointElementCollection AnnouncementEndpoints { get; } Property Value Type: System.ServiceModel.Discovery.Configuration.AnnouncementChannelEndpointElementCollection A ChannelEndpointElementCollection that contains announcement endpoints. Summary: Gets a collection of announcement endpoints.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class UdpAnnouncementEndpointCollectionElement : StandardEndpointCollectionElement<UdpAnnouncementEndpoint, UdpAnnouncementEndpointElement> Summary: Represents a container for UdpAnnouncementEndpointElement configuration elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#discoveryMode#, DefaultValue = ServiceDiscoveryMode.Adhoc)] public ServiceDiscoveryMode DiscoveryMode { get; set; } Property Value Type: System.ServiceModel.Discovery.ServiceDiscoveryMode The discovery mode. Summary: Gets or sets the discovery mode that is used by the discovery endpoint. Remarks: Discovery can be performed in two modes, ad-hoc and managed. In ad-hoc discovery, discovery messages are sent out in a multicast manner to all available services. In managed discovery, messages are sent in a unicast manner to a discovery proxy. For more information aboutthe discovery modes, see WCF Discovery Overview.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class DiscoveryMessageSequence11 : IXmlSerializable Summary: Represents the AppSequence header defined in version 1.1 of the WS-Discovery Protocol. Remarks: This class allows a receiver of discovery messages to process those messages in order even though they were received out of order. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class FindCriteria11 : IXmlSerializable Summary: Represents the criteria to use when searching for services using version 1.1 of the WS-Discovery protocol. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ResolveCriteria11 : IXmlSerializable Summary: Represents the criteria to use when resolving a service using version 1.1 of the WS-Discovery protocol. Remarks: A resolve is performed when a service to which you already have an endpoint reference changes its endpoint address. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public DiscoveryMessageSequence ToDiscoveryMessageSequence() Return Value Type: System.ServiceModel.Discovery.DiscoveryMessageSequence A DiscoveryMessageSequence instance. Summary: Initializes a new instance of the DiscoveryMessageSequence class from the DiscoveryMessageSequenceApril2005 instance.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public void WriteXml( XmlWriter writer ) Parameters writerType: System.Xml.XmlWriter The XML writer to write to. Implements IXmlSerializable.WriteXml(XmlWriter) Summary: Writes the DiscoveryMessageSequenceApril2005 to XML.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public void WriteXml( XmlWriter writer ) Parameters writerType: System.Xml.XmlWriter The XML writer. Implements IXmlSerializable.WriteXml(XmlWriter) Summary: Writes the current FindCriteriaApril2005 instance to XML.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ResolveCriteriaCD1 : IXmlSerializable Summary: Represents the criteria to use when resolving a service using the Committee Draft 1 version of the WS-Discovery protocol. Remarks: A resolve is performed when a service to which you already have an endpoint reference changes its endpoint address. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the RoutingBehavior class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class RoutingExtension : IExtension<ServiceHostBase> Summary: Provides run-time access to the routing service to allow dynamic modification of the routing configuration. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class BackupEndpointElement : ConfigurationElement Summary: Represents a configuration element that defines a backup endpoint element. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#filter1#, DefaultValue = null, Options = ConfigurationPropertyOptions.None)] public string Filter1 { get; set; } Property Value Type: System.String The filter1 value of this element. Summary: Gets or sets the filter1 data of this configuration element. This value is only used when FilterType is set to And. Remarks: The content of Filter1 is only used during evaluation of the AND filter. For more information, seeFilterData.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(FilterTableEntryCollection), AddItemName = #filterTable#)] public class FilterTableCollection : ConfigurationElementCollection Summary: Represents the configuration element that contains a collection of FilterTableEntryCollection instances. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class FilterTableEntryElement : ConfigurationElement Summary: Represents a configuration element that defines a filter table entry element. This element contains the association between filters, endpoints and backup endpoints and is used to determine which filter is used to route the message. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Use the XPathMessageFilter to filter on an XPath expression.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class WebHttpBinding : Binding, IBindingRuntimePreferences Summary: A binding used to configure endpoints for Web services that are exposed through HTTP requests instead of SOAP messages. Remarks: The Web Programming Model allows developers to expose Web services through HTTP requests that use #plain old XML# (POX) style messaging instead of SOAP-based messaging. For clients to communicate with a service using HTTP requests, an endpoint of the service must be configured with the WebHttpBinding that has the WebHttpBehavior attached to it. The WCF Web Programming Model also requires that the individual service operations are annotated with the WebGetAttribute or WebInvokeAttribute attributes. This defines a mapping from a URI and HTTP method to the service operation, as well as the format of the messages used to call the operation and return the results. Support in for syndication and ASP.AJAX integration are both built on top of the WCF Web Programming Model. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public EnvelopeVersion EnvelopeVersion { get; } Property Value Type: System.ServiceModel.EnvelopeVersion The EnvelopeVersion with the None property that is used with endpoints configured with this binding to receive HTTP requests. Summary: Gets the envelope version that is used by endpoints that are configured by this binding to receive HTTP requests.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class JavascriptCallbackResponseMessageProperty Summary: Enables the use of a JavaScript callback in a service operation response using JSON Padding (JSONP). Remarks: JSONP is a mechanism used to enable cross-site, scripting support in Web browsers. Caution Using cross-site scripting is inherently unsecure and its use is not generally recommended. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class WebBodyFormatMessageProperty : IMessageProperty Summary: Stores and retrieves the message encoding format of incoming and outgoing messages for the composite Web message encoder. Remarks: This property allows, for example, the composite Web message formatter to know how the composite Web message encoder has encoded the message. WebBodyFormatMessageProperty implements IMessageProperty. Objects that implement this interface are added by value to Properties with the Name providing the access key. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class WebMessageEncodingBindingElement : MessageEncodingBindingElement, IWsdlExportExtension Summary: Enables plain-text XML, JavaScript Object Notation (JSON) message encodings and #raw# binary content to be read and written when used in a binding. Remarks: Encoding is the process of transforming a message into a sequence of bytes. Decoding is the reverse process. These processes require the specification of a character encoding. The WebMessageEncodingBindingElement works by delegating to a series of inner encoders to handle the plain-text XML and JSON encodings, and #raw# binary data. This delegation is done by a composite message encoder. This binding element and its composite encoder are used to control the encoding in scenarios that do not use SOAP messaging used by the WebHttpBinding. These scenarios include #Plain Old XML# (POX), Representational State Transfer (REST), Really Simple Syndication (RSS) and Atom syndication, and Asynchronous JavaScript and XML (AJAX). The composite message encoder does not support SOAP or WS-Addressing, and so MessageVersion always returns None. The binding element can be configured with a write character encoding at construction time using the WebMessageEncodingBindingElement(Encoding) constructor. The Encoding value specifies the behavior on write for the JSON and Textual XML cases. On read, any valid message encoding and text encoding is understood. This constructor sets default values on the maximum number of readers and writers that are allocated to pools and that are respectively available to process incoming and outgoing messages without allocating new readers or writers. The properties MaxReadPoolSize and MaxWritePoolSize can also be used to set the maximum number of readers and writers to be allocated respectively. By default 64 readers and 16 writers are allocated. Default complexity constraints are also set by this constructor on the XmlDictionaryReaderQuotas associated with this encoding by the ReaderQuotas property to protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The WebMessageEncodingBindingElement has a CreateMessageEncoderFactory method that creates a message encoder factory that produces JSON, XML or Raw message decoders and encoders as appropriate depending on the content type specified. The WebMessageEncodingBindingElement also provides the methods to build the factories and listeners for the channels through which the HTTP requests flow. The composite encoder and its associated classes and configuration components are usable in partial trust and this use does not require any special permissions. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: protected override void OnApplyConfiguration( Binding binding ) Parameters bindingType: System.ServiceModel.Channels.Binding The Binding that is initialized from the contents of this binding configuration element. Summary: Initializes the property values of a specified binding from the contents of this binding configuration element.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class WebHttpElement : BehaviorExtensionElement Summary: Enables the WebHttpBehavior for an endpoint through configuration. Remarks: The WebHttpElement is a BehaviorExtensionElement sub-type that can be used to include the WebHttpBehavior on an endpoint through configuration. The WebHttpBehavior behavior, when used in conjunction with the WebHttpBinding binding, enables the Web programming model for a service. Note that the WebServiceHost automatically adds this behavior to endpoints that use the WebHttpBinding. Example: This sample returns the type WebHttpElement. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public sealed class WebHttpSecurityElement : ConfigurationElement Summary: An XML element that configures the security for a service with endpoints that receive HTTP requests. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class WebScriptEndpointElement : StandardEndpointElement Summary: Represents a custom configuration element that defines a WebScriptEndpoint in a configuration file. Remarks: Web scripting enables working with the data entered onto a web page. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public WebHeaderCollection Headers { get; } Property Value Type: System.Net.WebHeaderCollection A WebHeaderCollection instance that contains the headers from the incoming Web response. Summary: Gets the headers from the incoming Web response.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string StatusDescription { get; } Property Value Type: System.String The status description of the incoming Web response. Summary: Gets the status description of the incoming Web response.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public void ApplyClientBehavior( ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime ) Parameters contractDescriptionType: System.ServiceModel.Description.ContractDescription The contract description. endpointType: System.ServiceModel.Description.ServiceEndpoint The service endpoint. clientRuntimeType: System.ServiceModel.Dispatcher.ClientRuntime The client runtime. Implements IContractBehavior.ApplyClientBehavior(ContractDescription, ServiceEndpoint, ClientRuntime) Summary: An implementation of the ApplyClientBehavior(ContractDescription, ServiceEndpoint, ClientRuntime) method.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string Location { get; set; } Property Value Type: System.String The location header from the outgoing Web response. Summary: Gets and sets the location header from the outgoing Web response.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string Method { get; set; } Property Value Type: System.String The protocol method associated with the operation. Summary: Gets and sets the protocol (for example HTTP) method the service operation responds to. Remarks: Method defaults to POST. Example: The following example shows how to set the Method property.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: void IOperationBehavior.ApplyDispatchBehavior( OperationDescription operationDescription, DispatchOperation dispatchOperation ) Parameters operationDescriptionType: System.ServiceModel.Description.OperationDescription The operation description. dispatchOperationType: System.ServiceModel.Dispatcher.DispatchOperation The operation to dispatch to. Implements IOperationBehavior.ApplyDispatchBehavior(OperationDescription, DispatchOperation) Summary: Implements the ApplyDispatchBehavior(OperationDescription, DispatchOperation) method. Remarks: This method does nothing because the WebInvokeAttribute attribute is a passive operation behavior.",0,0,0,0,0,0,0,0,0,0,0,1
"Requests are wrapped, responses are not wrapped.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IncomingWebRequestContext IncomingRequest { get; } Property Value Type: System.ServiceModel.Web.IncomingWebRequestContext An IncomingWebRequestContext instance. Summary: Gets the Web request context for the request being received. Example: The following code shows how to use the IncomingRequest property to access the headers in the incoming HTTP request.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class UriTemplateMatchException : SystemException Summary: Represents an error when matching a Uri to a UriTemplateTable. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the UriTemplateMatchException class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class ActionNotSupportedException : CommunicationException Summary: This exception is typically thrown on the client when the action related to the operation invoked does not match any action of operations in the server. Remarks: The (partial) match failure on the service creates a wsa:ActionNotSupported fault on the wire that is turned into a ActionNotSupportedException on the client. This exception derives from CommunicationException that represents a class of recoverable errors that may be thrown during communication between endpoints and that robust client and service applications are expected to handle. To prevent a more generic handler for CommunicationException from catching the more specific ActionNotSupportedException, catch this exception prior to handling CommunicationException. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public enum AuditLevel Summary: Specifies when to audit security events. Remarks: When creating a application that requires authentication and/or authorization of the callers, you can specify that events related to security be recorded for either success, failure, or both. The level of auditing is determined by this enumeration. The location of the audit log is specified by setting the AuditLogLocation property of the ServiceSecurityAuditBehavior class to one of the AuditLogLocation values. For more information about auditing, see Auditing Security Events. You can also specify audit behavior using the serviceSecurityAudit element binding. Example: The following example sets the MessageAUthenticationAuditLevel and ServiceAuthorizationAuditLevel properties to one of the AuditLevel values.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public enum AuditLogLocation Summary: Specifies the location where security-related event logs are written. Remarks: When creating a application that requires authentication and/or authorization of callers, you can specify that events related to security be recorded for either success, failure, or both. The location of the log is determined by this enumeration. The level of the audit log is specified by setting the MessageAuthenticationAuditLevel or the ServiceAuthorizationAuditLevel property of the ServiceSecurityAuditBehavior class to one of the AuditLevel values. You can also specify audit behavior using the serviceSecurityAudit element binding. Important If the AuditLogLocation property is set to Security and Audit Object Access is not set in the Local Security Policy, audit events will not be written to the Security log. No failure is returned, but audit entries will not be written to the Security log. In addition, the calling thread must have SeAuditPrivilege to be able to write to the Security log. Default Dependent on Operating System When setting the property to the Default value, the operating system determines which log will actually be written to. For more information, see Auditing Security Events. Example: The following example sets the AuditLogLocation property to one of the AuditLogLocation values.",1,0,1,1,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public class BasicHttpContextBinding : BasicHttpBinding Summary: Provides a context-enabled binding for the BasicHttpBinding binding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: protected TChannel Channel { get; } Property Value Type: TChannel A channel of a specified type. Summary: Gets the inner channel used to to send messages to variously configured service endpoints.",1,0,0,0,0,0,0,0,0,0,0,1
"Indicates that the communication object is transitioning to the Closed state.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface, Inherited = false, AllowMultiple = false)] public sealed class DataContractFormatAttribute : Attribute Summary: Instructs the infrastructure to use the DataContractSerializer. Remarks: This attribute is similar to the XmlSerializerFormatAttribute attribute. Both attributes can be applied to either a method or a class. A method can have either of the two attributes applied, but not both. Any operation that has neither applied will use the attribute applied to the containing class. If the containing class does not have either attribute applied, the DataContractSerializer is used. Applying the attribute also causes a DataContractSerializerOperationBehavior to be created at run time. The behavior allows customization at run time of the serializer behavior. Example: The following example applies the DataContractFormatAttribute and sets the Style property to Rpc. The RPC style is described in the Web Service Description Language specification (WSDL). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public DuplexChannelFactory( InstanceContext callbackInstance ) Parameters callbackInstanceType: System.ServiceModel.InstanceContext The InstanceContext that the client uses to listen for messages from the connected service Summary: Initializes a new instance of the DuplexChannelFactory(Of TChannel) class with specified instance context.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public DuplexChannelFactory( InstanceContext callbackInstance ) Parameters callbackInstanceType: System.ServiceModel.InstanceContext The InstanceContext that the client uses to listen for messages from the connected service Summary: Initializes a new instance of the DuplexChannelFactory(Of TChannel) class with specified instance context.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Returns a FaultException object.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class FaultReason Summary: Provides a text description of a SOAP fault. Remarks: The FaultReason class contains a set of System.ServiceModel.FaultReasonText objects, each of which contains a description of the fault in a specific language. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class FaultReasonText Summary: Represents the text of the reason of a SOAP fault. Remarks: Use the FaultReasonText class to specify the text of the SOAP fault reason. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public sealed class FederatedMessageSecurityOverHttp Summary: Configures the message-level security of the WSFederationHttpBinding binding. Remarks: This class contains properties that provide control over various aspects of the security configuration between the client and the service, including details related to the issuer from which the service expects the client to retrieve a federated credential. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Specifies client authentication using NTLM.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface ICommunicationObject Summary: Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts. Remarks: The ICommunicationObject interface defines: A set of open, close and abort methods for initiating state transitions: Open Close Abort Asynchronous versions of the open and close methods: BeginOpen EndOpen(IAsyncResult) BeginClose EndClose A set of events that provide notifications of state transitions: Opening Opened Closing Closed Faulted A common State property for inspecting the state of an object",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: TimeSpan ReceiveTimeout { get; } Property Value Type: System.TimeSpan The Timespan that specifies the interval of time to wait for the receive method to time out. Summary: Gets the interval of time after which the receive method, invoked by a communication object, times out. Remarks: All operations that are potentially lengthy must have a timeout. Methods that don't take explicit timeouts, must delegate to those that do with default timeouts or must not do any work that blocks. Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already consumed by earlier tries.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IExtensionCollection<T> : ICollection<IExtension<T>>, IEnumerable<IExtension<T>>, IEnumerable where T : Object, IExtensibleObject<T> Type Parameters T The type of the extension objects. Summary: A collection of the IExtension(Of T) objects that allow for retrieving the IExtension(Of T) by its type.",0,0,0,0,0,0,1,0,0,0,0,0
"Impersonation is required.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public interface IServiceChannel : IContextChannel, IChannel, ICommunicationObject, IExtensibleObject<IContextChannel> Summary: Defines the interface for a service channel. Remarks: This interface defines access to the URI at which the service listens for incoming requests on the channel.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public bool HasProtectionLevel { get; } Property Value Type: System.Boolean true if the member has a protection level; otherwise, false. Summary: When overridden in a derived class, gets a value that indicates whether the member has a protection level assigned.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the MessageHeaderException class. Remarks: If you want to pass an error message to the user, use the MessageHeaderException(String) constructor. If you want to pass an error message and a reference to the inner exception that is the cause of the exception to the user, use the MessageHeaderException(String, Exception) constructor. If you want to pass serialization information and streaming context, use the MessageHeaderException(SerializationInfo, StreamingContext) constructor.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Parameter|AttributeTargets.ReturnValue, Inherited = false)] public sealed class MessageParameterAttribute : Attribute Summary: Controls the name of the request and response parameter names. Cannot be used with Message or message contracts. Remarks: Use the MessageParameterAttribute to control the name of the parameter or the return value. This attribute has no effect if the parameters are marked by the MessageContractAttribute attribute. Note The value of the parameter names in the operation signature are part of the contract and are case sensitive. Use this attribute when you need to distinguish between the local parameter name and the metadata that describes the operation for client applications. For more information about controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see System.Runtime.Serialization.DataContractAttribute, Specifying Data Transfer in Service Contracts, and Data Contracts Overview. For more information about creating message contracts, see Using Message Contracts. Example: The following code example shows the use of MessageParameterAttribute to establish the name of the parameter and the return value in metadata.  The following example shows the generated service contract for the preceding service. Note that the name of the parameter is now Input. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public abstract class MsmqBindingBase : Binding, IBindingRuntimePreferences Summary: The base class for NetMsmqBinding and MsmqIntegrationBinding. Remarks: This abstract class contains properties common to NetMsmqBinding and MsmqIntegrationBinding. All of the fundamental concepts in queuing are displayed in the form of properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class MsmqException : ExternalException Summary: Encapsulates errors returned by Message Queuing (MSMQ). This exception is thrown by the Message Queuing transport and the Message Queuing integration channel. Remarks: This exception can be thrown when the Message Queuing channel interacts with a message queue, including opening a queue, querying a queue for information, sending messages, and receiving messages. The exception contains the Message Queuing error code. Typically, this exception is thrown when the framework cannot recover from the error automatically and requires some human intervention. For example, this exception will be thrown if Message Queuing is not installed and an attempt is made to open the Message Queuing transport listener. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public sealed class MsmqTransportSecurity Summary: The MsmqTransportSecurity class encapsulates the transport security settings for queued transports. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Disables both MSMQ transport security and SOAP security.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum NetNamedPipeSecurityMode Summary: Specifies whether transport-level security is used with named pipes. Remarks: Use this enumeration to specify whether transport-level security is used with named pipes when using the NetNamedPipeBinding. The default value is Transport.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class NetPeerTcpBinding : Binding, IBindingRuntimePreferences Summary: Provides a secure binding for peer-to-peer network applications. Remarks: The NetPeerTcpBinding binding provides support for the creation of peer networking applications that use a TCP-level peer-to-peer mesh infrastructure. Each PeerNode instance can host multiple peer channels defined with this binding type. Channel factories produced using a configured instance of this type can be used to generate peer channels. A peer channel factory can produce peer channels that are input-only (implements IInputChannel), output-only (implements IOutputChannel), and duplex (implements IDuplexChannel). This is one of the standard bindings provided by the Windows Communication Framework (WCF). It can be used in imperative code or specified in the corresponding XML configuration file for the application. The recommended procedure is to define the binding using configuration values and not to use a code-based approach, except in certain advanced scenarios where configuration values must be set as a service is initialized. Important NetPeerTcpBinding is not supported for WAS/IIS hosted services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the NetTcpBinding class. Remarks: The security behavior is configurable using the optional securityMode parameter in the constructor. The use of WS-ReliableMessaging is configurable using the optional reliableSessionEnabled parameter.",1,0,0,1,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method)] public sealed class OperationBehaviorAttribute : Attribute, IOperationBehavior Summary: Specifies the local execution behavior of a service method. Remarks: Use the OperationBehaviorAttribute attribute to indicate what operation-specific execution behavior the operation has when executed. (To specify execution behavior at the service level, use the ServiceBehaviorAttribute attribute.) Note You can also use OperationBehaviorAttribute to configure a callback contract operation in a duplex client application. When used on a callback operation, the ReleaseInstanceMode property must be None or an InvalidOperationException exception is thrown at runtime. The OperationBehaviorAttribute attribute is a programming model feature that enables common features that developers otherwise must implement themselves. The AutoDisposeParameters property controls whether parameter objects passed to an operation are disposed when the operation completes. The TransactionAutoComplete property specifies whether the transaction in which the method executes is automatically committed if no unhandled exceptions occur. The TransactionScopeRequired property specifies whether a method must execute within a transaction. The Impersonation property specifies whether the service operation can, must, or cannot impersonate the caller's identity. The ReleaseInstanceMode property specifies when service objects are recycled during the method invocation process. Example: The following code example shows an operation that executes within a mandatory distributed transaction. The TransactionScopeRequired property indicates that the method executes under the caller's transaction and the TransactionAutoComplete property indicates that if no unhandled exceptions occur, the transaction commits automatically. If an unhandled exception does occur, the transaction is aborted. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public sealed class OperationContext : IExtensibleObject<OperationContext> Summary: Provides access to the execution context of a service method. Remarks: Use the OperationContext from within a service operation to access the current operation execution environment. In particular, the operation context is used to access callback channels in duplex services, to store extra state data across portions of the operations, and to access incoming message headers and properties as well as add outgoing message headers and properties. For more information about using extensions to store state data, see Extensible Objects. The OperationContext has the following properties and methods. The Current property returns the OperationContext object representing the current execution context. The ServiceSecurityContext property returns the security environment under which the method executes. The EndpointDispatcher property gets the operation's System.ServiceModel.Dispatcher.EndpointDispatcher. The Extensions property returns an extension collection for the current OperationContext. The Host property returns the ServiceHostBase object that manages the service. The HasSupportingTokens property returns a value that indicates whether the method has supporting tokens, if so, the SupportingTokens property gets them. The IncomingMessageHeaders, IncomingMessageProperties, and IncomingMessageVersion properties get these items from the incoming message. The OperationCompleted event is fired when the operation has completed. The OutgoingMessageHeaders and OutgoingMessageProperties properties get these items for the outbound message. The RequestContext property returns the RequestContext implementation for the method. The InstanceContext property returns the InstanceContext associated with the operation. The SessionId property returns the session identifier for the current channel and object. The GetCallbackChannel(Of T) method returns a callback channel to the caller in the case of duplex communication. The SetTransactionComplete method commits the current transaction. Example: The following code example uses the Current property and GetCallbackChannel(Of T) method to obtain the channel back to the caller from within a method. All methods in this example are one-way methods, enabling the service and the client to communicate in both directions independently. In this case, the example client application expects only one return call before it exits, but an client, for example a Windows Forms client, can receive any number of calls from the service.  The following client implements the SampleDuplexHelloCallback to receive the callback message. The imported callback contract is not the same name as the one in the service, due to the use of the Name property in the preceding example. Note that the client makes no assumptions about whether or when it might receive a callback; the server callback is entirely independent of the client's outbound call. Note For an example that uses the OperationContext class in a client scenario, see OperationContextScope. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,0
"The message originated on the local computer.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler Offline Implements IOnlineStatus.Offline Summary: Signals when the peer node goes offline from the peer mesh. Remarks: An offline peer node has no neighbor nodes within the peer mesh to which it can connect.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Online Implements IOnlineStatus.Online Summary: Signals when a peer node comes online within the peer mesh. Remarks: An online peer node has at least one neighbor node within the peer mesh to which it is connected.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum QueueTransferProtocol Summary: Indicates the protocol to be used in transferring messages between queue managers. Remarks: Specifying Srmp or SrmpSecure when the UseActiveDirectory attribute is set to true will cause an exception because Message Queuing (MSMQ) does not provide for Active Directory addressing when using SRMP. UseActiveDirectory is an attribute on the netMsmqBinding Element and the msmqIntegrationBinding element. For more information about addressing queues, see Service Endpoints and Queue Addressing.",1,0,0,0,0,0,1,0,0,0,0,0
"This option drops the poison message. The message never gets delivered to the application. If the message's TTL had already expired at this point, then the message may appear in the sender's Dead Letter Queue. If not, the message does not appear anywhere. This option indicates that the user does not really care if the message is lost. Applicable platforms: , , and .",1,0,0,0,0,0,0,1,0,0,0,0
"This moves the poison message to a Poison Message Queue for later processing by a poison message handling application. Applicable platforms: only.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ReliableSession Summary: Provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings. Remarks: The properties contained in the ReliableSession class are the subset of those contained in the ReliableSessionBindingElement that are accessible from a predefined binding. This subset consists of the InactivityTimeout and Ordered properties. The ReliableSession class references the same objects as does the ReliableSessionBindingElement, so changing the value of one changes the value of the other too. This class gathers these two properties of reliable session binding element together for better discoverability. Example: The following example shows how to create a new reliable session, and access and change the property values of that session. The ReliableSession class allows you to write: ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public enum SecurityMode Summary: Determines the security settings for a binding. Remarks: Any ProtectionLevel settings of a transport are ignored if the SecurityMode is set to None. For more information about the ProtectionLevel property, see Understanding Protection Level. For more information about security and how this property affects general security features, see Securing Services and Programming WCF Security. For more information about the transport mode, see Transport Security. Note that if you choose TransportWithMessageCredential, then the value set in HttpClientCredentialType or TcpClientCredentialType is ignored. Example: The following example sets the Mode property of the WSHttpBinding. For more examples, see How To: Set the Security Mode.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public string Namespace { get; set; } Property Value Type: System.String The value of the targetNamespace attribute for the <wsdl:definitions> element that contains the <wsdl:service> element. Summary: Gets or sets the value of the target namespace for the service in Web Services Description Language (WSDL).",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected void LoadConfigurationSection( ServiceElement serviceSection ) Parameters serviceSectionType: System.ServiceModel.Configuration.ServiceElement The ServiceElement to be loaded from configuration. Summary: Loads the service element from the configuration file of the hosted service.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public void SetEndpointAddress( ServiceEndpoint endpoint, string relativeAddress ) Parameters endpointType: System.ServiceModel.Description.ServiceEndpoint The service endpoint. relativeAddressType: System.String The endpoint address. Summary: Sets the endpoint address of the specified endpoint to the specified address.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Type Type { get; } Property Value Type: System.Type The Type of the known type. Summary: The known type that can be included in an object graph.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class SpnEndpointIdentity : EndpointIdentity Summary: Represents a service principal name (SPN) for an identity when the binding uses Kerberos. Remarks: An SPN is the name by which a client uniquely identifies an instance of a service. If you install multiple instances of a service on computers throughout a forest, each instance must have its own SPN. A given service instance can have multiple SPNs if there are multiple names that clients might use for authentication. When a client wants to connect to a service, it locates an instance of the service, composes an SPN for that instance, and sets the identity to a SpnEndpointIdentity. A check will be made that the message is intended for that service. The three authentication modes used under Kerberos are: SSPINegotiate Kerberos KerberosOverTransport. Example: The following code shows one common way to create an instance of this class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public enum TransactionFlowOption Summary: An enumeration that is used with the TransactionFlowAttribute to specify the transaction flow policy for a service operation. Remarks: This enumeration is used to instantiate an instance of the TransactionFlowAttribute class, which is used to mark a service contract method to indicate its transaction flow policy. Example: The following code example demonstrates the use of this enumeration together with the TransactionFlowOption class at the operation level.",0,0,0,1,0,0,1,0,1,0,0,0
"Transaction must be flowed.",0,0,0,0,0,0,0,0,1,0,0,0
"The request and response messages are both streamed.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class UpnEndpointIdentity : EndpointIdentity Summary: Represents a user principal name (UPN) for an identity which is used when the binding utilizes the SSPINegotiate authentication mode. Remarks: A user account name (UPN) is the user name (sometimes referred to as the user logon name) and a domain name that identifies the domain in which the user account is located. This is one of the standard ways to log on to a Windows domain. The format is: someone@example.com (as for an e-mail address). A Down-Level Logon Name can also be used for creating a UpnEndpointIdentity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public ReliableSession ReliableSession { get; set; } Property Value Type: System.ServiceModel.ReliableSession The ReliableSession that provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings. Summary: Gets an object that provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings. Remarks: The reliable session is required for service configured with a WSDualHttpBinding. Example: The following example shows how to get the ReliableSession property.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum WSFederationHttpSecurityMode Summary: Specifies the different security modes for WsFederationHttpBinding. Remarks: This enumeration defines the security modes that the WsFederationHttpBinding supports. Example: The following code shows how to set Mode to a member of this enumeration.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class WSHttpBinding : WSHttpBindingBase Summary: Represents an interoperable binding that supports distributed transactions and secure, reliable sessions. Remarks: The WSHttpBinding is similar to the BasicHttpBinding but provides more Web service features. It uses the HTTP transport and provides message security, as does BasicHttpBinding, but it also provides transactions, reliable messaging, and WS-Addressing, either enabled by default or available through a single control setting. Example: The following sample code shows how to use the WSHttpBinding class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public abstract class WSHttpBindingBase : Binding, IBindingRuntimePreferences Summary: Provides the base class with members common to the WSHttpBinding and the WSFederationHttpBinding. Remarks: The WSHttpBindingBase provides some basic functionality for the bindings used to configure secure, reliable, and interoperable Web services, such as that implemented by the WSHttpBinding for non-duplex service contracts, and more particularly, for the secure and interoperable WSFederationHttpBinding that supports the WS-Federation protocol. By default it generates a run-time stack that uses WS-Security for message security and authentication, HTTP for message delivery, and a Text/XML message encoding. It can be configured to also use WS-ReliableMessaging for reliability. The use of WS-ReliableMessaging is configurable using the optional reliableSessionEnabled parameter. Example: The following example shows how to use the functionality provided by the WSHttpBindingBase class with the derived classes, WSHttpBinding and WSFederationHttpBinding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public OptionalReliableSession ReliableSession { get; set; } Property Value Type: System.ServiceModel.OptionalReliableSession The ReliableSession that provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings. Summary: Gets an object that provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings. Remarks: Reliable sessions are enabled with the WSHttpBindingBase(Boolean) constructor. Example: This example shows how to get the properties of a reliable session binding.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public bool ShouldSerializeTextEncoding() Return Value Type: System.Boolean true if the TextEncoding property value should be serialized; otherwise, false. Summary: Returns a value that indicates whether the TextEncoding property has changed from its default value and should be serialized.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum WSMessageEncoding Summary: Specifies whether Message Transmission Optimization Mechanism (MTOM) or text is used to encode SOAP messages. Remarks: Used by interoperable bindings, such as WsHttpBinding and WsDualHttpBinding, and BasicHttpBinding to specify the SOAP message encoding that may be used. The Message-Transmission Optimization Mechanism (MTOM) is a method for efficiently encoding binary XML elements within the context of a SOAP envelope. Text encodings for messages, such as UTF8, are used for interoperability purposes. Note that the standard bindings designed for interoperability with Web services do not use binary encodings. For more information about the standard bindings, see System-Provided Bindings.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class X509CertificateEndpointIdentity : EndpointIdentity Summary: Represents a certificate identity for the service endpoint. Clients that attempt to communicate with that service endpoint should authenticate the service based on the certificate provided in the endpoint identity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of a X509CertificateEndpointIdentity object. Remarks: Choose between the constructors based on whether supportingCertificates are required.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: void IServiceBehavior.ApplyDispatchBehavior( ServiceDescription description, ServiceHostBase serviceHostBase ) Parameters descriptionType: System.ServiceModel.Description.ServiceDescription The ServiceDescription of the service.  serviceHostBaseType: System.ServiceModel.ServiceHostBase The ServiceHostBase for hosting the service. Implements IServiceBehavior.ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Summary: Checks that the type of hosting is consistent with the ASP.NET compatibility requirements. Remarks: This method supports the infrastructure and is not intended to be used directly from your code.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class ServiceHostFactoryBase Summary: Provides the base implementation for the factory that allows application code to participate in the creation of service hosts in managed hosting environments where the host instance is created dynamically in response to incoming messages. Remarks: The managed hosting environments that support this interface are Internet Information Services (IIS) or Windows Process Activation Services (WAS). Implement a factory that derives from this class when you have implemented a custom derivative of ServiceHostBase in these hosting environments. If you have implemented a custom derivative of ServiceHost, consider deriving from ServiceHostFactory instead. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public void Detach( ServiceHostBase owner ) Parameters ownerType: System.ServiceModel.ServiceHostBase The ServiceHostBase using the virtual path. Implements IExtension(Of T).Detach(T) Summary: This method is provided to support the infrastructure. Remarks: This method supports the infrastructure and is not intended to be called directly from your code.",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#allowAccounts#)] public SecurityIdentifierElementCollection AllowAccounts { get; } Property Value Type: System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection A SecurityIdentifierElementCollection that contains user accounts for processes that host services and are granted connection access to the sharing service. The default values returned are LocalSystem, Admin, NS, LS, and IIS_USRS. Summary: Gets the user accounts for processes that host services and are granted connection access to the sharing service.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class SecurityIdentifierElement : ConfigurationElement Summary: Represents a configuration element that contains user accounts for processes that host WCF services, and are granted connection access to the sharing service. This class cannot be inherited. Remarks: The security identifier specifies a unique identifier used to identify a user account. The default values are LocalSystem, Administrators, NS, LS, and IIS_USRS. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ServiceModelActivationSectionGroup : ConfigurationSectionGroup Summary: Contains the configuration section for the SMSvcHost.exe tool. This class cannot be inherited. Remarks: This class encapsulates the various configuration elements for the SMSvcHost.exe tool. Specifically, it represents the configuration elements that can be configured in the SMSvcHost.exe.config file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: protected virtual void OnWriteStartAddressHeader( XmlDictionaryWriter writer ) Parameters writerType: System.Xml.XmlDictionaryWriter The XmlDictionaryWriter used to write the address header to a stream or file. Summary: When overridden in a derived class, is invoked when the address header contents begin to be written to a stream or file.",0,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class AddressHeaderCollection : ReadOnlyCollection<AddressHeader> Summary: Represents a thread-safe, read-only collection of address headers. Remarks: The AddressHeaderCollection can be initialized with an IEnumerable(Of T) set of AddressHeader objects and then searched for a header with a specific qualified name using the FindHeader(String, String) method. To find all of the headers with a specific qualified name, use the FindAll(String, String) method. The AddHeadersTo(Message) method is used to add headers to the headers of a specified message. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,1,0,1,1,0,0,0,0
"Additional online Documentation: Summary: Creates an instance of this class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: void IWsdlExportExtension.ExportContract( WsdlExporter exporter, WsdlContractConversionContext context ) Parameters exporterType: System.ServiceModel.Description.WsdlExporter The WsdlExporter that exports the contract information. contextType: System.ServiceModel.Description.WsdlContractConversionContext A WsdlContractConversionContext object that provides mappings from exported WSDL elements to the contract description. Implements IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) Summary: Writes custom binary message encoding elements into the generated WSDL for a contract.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual bool CanBuildChannelListener<TChannel>( BindingParameterCollection parameters ) where TChannel : class, IChannel Type Parameters TChannel The type of channel for which the listener is being tested. Parameters parametersType: System.ServiceModel.Channels.BindingParameterCollection The BindingParameterCollection that specifies requirements for the channel listener that is built. Return Value Type: System.Boolean true if the specified channel listener stack can be build on the service; otherwise, false. Summary: Returns a value that indicates whether the current binding can build a channel listener stack on the service that satisfies the collection of binding parameters specified. Remarks: Use this method if you want to check that the channel listener for channels of type TChannel can be build for the binding parameters specified before attempting to actually build the listener. Alternatively, try to build the channel listener by calling BuildChannelListener(Of TChannel)(BindingParameterCollection) and catch the exception generated if it cannot be built.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the BindingElementCollection class.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the BindingElementCollection class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class BindingParameterCollection : KeyedByTypeCollection<Object> Summary: Represents a collection of binding parameters that store information used by binding elements to build factories. Remarks: The BindingParameterCollection is a collection of objects that is used when a custom binding needs to provide additional parameters to another binding. For example, the SecurityBindingElement looks for ServiceSecurityAuditBehavior in the BindingParameterCollection to determine Security auditing settings. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class BodyWriter Summary: Represents the writer of the message body. Remarks: A message consists of headers and a body. The headers are buffered and the body is streamed. Because the body is streamed, the user cannot pass the actual content of the body to a message. Instead the user must pass a class that knows how to write the body when asked to do so. This is done by passing a class derived from BodyWriter to the Message. A message calls the class derived from BodyWriter whenever it requires the body to be written using an XmlWriter. Example: The following example shows how to derive a class from BodyWriter. This override takes in an array of strings and writes them to a XmlDictionaryWriter. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class CallbackContextMessageProperty : IMessageProperty Summary: Represents the contents of the wsc:CallbackContext message header when using a channel that supports the context exchange protocol. Remarks: The context exchange protocol allows for duplex communication between durable services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public abstract class ChannelBase : CommunicationObject, IChannel, ICommunicationObject, IDefaultCommunicationTimeouts Summary: Provides the base implementation for custom channels. Remarks: The ChannelBase class provides an abstract base class implementation of the IChannel interface. It also requires that each channel be associated with a channel manager. Note that the only constructor available for creating instances of ChannelBase requires a channelManager input parameter. State changes are managed by inheriting from the CommunicationObject implementation of the state machine. The ChannelBase gets its default communication timeouts for the open, close, send and receive operations from the ChannelManagerBase associated with it. The ChannelBase also manages the manager for you. In addition to exposing a reference to the manager, the base class also notifies the manager when channels are created and destroyed. But the reference to the manager is only good until the channel is destroyed. Even if you do use the base class, you must still provide behaviors for opening and closing the channel. The default implementations of these methods do not provide useful information. You must also make sure to override GetProperty(Of T) whenever you implement a channel. GetProperty(Of T) is an excellent way to communicate information along the channel stack without having to know what channels are below you, or what channels above you may perform queries. Define interfaces that can be queried for available information. Whenever you do not recognize the type argument for GetProperty(Of T), delegate down to the next channel in the stack or return Nothing if you are creating a new transport channel at the bottom of the stack. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: protected TimeSpan DefaultReceiveTimeout { get; } Property Value Type: System.TimeSpan The default Timespan that specifies how long the receive operation has to complete before timing out. Summary: Gets the default interval of time provided for a receive operation to complete. Remarks: Gets the ReceiveTimeout associated with Manager for the channel. All operations that are potentially lengthy must have a timeout. Methods that do not take explicit timeouts, must delegate to those methods with default timeouts or must not do any work that blocks. Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class ChannelListenerBase : ChannelManagerBase, IChannelListener, ICommunicationObject Summary: Provides a common base implementation for channel listeners on the service. Remarks: The channel listeners on the service wait for and then accept the channels created by factories on the client. Once the channel connection is established between client and service, messages can be exchanged and distributed applications can communicate. The processing functionality provided by the listener is layered into a stacked set of channel listeners to provide modularity when selecting the features to deploy. Each channel listener in the service stack corresponds to a channel factory in the client stack. The channel created by the factory is really a stack of channels that are accepted and processed by the stack of listeners on the service. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class ChannelListenerBase<TChannel> : ChannelListenerBase, IChannelListener<TChannel>, IChannelListener, ICommunicationObject where TChannel : class, IChannel Type Parameters TChannel The type of channel the channel listeners accept. Summary: Provides a common base implementation for channel listeners on a service to accept channels produced by the client factories. Remarks: The channel listeners on a service wait for and then accept the channels created by factories on the client. Once the channel connection is established between client and service, they can communicate by exchanging messages ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class ChannelParameterCollection : Collection<Object> Summary: Represents a collection of channel parameters. Remarks: This class is used to cache channel properties when channels are destroyed and re-created. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the CustomBinding class.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class FaultConverter Summary: Converts exceptions thrown by a channel into SOAP fault messages that conform to the channel's protocol. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IAnonymousUriPrefixMatcher Summary: Implement this interface to register custom, anonymous URI prefixes.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: bool IsMulticast { get; } Property Value Type: System.Boolean true if the service has multicast capabilities.; false otherwise. The default is false. Summary: Gets a value that indicates whether the binding configures the service to have multicast capabilities.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: Uri Uri { get; } Property Value Type: System.Uri The Uri on which the listeners that are generated by the factory listen. Summary: Gets the URI on which the listeners that are generated by the factory listen. Remarks: This URI represents the transport address on which the IChannelListener is listening for messages.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IContextBindingElement Summary: Defines the interface for a binding element that supports context exchange protocols. Remarks: This interface has no members.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IContextManager Summary: Defines an interface that allows you to get and set the context on the channel. Remarks: For channels that use WSHttpContextBinding with the NotAllowed value set, the context cannot be retrieved on the client using IContextManager because a new channel that establishes a session is created each time GetProperty(Of T) is called to enforce NotAllowed semantics on a channel. This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using IContextManager. You can still retrieve it using ContextMessageProperty as shown in the following code.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: EndpointAddress LocalAddress { get; } Property Value Type: System.ServiceModel.EndpointAddress The EndpointAddress on which the input channel receives messages. Summary: Gets the address on which the input channel receives messages. Remarks: If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is Nothing. This property can be used by higher-level channels for correlation purposes. For example, if a higher-level channel implements request-reply on top of a IDuplexChannel, it can use the LocalAddress property in the WS-Addressing ReplyTo header. Example: The following code illustrates how to implement this property:",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public interface IInputSession : ISession Summary: Defines the interface for the session implemented on the receiving side of a one-way communication between messaging endpoints. Remarks: On the other side of the message interchange, the IOutputSession interface represents an outgoing ISession implemented on the sending side of a one-way communication between messaging endpoints. Note these two sessions are distinct.",0,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: IAsyncResult BeginTryReceiveRequest( TimeSpan timeout, AsyncCallback callback, Object state ) Parameters timeoutType: System.TimeSpan The Timespan that specifies how long the receive request operation has to complete before timing out and returning false. callbackType: System.AsyncCallback The AsyncCallback delegate that receives the notification of the asynchronous receive that a request operation completes. stateType: System.Object An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation. Return Value Type: System.IAsyncResult The IAsyncResult that references the asynchronous receive request operation. Summary: Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it. Remarks: Use the asynchronous BeginTryReceiveRequest(TimeSpan, AsyncCallback, Object) method when you need the application processing to continue without waiting. Use one of the synchronous TryReceiveRequest(TimeSpan, RequestContext) methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded. This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the channel or the time out occurs. Notes to Implementers The operation returns false if the specified timeout is exceeded. Example: The following code illustrates how to implement this method:",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: bool EndWaitForRequest( IAsyncResult result ) Parameters resultType: System.IAsyncResult The IAsyncResult that identifies the BeginWaitForRequest(TimeSpan, AsyncCallback, Object) operation to finish, and from which to retrieve an end result. Return Value Type: System.Boolean true if a request is received before the specified interval of time elapses; otherwise false. Summary: Completes the specified asynchronous wait-for-a-request message operation. Example: The following code illustrates how to implement this method:",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class LocalServiceSecuritySettings Summary: Provides local service security properties that can be set. Remarks: This class contains the local security settings used by the SecurityBindingElement to build the security channel. These settings are local to the service and are not represented in the service's security policy. Example: This example shows how to use the LocalServiceSecuritySettings class to change the DetectReplays setting. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public TimeSpan SessionKeyRolloverInterval { get; set; } Property Value Type: System.TimeSpan The time interval after key renewal for which the previous session key is valid on incoming messages after a key renewal. The default is 5 minutes. Summary: Gets or sets the time interval after key renewal for which the previous session key is valid on incoming messages during a key renewal. Remarks: After key renewal, the client and server should always send messages using the most current available key. Both parties can accept incoming messages secured with the previous session key until the rollover time expires. Session settings such as this one are applicable under any of the following conditions: All client credential types for WSDualHttpBinding and NetTcpBinding. If <reliableSession> element is enabled. If <reliableSession> element is not enabled, on WSHttpBinding with UserName = true or windows = true. Session settings such as this one are not applicable under any of the following conditions: For BasicHttpBinding. For NetNamedPipeBinding. If <reliableSession> element is not enabled, on WSHttpBinding with ClientCertificate = true or with none of the ClientCredentials properties set to true. Example: This example shows how get the SessionKeyRolloverInterval value.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: protected virtual void OnWriteStartHeaders( XmlDictionaryWriter writer ) Parameters writerType: System.Xml.XmlDictionaryWriter A XmlDictionaryWriter that is used to write the start header to an XML file. Summary: Called when the start header is written to an XML file.",1,0,0,1,0,1,0,0,0,0,0,0
"Additional online Documentation: Summary: Creates a new XPathNavigator object for navigating this object. Remarks: Use this method if you want to manipulate just a portion of the message copy.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public abstract class MessageEncoder Summary: The encoder is the component that is used to write messages to a stream and to read messages from a stream. Remarks: MessageEncoder is a base class that provides implementations that support a Multipurpose Internet Mail Extensions (MIME) content type and message version, and defines the interface for the serialization and deserialization of messages according to that content type. Use it as a base class for writing your own custom encoder. Use this class if you want to implement a custom message encoder. To implement your own custom message encoder, you must provide custom implementations of the following abstract base classes: MessageEncodingBindingElement MessageEncoderFactory MessageEncoder Override the Encoder to return an instance of your custom MessageEncoder. Then wire up your custom MessageEncoderFactory to the binding element stack used to configure the service or client by overriding the CreateMessageEncoderFactory method to return an instance of this factory. The task of converting between the in-memory representation of a message and an XML Information Set (Infoset) representation that can be written to a stream is encapsulated within the MessageEncoder class, which most commonly serves as a factory for XML readers and XML writers that support specific types of XML encodings. The key methods on MessageEncoder are WriteMessage and ReadMessage. WriteMessage takes a Message object and writes it into a Stream object. ReadMessage takes a Stream object and a maximum header size and returns a Message object. Example: The following code shows an example of a class that is derived from MessageEncoder. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public abstract bool MustUnderstand { get; } Property Value Type: System.Boolean true if processing the message header is mandatory; otherwise, false. Summary: Gets or sets a value that indicates whether processing the message header is mandatory or optional. Remarks: If this property is true and the message receiver cannot interpret the message header, the message is not processed and an exception is thrown. If this property is false, the receiver can ignore the message header and continue processing.",0,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class MessageHeaders : IEnumerable<MessageHeaderInfo>, IEnumerable Summary: Represents a collection of message headers for a message. This class cannot be inherited. Remarks: A message header contains optional metadata that describe a message encapsulated by the Message class. A Message can have zero or more headers that are used as an extension mechanism to pass information in messages that are application-specific. You can use Headers to add message headers to a message by calling the Add method. provides a number of predefined message headers: Header Name Description To Contains the role that the message is targeting. Action Provides a description of how the message should be processed. FaultTo Contains the address of the node to which faults should be sent. From Contains the address of the node that sent the message. Request Indicates whether the message is a request. MessageID Contains the unique ID of the message. RelatesTo Contains the IDs of messages that are related to this message. ReplyTo Contains the address of the node to which a reply should be sent for a request. Example: The following code example demonstrates a basic client using the channel factory to send a message and read the action header from the reply. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public EndpointAddress FaultTo { get; set; } Property Value Type: System.ServiceModel.EndpointAddress An EndpointAddress of the node to which faults should be sent. Summary: Gets or sets the address of the node to which faults should be sent. Remarks: This property corresponds to the <FaultTo> element described in the WS-Addressing specification.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public ICollection<string> Keys { get; } Property Value Type: System.Collections.Generic.ICollection(Of String) An ICollection that contains the keys in the MessageProperties. Implements IDictionary(Of TKey, TValue).Keys Summary: Gets an ICollection that contains the keys in the MessageProperties.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public enum MessageState Summary: Specifies the status of a message. Remarks: As the body of a Message object is a stream, it can only be read or written once. This is enforced by maintaining the current state of the Message object. A Message object can be read/written/copied when in the Created state. Other states are Read, Written and Copied, which means that the respective action has been performed already once.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class MessageVersion Summary: Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange. Remarks: The MessageVersion contains the versioning information both about the SOAP envelope and the addressing protocol that is used by a message. An instance of Message is bound upon creation to a specific MessageVersion by passing the version as a parameter into one of the CreateMessage overloads. All the static #get# properties in this class, such as Soap11WSAddressing10 and Soap12 have enumeration-like semantics. They provide an enumeration of the possible message versions supported by the runtime. A message has an envelope structure and an addressing structure. MessageVersion is just a shortcut for supplying {EnvelopeVersion, AddressingVersion} together. There are currently two SOAP envelope versions available: SOAP 1.1 and SOAP 1.2. These versions of SOAP are represented by EnvelopeVersion and are returned by the Soap11 and Soap12 properties. The version of SOAP associated with the MessageVersion can be recovered by using the Envelope property. For more information, see the schema for SOAP 1.1 and SOAP 1.2. There are currently two versions of WS-Addressing available. The one submitted on 10 August 2004 and the one specified in the WS-Addressing 1.0 protocol. The address version used by the current message version can be recovered using the Addressing property. These versions of WS-Addressing are represented by AddressingVersion and are returned by the WSAddressingAugust2004 and WSAddressing10 properties. The WS-Addressing August 2004 is retained as a legacy value. The 10 August 2004 W3C Member Submission for WS-Addressing is available at Web Services Addressing (WS-Addressing). The 17 August 2005 W3C Candidate Recommendation for WS-Addressing 1.0 - Core is available at Web Services Addressing 1.0 - Core. None provides support for using #plain old XML# (POX)-style messaging. Enabling basic POX messaging is now a matter of setting up an HTTP binding on your service with a text encoder that uses None. Message version objects can be created using specified versions of WS-Addressing and SOAP using one of the CreateVersion overloads. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,1,0,0
"Additional online Documentation: Syntax: public int MaxRetryCycles { get; set; } Property Value Type: System.Int32 A value that specifies the number of retry cycles to attempt prior to transferring a message to the poison-message queue. Summary: Gets or sets the maximum number of retry cycles to attempt delivery of messages to the receiving application. Remarks: A retry cycle is when a message is transferred from the retry queue to the application queue to attempt delivery to the application. Messages are placed in the retry queue after failing a number of immediate retries as specified by ReceiveRetryCount. MaxRetryCycles specifies the number of retry cycles and does not include the initial attempt to send the message. An attempt to deliver a message is made a maximum of (1 + MaxRetryCycles) * (ReceiveRetryCount + 1) times. For example, if ReceiveRetryCount = 0 and MaxRetryCycles is 1, there is a maximum of two attempts to deliver the message. This property is used only on operating systems starting with .",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool UseSourceJournal { get; set; } Property Value Type: System.Boolean true if messages processed by this binding are copied to the source journal queue; otherwise, false. The default value is false. Summary: Gets or sets a value that indicates whether copies of messages processed by this binding should be stored in the source journal queue. Remarks: Queued applications that keep a record of messages that have left the source computer's outgoing queue can have the messages copied to a journal queue. After a message leaves the outgoing queue and an acknowledgment is received that the message was received on the destination computer, a copy of the message is kept in the sending computer's system journal queue.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class MsmqMessageProperty Summary: The MsmqMessageProperty class encapsulates the properties of a message that has been read from a queue. Remarks: The MsmqMessageProperty class is obtained from the channel context and is used primarily for error processing. For example, if an application reads a message from the dead-letter queue, the application should examine properties like DeliveryFailure and DeliveryStatus. If an application is performing its own poison-message handling, it should examine properties like AbortCount. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override bool CanBuildChannelFactory<TChannel>( BindingContext context ) Type Parameters TChannel The type of channel the channel factory produces. Parameters contextType: System.ServiceModel.Channels.BindingContext The BindingContext for the channel. Return Value Type: System.Boolean true if the specified channel factory stack can be built on the service; otherwise, false. Summary: Returns a value that indicates whether the current binding can build a factory for a specified type of channel and context.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int MaxReadPoolSize { get; set; } Property Value Type: System.Int32 The maximum number of readers to be kept in the pool. The default value is 64 readers. Summary: Gets or sets the maximum number of XML readers that is allocated to a pool and is ready for use to process incoming messages. Remarks: Increasing this number increases memory consumption, but prepares the encoder to deal with sudden bursts of incoming messages because it is able to use readers from the pool that are already created instead of creating new ones.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override MessageVersion MessageVersion { get; set; } Property Value Type: System.ServiceModel.Channels.MessageVersion The MessageVersion that is used for the SOAP message. Summary: Gets or sets the SOAP message and WS-Addressing versions that are used or expected. Remarks: The default MessageVersion used consists of the version of WS-Addressing 1.0 and SOAP1.2.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override T GetProperty<T>( BindingContext context ) where T : class Type Parameters T The specific property to obtain from the binding context. Parameters contextType: System.ServiceModel.Channels.BindingContext BindingContext that specifies the binding context. Return Value Type: T The property from the specified BindingContext. Summary: Returns a property from the specified BindingContext object.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class PeerResolverBindingElement : BindingElement Summary: Defines the abstract base class for binding elements used to create peer resolver objects. Remarks: This class defines the abstract base class for all binding elements used to create peer resolver objects. For specific implementations of this class, please see the documentation for PnrpPeerResolverBindingElement and PeerCustomResolverBindingElement. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class PrivacyNoticeBindingElementImporter : IPolicyImportExtension Summary: Imports WSDL-based policies and contracts about privacy notices into descriptions of the binding elements that can implement these policies for the service. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public static RedirectionDuration Create( string duration, string ns ) Parameters durationType: System.String The redirection duration. nsType: System.String The redirection namespace. Return Value Type: System.ServiceModel.Channels.RedirectionDuration A redirection duration. Summary: Creates a new RedirectionDuration instance with the specified duration and namespace.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static bool operator ==( RedirectionScope left, RedirectionScope right ) Parameters leftType: System.ServiceModel.Channels.RedirectionScope A RedirectionScope instance. rightType: System.ServiceModel.Channels.RedirectionScope A RedirectionScope instance. Return Value Type: System.Boolean true if the values of left and right are equal; otherwise, false. Summary: Returns a value that indicates whether two instances of the RedirectionScope types are equal.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the ReliableSessionBindingElement class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Replies to a request message.",1,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class StreamSecurityUpgradeProvider : StreamUpgradeProvider Summary: Implements a custom security upgrade provider, inherited from this abstract base class. Remarks: To add a security upgrade, you implement a class that derives from StreamSecurityUpgradeProvider. The upgrade process has the following steps: Implement a class that derives from StreamSecurityUpgradeProvider. Register it. You do this by creating a binding element for it, and registering the provider in a custom binding. The derived class that you implement creates an instance of StreamSecurityUpgradeInitiator, which at run time initiates a request to the other end of its connection to upgrade the channel transport layer. The derived class that you implement creates an instance of StreamSecurityUpgradeAcceptor, which at run time receives the upgrade request from the preceding step, and if possible, accepts the upgrade, and returns the upgraded stream to the other side of its connection. The security upgrade request can be one of many similar requests. If so, the requests are processed in a definite order. For more information, see StreamUpgradeProvider. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public int MaxOutboundConnectionsPerEndpoint { get; set; } Property Value Type: System.Int32 The maximum number of allowed outbound connections for each endpoint that is cached in the connection pool. The default value is 10. Summary: Gets or sets the maximum number of outbound connections for each endpoint that is cached in the connection pool. Remarks: This limits the number of connections that are cached for each unique remote endpoint. If this value is exceeded by having more active client connections, then the service may appear unresponsive to the client and this value should be adjusted to exceed the maximum number of expected connections that are cached for each unique remote endpoint.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class TransportBindingElementImporter : IWsdlImportExtension, IPolicyImportExtension Summary: Imports standard transport binding elements from Web Services Description Language (WSDL) documents with attached policy expressions. Remarks: The TransportBindingElementImporter type is an implementation of the IWsdlImportExtension and IPolicyImportExtension interfaces. It imports the HttpTransportBindingElement, HttpsTransportBindingElement, TcpTransportBindingElement, NamedPipeTransportBindingElement, MsmqTransportBindingElement, and PeerTransportBindingElement instances from WSDL service metadata. When these TransportBindingElement types are imported, the TransportBindingElementImporter type also imports the addressing information from the WSDL metadata. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class UseManagedPresentationBindingElementImporter : IPolicyImportExtension Summary: Converts WSDL-based policies for UseManagedPresentationBindingElements into descriptions of the binding elements that can implement these policies for the service. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] [GuidAttribute(#CE39D6F3-DAB7-41b3-9F7D-BD1CC4E92399#)] public sealed class ServiceMoniker : ContextBoundObject Summary: This class provides the supporting implementation for the COM service moniker and should not be used directly. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class WasHostedComPlusFactory : ServiceHostFactoryBase Summary: Creates a service host for a Web-hosted COM+ component. Remarks: This type supports the hosting infrastructure and is not intended to be used directly from your code. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [IntegerValidatorAttribute(MinValue = )] [ConfigurationPropertyAttribute(#maxBufferSize#, DefaultValue = )] public int MaxBufferSize { get; set; } Property Value Type: System.Int32 The maximum size for a buffer that stores messages processed by the binding. Summary: Gets or sets the maximum size, in bytes, for a buffer that stores messages processed by the binding.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#security#)] public BasicHttpSecurityElement Security { get; } Property Value Type: System.ServiceModel.Configuration.BasicHttpSecurityElement The BasicHttpSecurityElement that specifies the type of security to be used with this binding. Summary: Gets or sets the type of security to be used with this binding.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class BindingElementExtensionElement : ServiceModelExtensionElement Summary: Enables the use of a custom BindingElement implementation from a machine or application configuration file. Remarks: You should derive from the BindingElementExtensionElement class to use a custom BindingElement implementation from a machine or application configuration file. Once a BindingElementExtensionElement instance has been created, a custom binding element is returned. You can use this in an application configuration file by using the <add> element and setting the type attribute to the BindingElementExtensionElement class, and the name attribute to the custom binding element. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#x509FindType#, DefaultValue = X509FindType.FindBySubjectDistinguishedName)] public X509FindType X509FindType { get; set; } Property Value Type: System.Security.Cryptography.X509Certificates.X509FindType An X509FindType that contains the type of X.509 search to be executed. Summary: Gets or sets the type of X.509 search to be executed. Remarks: The type contained in FindValue must satisfy the requirements of this property.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#headers#)] public AddressHeaderCollectionElement Headers { get; } Property Value Type: System.ServiceModel.Configuration.AddressHeaderCollectionElement An AddressHeaderCollectionElement that contains a collection of address headers. Summary: Gets a collection of address headers.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the ClaimTypeElement class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ClientCredentialsElement : BehaviorExtensionElement Summary: Represents a configuration element that configures a client credential. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ClientViaElement : BehaviorExtensionElement Summary: Represents a configuration element that specifies the route a message should take. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public ComContractsSection() Summary: Initializes a new instance of the ComContractsSection class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ConfigurationChannelFactory<TChannel> : ChannelFactory<TChannel> Type Parameters TChannel The type of communications channel to specify for the endpoint element that is created. Summary: Provides the generic functionality to create a channel configuration element for a specific type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class CustomBindingElement : NamedServiceModelExtensionCollectionElement<BindingElementExtensionElement>, ICollection<BindingElementExtensionElement>, IEnumerable<BindingElementExtensionElement>, IEnumerable, IBindingConfigurationElement Summary: Represents the configuration section that provides full control over the messaging stack for the user. Remarks: Custom bindings provide full control over the messaging stack. An individual binding defines the message stack by specifying the configuration elements for the stack elements in the order they appear on the stack. Each element defines and configures the one element of the stack. There must be one and only one transport element in each custom binding. Without this element, the messaging stack is incomplete. The order in which elements appear in the stack matters, because it is the order in which operations are applied to the message. The recommended order of stack elements is the following: Transactions (optional) Reliable Messaging (optional) Security (optional) Transport Encoder (optional) ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,0,0,1,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(CustomBindingElement), AddItemName = #binding#)] public sealed class CustomBindingElementCollection : ServiceModelEnhancedConfigurationElementCollection<CustomBindingElement> Summary: Represents a collection of CustomBindingElement objects. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DispatcherSynchronizationElement() Summary: Creates a new instance of the DispatcherSynchronizationElement class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class EndToEndTracingElement : ConfigurationElement Summary: Handles configuration file element settings that enable and disable different aspects of end-to-end tracing during the running of a service application. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ExtensionElement : ConfigurationElement Summary: Represents a configuration element that defines an extension, which enables the user to create user-defined bindings, behaviors, etc. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ExtensionsSection : ConfigurationSection Summary: Represents a configuration section that contains all the extension definitions. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class HostElement : ConfigurationElement Summary: Represents a configuration element that specifies settings for a service host. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#defaultKeyEntropyMode#, DefaultValue = SecurityKeyEntropyMode.CombinedEntropy)] public SecurityKeyEntropyMode DefaultKeyEntropyMode { get; set; } Property Value Type: System.ServiceModel.Security.SecurityKeyEntropyMode A valid SecurityKeyEntropyMode value. The default value is CombinedEntropy. Summary: Gets or sets the default value of SecurityKeyEntropyMode.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#issuedTokenRenewalThresholdPercentage#, DefaultValue = )] [IntegerValidatorAttribute(MinValue = , MaxValue = )] public int IssuedTokenRenewalThresholdPercentage { get; set; } Property Value Type: System.Int32 The renewal threshold percentage for issued tokens. Summary: Gets or sets the renewal threshold percentage for issued tokens.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#tokenType#, DefaultValue = ##)] [StringValidatorAttribute(MinLength = )] public string TokenType { get; set; } Property Value Type: System.String A string. The default is http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1\#SAML. Summary: Gets or sets the type of token to be used in issuance.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class IssuedTokenParametersEndpointAddressElement : EndpointAddressElementBase Summary: Represents a configuration element that specifies an endpoint that issues a security token. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#bindingConfiguration#, DefaultValue = ##)] [StringValidatorAttribute(MinLength = )] public string BindingConfiguration { get; set; } Property Value Type: System.String The name of the binding configuration to use when the endpoint is instantiated. Summary: Gets or sets the name of the binding configuration to use when the endpoint is instantiated. The binding configuration must be in scope when the endpoint is defined. Remarks: The binding configuration must be in scope when the endpoint is defined.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#allowUntrustedRsaIssuers#, DefaultValue = false)] public bool AllowUntrustedRsaIssuers { get; set; } Property Value Type: System.Boolean true if untrusted RSA certificate issuers are accepted; otherwise, false. Summary: Gets or sets a value that specifies whether untrusted RSA certificate issuers are allowed. Remarks: Certificates are signed by certification authorities (CAs) to verify authenticity. An untrusted issuer is a CA that is not specified to be trusted to sign certificates.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class LocalClientSecuritySettingsElement : ConfigurationElement Summary: Configures the security settings of a local client. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class MessageSecurityOverTcpElement : ConfigurationElement Summary: Defines the configuration settings for the security of a message sent using TCP. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class MexHttpBindingCollectionElement : MexBindingBindingCollectionElement<WSHttpBinding, MexHttpBindingElement> Summary: Represents a collection of MexHttpBindingElement instances. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected internal override Binding GetDefault() Return Value Type: System.ServiceModel.Channels.Binding A Binding. Summary: Gets the default binding element of this collection.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#useMsmqTracing#, DefaultValue = false)] public bool UseMsmqTracing { get; set; } Property Value Type: System.Boolean A value that enables or disables the Message Queuing built-in message tracing facility. Summary: Gets or sets a value that enables or disables the Message Queuing (also known as MSMQ) built-in message tracing facility. Remarks: When UseMsmqTracing is set to true, the queued channel uses the Message Queuing built-in message tracing facility. Through this facility, a report message is sent to a specified report queue each time a message enters and leaves a queue manager.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected override ConfigurationPropertyCollection Properties { get; } Property Value Type: System.Configuration.ConfigurationPropertyCollection A ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this binding configuration element. Summary: Gets a ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the MsmqIntegrationBindingElement class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void ApplyConfiguration( BindingElement bindingElement ) Parameters bindingElementType: System.ServiceModel.Channels.BindingElement The BindingElement to which settings are applied. Summary: Applies the settings of this configuration element to the specified BindingElement binding element.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class MsmqTransportSecurityElement : ConfigurationElement Summary: The MsmqTransportSecurityElement class encapsulates the transport security settings for queued transports. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [IntegerValidatorAttribute(MinValue = )] [ConfigurationPropertyAttribute(#maxReadPoolSize#, DefaultValue = )] public int MaxReadPoolSize { get; set; } Property Value Type: System.Int32 The maximum number of messages that can be read simultaneously without allocating new readers. The default is 64. Summary: Gets or sets a value that specifies the maximum number of messages that can be read simultaneously without allocating new readers. Remarks: Larger pool sizes make the system more tolerant to activity spikes at the cost of a larger working set.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#writeEncoding#, DefaultValue = #utf-8#)] public Encoding WriteEncoding { get; set; } Property Value Type: System.Text.Encoding An Encoding value that specifies the character set encoding to be used for emitting messages on the binding. The default is UTF8Encoding. Summary: Gets or sets the character set encoding to be used for emitting messages on the binding.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#connectionPoolSettings#)] public NamedPipeConnectionPoolSettingsElement ConnectionPoolSettings { get; set; } Property Value Type: System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement A NamedPipeConnectionPoolSettingsElement that specifies additional connection pool settings for this binding. Summary: Gets or sets additional connection pool settings.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public NamedPipeTransportSecurityElement() Summary: Initializes a new instance of the NamedPipeTransportSecurityElement class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected override ConfigurationPropertyCollection Properties { get; } Property Value Type: System.Configuration.ConfigurationPropertyCollection The ConfigurationPropertyCollection that is associated with this binding. Summary: Gets the ConfigurationPropertyCollection that is associated with this binding.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class NetNamedPipeSecurityElement : ConfigurationElement Summary: Represents a configuration element that specifies security settings for a named pipe binding. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#security#)] public PeerSecurityElement Security { get; } Property Value Type: System.ServiceModel.Configuration.PeerSecurityElement PeerSecurityElement that contains the security configuration element for this binding configuration. Summary: Gets the security configuration element for this binding configuration.",0,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected override ConfigurationPropertyCollection Properties { get; } Property Value Type: System.Configuration.ConfigurationPropertyCollection A ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element. Summary: Gets a ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Creates a new instance of the ProtocolMappingElement class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#allowInsecureTransport#, DefaultValue = false)] public bool AllowInsecureTransport { get; set; } Property Value Type: System.Boolean true if unsecured transport is permitted; otherwise, false. Summary: Gets a value that indicates whether unsecured transport is permitted.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected internal override void InitializeFrom( BindingElement bindingElement ) Parameters bindingElementType: System.ServiceModel.Channels.BindingElement A binding element. Summary: Initializes this binding configuration element with the content of the specified binding element.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#httpsHelpPageUrl#)] public Uri HttpsHelpPageUrl { get; set; } Property Value Type: System.Uri The relative or absolute HTTPS-based URL of the custom HTML help file the user sees when the endpoint is viewed using an HTML browser. Summary: Gets or sets the location at which an HTML file is published for retrieval using HTTPS. Remarks: You can use this property to enable the use of a custom HTML help file that is returned from an HTTPS/Get request, for example, from an HTML browser. The location of the HTML help file is resolved as follows. If the value of this property is a relative address, the location of the HTML help file is the value of the service base address that supports HTTPS requests, plus this property value. If the value of this property is an absolute address and supports HTTPS requests, the location of the HTML help file is the value of this property. If the value of this property is absolute but does not support HTTPS requests, an exception is thrown. This property is valid only when the HttpsHelpPageEnabled property is true.",1,1,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#contract#, DefaultValue = ##, Options = ConfigurationPropertyOptions.IsKey)] [StringValidatorAttribute(MinLength = )] public string Contract { get; set; } Property Value Type: System.String The contract this endpoint is exposing. Summary: Gets or sets a string that specifies which contract this endpoint is exposing. Remarks: The assembly must implement the contract type. If a service implementation implements a single contract type, then this property can be omitted.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ServiceMetadataPublishingElement : BehaviorExtensionElement Summary: Represents the configuration element that controls the publication of service metadata and associated information. This class cannot be inherited. Remarks: This configuration element can be used to enable or disable the publication of service metadata using an HTTP/Get request or a WS-MetadataExchange (WS-MEX) request. You can also enable or prevent the display of an HTML page of information about the service when it is requested over HTTP. Example: <serviceMetadata> Element ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class ServiceModelSectionGroup : ConfigurationSectionGroup Summary: Represents the main configuration section for . This class cannot be inherited. Remarks: All configuration elements are nested in the system.serviceModel element of the configuration file. does not add elements to the configuration sections of other products. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ServicesSection : ConfigurationSection Summary: Represents the configuration section that contains services. Remarks: Services are defined in the services section of the configuration file. Each service has its own service configuration section. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#openTimeout#, DefaultValue = #00:01:00#)] public TimeSpan OpenTimeout { get; set; } Property Value Type: System.TimeSpan The TimeSpan that specifies how long the open operation has to complete before timing out. Implements IBindingConfigurationElement.OpenTimeout Summary: Gets or sets the interval of time provided for an open operation to complete.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class StandardBindingReliableSessionElement : ConfigurationElement Summary: Represents the configuration setting for WS-Reliable Messaging defined in a standard binding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Syntax: public abstract class StandardEndpointElement : ConfigurationElement Summary: Manages a standard endpoint element for a service application configuration file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class StandardEndpointsSection : ConfigurationSection Summary: Represents a configuration section of standard endpoints. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class SynchronousReceiveElement : BehaviorExtensionElement Summary: Represents a configuration element that is used to specify run-time behavior for receiving messages in either a service or client application. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#leaseTimeout#, DefaultValue = #00:05:00#)] public TimeSpan LeaseTimeout { get; set; } Property Value Type: System.TimeSpan A TimeSpan structure that indicates the duration after which the TCP connection is closed. Summary: Gets or sets the time span after which an active connection is closed. Remarks: A connection is closed after it is returned to the connection cache and not during active transmission. The connection cache used by the TCP transport creates new connections as required for each endpoint, up to the cache limit that is set by MaxOutboundConnectionsPerEndpoint.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public TcpTransportSecurityElement() Summary: Initializes a new instance of the TcpTransportSecurityElement class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected override ConfigurationPropertyCollection Properties { get; } Property Value Type: System.Configuration.ConfigurationPropertyCollection A ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element. Summary: Gets a ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class TransportElement : BindingElementExtensionElement Summary: Provides a base class to represent a transport binding configuration element. Remarks: This class contains properties that are common to all of the transport binding configuration elements provided by . It handles the translation of the message encoder settings and base transport settings into their run-time manifestations. It delegates the translation of transport-specific settings (for example, HttpProxySettings for HTTP) logic in its concrete derived class transport bindings. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class WS2007FederationHttpBindingElement : WSFederationHttpBindingElement Summary: Represents a configuration element that defines the WS2007FederationHttpBinding binding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class WS2007HttpBindingCollectionElement : StandardBindingCollectionElement<WS2007HttpBinding, WS2007HttpBindingElement> Summary: Represents a configuration element that contains sub-elements that specify settings for using the WS2007HttpBinding binding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class WS2007HttpBindingElement : WSHttpBindingElement Summary: Represents an interoperable binding that derives from WSHttpBinding and provides support for the correct versions of the Security, ReliableSession, and TransactionFlow binding elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(WsdlImporterElement), AddItemName = #extension#)] public sealed class WsdlImporterElementCollection : ServiceModelEnhancedConfigurationElementCollection<WsdlImporterElement> Summary: Represents a collection of WsdlImporterElement instances. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class WSDualHttpBindingCollectionElement : StandardBindingCollectionElement<WSDualHttpBinding, WSDualHttpBindingElement> Summary: Represents a configuration element that contains a collection of WSDualHttpBindingElement instances. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the WSDualHttpBindingElement class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#textEncoding#, DefaultValue = #utf-8#)] public Encoding TextEncoding { get; set; } Property Value Type: System.Text.Encoding An Encoding value that specifies the character set encoding to be used for emitting messages on the binding. The default is UTF8Encoding. Summary: Gets or sets the character set encoding to be used for emitting messages on the binding.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class WSHttpTransportSecurityElement : ConfigurationElement Summary: Represents a configuration element that defines authentication settings for the HTTP transport. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public X509DefaultServiceCertificateElement() Summary: Initializes a new instance of the X509DefaultServiceCertificateElement class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public X509PeerCertificateElement() Summary: Initializes a new instance of the X509PeerCertificateElement class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class XmlDictionaryReaderQuotasElement : ConfigurationElement Summary: Represents the configuration element that defines the constraints on the complexity of SOAP messages that can be processed by endpoints configured with a binding. This class cannot be inherited. Remarks: readerQuotas element ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(XmlElementElement), AddItemName = #xmlElement#, CollectionType = ConfigurationElementCollectionType.BasicMap)] public sealed class XmlElementElementCollection : ServiceModelConfigurationElementCollection<XmlElementElement> Summary: Represents a collection of XmlElementElement instances. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ClientViaBehavior : IEndpointBehavior Summary: The ClientViaBehavior is used by clients to specify the URI for which the transport channel should be created. Remarks: If such a behavior exists in the behavior collection on a client endpoint, the transport uses the URI that it provides, while all the other channel layers in the stack use the EndpointAddress provided at ChannelFactory construction time. This EndpointAddress also becomes the WS-Addressing To header. Use this behavior when the immediate network destination is not the intended processor of the message to enable multiple-hop conversations when the calling application does not necessarily know the ultimate destination or when the destination Via header is not an address. You can also set this value using the <clientVia> element in a client application configuration file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class ContractDescription Summary: Describes a contract that specifies what an endpoint communicates to the outside world. Remarks: A contract is a collection of operations that specifies what the endpoint communicates to the outside world. Each operation is a message exchange. For example, a request message and an associated reply message form a request/reply message exchange. A ContractDescription object is used to describe contracts and their operations. Within a ContractDescription, each contract operation has a corresponding OperationDescription that describes aspects of the each operation that is part of the contract, such as whether the operation is one-way or request/reply. Each OperationDescription also describes the messages that make up the operation using a MessageDescriptionCollection. ContractDescription contains a reference to an interface that defines the contract using the programming model. This interface is marked with ServiceContractAttribute and its methods that correspond to endpoint operations are marked with the OperationContractAttribute. A duplex contract defines the following logical sets of operations: A set that the service exposes for the client to call. A set that the client exposes for the service to call. The programming model for defining a duplex contract is to split each set in a separate interface and apply attributes to each interface. In this case, ContractDescription contains a reference to each of the interfaces that groups them into one duplex contract. Similar to bindings, each contract has a Name and Namespace that uniquely identify it in the metadata of the service. Example: The following example shows a number of ways to create or retrieve a ContractDescription object. It then displays the various pieces of information that are stored in the ContractDescription object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the ContractDescription class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class FaultDescriptionCollection : Collection<FaultDescription> Summary: A collection of FaultDescription objects that you can use to obtain information about SOAP faults in a contract. Remarks: Use the Find and FindAll methods to retrieve a FaultDescription or group of FaultDescription objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: void Validate( ContractDescription contractDescription, ServiceEndpoint endpoint ) Parameters contractDescriptionType: System.ServiceModel.Description.ContractDescription The contract to validate. endpointType: System.ServiceModel.Description.ServiceEndpoint The endpoint to validate. Summary: Implement to confirm that the contract and endpoint can support the contract behavior. Remarks: Implement the Validate method to confirm that the contract description is sufficient to support the custom contract behavior. Implementations can inspect the description and either throw or return no value. This method is called once for each endpoint that uses the specified service contract.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ServiceContractAttribute(ConfigurationName = #IMetadataExchange#, Name = #IMetadataExchange#, Namespace = #http://schemas.microsoft.com/2006/04/mex#)] public interface IMetadataExchange Summary: Exposes methods used to return metadata about a service. Remarks: When programming services, it is useful to publish metadata about the service. For example, metadata can be a Web Services Description Language (WSDL) document that describes all of the methods and data types employed by a service. Returning metadata about an service allows consumers of a service to easily create clients for the service. For more information about metadata endpoints, see Metadata. Services implemented using publish metadata by exposing one or more metadata endpoints. Metadata endpoints in have an address, a binding and a contract like any other endpoint. The MetadataReference interface specifies the service contract implemented by all metadata endpoints in . There is no need to implement the MetadataReference contract in your service implementation. Instead, add the ServiceMetadataBehavior to the service description. Or, when using configuration, set the contract attribute of the endpoint element to IMetadataExchange. For an example, see How to: Publish Metadata for a Service Using a Configuration File. For details on publishing metadata in see Publishing Metadata.",0,1,1,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IOperationContractGenerationExtension Summary: Defines the methods called during contract generation that can be used to modify the generated code for an operation. Remarks: Implement the IOperationContractGenerationExtension interface on an operation behavior (a System.ServiceModel.Description.IOperationBehavior type) to enable you to modify the code generated when a contract or endpoint is compiled into code. Typically, a custom System.ServiceModel.Description.IWsdlImportExtension inserts a custom operation behavior into the OperationDescription.Behaviors collection during the call to IWsdlImportExtension.ImportContract or IWsdlImportExtension.ImportEndpoint. Example: The following code example shows the implementation of the GenerateOperation method that adds a string to the comments section of the operation using the System.CodeDom namespace. The following code example shows how the operation behavior that implements IOperationContractGenerationExtension is inserted into the OperationDescription.Behaviors collection during the call to IWsdlImportExtension.ImportContract.  Finally, the following code example shows the operation generated in both Visual Basic and .",1,0,0,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public interface IPolicyImportExtension Summary: Defines a method for objects that import custom policy assertions about bindings. Remarks: Implement the IPolicyImportExtension interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements. Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion. Unlike its counterpart, IPolicyExportExtension, IPolicyImportExtension does not require implementation by a BindingElement object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the System.ServiceModel.Description.WsdlImporter constructor. passes two objects to the ImportPolicy method, a MetadataImporter and a PolicyConversionContext. Typically the PolicyConversionContext object already contains the policy assertions for each binding scope. An IPolicyImportExtension implementation performs the following steps: Locates the custom policy assertion for which it is responsible by calling either the GetBindingAssertions, GetMessageBindingAssertions, or GetOperationBindingAssertions methods, depending upon the scope. Removes the policy assertion from the assertion collection. The PolicyAssertionCollection.Remove method locates, returns, and removes the assertion in one step. Modify the binding stack or the contract by either adding a required custom BindingElement to the BindingElements property or by modifying the PolicyConversionContext.Contract property. Step 2 is important. After all policy importers have been called, checks for the existence of any policy assertions that remain. If one exists, assumes that the policy import was unsuccessful and does not import the associated binding. Important A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer. It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it. Custom MetadataImporter implementations must implement their own PolicyConversionContext object to extract the policy assertions attached to the custom metadata format. If you want to export and import custom WSDL elements that are not policy assertions, see System.ServiceModel.Description.IWsdlExportExtension and System.ServiceModel.Description.IWsdlImportExtension. Note You can use custom policy importers and exporters with the ServiceModel Metadata Utility Tool (Svcutil.exe) by using the same configuration elements in a configuration file and the /svcutilConfig:<configFile> option. Example: The following code example shows the use of the PolicyAssertionCollection.Remove method to locate, return, and remove the assertion in one step.  The following code example shows the client application configuration file to load the custom policy importer when the System.ServiceModel.Description.MetadataResolver is invoked.       The following code example shows the use of the MetadataResolver to download and resolve metadata into description objects.",1,1,1,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public interface IWsdlExportExtension Summary: Defines endpoint or contract behaviors that can export custom metadata. Remarks: To modify and extend the Web Services Description Language (WSDL) exported by WsdlExporter objects, implement the IWsdlExportExtension interface on an endpoint, contract, or operation behavior (an object that implements either IContractBehavior, IEndpointBehavior, or IOperationBehavior) and add the behavior to the Behaviors, Behaviors, or Behaviors property. In addition, you can also implement IWsdlExportExtension on a BindingElement. Note IWsdlExportExtension implementations are never invoked if they are implemented as an IServiceBehavior. IWsdlExportExtension does not export custom policy assertions even though exports custom binding policy assertions to the appropriate element inside WSDL. If you want to export custom policy assertions, implement the IPolicyExportExtension interface. The metadata publication process begins by calling WsdlExporter.ExportEndpoints which in turn calls WsdlExporter.ExportEndpoint for each endpoint. The endpoint is exported by first exporting its contract.When exporting a contract the System.ServiceModel.Description.WsdlExporter calls the IWsdlExportExtension.ExportContract method on all IWsdlExportExtension implementations on the contract, and operation behaviors for that contract. Operations that use wildcard actions are not exported in metadata, so IWsdlExportExtension implementations on operation behaviors for these operations are not exported. After exporting the contract, the port and binding are exported and exported policy expressions are attached. Both the ExportContract and the ExportEndpoint methods provide access to the WsdlExporter so that IWsdlExportExtension implementations can report recoverable errors and warnings through the Errors property. The context objects passed into both methods provide convenient mappings from exported WSDL elements to properties of ContractDescription and ServiceEndpoint objects. If an IWsdlExportExtension implementation throws an exception on export, the generated metadata is in an inconsistent state and the WsdlExporter object should be discarded. Note Custom export extension must run after the built-in serializer populates the service description. Example: The following code example shows an IWsdlExportExtension that adds custom documentation attributes to the WSDL file as WSDL annotations.",1,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public enum ListenUriMode Summary: Indicates whether the transport must ensure that the URI provided for the service to listen on is unique or can be used exactly as provided. Remarks: The URI for the endpoint on which a service listens can be set programmatically using the ListenUri property and the value of the ListenUriMode for that endpoint is set using the ListenUriMode property. The default value for ListenUri is Address. The default value for ListenUriMode is Explicit. The value of these properties may also be set using the ListenUri property and the ListenUriMode property. When the value of the ListenUriMode is set to Unique the transport is responsible for creating a unique URI. Different transports used by generate this unique URI differently For TCP in exclusive mode (PortSharingEnabled is false) this means binding to a uniquely available port number. For TCP in port sharing mode (PortSharingEnabled is true) and for all of the other existing transports, this means appending a unique path (a GUID) to the end of the ListenUri. When the value of the ListenUriMode is set to Explicit mode, the transport uses the ListenUri exactly as it is provided, without modifying it to make it unique.",1,1,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public MessageDescription( string action, MessageDirection direction ) Parameters actionType: System.String The action parameter of the SOAP message that identifies the intent of the message. directionType: System.ServiceModel.Description.MessageDirection Input if the message is incoming or Output if the message is outgoing. Summary: Initializes a new instance of the MessageDescription class with a specified action and direction.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum MessageDirection Summary: Specifies the direction of the message. Remarks: The direction of a message indicates whether the message is coming into an endpoint or going out from an endpoint. Input is incoming to the server and Output is outgoing from the server. For a basic request/response message pattern, a request is incoming to the server and the response is outgoing from the server. On callbacks from the server to client, however, a request is outgoing from the server and a response is incoming to the server. Use the MessageDescription(String, MessageDirection) constructor to specify the direction of a message. Retrieve the direction of a message using the Direction property.",1,1,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public class MessagePropertyDescription : MessagePartDescription Summary: Represents a message property specified by the System.ServiceModel.MessagePropertyAttribute. Remarks: The MessagePropertyDescription class represents message properties specified in a message contract by the use of the System.ServiceModel.MessagePropertyAttribute. Message properties are used to place information on the message that can be used by other objects further on in the message pipeline but that are not serialized with the message. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public static Binding CreateMexTcpBinding() Return Value Type: System.ServiceModel.Channels.Binding A System.ServiceModel.Channels.CustomBinding with a System.ServiceModel.Channels.TcpTransportBindingElement. Summary: Returns a System.ServiceModel.Channels.CustomBinding with a System.ServiceModel.Channels.TcpTransportBindingElement.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Returns a MetadataSet.",1,1,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public TimeSpan OperationTimeout { get; set; } Property Value Type: System.TimeSpan The period within which the metadata must be downloaded; the default is 1 minute. Summary: Gets or sets the period of time within which the metadata must be downloaded before an exception is thrown. Remarks: Use the OperationTimeout property to limit the amount of time the MetadataExchangeClient takes before ending the operation.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the MetadataSection class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class MetadataSet : IXmlSerializable Summary: Represents a serializable collection of service metadata in XML form. Remarks: The MetadataSet class contains a collection of MetadataSection objects, each of which contains one dialect of metadata in XML form. Typically, the MetadataSet class is used to pass a group of XML metadata documents to and from MetadataExporter and MetadataImporter objects, such as WsdlImporter and WsdlExporter. To create a MetadataSet from a IEnumerable(Of T) object of type MetadataSection, use the MetadataSet constructor. To obtain a IEnumerable(Of T) object of type MetadataSection, use the MetadataSections property. In addition, you can use the ReadFrom method to load a MetadataSet from XML data and the WriteTo method to write the internal metadata to an XML format. This type implements the structure defined in the WS-MetadataExchange specification. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,1,0
"Additional online Documentation: Syntax: public class OperationContractGenerationContext Summary: Passed to the IOperationContractGenerationExtension.GenerateOperation method to enable the modification of an operation contract and its context prior to generating code. Remarks: Use the OperationContractGenerationContext object passed to the IOperationContractGenerationExtension.GenerateOperation method to modify the code document object model prior to the generation of code. Typically, the System.ServiceModel.Description.IOperationContractGenerationExtension interface is implemented on a custom System.ServiceModel.Description.IWsdlImportExtension implementation that is used to import custom WSDL elements or otherwise modify the code at the service or operation level. To modify the code at the service level, see System.ServiceModel.Description.IServiceContractGenerationExtension. Example: The following example shows the use of the OperationContractGenerationContext object passed to the IOperationContractGenerationExtension.GenerateOperation method to add code comments extracted from custom WSDL elements.  The following code example shows the resulting code comments. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public abstract class PolicyConversionContext Summary: Defines a class used to retrieve binding assertions in metadata and to attach implementing binding elements at the appropriate scope. Remarks: An implementation of the PolicyConversionContext is passed to IPolicyExportExtension and IPolicyImportExtension objects to export and import, respectively, custom policy assertions to and from metadata. On export, a collection of policy assertions are retrieved in order to add custom assertions. On import, the assertions are retrieved in order to import specific ones and configure binding elements appropriately. The GetBindingAssertions method returns all policy assertions that are for the binding. The GetFaultBindingAssertions method returns all policy assertions for a specific fault message. The GetMessageBindingAssertions method returns all policy assertions for a specific message. The GetOperationBindingAssertions method returns all policy assertions for a specific operation. The BindingElements property gets the binding elements for the binding being described or configured. The Contract property gets the contract description for which the binding is being described or configured. Example: The following code example shows an implementation of the ImportPolicy method that writes all policy assertions to the console. The code comments describe how to locate a specific custom policy assertion, create and insert an implementing binding element, and remove the assertion from the collection.     The following code example shows how to register IPolicyImportExtension implementations using the <policyImporters> configuration section.    The following code example demonstrates how a custom binding element can implement IPolicyExportExtension to attach a custom policy assertion to the binding assertions. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public bool ShouldSerializeServiceAuthorizationManager() Return Value Type: System.Boolean true if the ServiceAuthorizationManager property value should be serialized; otherwise, false. Summary: Returns a value that indicates whether the ServiceAuthorizationManager property has changed from its default value and should be serialized.",0,0,0,0,0,0,1,0,0,0,0,1
"Generates asynchronous methods for operations in addition to synchronous versions.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the ServiceDescription class.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public class ServiceMetadataBehavior : IServiceBehavior Summary: Controls the publication of service metadata and associated information. Remarks: Add a ServiceMetadataBehavior object to the ServiceDescription.Behaviors collection (or the <serviceMetadata> element in an application configuration file) to enable or disable the publication of service metadata. However, adding the behavior to a service is not sufficient to enable metadata publication: To enable WS-Transfer GET metadata retrieval, you must also add an endpoint to your service in which the contract is IMetadataExchange. For an example, see How To: Publish Metadata for a Service Using Code. The IMetadataExchange endpoint can be configured as can any other endpoint. To enable HTTP GET metadata retrieval, set the HttpGetEnabled property to true. For more information about the address of HTTP GET metadata, see HttpGetEnabled. The address of the IMetadataExchange endpoint follows the normal rules regarding the combination of base addresses and endpoint addresses. For more information, seePublishing Metadata. To enable the publication of metadata using a configuration file, add the <serviceMetadata> element to the <serviceBehaviors> element and associate the element with the <service> element for which you want to publish metadata. For an example, see How to: Publish Metadata for a Service Using a Configuration File. The class has the following members: The HttpGetEnabled property specifies whether metadata is returned for HTTP/GET requests. The HttpGetUrl property (in conjunction with the base addresses) specifies the HTTP/GET address. The HttpsGetEnabled property specifies whether metadata is returned for an HTTPS/GET request. The HttpsGetUrl property (in conjunction with the base addresses) specifies the HTTPS/GET address. The MetadataExporter property returns the underlying exporter. Typically the ServiceMetadataBehavior is used from an application configuration file. See the Example section for a code example. Example: The following code example demonstrates the use of ServiceMetadataBehavior in a configuration file to enable metadata support for HTTP GET and WS-Transfer GET requests. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,0,1,0,1,1
"Additional online Documentation: Syntax: void IContractBehavior.ApplyDispatchBehavior( ContractDescription description, ServiceEndpoint endpoint, DispatchRuntime dispatch ) Parameters descriptionType: System.ServiceModel.Description.ContractDescription The contract description to be modified. endpointType: System.ServiceModel.Description.ServiceEndpoint The endpoint that exposes the contract. dispatchType: System.ServiceModel.Dispatcher.DispatchRuntime The dispatch runtime that controls service execution. Implements IContractBehavior.ApplyDispatchBehavior(ContractDescription, ServiceEndpoint, DispatchRuntime) Summary: Implements a modification of the service runtime across a contract.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ServiceMetadataExtension : IExtension<ServiceHostBase> Summary: Provides the implementation for the metadata publishing protocols. Remarks: The ServiceMetadataExtension is configured and used by configuring a service with the System.ServiceModel.Description.ServiceMetadataBehavior. You can also use the ServiceMetadataExtension class to get the service's metadata at runtime by accessing the Metadata property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ServiceSecurityAuditBehavior : IServiceBehavior Summary: Specifies the audit behavior of security events. In general, the security events consist of authentication events such as transport, message or negotiate authentication and authorization event. For more information, seeServiceAuthorizationManager. Remarks: The ServiceSecurityAuditBehavior class is used to audit authentication events. When auditing is enabled, either successful or failed authentication attempts (or both) can be audited. The events are written to one of three event logs: application, security, or the default log for the operating system version. The event logs can all be viewed using the Windows Event viewer. Use this class to specify which event log is written to, as well as kinds of authentication events to write. You can also specify whether to suppress audit failures by setting the SuppressAuditFailure property to false (the default is true). For more information about auditing security events for applications, see Auditing Security Events. To specify audit behavior in configuration, use the <serviceSecurityAudit> element. Example: The following code creates an instance of the ServiceHost class and adds a new ServiceSecurityAuditBehavior to its collection of behaviors. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public class SynchronousReceiveBehavior : IEndpointBehavior Summary: Controls whether channels listen synchronously or asynchronously. Remarks: Use this behavior to instruct the channel listener to use a synchronous receive rather than the default, asynchronous. Using SynchronousReceiveBehavior instructs to issue a new thread to pump for each accepted channel. If there are a lot of channels there is the possibility of running out of threads. You can also set this value using the <synchronousReceive> element in an application configuration file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,0,0,0,1
"Additional online Documentation: Summary: Represents a static method that returns a TypedMessageConverter instance.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public override void ExportEndpoint( ServiceEndpoint endpoint ) Parameters endpointType: System.ServiceModel.Description.ServiceEndpoint The ServiceEndpoint about which to return metadata. Summary: Generates metadata about the specified endpoint. Remarks: Use the ExportEndpoint method to create metadata about a single endpoint. Example: The following code example shows how to export a single endpoint.",1,0,0,1,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public XmlSchemaSet GeneratedXmlSchemas { get; } Property Value Type: System.Xml.Schema.XmlSchemaSet A set of XmlSchema objects. Summary: Gets a set of XmlSchema objects after calling one of the export methods. Remarks: The GeneratedXmlSchemas property returns documents only as a result of calls to either ExportContract, ExportEndpoint, or ExportEndpoints.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public ContractDescription ImportContract( PortType wsdlPortType ) Parameters wsdlPortTypeType: System.Web.Services.Description.PortType A System.Web.Services.Description.PortType object that represents the desired port type. Return Value Type: System.ServiceModel.Description.ContractDescription A ContractDescription object that represents metadata located by the specified port type information. Summary: Returns a ContractDescription object that represents metadata located by the specified port type information. Remarks: Use the ImportContract method to use a System.Web.Services.Description.PortType object to locate port type information in the metadata and return that information as a ContractDescription object. Check the Errors property to determine whether there are any import errors before using the returned object.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public ServiceEndpoint ImportEndpoint( Port wsdlPort ) Parameters wsdlPortType: System.Web.Services.Description.Port A System.Web.Services.Description.Port object that represents the desired WSDL port information. Return Value Type: System.ServiceModel.Description.ServiceEndpoint A ServiceEndpoint object that represents specific WSDL port information in the metadata document. Summary: Returns a ServiceEndpoint from a set of metadata documents that uses information from the specified System.Web.Services.Description.Port object. Remarks: Use the ImportEndpoint method to use a System.Web.Services.Description.Port object to locate port type information in the metadata and return that information as a ServiceEndpoint object. Check the Errors property to determine whether there are any import errors before using the returned object.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Summary: Returns a collection of ServiceEndpoint objects that matches all WSDL ports using a specified binding, associated with a specified port type, or within a specified WSDL service.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class XmlSerializerMessageContractImporter : IWsdlImportExtension Summary: Handles the import of messages from WSDL documents using the XmlSerializer. Remarks: The XmlSerializerMessageContractImporter is invoked when converting a WSDL description. It examines the WSDL documents and generates an in-memory description to be used later for code generation. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public XmlSerializerMessageContractImporter() Summary: Initializes a new instance of the XmlSerializerMessageContractImporter class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class ChannelDispatcherBase : CommunicationObject Summary: Abstract base class for the channel dispatcher that accepts channels and associates them with a service. Remarks: This is used by developers who want to keep the programming model but replace the system-provided runtime. Such applications will pull messages out of channels and handle them directly with user-defined dispatchers. To use ChannelDispatcherBase , create a class derived from it, extend ServiceHost and override InitializeRuntime, adding instances of your class derived from ChannelDispatcherBase to ChannelDispatchers. The IChannelListener and the ServiceHost, associated with the ChannelDispatcherBase object are available for inspection or modification through the Listener and Host respectively. ServiceHost calls the Attach(ServiceHostBase) or Detach(ServiceHostBase) methods when adding or removing a ChannelDispatcherBase item from its ChannelDispatchers collection. ServiceHost calls the CloseInput during shutdown before closing InstanceContexts. uses this call to close datagram channels and wait for all messages to get to an InstanceContext. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,1,1,0,0,0,0,1
"Additional online Documentation: Syntax: protected virtual void Attach( ServiceHostBase host ) Parameters hostType: System.ServiceModel.ServiceHostBase The ServiceHostBase for the service. Summary: When overridden in a derived class, attaches the channel dispatcher to a specific host. Remarks: This method can only be set when the instance of the ChannelDispatcher is in the Created state, as this is the only state that is both mutable and not disposed. A ServiceHost calls this method when the ChannelDispatcherBase is added to its ChannelDispatchers collection. This gives the ChannelDispatcherBase a chance to hook events and inspect the ServiceHost, and provides the value that should be returned from the Host property.",1,0,0,1,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public DispatchRuntime CallbackDispatchRuntime { get; } Property Value Type: System.ServiceModel.Dispatcher.DispatchRuntime A DispatchRuntime object. If the contract is a duplex contract, the dispatch behavior contains service-initiated operations; otherwise the dispatch behavior contains no operations. Summary: Gets the dispatch run-time that dispatches service-initiated operations.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool SerializeReply { get; set; } Property Value Type: System.Boolean true if the Formatter property serializes the return values into a reply message; otherwise, false. Summary: Gets or sets a value that specifies whether the Formatter object serializes reply messages. Remarks: Use the SerializeReply property to indicate whether the formatter serializes operation parameters into a reply message or whether the first parameter is sent as the outbound message. Note If set to false, the return value of the operation must be of type Message or an exception is thrown.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IgnoreTransactionMessageProperty { get; set; } Property Value Type: System.Boolean true, the TransactionMessageProperty is ignored when executing the service method; otherwise false. Summary: Gets or sets whether to ignore the TransactionMessageProperty. Remarks: The TransactionMessageProperty allows third-party channel developers who use a proprietary transaction flow mechanism for their channel to introduce their transaction into . If this property is set to true, the transaction is ignored when executing the service method.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class EndpointAddressMessageFilter : MessageFilter Summary: Represents a query that tests whether a message satisfies the requirements of a specified endpoint address. Remarks: This filter tests whether a message satisfies a particular endpoint address. An EndpointAddress object includes a URI and an optional collection of addressing headers. The addressing and message headers are canonicalized in order to be compared for equality. If a parameter appears more than once in an EndpointAddress, the corresponding header must appear in the message at least that many times. IIS and the underlying file system (NTFS or FAT) are case-insensitive. URI comparisons done by this class are also case-insensitive. So, for example, http://www.microsoft.com is evaluated as equal to http://WWW.microsoft.com. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class FaultContractInfo Summary: Represents information about a SOAP fault that is specified in a FaultContractAttribute attribute. Remarks: You can get a collection of FaultContractInfo objects by accessing the ClientOperation.FaultContractInfos and DispatchOperation.FaultContractInfos properties. The FaultContractInfo class exposes the action of the SOAP fault and the detail type that is serialized into the SOAP fault. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Type Detail { get; } Property Value Type: System.Type The Type that represents the serialized SOAP fault detail. Summary: The type of the object that is serialized as the SOAP fault detail.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum PowerBroadcastStatus Summary: Indicates the system's power status. Remarks: PowerBroadcastStatus is used by the ServiceBase class to indicate a change in the system's power status. You can design your application to react to any power status change.",1,1,0,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class ServiceControllerPermissionEntry Summary: Defines the smallest unit of a code access security permission that is set for a ServiceController. Remarks: For more information on code access security, see Code Access Security. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public ServiceControllerPermissionAccess PermissionAccess { get; } Property Value Type: System.ServiceProcess.ServiceControllerPermissionAccess A bitwise combination of the ServiceControllerPermissionAccess values. Summary: Gets the access levels used in the permissions request.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum ServiceStartMode Summary: Indicates the start mode of the service. Remarks: The ServiceStartMode is used by the service installer to indicate whether the new service should be disabled at system startup, whether the system should start the service automatically at system startup, or whether the service should be started manually by a user or application.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static bool operator !=( SessionChangeDescription a, SessionChangeDescription b ) Parameters aType: System.ServiceProcess.SessionChangeDescription A SessionChangeDescription structure. bType: System.ServiceProcess.SessionChangeDescription A SessionChangeDescription structure. Return Value Type: System.Boolean true if a and b are not equal; otherwise, false. Summary: Returns a value indicating whether two SessionChangeDescription structures are not equal. Remarks: This operator is implemented using the Equals(Object) method.",0,0,0,0,0,0,0,0,0,0,0,1
"A user has logged on to a session.",0,0,0,0,0,0,0,0,0,0,0,1
"The remote control status of a session has changed.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum AudioBitsPerSample Summary: Enumerates values that describe the bits-per-sample characteristic of an audio format. Remarks: The BitsPerSample property gets a member of AudioBitsPerSample that indicates the bits-per-sample of an audio format.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum EncodingFormat Summary: Enumerates values that describe the encoding format of audio. Remarks: The EncodingFormat property gets a member of EncodingFormat that indicates the encoding format of audio.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum AudioSignalProblem Summary: Contains a list of possible problems in the audio signal coming in to a speech recognition engine. Remarks: The AudioSignalProblem property of the AudioSignalProblemOccurredEventArgs class gets a member of this enumeration when the SpeechRecognitionEngine or SpeechRecognizer raises a AudioSignalProblemOccurred event. Example: The following example defines an event handler that gathers information about an AudioSignalProblemOccurred event.",1,0,0,0,0,1,1,0,1,0,0,0
"Audio input is too fast.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class AudioSignalProblemOccurredEventArgs : EventArgs Summary: Provides data for the AudioSignalProblemOccurred event of a SpeechRecognizer or a SpeechRecognitionEngine. Remarks: An instance of AudioSignalProblemOccurredEventArgs is created when the SpeechRecognitionEngine or SpeechRecognizer object raises an AudioSignalProblemOccurred event. To obtain information related to an AudioSignalProblemOccurred event, access the following properties in the handler for the event: AudioLevel AudioPosition AudioSignalProblem RecognizerAudioPosition The AudioPosition property references the input device's position in its generated audio stream. By contrast, the RecognizerAudioPosition property references the recognizer's position within its audio input. These positions can be different. For more information, see Using Speech Recognition Events. The AudioSignalProblem property indicates which problem occurred. AudioSignalProblemOccurredEventArgs derives from EventArgs. Example: The following example defines an event handler that gathers information about an AudioSignalProblemOccurred event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,0
"Not processing audio input.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum DisplayAttributes Summary: Lists the options that the SpeechRecognitionEngine object can use to specify white space for the display of a word or punctuation mark. Remarks: Windows Desktop Speech returns recognized phrases as collections of RecognizedWordUnit or ReplacementText objects. Each object corresponds to a single word or punctuation mark. The DisplayAttributes property of a RecognizedWordUnit or ReplacementText uses a member of the DisplayAttributes enumeration to describe how print spacing is handled around a given word or punctuation mark. Two or more members of the DisplayAttributes enumeration may be combined by a bit-wise OR to specify how a particular word should be displayed. Note The display formatting that the speech recognizer uses is language specific. For example, suppose the input phrase to a recognition engine using the default system grammar provided by DictationGrammar is #Hello comma he said period#. Then the recognition engine returns a RecognizedPhrase containing five RecognizedWordUnit objects containing the following strings with the following DisplayAttributes values. Item DisplayAttributes Hello OneTrailingSpace , OneTrailingSpace | ConsumeLeadingSpaces he OneTrailingSpace said OneTrailingSpace . OneTrailingSpace | ConsumeLeadingSpaces The text returned for this recognized phrase is printed as: #Hello, he said.# Example: The following example uses the DisplayAttributes property of a list of RecognizedWordUnit objects to format the words as a phrase.",1,1,0,1,0,0,1,1,1,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the Grammar class. Remarks: You can use a Grammar constructor to create a Grammar instance from a GrammarBuilder or SrgsDocument object, or from a file or a Stream that contains a description of a grammar in a supported format. Supported formats include the following: XML-format files that conform to the W3C Speech Recognition Grammar Specification (SRGS) Version 1.0 Grammars that have been compiled to a binary file with a .cfg file extension Grammar constructors that accept XML-format grammar files in their arguments compile the XML grammars to a binary format to optimize them for loading and consumption by a speech recognition engine. You can reduce the amount of time required to construct a Grammar object from an XML-format grammar by compiling the grammar in advance, using one of the Compile methods. A speech recognition grammar can define a root rule. To create a Grammar object that specifies which rule to use as its root rule, use a constructor that accepts the ruleName parameter. To create a Grammar object that specifies a base URI to resolve relative rule references, use a constructor that takes the baseUri parameter.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class RecognizedAudio Summary: Represents audio input that is associated with a RecognitionResult. Remarks: A speech recognizer generates information about the audio input as part of the recognition operation. To access the recognized audio, use the Audio property or the GetAudioForWordRange method of the RecognitionResult. A recognition result can be produced by the following events and methods of the SpeechRecognizer and SpeechRecognitionEngine classes: Events: SpeechRecognitionEngine.SpeechHypothesized and SpeechRecognizer.SpeechHypothesized SpeechRecognitionEngine.SpeechRecognitionRejected and SpeechRecognizer.SpeechRecognitionRejected SpeechRecognitionEngine.SpeechRecognized and SpeechRecognizer.SpeechRecognized SpeechRecognitionEngine.EmulateRecognizeCompleted and SpeechRecognizer.EmulateRecognizeCompleted SpeechRecognitionEngine.RecognizeCompleted Methods: SpeechRecognitionEngine.EmulateRecognize and SpeechRecognizer.EmulateRecognize SpeechRecognitionEngine.EmulateRecognizeAsync and SpeechRecognizer.EmulateRecognizeAsync SpeechRecognitionEngine.Recognize SpeechRecognitionEngine.RecognizeAsync Important A recognition result produced by emulated speech recognition does not contain recognized audio. For such a recognition result, its Audio property returns Nothing and its GetAudioForWordRange method throws an exception. For more information about emulated speech recognition, see the EmulateRecognize and EmulateRecognizeAsync methods of the SpeechRecognizer and SpeechRecognitionEngine classes. Example: The following example handles the SpeechRecognitionEngine.SpeechRecognized, SpeechRecognizer.SpeechRecognized, or Grammar.SpeechRecognized event and outputs to the console information about the recognized audio that is associated with the recognition result. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public enum RecognizeMode Summary: Enumerates values of the recognition mode. Remarks: This enumeration is used as an argument to RecognizeAsync(RecognizeMode). Example: The following example shows the implementation of a start/stop button for an application that has a graphical user interface and uses SpeechRecognitionEngine. Depending on the state of the application, RecognizeAsync(RecognizeMode) is called with either Single or Multiple when the button is clicked.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class RecognizerInfo Summary: Represents information about a SpeechRecognizer or SpeechRecognitionEngine instance. Remarks: You can obtain identifying information for an initialized recognition engine using SpeechRecognizer.RecognizerInfo for a SpeechRecognizer object or SpeechRecognitionEngine.RecognizerInfo for a SpeechRecognitionEngine object. The information returned in instances of RecognizerInfo obtained from a SpeechRecognizer is determined by the settings in the Speech Properties member of the Control Panel. You can use instances of RecognizerInfo to construct a specific configuration of SpeechRecognitionEngine using the SpeechRecognitionEngine(RecognizerInfo) constructor. The static method InstalledRecognizers returns a list of all available SpeechRecognitionEngine configurations as RecognizerInfo instances. Example: The following example validates a given CultureInfo and identifier string against the permitted SpeechRecognitionEngine configurations, expressed as a list of RecognizerInfo objects. If the CultureInfo and identifier string are valid, the example creates a new instance of SpeechRecognitionEngine using the RecognizerInfo instance as an argument. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public class RecognizerUpdateReachedEventArgs : EventArgs Summary: Returns data from a SpeechRecognitionEngine.RecognizerUpdateReached or a SpeechRecognizer.RecognizerUpdateReached event. Remarks: RecognizerUpdateReached events provide a mechanism for pausing a speech recognition engine to apply atomic and synchronous modifications, such as loading and unloading grammars. If your application is using a SpeechRecognitionEngine instance to manage recognition, it can use one of the SpeechRecognitionEngine.RequestRecognizerUpdate methods to request that the engine pauses to receive an update. The SpeechRecognitionEngine instance raises a SpeechRecognitionEngine.RecognizerUpdateReached event when it is ready for the update. While a SpeechRecognitionEngine instance is paused, you can load, unload, enable, and disable Grammar objects, and modify values for the BabbleTimeout, InitialSilenceTimeout, and EndSilenceTimeout properties. If your application is using a SpeechRecognizer instance to manage recognition, it can use one of the SpeechRecognizer.RequestRecognizerUpdate methods to request that the engine pauses to receive an update. The SpeechRecognizer instance raises a SpeechRecognizer.RecognizerUpdateReached event when it is ready for the update. While a SpeechRecognizer instance is paused, you can load, unload, enable, and disable Grammar objects. When handling SpeechRecognitionEngine.RecognizerUpdateReached and SpeechRecognizer.RecognizerUpdateReached events, a recognition engine pauses until the event handler returns. RecognizerUpdateReachedEventArgs derives from EventArgs. Example: The following example shows a console application that loads and unloads Grammar objects. The application uses the RequestRecognizerUpdate method to request the speech recognition engine to pause so it can receive an update. The application then loads or unloads a Grammar object. At each update, a handler for SpeechRecognitionEngine.RecognizerUpdateReached event writes the name and status of the currently loaded Grammar objects to the console. As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,1,1,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<AudioSignalProblemOccurredEventArgs> AudioSignalProblemOccurred Summary: Raised when the SpeechRecognitionEngine detects a problem in the audio signal. Remarks: To get which problem occurred, use the AudioSignalProblem property of the associated AudioSignalProblemOccurredEventArgs. When you create an AudioSignalProblemOccurred delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates. Example: The following example defines an event handler that gathers information about an AudioSignalProblemOccurred event.",0,0,0,0,0,1,0,1,1,0,0,0
"Additional online Documentation: Syntax: public Object QueryRecognizerSetting( string settingName ) Parameters settingNameType: System.String The name of the setting to return. Return Value Type: System.Object The value of the setting. Summary: Returns the values of settings for the recognizer. Remarks: Recognizer settings can contain string, 64-bit integer, or memory address data. The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer. The following settings must have the same range for each recognizer that supports the setting. A SAPI-compliant recognizer is not required to support these settings and can support other settings. Name Description ResourceUsage Specifies the recognizer's CPU consumption. The range is from 0 to 100. The default value is 50. ResponseSpeed Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation. The range is from 0 to 10,000 milliseconds (ms). This setting corresponds to the recognizer's EndSilenceTimeout property. ComplexResponseSpeed Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation. The range is from 0 to 10,000 ms. This setting corresponds to the recognizer's EndSilenceTimeoutAmbiguous property. AdaptationOn Indicates whether adaptation of the acoustic model is on (value = 1) or off (value = 0). The default value is 1 (on). PersistedBackgroundAdaptation Indicates whether background adaptation is on (value = 1) or off (value = 0), and persists the setting in the registry. The default value is 1 (on). To update a setting for the recognizer, use one of the UpdateRecognizerSetting methods. Example: The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale. The example generates the following output.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<RecognizerUpdateReachedEventArgs> RecognizerUpdateReached Summary: Raised when a running SpeechRecognitionEngine pauses to accept modifications. Remarks: Applications must use RequestRecognizerUpdate to pause a running instance of SpeechRecognitionEngine before modifying its settings or its Grammar objects. The SpeechRecognitionEngine raises this event when it is ready to accept modifications. For example, while the SpeechRecognitionEngine is paused, you can load, unload, enable, and disable Grammar objects, and modify values for the BabbleTimeout, InitialSilenceTimeout, and EndSilenceTimeout properties. For more information, see the RequestRecognizerUpdate method. When you create a RecognizerUpdateReached delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates. Example: The following example shows a console application that loads and unloads Grammar objects. The application uses the RequestRecognizerUpdate method to request the speech recognition engine to pause so it can receive an update. The application then loads or unloads a Grammar object. At each update, a handler for RecognizerUpdateReached event writes the name and status of the currently loaded Grammar objects to the console. As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.",0,0,1,0,0,1,1,1,1,0,1,0
"Additional online Documentation: Summary: Requests that the recognizer pauses to update its state. Remarks: Use this method to synchronize changes to the recognizer. For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the RecognizerUpdateReached event to synchronize your application behavior with the state of the recognizer. When this method is called, the recognizer pauses or completes asynchronous operations and generates a RecognizerUpdateReached event. A RecognizerUpdateReached event handler can then modify the state of the recognizer in between recognition operations. When handling RecognizerUpdateReached events, the recognizer pauses until the event handler returns. Note If the input to the recognizer is changed before the recognizer raises the RecognizerUpdateReached event, the request is discarded. When this method is called: If the recognizer is not processing input, the recognizer immediately generates the RecognizerUpdateReached event. If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the RecognizerUpdateReached event. If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the RecognizerUpdateReached event. While the recognizer is handling the RecognizerUpdateReached event: The recognizer does not process input, and the value of the RecognizerAudioPosition property remains the same. The recognizer continues to collect input, and the value of the AudioPosition property can change.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<AudioLevelUpdatedEventArgs> AudioLevelUpdated Summary: Occurs when the shared recognizer reports the level of its audio input. Remarks: The recognizer raises this event multiple times per second. The frequency with which the event is raised depends on the computer on which the application is running. To get the audio level at the time of the event, use the AudioLevel property of the associated AudioLevelUpdatedEventArgs. To get the current audio level of the input to the recognizer, use the recognizer's AudioLevel property. When you create a delegate for an AudioLevelUpdated event, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates. Example: The following example adds a handler for the AudioLevelUpdated event to a SpeechRecognizer object. The handler outputs the new audio level to the console.",1,0,0,0,0,1,1,1,1,0,0,1
"Additional online Documentation: Summary: Requests that the shared recognizer pause and update its state. Remarks: Use this method to synchronize changes to the shared recognizer. For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the RecognizerUpdateReached event to synchronize your application behavior with the state of the recognizer. When this method is called, the recognizer pauses or completes asynchronous operations and generates a RecognizerUpdateReached event. A RecognizerUpdateReached event handler can then modify the state of the recognizer in between recognition operations. When this method is called: If the recognizer is not processing input, the recognizer immediately generates the RecognizerUpdateReached event. If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the RecognizerUpdateReached event. If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the RecognizerUpdateReached event. While the recognizer is handling the RecognizerUpdateReached event: The recognizer does not process input, and the value of the RecognizerAudioPosition property remains the same. The recognizer continues to collect input, and the value of the AudioPosition property can change. To change whether the shared recognizer pauses recognition operations while an application is handling a SpeechRecognized event, use the PauseRecognizerOnRecognition property. Example: The following example shows a console application that loads and unloads Grammar objects. The application uses the RequestRecognizerUpdate method to request the speech recognition engine to pause so it can receive an update. The application then loads or unloads a Grammar object. At each update, a handler for RecognizerUpdateReached event writes the name and status of the currently loaded Grammar objects to the console. As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.",1,0,0,0,0,1,0,0,1,0,0,0
"Universal Phone Set phoneme set, which is ASCII encoding of phonemes for IPA.",1,0,0,0,0,0,0,0,0,0,0,0
"The rule cannot be the target of a rule reference from an external grammar unless it is the root rule of its containing grammar.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class BookmarkReachedEventArgs : PromptEventArgs Summary: Returns data from the BookmarkReached event. Remarks: An instance of BookmarkReachedEventArgs is created when the SpeechSynthesizer object raises the BookmarkReached event. The SpeechSynthesizer raises the BookmarkReached event when it encounters a bookmark while processing any of the Speak, SpeakAsync, SpeakSsml(String), or SpeakSsmlAsync(String) methods. To obtain the name and location of the bookmark that triggered the event, access the Bookmark and the AudioPosition properties in the handler for the event. Example: The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback. The handler for the BookmarkReached event writes the name of the bookmark and its position in the audio stream when the event was raised to the console. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,1,1,1,1,0,0,1
"Additional online Documentation: Syntax: public class PhonemeReachedEventArgs : PromptEventArgs Summary: Returns data from the PhonemeReached event. Remarks: A phoneme is a basic component of written language. For more information about phonemes, see PhonemeReached. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum PromptBreak Summary: Enumerates values for intervals of prosodic separation (breaks) between word boundaries. Remarks: The values in the PromptBreak enumeration represent a range of separation intervals (pauses) between word boundaries. The speech synthesis engine determines the exact duration of the interval. When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values. The value None represents the absence of a pause between word boundaries and can be used to remove a break where one would normally occur. The remaining values are listed in order of increasing durations for breaks.",1,1,0,0,0,0,0,0,0,0,0,0
"Indicates an extra-small break.",0,0,0,0,0,0,0,0,0,0,0,1
"Indicates that no emphasis value is specified.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class PromptEventArgs : AsyncCompletedEventArgs Summary: Represents the base class for EventArgs classes in the System.Speech.Synthesis namespace. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Indicates an extra-slow rate.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class PromptStyle Summary: Defines a style for speaking prompts that consists of settings for emphasis, rate, and volume. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum PromptVolume Summary: Enumerates values for volume levels (loudness) in prompts. Remarks: Members of the PromptVolume enumeration are used by the PromptStyle(PromptVolume) constructor, by the AppendText(String, PromptVolume) method, and by the StartStyle(PromptStyle) method to specify the volume level for spoken text. The Volume property gets the volume for a PromptStyle object using a PromptVolume instance.",1,0,0,0,0,0,0,0,0,0,0,0
"Indicates a medium volume level.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum SayAs Summary: Enumerates the content types for the speaking of elements such as times, dates, and currency. Remarks: The AppendTextWithHint(String, SayAs) method uses members of the SayAs enumeration to specify the content type of the appended text, which the speech synthesis engine can use to inform its pronunciation.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<VisemeReachedEventArgs> VisemeReached Summary: Raised when a viseme is reached. Remarks: A viseme is the basic position of the mouth and face when pronouncing a phoneme. Visemes are visual representations of phonemes. System.Speech supports 21 visemes for US English, each of which corresponds to one or more phonemes. VisemeReached events are raised when a new phoneme reached has a different corresponding viseme than the previous phoneme reached. Since some visemes represent more than one phoneme, a VisemeReached event is not generated if the next phoneme reached corresponds to the same viseme as the previous phoneme. For example, for the spoken words this zone\"",1,0,1,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum SynthesisMediaType Summary: Enumerates the types of media files. Remarks: The constructors of the FilePrompt class use SynthesisMediaType to indicate the media type of the file from which the prompt will be constructed.",0,1,0,1,0,0,0,0,0,0,0,0
"Indicates that the media type is Text.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class VoiceChangeEventArgs : PromptEventArgs Summary: Returns data from the VoiceChange event. Remarks: An instance of VoiceChangeEventArgs is created when the SpeechSynthesizer object raises the VoiceChange event. To obtain the identity of the new Voice, access the Voice property in the handler for the event. You can change the voice in use by the SpeechSynthesizer with any of the PromptBuilder's StartVoice methods or the SpeechSynthesizer's SelectVoice or SelectVoiceByHints methods. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,0,0,0,0
"Small word break.",1,0,0,0,0,0,0,0,0,0,0,0
"Requests that the associated TextFragment should be processed and spoken. This is the default value of TtsEngineAction for a TextFragment, Corresponds to the <speak> XML tag in the SSML specification",1,0,0,0,0,0,0,0,0,0,0,0
"Indicates that TextFragment is to be used as the contents of a bookmark. Corresponds to the <mark> XML tag in the SSML specification.",1,0,0,0,0,0,0,0,0,0,0,0
"Identifies events generated when a speech synthesize engine encounters the end of its input stream while speaking.",0,0,0,0,0,0,0,0,0,0,0,0
"Identifies events generated when a speech synthesize engine completes a sentence while speaking.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class CommittableTransaction : Transaction, IAsyncResult Summary: Describes a committable transaction. Remarks: The CommittableTransaction class provides an explicit way for applications to use a transaction, as opposed to using the TransactionScope class implicitly. Unlike the TransactionScope class, the application writer needs to specifically call the Commit and Rollback methods in order to commit or abort the transaction. However, only the creator of a transaction can commit the transaction. Therefore, copies of a committable transaction, obtained through the Clone method are not committable. Note It is recommended that you create implicit transactions using the TransactionScope class, so that the ambient transaction context is automatically managed for you. You should also use the TransactionScope and DependentTransaction class for applications that require the use of the same transaction across multiple function calls or multiple thread calls. For more information on this model, see the Implementing An Implicit Transaction Using Transaction Scope topic. Creating a CommittableTransaction does not automatically set the ambient transaction, which is the transaction your code executes in. You can get or set the ambient transaction by calling the static Current property of the global Transaction object. For more information on ambient transactions, see the # Managing Transaction Flow using TransactionScopeOption# section of the Implementing An Implicit Transaction Using Transaction Scope topic. If the ambient transaction is not set, any operation on a resource manager is not part of that transaction. You need to explicitly set and reset the ambient transaction, to ensure that resource managers operate under the right transaction context. Until a CommittableTransaction has been committed, all the resources involved with the transaction are still locked. A CommittableTransaction object cannot be reused. Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context. Example: The following sample creates two new instances of CommittableTransaction, commits and rolls back them respectively. ThreadSafety: This type is thread safe.",0,0,1,1,0,0,1,1,0,0,1,1
"Additional online Documentation: Syntax: public override IPermission Union( IPermission target ) Parameters targetType: System.Security.IPermission A permission to combine with the current permission. It must be of the same type as the current permission. Return Value Type: System.Security.IPermission An IPermission that represents the union of the current permission and the specified permission. Implements IPermission.Union(IPermission) Summary: Creates a permission that is the union of the current permission and the specified permission.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IEnlistmentNotification Summary: Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation. Remarks: In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager. The Transaction class defines a set of methods whose names begin with Enlist that provide this functionality. The different Enlist methods correspond to the different types of enlistment that a resource maanger may have. This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation. For each resource manager's implementation of the IEnlistmentNotification interface, you should enlist it using the EnlistVolatile method or the EnlistDurable method of the Transaction class, depending on whether your resource is volatile or durable. For more information on enlistment and 2PC, see Enlisting Resources As Participants In A Transaction and Committing A Transaction In Single-Phase and Multi-Phase respectively. The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods. Method Description Prepare This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction. Commit This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited. Rollback This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back). InDoubt This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt. Note You should be aware that notifications might not be sent sequentially, or in a particular order. Example: The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the EnlistVolatile method.",1,1,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class SubordinateTransaction : Transaction Summary: Represents a non-rooted transaction that can be delegated. This class cannot be inherited. Remarks: This class derives from Transaction and provides a constructor that takes an implementation of the ISimpleTransactionSuperior interface. Instances of this type are not the root transaction but can be delegated. ThreadSafety: This type is thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class Transaction : IDisposable, ISerializable Summary: Represents a transaction. Remarks: The System.Transactions namespace provides both an explicit programming model based on the Transaction class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure. It is highly recommended that you use the easier implicit model for development. To get started, please see the Implementing An Implicit Transaction Using Transaction Scope topic. For more information on writing a transactional application, see Writing A Transactional Application. The Transaction class contains methods used by developers implementing resource managers for enlistment. It also provides functionalities for cloning a transaction and controlling the current transaction context. You can obtain the current transaction, if one is set, using the static Current property. ThreadSafety: This type is thread safe.",1,0,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the TransactionAbortedException class.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class TransactionException : SystemException Summary: The exception that is thrown when you attempt to do work on a transaction that cannot accept new work. Remarks: TransactionException is a recoverable error, and all the exceptions thrown by the System.Transactions infrastructure derive from this exception. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class TransactionInDoubtException : TransactionException Summary: The exception that is thrown when an operation is attempted on a transaction that is in doubt, or an attempt is made to commit the transaction and the transaction becomes InDoubt. Remarks: This exception is thrown when an action is attempted on a transaction that is in doubt. A transaction is in doubt when the state of the transaction cannot be determined. Specifically, the final outcome of the transaction, whether it commits or aborts, is never known for this transaction. This exception is also thrown when an attempt is made to commit the transaction and the transaction becomes InDoubt. This is a recoverable error. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public TimeSpan Timeout { get; set; } Property Value Type: System.TimeSpan A TimeSpan value that specifies the timeout period for the transaction. Summary: Gets or sets the timeout period for the transaction. Remarks: This property contains the maximum amount of time that the scope can be in existence, before it aborts the transaction.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the TransactionScope class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum TransactionScopeOption Summary: Provides additional options for creating a transaction scope. Remarks: The TransactionScopeOption enumeration is passed to the various constructors of the TransactionScope class to define the transactional behavior of the scope. For more information on how this enumeration is used, see the #Managing Transaction Flow using TransactionScopeOption# section in Implementing An Implicit Transaction Using Transaction Scope.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual void Set( string name, Object value ) Parameters nameType: System.String The name of the object to update. valueType: System.Object The updated value of the object. Summary: When overridden in a derived class, updates the value of an object in the collection.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual bool CanInitiateVoiceCall { get; } Property Value Type: System.Boolean true if the browser device is capable of initiating a voice call; otherwise, false. Summary: When overridden in a derived class, gets a value that indicates whether the browser device is capable of initiating a voice call.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual bool Win32 { get; } Property Value Type: System.Boolean true if the client is a Win32-based computer; otherwise, false. Summary: When overridden in a derived class, gets a value that indicates whether the client is a Win32-based computer.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public override bool Crawler { get; } Property Value Type: System.Boolean true if the browser is a search-engine crawler; otherwise, false. The default is false. Summary: Gets a value that indicates whether the browser is a search-engine Web crawler.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override bool EvaluateFilter( string filterName ) Parameters filterNameType: System.String The filter to evaluate. Return Value Type: System.Boolean true if the filter was successfully evaluated; otherwise, false. Implements IFilterResolutionService.EvaluateFilter(String) Summary: Used internally to evaluate a filter.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override bool RequiresHtmlAdaptiveErrorReporting { get; } Property Value Type: System.Boolean true if the browser requires nonstandard error messages; otherwise, false. The default is false. Summary: Gets a value that indicates whether the browser requires nonstandard error messages.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override bool SupportsXmlHttp { get; } Property Value Type: System.Boolean true if the browser supports receiving XML over HTTP; otherwise, false. The default is false. Summary: Gets a value that indicates whether the browser supports receiving XML over HTTP.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void SetNoTransforms() Summary: Sets the Cache-Control: no-transform HTTP header.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override void SetVaryByCustom( string custom ) Parameters customType: System.String The text string to vary cached output by. Summary: Specifies a text string to vary cached output responses by.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual Cache Cache { get; } Property Value Type: System.Web.Caching.Cache The cache for the current application domain. Summary: When overridden in a derived class, gets the Cache object for the current application domain.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class HttpPostedFileBase Summary: Serves as the base class for classes that provide access to individual files that have been uploaded by a client. Remarks: The HttpPostedFileBase class is an abstract class that contains the same members as the HttpPostedFile class. The HttpPostedFileBase class lets you create derived classes that are like the HttpPostedFile class, but that you can customize and that work outside the ASP.NET pipeline. When you perform unit testing, you typically use a derived class to implement members that have customized behavior that fulfills the scenario you are testing. The HttpPostedFileWrapper class derives from the HttpPostedFileBase class. The HttpPostedFileWrapper class serves as a wrapper for the HttpPostedFile class. At run time, you typically use an instance of the HttpPostedFileWrapper class to call members of the HttpPostedFile object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class HttpRequestWrapper : HttpRequestBase Summary: Encapsulates the HTTP intrinsic object that enables ASP.NET to read the HTTP values that are sent by a client during a Web request. Remarks: The HttpRequestWrapper class derives from the HttpRequestBase class and serves as a wrapper for the HttpRequest class. This class exposes the functionality of the HttpRequest class and exposes the HttpRequestBase type. The HttpRequestBase class enables you to replace the original implementation of the HttpRequest class in your application with a custom implementation, such as when you perform unit testing outside the ASP.NET pipeline. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override NameValueCollection Headers { get; } Property Value Type: System.Collections.Specialized.NameValueCollection The response headers. Summary: Gets the collection of response headers.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Writes the specified file to the HTTP response output stream.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Encodes a string to include only characters that are valid in a URL.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the MembershipCreateUserException class.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class MembershipProvider : ProviderBase Summary: Defines the contract that ASP.NET implements to provide membership services using custom membership providers. Remarks: ASP.NET membership is designed to enable you to easily use a number of different membership providers for your ASP.NET applications. You can use the supplied membership providers that are included with the .NET Framework, or you can implement your own provider. Note If you are not familiar with the membership features of ASP.NET, see Introduction to Membership before continuing. For a list of other topics related to membership, see Managing Users by Using Membership. When implementing a custom membership provider, you are required to inherit the MembershipProvider abstract class. There are two primary reasons for creating a custom membership provider. You need to store membership information in a data source that is not supported by the membership providers included with the .NET Framework, such as a FoxPro database, an Oracle database, or other data source. You need to manage membership information using a database schema that is different from the database schema used by the providers that ship with the .NET Framework. A common example of this would be membership data that already exists in a SQL Server database for a company or Web site. The MembershipProvider abstract class inherits from the ProviderBase abstract class. MembershipProvider implementations must also implement the required members of ProviderBase. Topic Location How to: Sample Membership Provider Implementation Building ASP .NET Web Applications How to: Implement a Custom Membership User Building ASP .NET Web Applications Implementing a Membership Provider Building ASP .NET Web Applications How to: Sample Membership Provider Implementation Building ASP .NET Web Applications Implementing a Membership Provider Building ASP .NET Web Applications How to: Implement a Custom Membership User Building ASP .NET Web Applications ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public virtual string Comment { get; set; } Property Value Type: System.String Application-specific information for the membership user. Summary: Gets or sets application-specific information for the membership user. Remarks: The Comment property can be used to store custom information for a membership user that is specific to an application. The amount of information that can be stored in the Comment property for a MembershipUser is defined by the membership provider referenced by the ProviderName property. If your application requires more space to store user information than is allowed by the membership provider, you can implement a custom membership provider, or use the user System.Web.Profile.",1,0,0,1,0,0,1,1,0,0,1,1
"Additional online Documentation: Summary: Gets the password for the membership user from the membership data store.",0,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public abstract class RoleProvider : ProviderBase Summary: Defines the contract that ASP.NET implements to provide role-management services using custom role providers. Remarks: ASP.NET role management is designed to enable you to easily use a number of different role providers for your ASP.NET applications. You can use the supplied role providers that are included with the .NET Framework, or you can implement your own provider. When implementing a custom role provider, you are required to inherit the RoleProvider abstract class. There are two primary reasons for creating a custom role provider. You need to store role information in a data source that is not supported by the role providers included with the .NET Framework, such as a FoxPro database, an Oracle database, or other data sources. You need to manage role information using a database schema that is different from the database schema used by the providers that ship with the .NET Framework. A common example of this would be role data that already exists in a SQL Server database for a company or Web site. Topic Location How to: Sample Role-Provider Implementation Building ASP .NET Web Applications Implementing a Role Provider Building ASP .NET Web Applications How to: Sample Role-Provider Implementation Building ASP .NET Web Applications Implementing a Role Provider Building ASP .NET Web Applications ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] [BindableAttribute(false)] public virtual string AxisXName { get; set; } Property Value Type: System.String A string value that represents the name of the X axis which an annotation is attached to. Summary: Gets or sets the name of the X axis to which an annotation is attached.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] [TypeConverterAttribute(typeof(ColorConverter))] public override Color ShadowColor { get; set; } Property Value Type: System.Drawing.Color A Color value used to draw the shadow of an annotation. Summary: Gets or sets the color of the annotation's shadow.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class AnnotationSmartLabelStyle : SmartLabelStyle Summary: Stores the smart label properties of an annotation. Remarks: This class is derived from the SmartLabelStyle class used for Series objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public double MeanSquareVarianceWithinGroups { get; } Property Value Type: System.Double A double value. Summary: Gets the mean square variance within groups.",1,0,0,0,0,0,0,0,0,0,0,1
"The axis is always enabled.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class AxisScaleBreakStyle Summary: Represents a scale break on the Y-axis of the chart. Remarks: Scale breaks are intentional discontinuities on the Y-axis that are most often used to redistribute the data points in a series on a chart. This feature improves readability when there are large differences between the high and low values of the data in one series being plotted. Scale breaks are not drawn for differences between data in multiple series. By default, scale breaks are disabled. You can enable scale breaks on the Y-axis by setting the Enabled property to true. To change the amount of vertical space of the scale break, you can specify a Spacing value. This is calculated as a percentage of the Y-axis scale. You must have sufficient separation between ranges of data points in a single series to draw a scale break. By default, a scale break can be added only if there is a separation between the data ranges of at least 25% of the chart. If you enable a scale break but it does not appear, even though there is sufficient distance between the data ranges, you can set the CollapsibleSpaceThreshold property to a value less than 25. Charts support up to five scale breaks per chart; however, the chart can become unreadable if you display more than one scale break. If you have more than two data ranges, consider using a different method for displaying this data. Use the MaxNumberOfBreaks property to reduce the number of scale breaks that can be displayed on the chart. When a scale break is used, the Y-axis labels may become offset. To disable the label offset, set the IsStaggered property to false. Scale breaks are not supported under any of the following conditions: Pie, doughnut, funnel, pyramid, radial or any stacked chart types are used. Custom intervals for labels, tick marks or grid lines are enabled.  The minimum or maximum value for the axis is set. Custom labels are used. A logarithmic Y-axis is specified. Axis views on the Y-axis, which include scrolling and zooming, are used. 3-D charts are used. Example: The following code example demonstrates how to enable and customize a scale break after the Chart control has been added to the design surface. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public double ViewMinimum { get; } Property Value Type: System.Double A double that represents the minimum axis value for the data view. Summary: Gets the minimum axis value of a data view.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [PersistenceModeAttribute(PersistenceMode.Attribute)] [BindableAttribute(true)] [TypeConverterAttribute(typeof(ColorConverter))] public Color BackImageTransparentColor { get; set; } Property Value Type: System.Drawing.Color A Color value. Summary: Gets or sets a color that is replaced with a transparent color when the background image of a border skin frame is drawn.",1,0,0,0,0,0,0,0,0,0,0,0
"Use a raised border skin.",0,0,0,0,0,0,0,0,0,0,0,1
"Use a thin border skin with square inside corners and rounded outside corners.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public override Unit BorderWidth { get; set; } ASP.NET Copy <asp:Chart BorderWidth=#Unit# /> Property Value Type: System.Web.UI.WebControls.Unit An integer value that determines the border width, in pixels, of the chart. Summary: Gets or sets the width of the chart border. Remarks: To get or set the border width, use BorderlineWidth instead.",1,0,1,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<CustomizeMapAreasEventArgs> CustomizeMapAreas ASP.NET Copy <asp:Chart OnCustomizeMapAreas=#EventHandler# /> Summary: Occurs just before the chart image map is rendered. Use this event to customize the map areas items. Remarks: The MapAreaItems property of the CustomizeMapAreasEventArgs class can be used to: Delete or modify map items that have automatically been created for a chart object; any data point, series, legend item or strip line object that has a non-empty Url, MapAreaAttributes or ToolTip property will have an associated map area object. Add custom map areas that have a user-defined shape and coordinates. Note The sender argument of type Chart is read-only.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(false)] [BrowsableAttribute(false)] [PersistenceModeAttribute(PersistenceMode.Attribute)] [TypeConverterAttribute(typeof(ColorConverter))] public override Color ForeColor { get; set; } ASP.NET Copy <asp:Chart ForeColor=#Color# /> Property Value Type: System.Drawing.Color A Color value. Summary: Gets or sets the text color of the Chart control. Remarks: This property is not applicable to this class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Determines the chart element, if any, that is located at a point defined by the given X and Y coordinates. Remarks: Call this method to determine the chart element, if any, that is located at a specified point. This method is often used in some mouse-related event-for example, MouseDown-to determine which chart element the end-user clicked. The X and Y mouse coordinates obtained from the event parameters are then used for the x and y parameter values of this method call. The properties of the returned HitTestResult object can then be used to determine which chart element was clicked; the HitTestResult object also provides an instance of the actual object selected, if any.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [BindableAttribute(true)] [BrowsableAttribute(false)] [PersistenceModeAttribute(PersistenceMode.InnerProperty)] public Axis AxisX { get; set; } Property Value Type: System.Web.UI.DataVisualization.Charting.Axis An Axis object that represents the primary X-axis. Summary: Gets or sets an Axis object that represents the primary X-axis. Remarks: Use this property to manipulate the primary X-axis in the chart area.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [PersistenceModeAttribute(PersistenceMode.Attribute)] [BindableAttribute(true)] public ChartImageAlignmentStyle BackImageAlignment { get; set; } Property Value Type: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle A ChartImageAlignmentStyle enumeration value. The default value is TopLeft. Summary: Gets or sets the alignment of a ChartArea background image. Remarks: This property determines the alignment of the background image for the chart area, and is only applied when the ChartImageWrapMode property is set to Unscaled. For more information about the available alignments, see the ChartImageAlignmentStyle enumeration topic.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class ChartArea3DStyle Summary: Manages the display attributes for three-dimensional (3D) chart areas. Remarks: This class provides the styles for 3D chart areas, and is exposed using the Area3DStyle property. To enable 3D for a chart area, set the Enable3D property to true. This causes 3D to be applied to all data series drawn in a chart area. An isometric projection of a chart area can be displayed by setting the IsRightAngleAxes property to true, which is the default. Isometric views are not actually 3D, because the displayed angles of rotation may not match the actual angles of rotation around the vertical and horizontal axes. The actual angles are controlled using the Rotation and Inclination properties, respectively. For more information about isometric projections, see the Remarks section of the IsRightAngleAxes property. You can also use this class to: Cluster bar and column chart data series using the IsClustered property. Control the lighting effects using the LightStyle property. Set the width of chart area walls using the WallWidth property. Set the amount of perspective with the Perspective property. Control the depth of data points and the distance between data rows using the PointDepth and PointGapDepth properties, respectively. Rotate a chart area using the Inclination and Rotation properties. To work with coordinates of 3D points, use the Point3D class. When a chart is set to 3D, the following chart features are not valid: Scale breaks Gradients Scrolling and zooming ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(true)] public int Rotation { get; set; } Property Value Type: System.Int32 An integer value. Summary: Gets or sets the angle of rotation around the vertical axes for 3D chart areas.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class ChartElementCollection<T> : Collection<T>, IDisposable where T : ChartElement Type Parameters T Summary: Represents the base class for all chart element collections. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ChartGraphics : ChartElement Summary: Provides numerous conversion functions and exposes a GDI+ Graphics object. Remarks: This class provides numerous conversion functions and also exposes a GDI+ Graphics object. Note that when rendering as Scalable Vector Graphics (SVG), use of the Graphics object for custom drawing will not be included as part of the SVG document. Note also that, by default, Graphics functions usually take absolute coordinates. Therefore the conversion methods of this class should be useful if you perform drawing operations. A ChartGraphics object is exposed in the ChartGraphics property of the ChartPaintEventArgsclass, which makes it easy to perform custom drawing in the PrePaint and PostPaint events. Important If significant changes are made to the default behavior of the Graphics object, the chart image and its associated elements may be drawn erratically. For example, positioning may be altered. It is highly recommended that you become well acquainted with GDI+ before you make any significant changes to the properties of the Graphics object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Forward diagonal style.",0,0,0,0,0,0,0,0,0,0,0,1
"Percent30 style.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: void IHttpHandler.ProcessRequest( HttpContext context ) Parameters contextType: System.Web.HttpContext An HttpContext object that provides references to intrinsic server objects such as Request, Response, Session, and Server. Used to service HTTP requests. Implements IHttpHandler.ProcessRequest(HttpContext) Summary: Enables HTTP web requests to be processed by a custom HTTP handler that implements the IHttpHandler interface.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum ChartImageAlignmentStyle Summary: Specifies the image alignment for a chart background image.",1,0,0,0,0,0,0,0,0,0,0,0
"The image is aligned in the center of the chart element.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum CompareMethod Summary: Specifies the type of comparison to be used when filtering data. This enumeration is used by the Filter method definitions in the DataManipulator class that take the CompareMethod argument. Remarks: The CompareMethod enumeration represents a comparison type for certain filtering operations. Note By default, if the filtering criteria are met, a data point is either removed or marked as empty. However, data points can be filtered even if they do not match the filtering criteria, by setting the FilterMatchedPoints property to false.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class CustomizeLegendEventArgs : EventArgs Summary: Provides data for the CustomizeLegend event of the Chart control. Remarks: The CustomizeLegendEventArgs class is used in the CustomizeLegend event. There are only two properties in this class. The LegendItems property allows you to delete or modify both default and custom legend items, and to add custom legend items. This property can also be used to change the order of legend items. The LegendName property is used to identify the legend that raised this event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class CustomLabel : ChartNamedElement, IChartMapArea Summary: Represents a custom label for an axis. Remarks: CustomLabel objects are stored in the CustomLabelsCollection class, which is exposed as the CustomLabels property of the Axis class. Axis labels for the first label row are automatically generated unless custom labels are specified using the CustomLabels property. If you specify a custom label along the first label row, no axis labels will be automatically generated for the entire first row. Only custom labels may be used for the second label row. The ToPosition and FromPosition properties determine the axis range that the label applies to. A grid line and/or tick mark can be displayed for a custom axis label by using the GridTicks property; this property specifies whether a custom grid line or tick mark will be drawn in the middle of the label range. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(true)] public GridTickTypes GridTicks { get; set; } Property Value Type: System.Web.UI.DataVisualization.Charting.GridTickTypes A GridTickTypes enumeration value. Summary: Gets or sets a property that specifies whether custom tick marks and grid lines will be drawn in the center of the label.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class DataFormula Summary: Provides properties and methods to prepare series data for technical analysis, apply formulas on the series data and prepare output data to be displayed as a chart. The actual calculations are performed in the StatisticFormula class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public DataManipulator() Summary: Initializes a new instance of the DataManipulator class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void SetValueY( params Object[] yValue ) Parameters yValueType: System.Object() The Y-value(s) of a DataPoint object in the collection. Formatted as one or more values separated by commas. Summary: Sets the Y-value(s) of a single data point. Remarks: The SetValueY property is used to set the Y-value(s) of a data point at run time. Only one Y-value per point is required for all chart types except for bubble, candlestick and stock charts. These chart types require more than one Y-value because one data point consists of multiple values. For example, to plot one stock chart column, four values are required: high, low, open and close values. This property returns an array of double values when used to retrieve multiple Y-values. Important The YValuesPerPoint property determines the maximum number of Y-values that all data points in a Series can have. If you specify more than the allowable number of Y-values, an exception will be raised. Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter: String DateTime Double Decimal Single Int32 UInt32 Int64 UInt64",1,0,0,0,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ThemeableAttribute(false)] public class DataPointCollection : ChartElementCollection<DataPoint> Summary: Represents a collection of DataPoint objects. Remarks: The DataPointCollection class represents a collection of DataPoint objects, which in turn represent the data points that are part of a Series object. This collection class is implemented as the Points property of a Series object. DataPoint objects can be appended or inserted into the collection with their X-value and Y-value(s) already specified as parameters. Note that they are also added automatically when a series is bound to a data source using either the DataBindY or DataBindXY method. Data points are plotted in the order that they occur in this collection only if the series that the collection belongs to has its IsXValueIndexed property set to true (the default value is false), or if all X-values for all data points are zero. Otherwise data points are plotted using their X-values. Data points can be located, and manipulated, based on maximum, minimum or specified X or Y-values using the overloaded FindMaxValue, FindMinValue or FindValue methods, respectively. The Count property indicates the total number of items in the collection, and is commonly used to find the upper bound of the collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public enum DateRangeType Summary: Specifies a date/time interval that determines the ranges that will be filtered when you invoke one of the Filter method definitionsfound in the DataManipulator class. Remarks: The DateRangeType enumeration is passed in the DateRange parameter of some Filter methods, which combined with the rangeElements parameter determines the date/time ranges that are filtered.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum FinancialFormula Summary: Specifies a financial formula. Remarks: The FinancialFormula enumeration is used in calls to the FinancialFormula methods that are contained in the DataFormula class, and specifies the type of financial formula to be used.",1,1,0,0,0,0,0,0,0,0,0,1
"Typical Price is the average value of daily prices, and can be used as a filter for trend indicators.",1,0,0,0,1,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum GridTickTypes Summary: Specifies the options for displaying a grid line or a tick mark for a custom label. Remarks: The GridTickTypes enumeration is used in conjunction with the GridTicks property to display a grid line and/or a tick mark for a custom label.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public ChartElementType ChartElementType { get; set; } Property Value Type: System.Web.UI.DataVisualization.Charting.ChartElementType A ChartElementType enumeration value that indicates the type of chart element returned by a hit test. Defaults to Nothing. Summary: Gets or sets the type of chart element, if any, returned by a hit test. Remarks: Use this property to determine the type of chart element, if any, returned by a hit test.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: Object Tag { get; set; } Property Value Type: System.Object An Object that represents the custom data tag. Summary: Gets or sets custom data for the map area.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ImageAnnotation : Annotation Summary: Represents an image annotation. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public override ChartDashStyle LineDashStyle { get; set; } Property Value Type: System.Web.UI.DataVisualization.Charting.ChartDashStyle A ChartDashStyle enumeration value. Summary: This property is not applicable to the image annotation type. Remarks: This property is not applicable to the image annotation type.",0,0,1,0,0,0,0,0,0,0,0,1
"Label is aligned to the bottom-right of the data point.",0,0,0,0,0,0,0,0,0,0,0,0
"Line will terminate to a box drawn around the label text.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class LabelStyle : ChartElement Summary: Provides properties that define the visual appearance of the axis labels. Remarks: Members of this class are also used to calculate the intervals and positions of the axis labels, and to draw them. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class Legend : ChartNamedElement Summary: Represents the legend for the chart image. Remarks: The Legend class encapsulates all the functionality of the Chart control's legend, and is exposed using the Legends collection property of the root Chart object. There can be any number of legends for a chart image. Legends can: Be docked and aligned. Be displayed inside or outside the plotted chart areas. Automatically fit their contents. Use a predefined style, such as row, column or table. Use hatching, gradient colors and background images. Be sized and positioned anywhere within the chart image. Legend items are represented by the LegendItem object, and are either default or custom items. Custom items are not associated with data, and can be added, deleted and modified using the CustomItems property. Default items are by default automatically added to the legend, and are the names of the plotted data points for doughnut and pie charts. For all other chart types, the default items are the names of the plotted data series. Each series has a Legend property that defines the name of the legend that will be used. A legend item will not be created for a series if the IsVisibleInLegend property is set to false. The text for these default items can be changed using the LegendText property. This property will allow you to specify predefined keywords that will be replaced by their appropriate values at run-time. If you have a pie chart and you set the Label property, it will also set the legend text to the value you set for the labels. If you want to set the text to a different value, you can set the LegendText property. In most cases, you would want to set the LegendText property to #\#AXISLABEL# or #\#VALX#. Legend series symbols are rectangles, dots or lines. The symbol type is set automatically by the chart and depends on the plotted chart type. Legend text by default is automatically sized. You can disable automatic sizing of legend text by disabling the IsTextAutoFit property. When this property is set to false, the size of the legend text is determined by the Size property of the legend Font. If the IsTextAutoFit property is enabled, the AutoFitMinFontSize property determines the minimum font size that a legend item can have when resizing. The TextWrapThreshold property defines a limit on the number of characters that can be shown on one line before text is wrapped to another line. If you do not wish to wrap text in the legend, set the value of the TextWrapThreshold property to zero. By default, when the entire legend text does not fit in the legend, the text will be truncated. You can set the TextWrapThreshold on the legend to get the text to wrap instead of being truncated. If the contents of the legend cannot fit into the given space, legend entries are truncated. An ellipsis will be shown to indicate that there are more entries than the legend has space for. To prevent the legend items from being truncated,, set the position and size of the legend using the Position and Size properties, respectively. When setting the legend position or size, the chart can no longer automatically position the elements in the chart. In some cases, you many need to manually position other chart elements to achieve the desired appearance. Another option would be to define your own cell columns instead of using the default legend settings. The Legend object has a CellColumn Collection; each CellColumn object represents a column in the Legend. A cell column has MaximumWidth and MinimumWidth properties that can be used to adjust the size of the columns. When the legend contains many entries, InterlacedRows can be used to improve readability. When this property is set to True, it will display a back color that you can set using the InterlacedRowsColor property. By default, the legend is positioned in the top-right corner of the chart. This position can be modified by using the Docking and Alignment properties of the legend. The legend can also be associated with a chart area by use of the DockedToChartArea property. This property specifies the name of the chart area for which the legend should be docked. In addition, the IsDockedInsideChartArea property can be used to display the legend inside a chart area. When IsDockedInsideChartArea is set to False, the MaximumAutoSize property defines the maximum size, in percent, of the legend within the available chart when the legend is automatically positioned. This property should be set if you wish to adjust the width or height of the legend after the docking properties have been set. The legend can be modified using the CustomizeLegend event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public virtual string ToolTip { get; set; } Property Value Type: System.String A string value that represents the tooltip for the legend cell column. The default value is a zero-length string. Implements IChartMapArea.ToolTip Summary: Gets or sets the tooltip text for the legend cell column. Remarks: Setting this property will have no effect if the IsMapEnabled property is set to false. The default value is true. Important   To create an image map in this manner, the RenderType property of the Chart object must be set to ImageTag. It is possible to create an image map when using binary streaming, but another technique must be used. If the ToolTip property is set for both a legend item and a legend cell, the legend cell property has precedence. This ToolTip property allows you to set special keywords to display different types of chart-related data. To create image maps that have user-defined coordinates, use the MapAreas property of the root Chart object.",0,0,1,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: [BindableAttribute(true)] [PersistenceModeAttribute(PersistenceMode.Attribute)] public string Image { get; set; } Property Value Type: System.String A string value that represents the URL of an image file. The default value is an empty string. Summary: Gets or sets the image that will be displayed for a legend item symbol. Remarks: This property determines the image file to be used for the LegendItem symbol. The path can be an absolute or a relative URL. If you set a background image, that image will be displayed regardless of the ImageStyle property setting. Set the BackImageTransparentColor property to enable one color used by the image to appear transparent. Note This property is applicable only to LegendCell objects with a LegendCellType of either SeriesSymbol or Image.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: [TypeConverterAttribute(typeof(ColorConverter))] [PersistenceModeAttribute(PersistenceMode.Attribute)] [BindableAttribute(true)] public Color MarkerColor { get; set; } Property Value Type: System.Drawing.Color A T[:System.Drawing.Color] value. The default color is Empty. Summary: Gets or sets the color of the markers, if used. Remarks: This property is applicable only to LegendCell objects with a LegendCellType of either SeriesSymbol or Image.",1,0,1,0,0,0,0,0,0,0,0,0
"Items are added to the legend in the reverse order of items added to the chart series.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class LegendItemsCollection : ChartElementCollection<LegendItem> Summary: Represents a collection of LegendItem objects. Remarks: The LegendItemsCollection class represents a collection of LegendItem objects, which in turn represent items in a legend. This collection class is exposed in two ways: As the CustomItems object property of the Legend object, which can be used to add, delete or modify custom legend items. The term #custom# refers to legend items that have user-defined text, symbol color, and so forth. In comparison, #default# legend items are items that are automatically inserted into the legend and represent a data series or data point. Default legend item entries for pie and doughnut charts represent the plotted data points, whereas item entries for all other chart types represent the plotted series. The CustomItems property is available at both design time and run time. In the CustomizeLegend event, as the LegendItems property of the CustomizeLegendEventArgs parameter. The LegendItems property stores both default legend items and custom legend items that have been added to the Chart control at design time. Legend items can be modified or deleted; in addition, their order can be changed. To add legend items to the collection, use one of the overloaded Add and Insert methods in this class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public override Font Font { get; set; } Property Value Type: System.Drawing.Font A Font object. Summary: This property is not applicable to the line annotation type.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum MapAreaShape Summary: Specifies the shape of a map area. Remarks: The MapAreaShape enumeration represents the shape of a MapArea object. This enumeration is usually used to set the shape of a custom map area. A custom map area has user-defined coordinates and shape, as opposed to a map area that represents a chart element, which has a shape that is determined by the element it represents.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public class NamedImage : ChartNamedElement Summary: Represents named images, which are stored in the NamedImagesCollection. Remarks: The NamedImage class represents an image that has a unique name, and is useful when an image is dynamically created using a particular drawing routine, and then specified as the image for one of the image properties of the Chart control. The Name property determines the unique name of a NamedImage object. The Image property determines its associated image, which can be any object derived from the .NET Framework Image class. When one of the image properties of the Chart control is set by specifying a string value, the Images collection property is first checked to determine whether an image with the specified name exists. If a matching NamedImage object is found, this image is used. If a matching NamedImage object is not located, the string value is treated as a URL, image resource name, or an image path. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class RectangleAnnotation : TextAnnotation Summary: Represents a rectangle annotation. Remarks: A rectangle annotation can display text inside the rectangle, in addition to being displayed as a rectangle only. So you can annotate using a rectangle or a rectangle with text inside it. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [BindableAttribute(true)] [BrowsableAttribute(false)] public override string AnnotationType { get; } Property Value Type: System.String The annotation type. Summary: Gets the annotation type. Remarks: For internal use, should not be used.",0,0,1,0,0,0,0,0,0,0,0,1
"Serialize all appearance properties, such as color or line style, if they have non-default values",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation:",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [PersistenceModeAttribute(PersistenceMode.Attribute)] [BindableAttribute(true)] public StringAlignment TextAlignment { get; set; } Property Value Type: System.Drawing.StringAlignment A StringAlignment value that represents the alignment of the strip line text. Summary: Gets or sets the text alignment of the strip line. Example: The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [BindableAttribute(true)] [PersistenceModeAttribute(PersistenceMode.Attribute)] public TextOrientation TextOrientation { get; set; } Property Value Type: System.Web.UI.DataVisualization.Charting.TextOrientation A TextOrientation value that represents the alignment of the text orientation. Summary: Gets or sets the text orientation. Remarks: When this property is set to a value of Auto, the text is oriented based on the chart type. For all X-Y chart types other than Bar, X-axis strip line text is oriented horizontally from left to right on the bottom of the strip line. For Bar charts, X-axis strip line text is oriented vertically from top to bottom to the right of the strip line. Example: The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public enum TextStyle Summary: Specifies text drawing styles.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class TitleCollection : ChartNamedElementCollection<Title> Summary: Represents a collection of Title objects. Remarks: The TitleCollection class is implemented as the Titles collection property of the root Chart object. Title objects can be appended, inserted or removed from the collection at design time and run time. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public VerticalLineAnnotation() Summary: Initializes a new instance of the VerticalLineAnnotation class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class DynamicFieldDesigner : DataControlFieldDesigner Summary: Provides design-time support in a visual designer for the DynamicField object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public DynamicFieldDesigner() Summary: Initializes a new instance of the DynamicFieldDesigner class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class DataControlReference Summary: Enables the DynamicDataManager to declaratively define data controls that it manages. Example: The following example shows the markup from a Dynamic Data page template that connects the DynamicDataManager to a FormView control. Note Some markup is removed for clarity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class DataControlReferenceCollection : Collection<DataControlReference> Summary: Represents a collection of MenuItemBinding objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class DefaultAutoFieldGenerator : IAutoFieldGenerator Summary: Generates dynamic data fields (columns) for data-bound controls automatically. Remarks: You can override the DefaultAutoFieldGenerator class to customize how Dynamic Data generates data fields. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Determines whether table metadata is available.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(DynamicDataManager), #DynamicDataManager.bmp#)] public class DynamicDataManager : Control ASP.NET Copy <asp:DynamicDataManager /> Summary: Enables dynamic behavior for ASP.NET Web controls that support ASP.NET Dynamic Data. Remarks: In this topic: Introduction Declarative Syntax Introduction The DynamicDataManager control provides the glue between the data-bound control, the data source control, and Dynamic Data in the following ways: Sets a field generator for the data-bound control to create the correct column set when AutoGenerateColumns is set to true. The data-bound control can be a GridView control, a DetailsView control, or a FormView control. Sets the context type and table name for the data source control. The data source control for LINQ-to-SQL is LinqDataSource. The data source control for the ADO Entity Framework is EntityDataSource. Sets the AutoGenerateWhereClause to true for the data source if there is no Where clause. Expands the special dynamic parameters such as DynamicControlParameter into parameters that the data source can consume. If the LINQ-to-SQL AutoLoadForeignKeys property is set to true, loads the foreign keys. The DynamicDataManager control must be included on a page in order for data controls to use Dynamic Data support. The markup for the DynamicDataManager control must precede the markup for any controls that use Dynamic Data support. Note A DynamicDataManager control cannot be put inside an UpdatePanel control. Declarative Syntax Example: The following example shows how to use a DynamicDataManager control to enable dynamic behavior for an instance of the System.Web.UI.WebControls.GridView control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: protected virtual string GetCustomPageVirtualPath( MetaTable table, string viewName ) Parameters tableType: System.Web.DynamicData.MetaTable The data-model metadata table that the page is for. viewNameType: System.String The name of the view action, which is the page name without the #.aspx# file-name extension. Return Value Type: System.String The virtual path of the custom page. Summary: Creates the virtual path of a custom page.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool ApplyFormatInEditMode { get; set; } Property Value Type: System.Boolean true if the DynamicField applies formatting in edit mode; otherwise, false. The default is false. Implements IFieldFormattingOptions.ApplyFormatInEditMode Summary: Gets or sets a value that indicates whether the formatted string that is specified by the DataFormatString property is applied to field value when the data field is in edit mode. Remarks: Data-bound controls (such as DetailsView, and GridView) have different display modes that allow the user to read, edit, or insert records. By default, the formatting string specified by the DataFormatString property is applied to field values only when the data-bound control is in read-only mode. To apply the formatting string to values displayed while the data-bound control is in edit mode, set the ApplyFormatInEditMode property to true. Note A DynamicField object does not automatically remove the formatting when the field is updated in the data source. If you do not want the formatting as part of the value stored, you will need to remove the formatting programmatically.",1,1,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public virtual string ValidationGroup { get; set; } Property Value Type: System.String The name of the validation group to which this validation control belongs. The default is an empty string (##), which indicates that this property is not set. Summary: Gets the ValidationGroup object that this DynamicField object is associated with.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void SetContext( Control owner, HttpContext context, IQueryableDataSource dataSource ) Parameters ownerType: System.Web.UI.Control The control that contains the DynamicFilterExpression instance, such as the QueryExtender control. contextType: System.Web.HttpContext The current HttpContext object.  dataSourceType: System.Web.UI.WebControls.IQueryableDataSource The target data source for the DynamicFilterExpression instance. Summary: Initializes the expression with data source information.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [PersistenceModeAttribute(PersistenceMode.InnerProperty)] [TemplateContainerAttribute(typeof(INamingContainer))] [BrowsableAttribute(false)] public virtual ITemplate ItemTemplate { get; set; } ASP.NET Copy <asp:EntityTemplate> <ItemTemplate>ITemplate</ItemTemplate> </asp:EntityTemplate> Property Value Type: System.Web.UI.ITemplate The custom content for the data item in a EntityTemplate control. Summary: Gets or sets the custom content for the data item in a EntityTemplate control. Remarks: The ASP.NET controls in the DynamicData\\EntityTemplates folder of a Dynamic Data project contain markup that uses this property.",0,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class EntityTemplateFactory Summary: Creates an entity template. Remarks: The EntityTemplateFactory class is used at run time by Dynamic Data to get an instance of an entity template for a table. Entity templates are user controls that apply to a whole table row instead of a single data field, as with field templates. The entity templates are displayed on a page by using the DynamicEntity class. They use field templates to display values from the data model. Dynamic Data provides default entity templates that are found in the ~\\DynamicData\\EntityTemplates folder. You can modify these default entity templates or create custom ones to change the appearance and behavior for a table. There are templates for display, edit, and insert operations. Example: For an example of how to use entity templates, see Walkthrough: Customizing Table Layout Using Entity Templates. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: protected void PopulateListControl( ListControl listControl ) Parameters listControlType: System.Web.UI.WebControls.ListControl The list control to populate. Summary: Populates a list control with all the values from a parent table. Remarks: This method works with only foreign key columns.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IControlParameterTarget Summary: Defines members that a class must implement in order to provide data to for an instance of the DynamicControlParameter class. Remarks: The control that implements this interface can be set as the ControlId property of a DynamicControlParameter object.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IFieldTemplate Summary: Defines members that a class must implement in order to be recognized as a field template.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public PropertyInfo EntityTypeProperty { get; } Property Value Type: System.Reflection.PropertyInfo An object that contains attributes of the property that represents the data field in the entity type. Summary: Gets an object that contains attributes of the property that represents the data field in the entity type.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string DataContextPropertyName { get; } Property Value Type: System.String The name of the table. Summary: Gets the name of the table. Remarks: The name comes from the DataContextType object that the table belongs to.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class QueryableFilterUserControl : UserControl ASP.NET Copy <asp:QueryableFilterUserControl /> Summary: Provides a base class for filter controls. Remarks: The QueryableFilterUserControl class is the base class for user controls that render filters that can be plugged into the Dynamic Data filtering framework that is based on the QueryExtender class. Implementers must override the GetQueryable control, which can return a modified IQueryable object that reflects the filter's state. The base class contains helper methods for building LINQ expression trees. Example: A Visual Studio project with source code is available to accompany this topic: Scaffolding Dynamic Data. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,1,0,0,1,0,1,1
"Additional online Documentation: Syntax: public virtual AssociationDirection Direction { get; protected set; } Property Value Type: System.Web.DynamicData.ModelProviders.AssociationDirection The type of the association. Summary: Gets or sets the type of the association. Remarks: Associations include one-to-one, one-to-many, and many-to-many.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual bool IsForeignKeyComponent { get; protected set; } Property Value Type: System.Boolean true if the column is part of a foreign key; otherwise, false. Summary: Gets or sets a value that indicates whether the column is part of a foreign key. Remarks: This property is not set for strongly typed entity reference columns that are members of the table entity (a table object in the data model).",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract IQueryable GetQuery( Object context ) Parameters contextType: System.Object The data context for the table. Return Value Type: System.Linq.IQueryable An System.Linq.IQueryable object that returns the elements of the table. Summary: When overridden in a derived class, returns the System.Linq.IQueryable object that in turn returns the elements of the table.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void Configure() Implements IDataSourceDesigner.Configure Summary: Launches the data source configuration utility in the design host.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class EntityDesignerDataSourceView : DesignerDataSourceView Summary: Provides a design-time view of data for the EntityDataSourceDesigner class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool AutoGenerateOrderByClause { get; set; } ASP.NET Copy <asp:EntityDataSource AutoGenerateOrderByClause=#True|False# /> Property Value Type: System.Boolean true if the EntityDataSource control creates the ORDER BY clause; otherwise, false. The default value is false. Summary: Gets or sets a value that indicates whether the EntityDataSource control dynamically creates an ORDER BY clause based on values in the OrderByParameters collection. Remarks: When the AutoGenerateOrderByClause property of the EntityDataSource control is set to true, the control automatically generates an ORDER BY clause from the parameter in the ParameterCollection assigned to the OrderByParameters property. This eliminates the need to explicitly assign an ORDER BY clause to the OrderBy property. If you set the AutoGenerateOrderByClause property to true, you should not explicitly assign a value to the OrderBy property. Example: The following example automatically generates the ORDER BY clause and uses the value of the OrderByDropDownList to set the value of the parameter.  The following example automatically generates the ORDER BY clause and uses the DefaultValue attribute of the Parameter element to set the value of the parameter.",1,0,1,1,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: public event EventHandler<EntityDataSourceChangedEventArgs> Deleted ASP.NET Copy <asp:EntityDataSource OnDeleted=#EventHandler# /> Summary: Occurs after an object has been deleted from the data source. Remarks: The Deleted event is raised after the SaveChanges method has just been successfully called on the ObjectContext to delete an object. The Entity property of the EntityDataSourceChangingEventArgs object is used to access the deleted object. This object is in a Detached state. If an error occurs when an object is deleted, the Deleted event is raised, the Exception property of the EntityDataSourceChangedEventArgs object is set to the returned Exception, and the Entity property is set to Nothing. If you handle the exception in the Deleted event handler, set the ExceptionHandled property to true. This prevents the exception from being raised again. When you specify a value of false for the ExceptionHandled property, the EntityDataSource re-raises the exception.",1,0,1,0,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<EntityDataSourceChangingEventArgs> Deleting ASP.NET Copy <asp:EntityDataSource OnDeleting=#EventHandler# /> Summary: Occurs before an object is deleted from the data source. Remarks: The Deleting event is raised before the SaveChanges method is called on the ObjectContext to delete an object. The Entity property of the EntityDataSourceChangingEventArgs object is used to access the object to be deleted. The properties of this object may not be fully set. Only the properties required to identify the object must be set. To stop the object from being deleted, set the Cancel property of the EntityDataSourceChangingEventArgs object to true. If an error occurs when preparing to delete an object, the Deleting event is raised and the Exception property of the EntityDataSourceChangingEventArgs object is set to the returned Exception. When you handle the exception in the Deleting event handler, set the ExceptionHandled property to true. This prevents the exception from being raised again. When you specify a value of false for the ExceptionHandled property, the EntityDataSource re-raises the exception.",1,0,1,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<EntityDataSourceChangedEventArgs> Inserted ASP.NET Copy <asp:EntityDataSource OnInserted=#EventHandler# /> Summary: Occurs after a new object is created at the data source. Remarks: The Inserted event is raised when the added object is created in the data source or if an error has occurred when the object data is persisted to the data source. The Entity property of the EntityDataSourceChangedEventArgs object is used to access the added object. The properties of this object contain values that are returned from the data source, including any data source-generated values. If an error occurs when an object is persisted to the data source, the Inserted event is raised and the Exception property of the EntityDataSourceChangedEventArgs object is set to the returned Exception. If you handle the exception in the Inserted event handler, set the ExceptionHandled property to true. This prevents the exception from being raised again. When you specify a value of false for the ExceptionHandled property, the EntityDataSource re-raises the exception.",1,0,1,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<EntityDataSourceChangingEventArgs> Inserting ASP.NET Copy <asp:EntityDataSource OnInserting=#EventHandler# /> Summary: Occurs before a new object is persisted to the data source. Remarks: The Inserting event is raised before a new object is persisted to the data source. The Inserting event enables you to modify or verify the object being added, add a different object, or cancel the operation. You can access the object to be added from the Entity property of the EntityDataSourceChangingEventArgs object. If supplying a different object, the user is responsible for setting the correct entity type in the Entity property. To stop the object from being added, set the Cancel property of the EntityDataSourceChangingEventArgs object to true. If an error occurs when creating a new object, the Inserting event is raised and the Exception property of the EntityDataSourceChangingEventArgs object is set to the returned Exception. When you handle the exception in the Inserting event handler, set the ExceptionHandled property to true. This prevents the exception from being raised again. When you specify a value of false for the ExceptionHandled property, the EntityDataSource re-raises the exception.",0,0,1,1,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public class EntityDataSourceChangingEventArgs : CancelEventArgs Summary: Provides data for the Inserting, Updating, and Deleting events. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool ExceptionHandled { get; set; } Property Value Type: System.Boolean true if the exception was handled; otherwise, false. Summary: Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<EntityDataSourceChangedEventArgs> Updated Summary: Occurs after changes to an object have been persisted to the data source.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Returns a value that indicates whether the collection of standard values that is returned from GetStandardValues is an exclusive list.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ExtenderControlDesigner : ControlDesigner Summary: Provides UI support for working with extender controls at design time. Remarks: The ExtenderControlDesigner class enables you to interact with extender controls on the page at design time in an IDE such as Microsoft Visual Studio 2005. Only control developers and IDE developers have to interact with this class directly. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,1,0,1
"Additional online Documentation: Syntax: public class PostBackTriggerControlIDConverter : StringConverter Summary: Provides a type converter that retrieves a list of control IDs in the current container. Remarks: The PostBackTriggerControlIDConverter class derives from the StringConverter class and provides a list of control IDs for display in a property grid control in design-time environments. For more information about type converters, see How to: Implement a Type Converter and Generalized Type Conversion. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class UpdateProgressDesigner : ControlDesigner Summary: Provides design-time support for the UpdateProgress control in a visual designer. Remarks: For more information, see the ControlDesigner class documentation. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override DesignerActionListCollection ActionLists { get; } Property Value Type: System.ComponentModel.Design.DesignerActionListCollection The list of items that are used to create the smart tag panel for the associated DataPager control. Summary: Gets the list of items that are used to create the smart tag panel for the associated DataPager control.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class CreatingCookieEventArgs : EventArgs Summary: Provides data for the CreatingCookie event. Remarks: The CreatingCookieEventArgs class supplies values to any CreatingCookie event handler. By using the properties of this class, you can retrieve user credentials when you create a custom authentication cookie. The AuthenticationService class raises the CreatingCookie event when it sets the authentication cookie, after the user credentials have been authenticated. The AuthenticationService class constructs a CreatingCookieEventArgs object and passes it to any CreatingCookie event handler. You retrieve the user credentials through the UserName Password, and CustomCredential properties. The CustomCredential property can contain any custom values that you need in order to authenticate, such as an identification number. The IsPersistent property indicates whether the authentication cookie should be retained past the current session. Set the CookieIsSet property to true if you create the authentication cookie, so that the AuthenticationService class does not create the cookie. Example: The following example shows an event handler for the CreatingCookie event. The handler retrieves user values from the CreatingCookieEventArgs object to customize the authentication cookie. The handler saves the value from the CustomCredential property in the authentication ticket and sets the CookieIsSet property to true to indicate that the authentication cookie has been created. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: [ServiceContractAttribute(Namespace = #http://asp.net/ApplicationServices/v200#)] [AspNetCompatibilityRequirementsAttribute(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)] [ServiceKnownTypeAttribute(#GetKnownTypes#, typeof(KnownTypesProvider))] [ServiceBehaviorAttribute(Namespace = #http://asp.net/ApplicationServices/v200#, InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)] public class ProfileService Summary: Enables access to ASP.NET user profiles through a Web service. Remarks: The ProfileService class enables you to get and set a user's profile properties through a Windows Communication Foundation (WCF) service. You can keep custom information for users through profile properties. For information about profile properties, see ASP.NET Profile Properties Overview. The ProfileService class contains the following methods that should be accessed only through a WCF service: GetPropertiesForCurrentUser GetAllPropertiesForCurrentUser SetPropertiesForCurrentUser GetPropertiesMetadata To call these methods, you must enable the profile service on the Web server and then connect a WCF-compatible client application to the Web service. For information about how to configure the profile service, see How to: Enable the WCF Profile Service. The ValidatingProperties event is raised when a user's profile properties are set. You can create an event handler for the ValidatingProperties event to validate property values or to dynamically change their values. For an example of how to use the WCF profile service from a console application, see Walkthrough: Using ASP.NET Application Services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,1,0,1,0,0,1,0
"Additional online Documentation: Syntax: public class ClientFormsIdentity : IIdentity, IDisposable Summary: Represents a user identity authenticated for client application services by using forms authentication. Remarks: The client application services feature uses this class to represent an authenticated user. When you configure your application to use client application services and forms authentication, you can authenticate a user by calling the static Membership.ValidateUser method. After authentication, you can retrieve a reference to the current ClientFormsIdentity instance through the Identity property of the IPrincipal retrieved through the static Thread.CurrentPrincipal property. For more information, see Client Application Services. You will typically access a ClientFormsIdentity object as an IIdentity reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the IIdentity.IsAuthenticated property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the IIdentity.AuthenticationType property value is #ClientForms#. You must use an explicit ClientFormsIdentity reference to call the RevalidateUser method, which is not defined by the IIdentity interface. Example: The following example code demonstrates how to use this class to silently revalidate a user when the application leaves the offline state. In this example, a CheckedChanged event handler updates the offline status to match the check box value. If the user sets the application to the online state, the event handler attempts to revalidate the user by calling the RevalidateUser method. However, if the authentication server is unavailable, the event handler returns the application to the offline state. Note The RevalidateUser method is for convenience only. Because it does not have a return value, it cannot indicate whether revalidation has failed. Revalidation can fail, for example, if the user credentials have changed on the server. In this case, you might want to include code that explicitly validates users after a service call fails. For more information, see the Accessing Web Settings section in Walkthrough: Using Client Application Services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public ClientRolePrincipal( IIdentity identity ) Parameters identityType: System.Security.Principal.IIdentity Represents the current user. Summary: Initializes a new instance of the ClientRolePrincipal class. Remarks: The Identity property is initialized with the value of the identity parameter. When you validate a user in client application services, the ClientFormsAuthenticationMembershipProvider or the ClientWindowsAuthenticationMembershipProvider sets the static Thread.CurrentPrincipal property to an instance of this class. The ClientFormsAuthenticationMembershipProvider initializes the Identity property to a new instance of the ClientFormsIdentity class. The ClientWindowsAuthenticationMembershipProvider initializes the Identity property to the WindowsIdentity object returned by the static WindowsIdentity.GetCurrent method.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ClientFormsAuthenticationCredentials( string username, string password, bool rememberMe ) Parameters usernameType: System.String The user name. passwordType: System.String The user password. rememberMeType: System.Boolean A value indicating whether the user credentials should be saved and reused for subsequent login attempts. Summary: Initializes a new instance of the ClientFormsAuthenticationCredentials class. Remarks: You will typically pass user-provided values as the parameters of this constructor. Example: The following example code demonstrates how to implement the IClientFormsAuthenticationCredentialsProvider.GetCredentials method, which returns an instance of this class. In this example, the GetCredentials method is part of a login dialog box class. The method displays the dialog box, and then returns a ClientFormsAuthenticationCredentials instance initialized with the user-specified values.",0,1,0,1,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public string UserName { get; set; } Property Value Type: System.String The user name. Summary: Gets or sets the user name. Remarks: The ClientFormsAuthenticationMembershipProvider class uses this property to retrieve the user name during authentication. You will not typically use this property in your application code. Instead, you will use the class constructor to set the user name.",0,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<UserValidatedEventArgs> UserValidated Summary: Occurs when the user is validated. Remarks: This event occurs only after the user is successfully validated. You can use this event to update your application to reflect the current user. For example, you can use the UserValidatedEventArgs.UserName property to display the user name in your application user interface (UI). You can silently revalidate users by calling the ClientFormsIdentity.RevalidateUser method. Therefore, you should avoid using the UserValidated event to display intrusive UI. For example, you should not use the UserValidated event to display a welcome dialog box. Example: The following example code demonstrates how to use this event to display the user name in the title bar of a form.",1,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: public class ClientRoleProvider : RoleProvider Summary: Gets role information for Windows-based applications from an Microsoft Ajax roles service. Remarks: You can use client application services to retrieve role information from an existing roles service by configuring your application to use the ClientRoleProvider class. After configuration, you can determine whether an authenticated user is in a particular role by calling the IsInRole method of the IPrincipal returned by the static Thread.CurrentPrincipal property. For applications configured to use client application services, this property returns a ClientRolePrincipal. Because this class implements the IPrincipal interface, you do not need to reference it explicitly. The ClientRolePrincipal.IsInRole method internally calls the ClientRoleProvider.IsUserInRole method. The ClientRoleProvider class is a read-only role membership provider that retrieves role information for authenticated users from the roles service indicated by the ServiceUri property. The value of the ServiceUri property is typically retrieved from the application configuration file along with other configuration values. For more information, see How to: Configure Client Application Services. You can retrieve the current ClientRoleProvider instance through the static Roles.Provider property. The ClientRoleProvider class supports only the GetRolesForUser and IsUserInRole methods of the RoleProvider abstract class. When you call one of these methods for a particular user, the service provider first checks the local data cache for role information. If the cache does not contain any role information or the cache has expired, the service provider retrieves the role information from the roles service and adds it to the cache. You can specify the time-out period for the roles cache when you configure client application services. To force the GetRolesForUser method to retrieve role data from the service instead of the local cache, call the ResetCache method first. You cannot use the ClientRoleProvider class to create or delete roles, or to modify the role membership of users. To create or modify role information, you must change the configuration of the role service on the server. Example: The following example code demonstrates how to use this property to programmatically set the roles service location. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,1,1,1,1,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] public class ClientSettingsProvider : SettingsProvider, IApplicationSettingsProvider Summary: Enables Windows-based applications to retrieve user settings from a Web settings service. Remarks: You can use client application services to retrieve user settings from an existing Web settings service by configuring your application to use the ClientSettingsProvider class. For more information, see How to: Configure Client Application Services. After configuration, you can get and set user settings through an application settings class derived from ApplicationSettingsBase and configured to use the ClientSettingsProvider class. You can use Visual Studio to generate a Settings class for your project (accessed as Properties.Settings.Default in C\# and My.Settings in Visual Basic). For more information about application settings, see Application Settings Overview. You can retrieve the current ClientSettingsProvider through the ApplicationSettingsBase.Providers property using the fully-qualified ClientSettingsProvider class name as a key. You can also retrieve the provider through the SettingsLoadedEventArgs.Provider property when you handle the ApplicationSettingsBase.SettingsLoaded event. Note This class contains a SecurityCriticalAttribute at the class level that applies to all members of the class. A run-time exception is thrown if the immediate caller is security-transparent or partially trusted. For more information about security-critical types and members, see Security-Transparent Code, Level 2. Note This class contains an inheritance demand at the class level that applies to all members. A SecurityException is thrown when the derived class does not have full-trust permission. For details about security demands, see Link Demands and Inheritance Demands. Example: The following example code demonstrates how to use this event to display a list of settings that were not successfully saved. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,0,1,1,1,0
"Additional online Documentation: Syntax: public override MembershipUserCollection FindUsersByName( string usernameToMatch, int pageIndex, int pageSize, out int totalRecords ) Parameters usernameToMatchType: System.String Not used. pageIndexType: System.Int32 Not used. pageSizeType: System.Int32 Not used. totalRecordsType: System.Int32% Not used. Return Value Type: System.Web.Security.MembershipUserCollection Not applicable. This method always throws an exception. Summary: This method is not used by this class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: ClientFormsAuthenticationCredentials GetCredentials() Return Value Type: System.Web.ClientServices.Providers.ClientFormsAuthenticationCredentials The user login information. Summary: Retrieves user credentials. Remarks: When using forms authentication with client application services, you can pass a user name and password to the ValidateUser method. You can also pass empty strings or Nothing as the parameters to use a credentials provider. A credentials provider is a class that you provide and specify in your application configuration. A credentials provider class must implement the IClientFormsAuthenticationCredentialsProvider interface, which has a single method called GetCredentials. A typical GetCredentials method implementation will display a dialog box to retrieve user input. Using a credentials provider enables you to share a single login dialog box among multiple applications. For more information, see How to: Implement User Login with Client Application Services. Example: The following example code demonstrates how to implement the GetCredentials method. In this example, the GetCredentials method is part of a login dialog box class. This method displays the dialog box, and then returns a ClientFormsAuthenticationCredentials instance initialized with the user-specified values.",1,0,1,0,0,0,0,0,1,1,1,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(Converter))] public class ConvertersCollection : ConfigurationElementCollection Summary: Represents a configuration collection that contains references to Converter objects. Remarks: You can use the ConvertersCollection to work with a collection of Converter objects. Implement this class to add collections of custom Converter elements to a ConfigurationSection object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#maxJsonLength#, DefaultValue = )] public int MaxJsonLength { get; set; } Property Value Type: System.Int32 An integer that represents the maximum length for JSON strings. The default is 102400 characters. Summary: Gets or sets the maximum length that is accepted by the JavaScriptSerializer object for JavaScript Object Notation (JSON) strings. Remarks: The value of the MaxJsonLength property applies only to the internal JavaScriptSerializer instance that is used by the asynchronous communication layer to invoke Web services methods.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IDynamicDataSource : IDataSource Summary: Represents a data source for a Dynamic Data control.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: bool EnableDelete { get; set; } Property Value Type: System.Boolean true if the data source view supports the ability to delete rows; otherwise, false. Summary: Gets or sets a value that indicates whether the data source view supports the ability to delete rows.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IDynamicValidatorException Summary: Represents an interface implemented by Dynamic Data Exception classes.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ScriptResourceHandler() Summary: Initializes a new instance of the ScriptResourceHandler class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class JavaScriptTypeResolver Summary: Provides the abstract base class for implementing a custom type resolver. Remarks: The JavaScriptTypeResolver class provides the services for: Converting managed type information to a string value through the ResolveTypeId method. Resolving a string value back to the appropriate managed type through the ResolveType method. When the JavaScriptSerializer object serializes custom types, it can optionally include in the serialized JavaScript Object Notation (JSON) string a value that contains type information. During deserialization, JavaScriptSerializer can then reference this string value to determine the appropriate managed type to which the JSON string will be converted. If you provide a type resolver to the JavaScriptSerializer instance, the serializer will use the ResolveTypeId and ResolveType methods to map between the managed type and the string value during the serialization and deserialization process, respectively. The JavaScriptTypeResolver class is the base class for the SimpleTypeResolver class, which provides an implementation of a type resolver that uses the managed type assembly-qualified name. Notes to Inheritors When you implement a type resolver, the string that is returned by the ResolveTypeId method must map back to the same managed type when the string value is passed to the ResolveType method. Example: The following example demonstrates how to create a custom type resolver. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class SimpleTypeResolver : JavaScriptTypeResolver Summary: Provides a type resolver for managed types. Remarks: This type resolver can be used with the JavaScriptSerializer class to include in the serialized JavaScript Object Notation (JSON) string the assembly-qualified name of any managed type that requires custom type metadata. The SimpleTypeResolver class enables you to serialize managed types as JSON while retaining the managed type definition for custom types. To create an instance of the JavaScriptSerializer class that uses a type resolver, you must use the JavaScriptSerializer(JavaScriptTypeResolver) constructor. Example: The following example demonstrates how to use the SimpleTypeResolver class and shows the resulting serialized strings by using different type resolvers. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method)] public sealed class ScriptMethodAttribute : Attribute Summary: Specifies which HTTP verb is used to invoke a method, and the format of the response. This class cannot be inherited. Remarks: This attribute is used to specify information for methods that can be called from client script. The attribute lets you specify which HTTP verb (GET or POST) can be used to invoke a method. It also lets you specify whether the response is formatted by using either JavaScript Object Notation (JSON) or XML. The ScriptMethodAttribute attribute is optional. (However, methods that can be called from client script must have the System.Web.Services.WebMethodAttribute attribute applied.). If a method is not marked with ScriptMethodAttribute, the method will be called by using the HTTP POST command and the response will be serialized as JSON. You cannot override this setting from script. ScriptMethodAttribute takes only named parameters. The following are the properties of the ScriptMethodAttribute class that can be used as named parameters: UseHttpGet Specifies whether the method will be invoked by using the HTTP GET command. The default is false. Security Note Setting the UseHttpGet property to true might pose a security risk for your application if you are working with sensitive data or transactions. In GET requests, the message is encoded by the browser into the URL and is therefore an easier target for tampering. For both GET and POST requests, you should follow security guidelines to protect sensitive data. ResponseFormat Specifies whether the response will be serialized as JSON or as XML. The default is Json. The ResponseFormat property is useful to specify XML as the return type when the method returns an XmlDocument or an XmlElement object. XmlSerializeString Specifies whether all return types, including string types, are serialized as XML. The value of the XmlSerializeString property is ignored when the response is serialized as JSON. For more information about how to use attributes, see Extending Metadata Using Attributes. Example: The following example shows how to apply ScriptMethodAttribute to the GetXmlDocument and EchoStringAndDate methods to specify which HTTP verb to use and to specify the response format. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class AsyncPostBackErrorEventArgs : EventArgs Summary: Provides data for the AsyncPostBackError event. Remarks: The AsyncPostBackErrorEventArgs object is used to pass event data when the AsyncPostBackError is raised during partial-page rendering. The event data is information about server exceptions. Use the Exception property to access the event data. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public class AsyncPostBackTrigger : UpdatePanelControlTrigger Summary: Defines a control and optional event of the control as an asynchronous postback control trigger that causes an UpdatePanel control to refresh. Remarks: Use the AsyncPostBackTrigger control to enable controls to be triggers for an UpdatePanel control. Controls that are triggers for an update panel cause a refresh of the panel's content after an asynchronous postback. Defining an asynchronous trigger control is useful in the following scenarios: For controls that are outside a panel. For controls that are inside a panel when the ChildrenAsTriggers property is false. For controls that are inside nested panels, in order to cause a refresh of parent panels. The control that the AsyncPostBackTrigger control references must be in the same naming container as the update panel for which it is a trigger. Triggers that are based on controls in other naming containers are not supported. Add AsyncPostBackTrigger controls either by using the UpdatePanelTrigger Collection Editor dialog box in the designer or by creating a Triggers element declaratively in the UpdatePanel control. The ControlID property is required, but the EventName property is optional. If the EventName property is not specified, the DefaultEventAttribute attribute of the control is used to determine the default event. For example, the default event for the Button control is the Click event. The EventName property is case-insensitive. You can also reference a naming container as a trigger. In that case, all child controls in the container that cause a postback are considered triggers for the UpdatePanel control. Programmatically adding AsyncPostBackTrigger controls is not supported. To programmatically register a postback control, use the RegisterAsyncPostBackControl method of the ScriptManager control. Then call the Update method of the UpdatePanel control when the control posts back. If you define a control using both PostBackTrigger and AsyncPostBackTrigger, an exception is thrown. Example: The following example shows how to add an AsyncPostBackTrigger control declaratively. A Button control that is outside an UpdatePanel control lets users enter a search term to find in the Products table of the Northwind database. A GridView control that is inside the UpdatePanel control shows the results. The Button control is specified as an asynchronous trigger for the UpdatePanel control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: protected internal override void Initialize() Summary: Initializes the PostBackTrigger object.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class RegisteredScript Summary: Provides access to a client script that was previously registered with the Page object. Remarks: A client script is uniquely identified by its key and its type. Only one script with a given key/type pair can be registered with a page. Client scripts are not guaranteed to be output in the order that they are registered in. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void RegisterPostBackControl( Control control ) Parameters controlType: System.Web.UI.Control The control to register for postback. Summary: Registers a control as a trigger for a postback. This method is used to configure postback controls inside an UpdatePanel control that would otherwise perform asynchronous postbacks. Remarks: Use the RegisterPostBackControl method to register postback controls inside an UpdatePanel control as triggers. Controls that are registered by using this method update a whole page instead of updating only the UpdatePanel control's content. Registering a postback control with this method outside an UpdatePanel control has no affect because by default these controls do not perform asynchronous postbacks. You can add the trigger declaratively by using the Triggers element of the UpdatePanel control. In Visual Studio 2010, use the designer's UpdatePanelTrigger Collection Editor dialog box.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class ScriptReference : ScriptReferenceBase Summary: Registers an ECMAScript (JavaScript) file for use on an ASP.NET Web page. Remarks: You can include a JavaScript file on an ASP.NET Web page by registering it through a ScriptReference object. You can register a script file that is located as a .js file (a static script file) on the Web site. You can also register a script file that is embedded as a resource in an assembly. After registering the script file, you can use its functions in client script on the Web page. To register a static script file, set the Path property of the ScriptReference object to the relative location of the file. To register a script file that is embedded as a resource in an assembly, set the Assembly property to the name of the assembly that contains the file. Then set the Name property to the name of the .js file that is embedded in the assembly. In that case, the script file must be embedded, not linked. You set the ScriptMode property to indicate whether to use the debug or release version of the script. The Auto value produces different results depending on whether it refers to a standalone script file or to a script file that is embedded as a resource in an assembly. A standalone script file is defined with the Path property. An assembly reference must be accessed through the Name and Assembly properties. The results for the Auto value are as follows: When it is applied to a standalone script file where the Path property is specified, the Auto value is equivalent to Release. When it is applied to a script reference in an assembly, Auto is equivalent to Inherit. When only Name is specified, it is used to reference the script. When Name and the Path property are both specified, the Path property is used instead of Name, but the Auto value is still equivalent to Inherit. Example: The following example shows how to reference a custom control and a JavaScript file that is embedded in the control assembly. The assembly is assumed to be in the Bin folder of the Web site. The custom control animates UpdatePanel controls. The JavaScript file is compiled as an embedded resource that is named SampleControl.UpdatePanelAnimation.js. You register the embedded JavaScript file by using the Assembly and Name properties. To use this example, compile the JavaScript file that is shown in the example as an embedded resource with the custom control. Put the resulting assembly into the Bin folder of the Web site. For an example of how to embed a JavaScript file in an assembly, see Walkthrough: Embedding a JavaScript File as a Resource in an Assembly. The following example shows a page that uses the custom control.  The following example shows the custom control class definition.    The following example shows the supporting JavaScript file.    The following example shows code that you must add to the AssemblyInfo file of the project that contains the custom control and the JavaScript file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,1,1,1,1,0,1,0
"Additional online Documentation: Syntax: public class ScriptReferenceCollection : Collection<ScriptReference> Summary: Represents a collection of script references. Remarks: Use this class to create a collection of script references that make up a composite script. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ScriptReferenceEventArgs : EventArgs Summary: Provides data for the ResolveScriptReference event. Remarks: When a script reference is rendered, the ScriptReferenceEventArgs object contains the ScriptReference object that is defined in the ScriptManager instance. You can create an event handler for the ResolveScriptReference event to check the ScriptReference object and modify it as needed. Example: The following example shows an ASP.NET Web page that references a script file that is named CustomScript.js. When the Web application is hosted on the www.contoso.com domain, the Path property is set to a value specific for that domain. An event handler for the ResolveScriptReference event checks the host URL and changes the value for the Path property if it is necessary. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class ScriptResourceAttribute : Attribute Summary: Defines a resource in an assembly to be used from a client script file. This class cannot be inherited. Remarks: The ScriptResourceAttribute class is valid only when you use it in assembly declarations. You use it to enable a specified embedded script resource in an assembly. You can define the name of the embedded script library, the name of the resource file for the script library, and the name that is used in a script file for retrieving the resource values. The ScriptManager class uses the properties in ScriptResourceAttribute to determine the correct resource name for a script library. The TypeName property is used with a resource key to specify a resource. Note The ScriptResourceAttribute class can be used only to identify text-based resources for JavaScript files. To associate a localized image (binary) file with a particular culture, consider storing only its URL as a localized resource, which then be resolved and loaded in script. Example: The following example shows a ScriptResourceAttribute attribute for a script file named CheckAnswer.js that uses resources from the VerificationResources resource files. The name Answer is used to reference these resources.  The following example shows how to use the resources in client script. The resource keys (Correct and Incorrect) are prefixed with Answer to identify the script resource definition that contains the values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class ServiceReferenceCollection : Collection<ServiceReference> Summary: Contains a set of ServiceReference objects. Remarks: The ServiceReferenceCollection object contains a ServiceReference object for each Web service that is registered in an AJAX-enabled ASP.NET page. Web services can be defined in the ScriptManager control or in an associated ScriptManagerProxy control. You can add Web services to the ServiceReferenceCollection object declaratively by adding one or more <asp:ServiceReference> elements to a <Services> element inside the <asp:ScriptManager> element on the page, as shown in the following example.  You can also programmatically add a ServiceReference object to the Services collection by using the Add method of the ServiceReferenceCollection class. Web services are registered with the ScriptManager control during the page's PreRender life cycle stage. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public Type TargetControlType { get; } Property Value Type: System.Type The type of the target control. Summary: Gets the type of the target control, as specified in the constructor.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected virtual IEnumerable<ScriptReference> GetScriptReferences() Return Value Type: System.Collections.Generic.IEnumerable(Of ScriptReference) A ScriptReference object that contains client script for the Timer control. Summary: Retrieves the client script for the Timer control.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class UpdatePanel : Control, IAttributeAccessor ASP.NET Copy <asp:UpdatePanel /> Summary: Enables sections of a page to be partially rendered without a postback. Remarks: In this topic: Introduction Refreshing UpdatePanel Content UpdatePanel Usage Applying Styles Declarative Syntax Introduction UpdatePanel controls are a central part of AJAX functionality in ASP.NET. They are used with the ScriptManager control to enable partial-page rendering. Partial-page rendering reduces the need for synchronous postbacks and complete page updates when only part of the page has to be updated. Partial-page rendering improves the user experience because it reduces the screen flicker that occurs during a full-page postback and improves Web page interactivity. Refreshing UpdatePanel Content When partial-page rendering is enabled, a control can perform a postback that updates the whole page or an asynchronous postback that updates the content of one or more UpdatePanel controls. Whether a control causes an asynchronous postback and updates an UpdatePanel control depends on the following: If the UpdateMode property of the UpdatePanel control is set to Always, the UpdatePanel control's content is updated on every postback that originates from the page. This includes asynchronous postbacks from controls that are inside  UpdatePanel controls and postbacks from controls that are not inside UpdatePanel controls. If the UpdateMode property is set to Conditional, the UpdatePanel control's content is updated in the following circumstances: When you call the Update method of the UpdatePanel control explicitly. When the UpdatePanel control is nested inside an UpdatePanel control, and the parent panel is updated. When a postback is caused by a control that is defined as a trigger by using the Triggers property of the UpdatePanel control. In this scenario, the control explicitly triggers an update of the panel content. The control can be either inside or outside the UpdatePanel control that the trigger is associated with. When the ChildrenAsTriggers property is set to true and a child control of the UpdatePanel control causes a postback. Child controls of nested UpdatePanel controls do not cause an update to the outer UpdatePanel control unless they are explicitly defined as triggers. The combination of setting the ChildrenAsTriggers property to false and the UpdateMode property to Always is not allowed and will throw an exception. When the UpdatePanel control performs an asynchronous post, it adds a custom HTTP header. Some proxies remove this custom HTTP header. If this occurs, the server handles the request as a regular postback, which causes a client error. To resolve this issue, insert a custom form field when you perform asynchronous posts. Then check the header or the custom form field in server code. UpdatePanel Usage You can use multiple UpdatePanel controls to update different page regions independently. When the page that contains one or more UpdatePanel controls is first rendered, all the content of all UpdatePanel controls are rendered and sent to the browser. On subsequent asynchronous postbacks, the content of each UpdatePanel control might not be updated depending on the panel settings and on client or server logic for individual panels. You can also use UpdatePanel controls in the following scenarios: In user controls. On master and content pages. Nested inside  UpdatePanel controls. Inside templated controls such as the GridView or Repeater controls. UpdatePanel controls can be added declaratively or programmatically. You can add an UpdatePanel control programmatically, but you cannot add triggers programmatically. To create trigger-like behavior, you can register a control on the page as an asynchronous postback control. You do this by calling the RegisterAsyncPostBackControl method of the ScriptManager control. You can then create an event handler that runs in response to the asynchronous postback, and in the handler, call the Update method of the UpdatePanel control. Applying Styles The UpdatePanel control accepts expando attributes. This lets you set a CSS class for the HTML elements that the controls render. For example, you might create the markup shown in the following example:  The markup in the previous example renders HTML similar to the following when the page runs:    Declarative Syntax Example: The following examples show different uses of the UpdatePanel control. Controls Inside an UpdatePanel Control The following example shows how to put controls inside an UpdatePanel control to reduce screen flicker when you post to the server. In this example, a Calendar and a DropDownList control are inside an UpdatePanel control. By default, the UpdateMode property is Always and the ChildrenAsTriggers property is true. Therefore, child controls of the panel cause an asynchronous postback.  Master/Detail Scenario with UpdatePanel Controls In the following example, an UpdatePanel control is used in a master/detail scenario that shows orders and order details from the Northwind database. One UpdatePanel control contains the GridView control that displays a list of orders. A second UpdatePanel control contains a DetailsView control that displays the details of one order. When you select an order from the first table, details for that order are displayed in the second table. The second table is updated asynchronously based on the selection in the first table. The sorting and paging operations in the orders summary table also cause partial updates.   <%@ Page Language=## %> <!DOCTYPE html PUBLIC #-//W3C//DTD XHTML 1.0 Transitional//EN# #http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd#> <script runat=#server#> protected void GridView1_SelectedIndexChanged(object sender, EventArgs e) { SqlDataSource2.SelectParameters[#OrderID#].DefaultValue = GridView1.SelectedDataKey.Value.ToString(); } </script> <html xmlns=#http://www.w3.org/1999/xhtml#> <head id=#Head1# runat=#server#> <title>UpdatePanel Example</title> </head> <body> <form id=#form1# runat=#server#> <div> <asp:ScriptManager ID=#ScriptManager1# runat=#server# /> <asp:UpdatePanel ID=#OrdersPanel# UpdateMode=#Conditional# runat=#server#> <ContentTemplate> <asp:GridView ID=#GridView1# AllowPaging=#True# AllowSorting=#True# Caption=#Orders# DataKeyNames=#OrderID# DataSourceID=#SqlDataSource1# OnSelectedIndexChanged=#GridView1_SelectedIndexChanged# runat=#server# > <Columns> <asp:CommandField ShowSelectButton=#True#></asp:CommandField> </Columns> </asp:GridView> <asp:SqlDataSource ID=#SqlDataSource1# runat=#server# ConnectionString=#<%$ ConnectionStrings:NorthwindConnectionString %># SelectCommand=#SELECT [OrderID], [CustomerID], [EmployeeID], [OrderDate] FROM [Orders]#> </asp:SqlDataSource> </ContentTemplate> </asp:UpdatePanel> <asp:UpdatePanel ID=#OrderDetailsPanel# UpdateMode=#Always# runat=#server#> <ContentTemplate> <asp:DetailsView ID=#DetailsView1# Caption=#Order Details# DataKeyNames=#OrderID,ProductID# DataSourceID=#SqlDataSource2# runat=#server#> <EmptyDataTemplate> <i>Select a row from the Orders table.</i> </EmptyDataTemplate> </asp:DetailsView> <asp:SqlDataSource ID=#SqlDataSource2# ConnectionString=#<%$ ConnectionStrings:NorthwindConnectionString %># SelectCommand=#SELECT [OrderID], [ProductID], [UnitPrice], [Quantity], [Discount] FROM [Order Details] WHERE ([OrderID] = @OrderID)# runat=#server#> <SelectParameters> <asp:Parameter Name=#OrderID# Type=#Int32# /> </SelectParameters> </asp:SqlDataSource> </ContentTemplate> </asp:UpdatePanel> </div> </form> </body> </html> If you put a GridView control inside an UpdatePanel control, setting the GridView control's EnableSortingAndPagingCallbacks property to true is not supported. However, because the UpdatePanel control supports asynchronous postbacks, any postbacks that change the GridView control inside an UpdatePanel control cause the same behavior as sorting and paging callbacks. Using an UpdatePanel Control in a Template In the following example, an UpdatePanel control is used in the item template of a GridView control. UpdatePanel controls in each data row are generated automatically. Each row's UpdatePanel control contains a Label control to display the quantity of the item in that row and a Button control to decrease and increase the quantity.   <%@ Page Language=## %> <!DOCTYPE html PUBLIC #-//W3C//DTD XHTML 1.0 Transitional//EN# #http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd#> <script runat=#server#> private void ChangeQuantity(object sender, int delta) { Label quantityLabel = (Label)((Button)sender).FindControl(#QuantityLabel#); int currentQuantity = Int32.Parse(quantityLabel.Text); currentQuantity = Math.Max(0, currentQuantity + delta); quantityLabel.Text = currentQuantity.ToString(System.Globalization.CultureInfo.InvariantCulture); } private void OnDecreaseQuantity(object sender, EventArgs e) { ChangeQuantity(sender, -1); } private void OnIncreaseQuantity(object sender, EventArgs e) { ChangeQuantity(sender, 1); } protected void Button1_Click(object sender, EventArgs e) { StringBuilder sb = new StringBuilder(); sb.Append(#Beverage order:<br/>#); foreach (GridViewRow row in GridView1.Rows) { if (row.RowType == DataControlRowType.DataRow) { Label quantityLabel = (Label)row.FindControl(#QuantityLabel#); int currentQuantity = Int32.Parse(quantityLabel.Text); sb.Append(row.Cells[0].Text + # : # + currentQuantity + #<br/>#); } } SummaryLabel.Text = sb.ToString(); } </script> <html xmlns=#http://www.w3.org/1999/xhtml#> <head id=#Head1# runat=#server#> <title>UpdatePanel Inside GridView Template Example </title> </head> <body> <form id=#form1# runat=#server#> <div> <asp:ScriptManager ID=#ScriptManager1# runat=#server# /> <asp:GridView ID=#GridView1# AutoGenerateColumns=#False# DataSourceID=#SqlDataSource1# runat=#server#> <Columns> <asp:BoundField DataField=#ProductName# HeaderText=#ProductName# /> <asp:BoundField DataField=#UnitPrice# HeaderText=#UnitPrice# /> <asp:TemplateField HeaderText=#Quantity#> <ItemTemplate> <asp:UpdatePanel ID=#QuantityUpdatePanel# UpdateMode=#Conditional# runat=#server# > <ContentTemplate> <asp:Label ID=#QuantityLabel# Text=#0# runat=#server# /> <asp:Button ID=#DecreaseQuantity# Text=#-# OnClick=#OnDecreaseQuantity# runat=#server# /> <asp:Button ID=#IncreaseQuantity# Text=#+# OnClick=#OnIncreaseQuantity# runat=#server# /> </ContentTemplate> </asp:UpdatePanel> </ItemTemplate> </asp:TemplateField> </Columns> </asp:GridView> <asp:UpdatePanel ID=#SummaryUpdatePanel# UpdateMode=#Conditional# runat=#server#> <ContentTemplate> <asp:Button ID=#Button1# OnClick=#Button1_Click# Text=#Get Summary# runat=#server# /> <br /> <asp:Label ID=#SummaryLabel# runat=#server#> </asp:Label> </ContentTemplate> </asp:UpdatePanel> <asp:SqlDataSource ID=#SqlDataSource1# ConnectionString=#<%$ ConnectionStrings:NorthwindConnectionString %># SelectCommand=#SELECT [ProductName], [UnitPrice] FROM [Alphabetical list of products] WHERE ([CategoryName] LIKE '%' + @CategoryName + '%')# runat=#server#> <SelectParameters> <asp:Parameter DefaultValue=#Beverages# Name=#CategoryName# Type=#String# /> </SelectParameters> </asp:SqlDataSource> </div> </form> </body> </html> ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: protected virtual Control CreateContentTemplateContainer() Return Value Type: System.Web.UI.Control A Control container for the UpdatePanel control's content. Summary: Creates a Control object that acts as a container for child controls that define the UpdatePanel control's content. Remarks: This method is intended for use by control developers who want to extend the UpdatePanel control. For example, in derived classes, you can provide a different root control that acts as a container for your UpdatePanel control's content. The default implementation returns a Control object. Example: The following example shows how to override the CreateContentTemplateContainer method in a custom UpdatePanel control to always render the <fieldset> and <legend> elements for the panel's content. The custom UpdatePanel control defines a public property named GroupingText that is a string literal inside the <legend> element. A custom UpdatePanel control named CustomUpdatePanel derives from UpdatePanel and overrides the CreateContentTemplateContainer method. Put the CustomUpdatePanel class source code in the Web site's App_Code folder.  The custom UpdatePanel control is used on the page just as the UpdatePanel control is. The following example shows a page that contains the custom UpdatePanel control.   <%@ Page Language=## %> <%@ Register Namespace=#SamplesCS# TagPrefix=#Samples# %> <!DOCTYPE html PUBLIC #-//W3C//DTD XHTML 1.0 Transitional//EN# #http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd#> <html xmlns=#http://www.w3.org/1999/xhtml# > <head runat=#server#> <title>CreateContentTemplateContainer Example</title> </head> <body> <form id=#form1# runat=#server#> <div> <asp:ScriptManager ID=#ScriptManager1# runat=#server# /> <Samples:CustomUpdatePanel ID=#UpdatePanel1# UpdateMode=#Conditional# GroupingText=#This is an UpdatePanel.# runat=#server#> <ContentTemplate> <asp:Calendar ID=#Calendar1# runat=#server# /> </ContentTemplate> </Samples:CustomUpdatePanel> </div> </form> </body> </html>",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: protected internal virtual void Initialize() Summary: When overridden in a derived class, enables a trigger to initialize itself.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual string EntityTypeName { get; set; } ASP.NET Copy <asp:ContextDataSource EntityTypeName=#String# /> Property Value Type: System.String The name of the type that is created for Insert, Delete, and Update operations. Summary: Gets or sets the name of the type that is created for Insert, Delete, and Update operations.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ContextDataSourceContextData Summary: Represents the context data for the ContextDataSource class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class ContextDataSourceView : QueryableDataSourceView Summary: Supports the ContextDataSource control and provides an interface for data-bound controls to perform data operations. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected override int ExecuteDelete( IDictionary keys, IDictionary oldValues ) Parameters keysType: System.Collections.IDictionary A dictionary of row-key values for the records to delete. oldValuesType: System.Collections.IDictionary A dictionary of name/value pairs that represent data elements and their original values, which is used to detect data conflicts. Return Value Type: System.Int32 The number of objects or rows that were deleted from the data source. Summary: Performs a delete operation using the specified keys and using row values that are used to detect conflicts.",0,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public DataPager() Summary: Initializes a new instance of the DataPager class. Remarks: To dynamically add a DataPager control to a page, create a new DataPager object. Set its properties, and then add it to the Controls collection of a container control, such as a PlaceHolder control. Example: The following example shows how to use the constructor to dynamically add a DataPager control to a page.",0,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public DataPagerField PagerField { get; } Property Value Type: System.Web.UI.WebControls.DataPagerField The object that contains the button that was clicked. Summary: Gets the DataPagerField object that contains the button that was clicked. Remarks: Use the PagerField property to retrieve the DataPagerField object. The DataPagerField object contains the button that was clicked.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: protected virtual void LoadViewState( Object savedState ) Parameters savedStateType: System.Object The saved view-state values for the control. Summary: Restores view-state information that was saved previously. Remarks: The LoadViewState method restores view-state information for the DataPagerField object that was saved by the SaveViewState method during a previous page request. This method is primarily used by the .NET Framework infrastructure and is not intended to be used directly from your code. However, control developers can override this method to specify how a custom server control restores its view state. For more information, see ASP.NET State Management Overview.",1,0,0,1,0,1,1,0,0,0,1,0
"Additional online Documentation: Syntax: public class DataPagerFieldCollection : StateManagedCollection Summary: Represents a collection of DataPagerField objects that are used by the DataPager control. Remarks: You can use the DataPagerFieldCollection class to programmatically manage a set of DataPagerField objects. Note that it is more typical to define these fields declaratively instead of programmatically. You can access the properties and methods of the DataPagerFieldCollection class through the DataPager.Fields property. You can add, insert, and remove DataPagerField objects by using the appropriate methods of the DataPagerFieldCollection class. To programmatically retrieve DataPagerField objects from a collection, do one of following: Use the indexer to get a single DataPagerField object from the collection. Use the GetEnumerator method to create an object that implements System.Collections.IEnumerator, which you can then use to get items from the collection. The Count property gets the total number of items in the collection. It is typically used to determine the upper bound of the collection. You can add items and remove items in the collection by using the Add, Insert, Remove, and RemoveAt methods. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: public int IndexOf( DataPagerField field ) Parameters fieldType: System.Web.UI.WebControls.DataPagerField The object to locate in the collection. Return Value Type: System.Int32 The index of the field parameter, if it is found in the collection; otherwise, -1. Summary: Gets the index of a specific DataPagerField object in the collection.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public interface IQueryableDataSource : IDataSource Summary: Exposes methods and properties that the QueryExtender control uses to communicate with data source controls.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<LinqDataSourceDisposeEventArgs> ContextDisposing ASP.NET Copy <asp:LinqDataSource OnContextDisposing=#EventHandler# /> Summary: Occurs before disposing the context type object. Remarks: You handle the ContextDisposing event to dispose the object manually, or to perform clean-up that is specific to the object before the object is destroyed.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<LinqDataSourceStatusEventArgs> Deleted ASP.NET Copy <asp:LinqDataSource OnDeleted=#EventHandler# /> Summary: Occurs when a delete operation has finished. Remarks: Handle the Deleted event to catch any exceptions from the delete operation, or to examine output parameters after the operation has finished. You can retrieve the output parameters from the LinqDataSourceStatusEventArgs object that is passed to event handlers.",0,0,0,1,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: public bool StoreOriginalValuesInViewState { get; set; } ASP.NET Copy <asp:LinqDataSource StoreOriginalValuesInViewState=#True|False# /> Property Value Type: System.Boolean true if the values will be stored in view state; otherwise, false. The default value is true. Summary: Gets or sets a value that indicates whether the data from the data source should be stored in view state to make sure that the data has not been changed by another process before it is updated or deleted. Remarks: By default, when update and delete operations have been enabled, the LinqDataSource control stores the original values for all the records in view state. The LinqDataSource control stores values for all primary keys and all properties not marked with UpdateCheck.Never in the Column attribute. You set the UpdateCheck property of the Column attribute in the O/R Designer. Before LINQ to SQL updates or deletes data, it checks the values in view state against the current values in the data source. If the values do not match, the data source record has changed. In that case, LINQ to SQL throws an exception and does not continue with the update or delete operation. For more information about LINQ to SQL, see LINQ to SQL. Storing the original values in view state can cause the page size to become unnecessarily large and can expose sensitive data to a malicious user. You can disable storing values in view state by setting the StoreOriginalValuesInViewState property to false. If you do this, you must provide your own way to make sure that the data has not changed. If you set the StoreOriginalValuesInViewState property to false, the original values are not persisted in view state for the data-bound control. In that case, LINQ to SQL cannot verify the integrity of the data. LINQ to SQL will throw an exception that indicates a data conflict even if the data in the data source has not actually changed. If the underlying data source contains a timestamp field that is automatically updated during an update, you can store only that value in view state. In that case, the timestamp property in the entity class is set to IsVersion=true and all the properties are set to UpdateCheck.Never. Because a timestamp field is automatically updated by the database every time that data in that record changes, LINQ to SQL determines from that value if data has changed. This helps reduce the size of view state, and no sensitive data is exposed. LINQ to SQL will check for data consistency by comparing the timestamp value in view state with the timestamp value in the database. For more information, see Walkthrough: Using a Timestamp with the LinqDataSource Control to Check Data Integrity.",1,0,0,0,0,1,0,1,0,0,1,0
"Additional online Documentation: Syntax: public string Where { get; set; } ASP.NET Copy <asp:LinqDataSource Where=#String# /> Property Value Type: System.String A string that is used to create the Where clause. Implements IDynamicDataSource.Where Summary: Gets or sets a value that specifies what conditions must be true for a record to be included in the retrieved data. Remarks: You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in . You specify an expression that results in a Boolean value, and if the expression evaluates to true for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  To specify multiple expressions linked by logical AND or OR operators, you use && as a logical AND operator and || as a logical OR operator, as shown in the following example:    If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:    To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:    If you want to test whether a string is greater than or less than an string, you must use methods of the String class instead of using < or > operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to #Sports#:    You can also use  methods of the String class, such as StartsWith, EndsWith, and Contains. For more information about how to compare strings, see Comparing Strings. For more information about Where clause syntax, see  Operators and where clause ( Reference). In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the WhereParameters collection. Alternatively, you can set the AutoGenerateWhereClause property to true and define the parameters in the WhereParameters collection. When the AutoGenerateWhereClause property is true, you do not have to include the named parameters in the Where property. Instead, the LinqDataSource control automatically generates the Where clause from the parameters in the WhereParameters property. For more information about how to filter data, see Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls. Example: The following example shows how to filter the data returned from a query based on a static condition.  The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a DropDownList control and a GridView control are displayed on the page. When the user selects one of the values in the DropDownList control, the LinqDataSource control selects from the Products table only rows that have UserPrice values equal to the selected value. The GridView control then displays the filtered data.",1,1,0,1,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public class LinqDataSourceDisposeEventArgs : CancelEventArgs Summary: Provides data for the ContextDisposing event. Remarks: You create a handler for the ContextDisposing event to perform clean-up that is specific to the data context object before the object is destroyed. The LinqDataSourceDisposeEventArgs object contains the data context object that is used when you are selecting, updating, inserting, or deleting data. The ContextDisposing event is raised during the Unload event before the LinqDataSource control disposes the context object. The data context object is the type specified in the ContextTypeName property or the type set to the ObjectInstance of the LinqDataSourceContextEventArgs class. When the LinqDataSource control interacts with a database, the ContextTypeName property is set to the DataContext object that represents the database. When the LinqDataSource control interacts with an in-memory data collection, the ContextTypeName property is set to the object that contains the data collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class LinqDataSourceValidationException : Exception, IDynamicValidatorException, ISerializable Summary: Describes an exception that occurred during validation of new or modified values before values are inserted, updated, or deleted by a LinqDataSource control. Remarks: The LinqDataSourceValidationException class contains type conversion and property setter exceptions. All of the exceptions that are thrown during validation are contained in the InnerExceptions collection. You can retrieve each validation exception by iterating through the InnerExceptions collection. You typically handle exceptions in the Updating, Deleting, and Inserting events. If a validation exception is thrown, the Exception property of the LinqDataSourceUpdateEventArgs, LinqDataSourceDeleteEventArgs, or LinqDataSourceInsertEventArgs object contains a LinqDataSourceValidationException object. If no exception is thrown, the Exception property contains Nothing. To handle validation exceptions, create a handler for the Updating, Deleting, or Inserting event. In the event handler, check whether the Exception property of the event argument class contains a value other than Nothing. If the Exception property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the InnerExceptions property. A validation exception can occur if a value does not match the type of the property. For example, trying to update an integer property by using non-numeric characters causes a validation exception. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern. Example: The following example shows an event handler for the Updating event. It displays any validation exception messages by using a Label control.  [C\#] ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public IDictionary<string, Exception> InnerExceptions { get; } Property Value Type: System.Collections.Generic.IDictionary(Of String, Exception) A collection that contains the exceptions. Implements IDynamicValidatorException.InnerExceptions Summary: Gets one or more exceptions that occurred when new or modified data was being validated. Remarks: The InnerExceptions collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation. A validation exception can occur if a value does not match the type of the property. For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern. Example: The following example shows an event handler for the Updating event. It displays any validation exception messages by using a Label control.  [C\#]",1,0,0,0,1,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<LinqDataSourceDeleteEventArgs> Deleting Summary: Occurs before a delete operation. Remarks: Handle the Deleting event to validate the object to be deleted, to change a value before the delete operation, or to cancel the delete operation. For more information, see the LinqDataSource.Deleting event.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: protected virtual void UpdateDataObject( Object dataContext, Object table, Object oldDataObject, Object newDataObject ) Parameters dataContextType: System.Object The data context class to update. tableType: System.Object The data collection that contains the object to update. oldDataObjectType: System.Object The object to be updated. newDataObjectType: System.Object The updated object. Summary: Updates a data object.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public override string AccessKey { get; set; } ASP.NET Copy <asp:ListView AccessKey=#String# /> Property Value Type: System.String String.Empty, which indicates that the property is not set. Summary: Overrides the WebControl.AccessKey property. Setting this property is not supported by the ListView control. Remarks: Style properties are not supported by the ListView control. If you try to set the AccessKey property, a NotSupportedException exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class. To style the ListView control, you must style the controls inside the ListView templates by using cascading style sheets (CSS) classes or inline style elements.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: protected virtual void InstantiateEmptyItemTemplate( Control container ) Parameters containerType: System.Web.UI.Control The container that is used to store the child controls in the EmptyItemTemplate template. Summary: Populates the specified Control object by using the child controls that are contained in the EmptyItemTemplate template. Remarks: This method is used to populate the Control object by using the child controls that are contained in the EmptyItemTemplate template. Note This method is primarily used by control developers to extend the ListView control.",1,0,0,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Syntax: public event EventHandler<ListViewCancelEventArgs> ItemCanceling ASP.NET Copy <asp:ListView OnItemCanceling=#EventHandler# /> Summary: Occurs when a cancel operation is requested, but before the ListView control cancels the insert or edit operation. Remarks: The ListView control raises the ItemCanceling event when a Cancel button in the InsertItemTemplate or EditItemTemplate template is clicked, but before the ListView control cancels the insert or edit operation. (A Cancel button is a button control whose CommandName property is set to #Cancel#.) This enables you to perform a custom routine whenever this event occurs, such as stopping the cancel operation if it would put the item in an unwanted state. A ListViewCancelEventArgs object is passed to the event handler, which enables you to determine the index of the item. It also lets you indicate that the cancel operation should be stopped. To stop the operation, set the Cancel property of the ListViewCancelEventArgs object to true. For more information about how to handle events, see Consuming Events. Example: The following example shows how to create an ItemCanceling event handler. Security Note This example contains text boxes that accept user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview.",1,1,0,0,0,1,1,0,1,1,1,0
"Additional online Documentation: Syntax: public event EventHandler<ListViewCommandEventArgs> ItemCommand ASP.NET Copy <asp:ListView OnItemCommand=#EventHandler# /> Summary: Occurs when a button in a ListView control is clicked. Remarks: The ItemCommand event is raised when a button in the ListView control is clicked. This enables you to perform a custom routine whenever this event occurs. Buttons in a ListView control can also invoke built-in functionality of the control. The following table lists values that you can use with the CommandName property of a button in order to invoke built-in functionality. CommandName value Description #Cancel# Cancels an edit or insert operation. Raises the ItemCanceling event. #Delete# Deletes the current record from the data source. Raises the ItemDeleted and ItemDeleting events. #Select# Sets the SelectedIndex property to the DisplayIndex property value for the item. Renders the SelectedItemTemplate template for the item. Raises the SelectedIndexChanging and SelectedIndexChanged events. #Edit# Puts the item in edit mode. Renders the EditItemTemplate template for the item. Raises the ItemEditing event. #Insert# Inserts the bound values from the InsertItemTemplate template into the data source. Raises the ItemInserting and ItemInserted events. #Update# Updates the current record in the data source with the bound values from the EditItemTemplate template. Raises the ItemUpdating and ItemUpdated events. #Sort# Sorts the columns listed in the CommandArgument property of the button. Raises the Sorting and Sorted events. The ItemCommand event is also raised when a button that is listed in the previous table is clicked. However, it is recommended that you use the events listed in the table. The ItemCommand event is usually used to handle custom operations. A ListViewCommandEventArgs object is passed to the event handler, which enables you to determine the command name and command argument of the button that was clicked. To determine the command name, use the CommandEventArgs.CommandName property. To determine the command argument, use the CommandEventArgs.CommandArgument property. To access the control that raised the event, use the ListViewCommandEventArgs.CommandSource property. For more information about how to handle events, see Consuming Events. Example: The following example shows how to create an ItemCommand event handler.",0,0,0,0,0,1,0,1,1,0,1,0
"Additional online Documentation: Syntax: public event EventHandler<ListViewEditEventArgs> ItemEditing ASP.NET Copy <asp:ListView OnItemEditing=#EventHandler# /> Summary: Occurs when an edit operation is requested, but before the ListView item is put in edit mode. Remarks: The ItemEditing event is raised when an item's Edit button is clicked, but before the ListView item is put in edit mode. (An Edit button is a button control whose CommandName property is set to #Edit#.) This enables you to perform a custom routine whenever this event occurs, such as canceling the edit operation. A ListViewEditEventArgs object is passed to the event handler, which enables you to determine the index of the current item. It also lets you indicate that the edit operation should be canceled. To cancel the edit operation, set the Cancel property of the ListViewEditEventArgs object to true. For more information about how to handle events, see Consuming Events. Example: The following example shows how to add an event handler for the ItemEditing event. Security Note This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview.",0,1,0,1,0,0,0,1,1,0,1,1
"Additional online Documentation: Syntax: bool IDataBoundListControl.EnablePersistedSelection { get; set; } ASP.NET Copy <asp:ListView EnablePersistedSelection=#True|False# /> Property Value Type: System.Boolean true if the selection is based on data keys; otherwise, false. Implements IDataBoundListControl.EnablePersistedSelection Summary: Gets or sets the value that specifies whether a selected row persists when a user pages through data in a data-bound control. Remarks: This member is an explicit interface member implementation. It can be used only when the ListView instance is cast to an IDataBoundListControl interface.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public class ListViewCancelEventArgs : CancelEventArgs Summary: Provides data for the ItemCanceling event. Remarks: The ListView control raises the ItemCanceling event when the Cancel button is clicked, but before exiting insert or edit mode. (A Cancel button is a button whose CommandName property is set to #Cancel#) This enables you to provide an event-handling method that performs a custom routine whenever this event occurs, such as stopping the cancel operation if it would put the item in an unwanted state. A ListViewCancelEventArgs object is passed to the event-handling method. This object enables you to determine the index of the item that contains the Cancel button that raised the event. You can also determine what operation was canceled. To stop the cancel operation, set the Cancel property to true. For a list of initial property values for an instance of the ListViewCancelEventArgs class, see the ListViewCancelEventArgs constructor. Example: The following example shows how to use the ListViewCancelEventArgs object to display a message when the user cancels the insert or update operation in a ListView control. The ListViewCancelEventArgs object is passed to the event-handling method for the ItemCanceling event. Security Note This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,1,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public int ItemIndex { get; } Property Value Type: System.Int32 The zero-based index of the item being deleted. Summary: Gets the index of the item being deleted. Remarks: Use the ItemIndex property to determine the index of the item being deleted. The item index is typically used to retrieve the specified item from the Items collection of the ListView control, which enables you to access the item's properties.",1,0,0,1,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public class ListViewInsertEventArgs : CancelEventArgs Summary: Provides data for the ItemInserting event. Remarks: The ListView control raises the ItemInserting event when an Insert button in the control is clicked, but before the ListView control inserts the record. (An Insert button is a button whose CommandName property is set to #Insert#.) This enables you to provide an event-handling method that performs a custom routine whenever this event occurs. For example, you can validate or HTML-encode the values of a record before it is inserted it in the data source. A ListViewInsertEventArgs object is passed to the event-handling method. This object enables you to determine the value of an optional command argument that is sent to the ListView control. You can access the ListViewItem object that is being inserted by using the Item property. You can also read or modify the field values for the new record by using the Values property. To cancel the insert operation, set the Cancel property to true. For a list of initial property values for an instance of the ListViewInsertEventArgs class, see the ListViewInsertEventArgs constructor. Example: The following example shows how to use the ListViewInsertEventArgs object to cancel an insert operation if the data item contains an empty value. Security Note This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public class ListViewSortEventArgs : CancelEventArgs Summary: Provides data for the Sorting event. Remarks: The ListView control raises the Sorting event when a Sort button is clicked, but before the ListView control handles the sort operation. (A Sort button is a button whose CommandName property set to #Sort#.) This enables you to provide an event-handling method that performs a custom routine whenever this event occurs, such as customizing the sort expression. A ListViewSortEventArgs object is passed to the event-handling method. This object enables you to specify or determine the sort expression and sort direction for the ListView control. To determine the sort expression, use the SortExpression property. To determine the sort direction, use the SortDirection property. You can also cancel a sorting operation by setting the Cancel property to true. For a list of initial property values for an instance of the ListViewSortEventArgs class, see the ListViewSelectEventArgs constructor. Example: The following example shows how to use the ListViewSortEventArgs object to display the sort direction and the column that is being sorted. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public override int GetHashCode() Return Value Type: System.Int32 A hash code for the current NextPreviousPagerField object. Summary: Serves as a hash function for the NextPreviousPagerField class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void CreateDataPagers( DataPagerFieldItem container, int startRowIndex, int maximumRows, int totalRowCount, int fieldIndex ) Parameters containerType: System.Web.UI.WebControls.DataPagerFieldItem The container that is used to store the controls. startRowIndexType: System.Int32 The index of the first record on the page. maximumRowsType: System.Int32 The maximum number of items on a single page. totalRowCountType: System.Int32 The total number of items. fieldIndexType: System.Int32 The index of the data pager field in the DataPager.Fields collection. Summary: Creates the user interface (UI) controls for the pager field object and adds them to the specified container. Remarks: The CreateDataPagers method is a helper method. It is used by the DataPager.CreatePagerFields method to create the UI controls for the pager field, such as the numeric buttons.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: protected abstract QueryableDataSourceView CreateQueryableView() Return Value Type: System.Web.UI.WebControls.QueryableDataSourceView The default data source view that is associated with the QueryableDataSource control. Summary: Gets or sets the QueryableDataSourceView object that is associated with this QueryableDataSource control.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class QueryContext Summary: Represents a list of parameters that are used to query a data source. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class QueryCreatedEventArgs : EventArgs Summary: Represents event data for the QueryCreated event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected bool IsTrackingViewState { get; } Property Value Type: System.Boolean true if the data source expression object is tracking its view state changes; otherwise, false. Summary: Gets a value that indicates whether a data source expression object is tracking its view state changes.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected Control Owner { get; private set; } Property Value Type: System.Web.UI.Control The owner control. Summary: Gets the owner control.",1,0,0,0,0,0,0,0,0,0,0,1
"Specifies that the search does not have a boundary.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum SearchType Summary: Specifies the type of search in an instance of the SearchExpression class. Remarks: The SearchExpression filter option uses the SearchType enumeration when it performs a string comparison. You set the SearchType property to one of the SearchType enumeration values. Example: The following example shows how to use markup to set the SearchExpression filter option to the StartsWith value of the SearchType enumeration.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class MobileErrorInfo Summary: Provides a structure for reading information about an exception that occurs in a mobile application. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This class is internal and used by the adaptive error handling mechanism to encapsulate exception information. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,1,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class MobileFormsAuthentication Summary: Supports cookieless devices by appending appropriate authentication information to the appropriate URLs. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This helper class is designed to assist with writing authenticated mobile Web sites. The class objects provide mobile device-compatible versions of the ASP.NET FormsAuthentication class methods, RedirectFromLoginPage and SignOut. For more information on securing your Web application, see Basic Security Practices for Web Applications. Example: The following code example shows a login.aspx page. The authentication is validated using the ValidateUser function. The Membership class relies on membership providers to communicate with a data source. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public sealed class MobileResource Summary: Supports looking up culture-specific resources for mobile controls at design time. This class cannot be inherited. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The GetString method provides access to resources at design time. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: protected virtual void OnItemCommand( CommandEventArgs e ) Parameters eType: System.Web.UI.WebControls.CommandEventArgs An CommandEventArgs object that contains event data. Summary: Called when the user activates the control. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The default implementation raises the ItemCommand event. Inheriting classes can override this method to perform other tasks. The OnItemCommand event is raised after the OnClick event. This is useful when you must take the same actions for multiple Command buttons. You can use the CommandName or CommandArgument property of the Command control to identify which Command button was clicked.",1,0,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class Constants Summary: Creates a UI element that allows user invocation of ASP.NET event handlers and provides a way to post user input from UI elements back to the server. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The following table describes the read-only Constants class members you can use. Member Description AlternatingItemTemplateTag Contains the tag name for the AlternatingItem template. ContentTemplateTag Contains the tag name for the Content template. DefaultSessionsStateHistorySize Contains the default depth of the history stack. EventArgumentID The argument associated with the postback event. EventSourceID Contains the query String name of the event target (the control that generated the postback). FooterTemplateTag Contains the tag name for the Footer template. FormIDPrefix Contains the prefix of a form in a URL. HeaderTemplateTag Contains the tag name for the HeaderTemplate. ItemDetailsTemplateTag Contains the tag name for the ItemDetails template. ItemTemplateTag Contains the tag name for the Item template. LabelTemplateTag Contains the tag name for the Label template. OptimumPageWeightParameter Contains the default page weight. PagePrefix Contains a page number delimiter used to ensure proper page numbering in a postback. ScreenCharactersHeightParameter Contains the default for the height of the characters on the screen. ScriptTemplateTag Contains the tag name for the Script template. SelectionListSpecialCharacter Contains the character used in CheckBox IDs for cHTML. SeparatorTemplateTag Contains the tag name for the Separator template. SymbolProtocol Contains the characters used to denote the beginning of an i-mode or J-Phone symbol scheme. UniqueFilePathSuffixVariable Contains the query String name of the unique file path suffix. UniqueFilePathSuffixVariableWithoutEqual Contains the query String name of the unique file path suffix, but no equal sign. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler Unload ASP.NET Copy <asp:DeviceSpecific OnUnload=#EventHandler# /> Summary: Occurs when the server control is unloaded from memory. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [PersistNameAttribute(#Choice#)] [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class DeviceSpecificChoice : IParserAccessor, IAttributeAccessor Summary: Provides a single choice within a DeviceSpecific/Choice construct. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This class is analogous to the <Choice> element. Choices are tested in the order that they appear within a <DeviceSpecific> element. If you specify the Filter property of the <Choice> element, its value must be the name of a device filter defined in the <deviceFilters> section of the Machine.config file. At run time, ASP.NET evaluates the specified device filter against the capabilities of the current device. If successful, the choice is selected. If you do not specify the Filter property, the defaults for the <Choice> element are selected. Example: The following code example shows a <Choice> element within an image. The Source attribute overrides the ImageUrl property of the Image control. Although the example uses functions to determine whether the browser requires WML (isWML11) or supports color (supportsColor), you can instead use a Web.config file to define a <DeviceSpecific> element that the .NET Framework automatically uses to make the determination for you.  Note The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information, see ASP.NET Web Page Syntax Overview.   <%@ Page Language=## Inherits=#System.Web.UI.MobileControls.MobilePage# %> <%@ Register TagPrefix=#mobile# Namespace=#System.Web.UI.MobileControls# Assembly=#System.Web.Mobile# %> <%@ Import Namespace=#System.Web.Mobile# %> <script runat=#server#> private bool supportsColor(MobileCapabilities caps, string optValue) { // Determine if the browser is not a Web crawler and // can display in color if (!caps.Crawler && caps.IsColor) return true; return false; } private bool isWML11(MobileCapabilities caps, string optValue) { // Determine if the browser is not a Web crawler and // requires WML markup if (!caps.Crawler && caps.PreferredRenderingType == MobileCapabilities.PreferredRenderingTypeWml11) return true; return false; } </script> <html xmlns=#http://www.w3.org/1999/xhtml# > <body> <mobile:form id=#form1# runat=#server#> <mobile:Image ID=#Image1# runat=#server# AlternateText=#Cannot display this image.#> <DeviceSpecific> <choice Filter =#isWML11# ImageURL=#wmlImage.wbmp# /> <choice Filter=#supportsColor# ImageURL=#colorImage.gif# /> <choice ImageURL=#monoImg.gif# /> </DeviceSpecific> </mobile:Image> </mobile:form> </body> </html> ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public IDictionary Contents { get; } Property Value Type: System.Collections.IDictionary The overridden properties defined for a choice in a DeviceSpecific/Choice construct. Summary: Gets the overridden properties defined for a choice in a DeviceSpecific/Choice construct. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: Changing this collection after overridden properties have been processed (in the OnDeviceCustomize method) has no effect. This method is used primarily by control designers and is not intended for general use.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public DeviceSpecificChoice this[ int index ] { get; } Parameters indexType: System.Int32 The index number of the item to retrieve from the collection. Property Value Type: System.Web.UI.MobileControls.DeviceSpecificChoice The DeviceSpecificChoice object at the given index in the collection. Summary: Returns a DeviceSpecificChoice item in the collection, by index. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [TypeConverterAttribute(typeof(ExpandableObjectConverter))] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class FontInfo Summary: Provides access to all font-related style information about an ASP.NET mobile control. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The FontInfo class provides a subset of the functionality of the Web Forms System.Web.UI.WebControls.FontInfo class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] public enum FontSize Summary: Specifies the size of the rendered text. This class cannot be inherited. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The FontSize enumeration is a subset of System.Web.UI.WebControls.FontSize, and represents the size of a font in a container. For example, if you have a List control inside of a Panel control, with the Panel control's font size set to Normal, you can specify a small font size for the List control.",1,0,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: public event EventHandler Activate ASP.NET Copy <asp:Form OnActivate=#EventHandler# /> Summary: Occurs when a form becomes active. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The Activate event occurs under the following circumstances: When a page is first requested, the first form is activated. When the ActiveForm property of the page is set programmatically. When the user navigates to a form through a Link control whose target is a form. This event's position in the event chain makes it very important for binding child controls to data sources or for setting a form property that can be inherited by all child controls. Example: The following code example shows how to set the OnActivate attribute in the Form element to point to a method that executes when the Activate event occurs. The Form2_Activate method prepares the second form for display. This example is part of a larger example for the Form overview. Note The following code example uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code example must be copied into an empty text file that has an .aspx extension. For more information, see ASP.NET Web Page Syntax Overview.",1,0,0,0,0,1,1,0,1,0,1,0
"Additional online Documentation: Syntax: void IPostBackEventHandler.RaisePostBackEvent( string eventArgument ) Parameters eventArgumentType: System.String A String that represents an optional event argument to be passed to the event handler. Implements IPostBackEventHandler.RaisePostBackEvent(String) Summary: For a description of this member, see IPostBackEventHandler.RaisePostBackEvent. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This member is an explicit interface member implementation. It can be used only when the Form instance is cast to an IPostBackEventHandler interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public interface IControlAdapter Summary: Defines the interface to a control adapter. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: All control adapters must implement the IControlAdapter interface. Usually, a control adapter inherits directly or indirectly from the ControlAdapter base class, which provides a default implementation of this interface.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: void LoadAdapterState( Object state ) Parameters stateType: System.Object The current view state. Summary: Returns the adapter-specific view for a control. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This method is called when the control loads its private view state. A device adapter can save the adapter-specific view for a control.",1,0,0,0,0,1,0,0,0,0,1,1
"Additional online Documentation: Syntax: bool LoadPostData( string postDataKey, NameValueCollection postCollection, Object controlPrivateData, out bool dataChanged ) Parameters postDataKeyType: System.String Identifies the control.  postCollectionType: System.Collections.Specialized.NameValueCollection Contains the collection of all incoming name values.  controlPrivateDataType: System.Object Provides a place to send private data to the control that might be required for loading of post data. The control determines the type that is passed to the parameter.  dataChangedType: System.Boolean% Returns true if the required the object in privateControlData was changed, so the RaisePostDataChangedEvent event can be raised. Return Value Type: System.Boolean true if the adapter handles loading the post data; otherwise, false. Summary: Returns true if the adapter handles loading the post data. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This method is called when a control that implements the IPostBackDataHandler interface has its own LoadPostData method invoked. Note Different devices might provide their data back to the calling server in different ways. An example is the difference between how WML and HTML report back the results of a SelectionList.",1,0,0,0,0,0,0,0,0,1,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class Label : TextControl ASP.NET Copy <mobile:Label /> Summary: Provides control capability to represent a label control for displaying text on a mobile device. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The Text property, which is inherited from the TextControl class, provides the string that is rendered as the label. Topic Location Walkthrough: Creating Web Pages for Mobile Devices Building ASP .NET Web Applications in Visual Studio ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public override void AddLinkedForms( IList linkedForms ) Parameters linkedFormsType: System.Collections.IList The set of forms that contain links to the specified control. Summary: Adds to the list provided, the set of forms that contains links to the specified control. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: protected override void EnsureChildControls() Summary: Determines whether the server control contains child controls. If it does not, it creates child controls. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public Object CommandSource { get; } Property Value Type: System.Object The control that raised the event. Summary: Returns the control that raised the event. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class ListControlBuilder : MobileControlBuilder Summary: Provides parsing support for List and SelectionList controls. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This class is created internally and used by the page parser when parsing a <mobile:List> or <mobile:SelectionList> tag. The ListControlBuilder class recognizes statically declared MobileListItem elements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,1,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] public enum ListDecoration Summary: Specifies the type of decoration to be added to list items. This class cannot be inherited. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The ListDecoration enumeration represents how you will specify decoration for a list, as bullets, numbers, or no decoration at all. In ASP.NET, you specify the type of decoration for a list by setting the Decoration property.",1,0,0,0,0,0,0,0,0,0,1,0
"Renders list items in a list box with multiple selection capability. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Initializes a new instance of the MobileListItem class. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class MobileListItemCollection : ArrayListCollectionBase, IStateManager Summary: Represents a collection of MobileListItem objects, and is used to hold the items of a List control and a SelectionList control. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: Accessing the Items property of a List control or the Items property of a SelectionList control retrieves a MobileListItemCollection object. You can add or remove items from the collection at run time. A MobileListItemCollection object inherits from the ICollection interface. Example: The following code example shows how you manipulate items in the MobileListItem object through the MobileListItemCollection class. The code uses the selected item's index into the SelectionList.Items property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] public enum MobileListItemType Summary: Assigns an item type to an element in a List or ObjectList control's child controls. This class cannot be inherited. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: When a List or ObjectList control is rendered in templated mode, empty MobileListItem objects with the corresponding item type are created for each header, footer, or separator that needs to be rendered. These empty objects are then inserted into the control's child controls. Note MobileListItem objects that correspond to list items always have a type of ListItem. You can use this enumeration for iterating through the controls collection and finding the MobileListItem objects corresponding to the header, footer, and separator templates.",1,1,1,0,0,0,1,1,0,0,1,0
"Represents a footer for a list. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: protected override int InternalItemCount { get; } Property Value Type: System.Int32 None. Summary: Gets the number of items in the control. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event ObjectListDataBindEventHandler ItemDataBind ASP.NET Copy <asp:ObjectList OnItemDataBind=#ObjectListDataBindEventHandler# /> Summary: Occurs when an item in an ObjectList is bound to data. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: When an item in an ObjectList is created and data-bound, this event handler sets the properties of the list item from arbitrary expressions. An item in an ObjectList control is of type ObjectListItem. Example: The following code example demonstrates how to use ItemDataBind event. You can use either the ListItem or DataItem property of the ObjectListDataBindEventArgs collection to determine further action. This example is part of a larger example for the ObjectList overview.",1,0,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: protected override void TrackViewState() Summary: Causes tracking of view-state changes to the server control so they can be stored in the server control's StateBag object. This object is accessible through the ViewState property. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public string Name { get; set; } Property Value Type: System.String The name of the object list field. Summary: Gets or sets the name of the specified object. The default value is an empty string (##). This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: You can use either the Name or DataField property to find an individual field within its parent collection by using the IndexOf method. Note The IndexOf method returns the first matching field; therefore, it is important that you use unique field names.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: void IStateManager.TrackViewState() Implements IStateManager.TrackViewState Summary: For a description of this member, see IStateManager.TrackViewState. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This member is an explicit interface member implementation. It can be used only when the ObjectListFieldCollection instance is cast to an IStateManager interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public ObjectListItem[] GetAll() Return Value Type: System.Web.UI.MobileControls.ObjectListItem() An array of all the items in the ObjectListItem collection. Summary: Returns an array of all the items in the ObjectListItem collection. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] public delegate void ObjectListSelectEventHandler( Object sender, ObjectListSelectEventArgs e ) Parameters senderType: System.Object The source of the event, an ObjectList.  eType: System.Web.UI.MobileControls.ObjectListSelectEventArgs An ObjectListSelectEventArgs that contains the event data. Summary: Represents the method that handles the ItemSelect event of an ObjectList control. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: When you create an ObjectListSelectEventHandler delegate for an ObjectList control, you identify the method that handles the event. The ObjectList control notifies the handler when an item event is generated. To associate the event with your event handler, add an instance of the delegate to the event. Unless you remove the delegate, the event handler is called whenever the event occurs.",1,0,1,0,0,1,1,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AttributeUsageAttribute(AttributeTargets.Property)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class ObjectListTitleAttribute : Attribute Summary: Provides the title of an object list in an object list field. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This class is used internally by an object list to create autogenerated fields. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: protected override void OnPageChange( int oldPageIndex, int newPageIndex ) Parameters oldPageIndexType: System.Int32 None newPageIndexType: System.Int32 None Summary: Paginates a control. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class PagerStyle : Style Summary: Provides style capability for the pagination UI of a page. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The PagerStyle object is a Style object with additional style properties specific to the pagination user interface (UI) of a form. Use the properties and methods of the PagerStyle class to override default text for the NextPageText, PreviousPageText, and PageLabel properties. For example, if you are programmatically creating a form with Next and Previous links to the appropriate pages, you can override the text for these links by setting the value of the properties previously mentioned. You can use methods, such as GetNextPageText, GetPreviousPageText, or GetPageLabelText to retrieve the current value of the properties. Note The PageLabel property applies only to HTML markup and may not be rendered in other markups such as WML. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,1,0
"Additional online Documentation: Syntax: public string GetPageLabelText( int currentPageIndex, int pageCount ) Parameters currentPageIndexType: System.Int32 The current page index.  pageCountType: System.Int32 The page count. Return Value Type: System.String A formatted string for the UI element used to navigate to the next page. Summary: Returns a formatted string for the UI element used to navigate to the next page. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: Uses the property and the one-based current page index passed in to format the string. Used by form adapters.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string Name { get; } Property Value Type: System.String The name being persisted. Summary: This property is used internally by the ASP.NET page framework. Applications should not use it explicitly. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class RegularExpressionValidator : BaseValidator ASP.NET Copy <mobile:RegularExpressionValidator /> Summary: Provides control capability to validate that another control's value matches a provided regular expression. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This class behaves identically to the ASP.NET System.Web.UI.WebControls.RegularExpressionValidator control. By default, Command controls on a form raise validator controls on the form to perform validation when the form is submitted to the server. To disable automatic validation, set the CausesValidation property on the Command to false. Example: The following example shows how you can add regular expression properties, such as the ValidationExpression and Text properties, programmatically during a page load. Security Note This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: [ValidationPropertyAttribute(#Selection#)] [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class SelectionList : MobileControl, IPostBackDataHandler ASP.NET Copy <mobile:SelectionList /> Summary: Provides several different visual representations for a list of selectable items. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The SelectionList class maintains the selection of single or multiple selected items. The SelectionList is derived directly from the MobileControl class and does not have any of the pagination handling properties, such as the ItemWeight property. Example: In the following code example, the DataSource property of the SelectionList class is an array of values that is created during the initial page load. You can change the setting of the SelectType property to see different versions of a SelectionList. Note The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information, see ASP.NET Web Page Syntax Overview. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public event ListDataBindEventHandler ItemDataBind ASP.NET Copy <asp:SelectionList OnItemDataBind=#ListDataBindEventHandler# /> Summary: Occurs when an item in the list is bound to data. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: When an item in a SelectionList control is created and data-bound, this event handler sets the properties of the list item from arbitrary expressions. An item in a SelectionList control is of type MobileListItem. This event is raised as each data source item is bound. This is the best time to filter or group items of the MobileListItemCollection collection, by using the Text or Value property.",0,1,0,0,0,1,1,1,0,0,1,1
"Additional online Documentation: Syntax: [TypeConverterAttribute(typeof(ExpandableObjectConverter))] [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class Style : IParserAccessor, ITemplateable, IStateManager, ICloneable Summary: Organizes style characteristics of an ASP.NET mobile control. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The base Style class contains style characteristics common to all mobile controls. Classes that inherit from the Style class contain additional style characteristics specific to their associated control. Due to the diversity of devices supported by mobile controls, all style properties are advisory, and might or might not be honored depending on the capabilities of the target device. Topic Location Walkthrough: Implementing a New Style Mobile Application Reference Walkthrough: Implementing a New Style Mobile Application Reference Walkthrough: Implementing a New Style Mobile Application Reference Walkthrough: Implementing a New Style Mobile Application Reference Example: The following example demonstrates three user-defined styles in a StyleSheet object. A SelectionList object holds three values that correspond to the three defined styles. The OnClick command event calls the SelectStyle function, which changes the StyleReference property of the TextView object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: public static readonly Object FontSizeKey Summary: The key for retrieving the style from the embedded style sheet for the Size property of the Font property. Used internally by ASP.NET. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,1,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: void IParserAccessor.AddParsedSubObject( Object o ) Parameters oType: System.Object The parsed subobject to be added. Implements IParserAccessor.AddParsedSubObject(Object) Summary: For a description of this member, see IParserAccessor.AddParsedSubObject. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This member is an explicit interface member implementation. It can be used only when the Style instance is cast to an IParserAccessor interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void Clear() Summary: Clears the collection. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This method is not available in the read-only IObjectListFieldCollection interface. You can use the Clear method for all the classes where this method applies. For example, the Clear method for a StyleSheet collection clears all the styles in the collection; or for the DeviceSpecificChoiceCollection, it clears all the choices in the collection. Adding a field to the fields of an object list changes the data-binding behavior of the control, and requires you to bind data to the control again.",1,0,1,0,0,0,0,0,0,1,1,0
"Additional online Documentation: Syntax: void IPostBackDataHandler.RaisePostDataChangedEvent() Implements IPostBackDataHandler.RaisePostDataChangedEvent Summary: For a description of this member, see IPostBackDataHandler.RaisePostDataChangedEvent. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This member is an explicit interface member implementation. It can be used only when the TextBox instance is cast to an IPostBackDataHandler interface.",0,0,1,1,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class ChtmlSelectionListAdapter : HtmlSelectionListAdapter Summary: Provides a selection list adapter class for the cHTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public HtmlControlAdapter() Summary: Creates a new instance of the HtmlControlAdapter class. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected static readonly int NotSecondaryUI Summary: Returns a constant that defines a mode where no secondary user interface (UI) is displayed. This field is read-only. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The HTML and WML adapter sets support a concept called secondary UI. Secondary UI is used by controls that need to show additional screens of UI, in the same way that a Windows-based application shows dialog boxes. For more information about secondary user interfaces, see the Adapter Sets Functionality documentation.",1,1,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class HtmlLinkAdapter : HtmlControlAdapter Summary: Provides a link adapter class for the HTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This class is used primarily by developers of custom mobile page and control adapters. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Begins a block by using the layout and character formatting from a given style. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Ends a block that has been using the layout and character formatting from a given style. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: protected internal void UnMarkStyleContext() Summary: Closes a style context. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class HtmlObjectListAdapter : HtmlControlAdapter Summary: Provides an object list adapter class for the HTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This class is used primarily by developers of custom mobile page and control adapters. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class HtmlPanelAdapter : HtmlControlAdapter Summary: Provides a panel adapter class for the HTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public override void OnInit( EventArgs e ) Parameters eType: System.EventArgs An object (defined by EventArgs) that contains event data. Implements IControlAdapter.OnInit(EventArgs) Summary: Called after the control is initialized. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class HtmlTextBoxAdapter : HtmlControlAdapter Summary: Provides a text box adapter class for the HTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: protected override void RenderAsHiddenInputField( HtmlMobileTextWriter writer ) Parameters writerType: System.Web.UI.MobileControls.Adapters.HtmlMobileTextWriter The text writer. Summary: Renders hidden field text for a control. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public const string CalendarAdapterOptionPrompt Summary: A string that provides the text that prompts the user to select an option. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The value of this string is #Select an option:#.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Returns a string. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public override void RenderImage( string source, string localSource, string alternateText, bool breakAfter ) Parameters sourceType: System.String Specifies the image URL.  localSourceType: System.String Specifies an optional local image name.  alternateTextType: System.String Specifies text to display if the image cannot be displayed.  breakAfterType: System.Boolean Set to true if a break is required after the image. Summary: Renders any i-mode or J-Phone image references. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public UpWmlPageAdapter() Summary: Creates an instance of the UpWmlPageAdapter class. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual void RenderBeginSelect( string name, string iname, string ivalue, string title, bool multiSelect ) Parameters nameType: System.String The name of the control.  inameType: System.String The name that the browser must use to submit the selected index back to the server.  ivalueType: System.String The initial value.  titleType: System.String The Title attribute on WML devices.  multiSelectType: System.Boolean Whether to allow multiple selections. Summary: Begins rendering a selection list. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: Either name or iname must be non-null. This method can be followed by calls to the RenderSelectOption method for each option, followed by a call to the RenderEndSelect method to end the selection list.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static bool DeviceQualifies( HttpContext context ) Parameters contextType: System.Web.HttpContext The current request context. Return Value Type: System.Boolean true if the device adapter set applies to the specified request; otherwise, false. Summary: Evaluates whether the device adapter set applies to the specified request. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: Class Returns Preferred rendering type Check value of JavaScript property HtmlPageAdapter true Checks whether the value of the PreferredRenderingType property is PreferredRenderingTypeHtml32 or PreferredRenderingTypeChtml10. The JavaScript property returns true. ChtmlPageAdapter true Checks whether the value of the PreferredRenderingType property is PreferredRenderingTypeHtml32 or PreferredRenderingTypeChtml10. JavaScript property returns false. WmlPageAdapter true Checks whether the value of the PreferredRenderingType property is PreferredRenderingTypeWml11 or PreferredRenderingTypeWml12. Not applicable.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual bool IsFormRendered( Form form ) Parameters formType: System.Web.UI.MobileControls.Form Programmatic name of the form. Return Value Type: System.Boolean true if the specified form is to be rendered as part of the current request; otherwise, false. Summary: Returns whether or not the specified form is to be rendered as part of the current request. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: For the HtmlPageAdapter class, only the active form is rendered for each request. For the WmlPageAdapter class, multiple forms can be combined as cards into a single deck, if size permits.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public override MobilePage Page { get; set; } Property Value Type: System.Web.UI.MobileControls.MobilePage The page associated with the device adapter. Implements IPageAdapter.Page IControlAdapter.Page IControlAdapter.Page Summary: Gets or sets the MobilePage to which the adapter is attached. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class WmlPhoneCallAdapter : WmlControlAdapter Summary: Provides a phone call adapter class for the Wireless Markup Language (WML) device adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The WML call adapter renders the PhoneCall by using a #tel:# URL on a phone with telephony capability. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: protected override string GetPostBackValue() Return Value Type: System.String The postback value (or empty string) of the selected item in the selection list. Summary: Returns the postback value (or empty string) of the TextBox when the parent form's action attribute is set and view state is disabled for the control. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class WmlTextViewAdapter : WmlControlAdapter Summary: Provides a TextView adapter class for the Wireless Markup Language (WML) device adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Generates the target-specific markup for the control to which the control adapter is attached. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class XhtmlCssHandler : IHttpHandler, IRequiresSessionState Summary: Handles requests for cascading style sheet (CSS) style information for adapters in the System.Web.UI.MobileControls.Adapters.XhtmlAdapters namespace. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: For your Web site to take advantage of the XhtmlCssHandler class, you must add an HttpHandlers property section to the Web.config file, as shown in the following code example: ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: public XhtmlCssHandler() Summary: Initializes a new instance of the XhtmlCssHandler class. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class XhtmlImageAdapter : XhtmlControlAdapter Summary: Provides an image adapter class for the XHTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The control adapters in the System.Web.UI.MobileControls.Adapters.XhtmlAdapters namespace provide XHTML rendering and processing for mobile controls on a variety of display devices. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,1,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class XhtmlLinkAdapter : XhtmlControlAdapter Summary: Provides a link adapter class for the XHTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The control adapters in the System.Web.UI.MobileControls.Adapters.XhtmlAdapters namespace provide XHTML rendering and processing for mobile controls on a variety of display devices. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class XhtmlMobileTextWriter : MobileTextWriter Summary: Provides text writer functionality for devices targeted by the XHTML adapter set, including Extensible Hypertext Markup Language (XHTML), XHTML Mobile, and Wireless Markup Language (WML). For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: XHTML is an XML-compliant markup that is based on HTML 4.1 and allows you to create Web sites suitable for multiple device types. It merges HTML's ease of use with XML's strict element guidelines to produce a markup language with a wide range of format and style options and reduced markup tag ambiguity. This class provides formatting capabilities that ASP.NET server controls use when rendering XHTML content to clients. The XhtmlMobileTextWriter renders markup that meets the standards of three different XHTML doc types: XHTML Basic, which supports limited style and format elements; XHTML Mobile Profile, which supports inline style sheets; and WML 2.0, which is based on XHTML 1.1 and supports cascading style sheets. This class is used primarily by developers of custom mobile page and control adapters. The XhtmlMobileTextWriter class can render all HTML elements, attributes, and style attributes, but, unlike the HtmlTextWriter class, does not allow title capitalization of these markup elements. An XhtmlPageAdapter instantiates an XhtmlMobileTextWriter and depending on the capabilities of the target device, initializes a number of properties, such as SupportsNoWrapStyle, SuppressNewLine, and UseDivsForBreaks, that assist the text writer in rendering the page and its controls. Your adapter can use a variety of methods to apply styles and control formatting: EnterStyle and ExitStyle, EnterLayout and ExitLayout, and EnterFormat and ExitFormat. Note This class derives from the MobileTextWriter class, which in turn derives from the MultiPartWriter class, and much of its functionality is provided by these base classes. You can use the members of this class, and any members it inherits from the MobileTextWriter class, to create custom text writers to use in a custom XHTML page or in class adapters. You can also create new derived classes that override the standard behavior of the XhtmlMobileTextWriter class. Device filtering is required in order to use a specific adapter or text writer for a server control. For more information about device filtering, see Architectural Overview of Adaptive Control Behavior and ASP.NET Device Filtering Overview. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,1,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class XhtmlObjectListAdapter : XhtmlControlAdapter Summary: Provides an object list adapter for the mobile XHTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The XhtmlObjectListAdapter class can be used by mobile control developers to display an ObjectList control on new devices or for new markup standards. For more information, see Control and Adapter Interaction. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class XhtmlSelectionListAdapter : XhtmlControlAdapter Summary: Provides a selection list adapter class for the XHTML adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The control adapters in the System.Web.UI.MobileControls.Adapters.XhtmlAdapters namespace provide XHTML rendering and processing for mobile controls on a variety of display devices. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,0
"Summary: Initializes a new instance of the  class. ",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class GTRegex : Regex Summary: Provides a regular expression to match a greater than (>) character. Remarks: The System.Web.RegularExpressions classes are used internally by the .NET Framework to parse ASP.NET pages. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class LTRegex : Regex Summary: Provides a regular expression to look for a less than (<) character. Remarks: The System.Web.RegularExpressions classes are used internally by the .NET Framework to parse ASP.NET pages. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class TextRegex : Regex Summary: Provides a regular expression to match all characters until the next less than (<) character. Remarks: The System.Web.RegularExpressions classes are used internally by the .NET Framework to parse ASP.NET pages. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class Route : RouteBase Summary: Provides properties and methods for defining a route and for obtaining information about the route. Remarks: The Route class enables you to specify how routing is processed in an ASP.NET application. You create a Route object for each URL pattern that you want to map to a class that can handle requests that correspond to that pattern. You then add the route to the Routes collection. When the application receives a request, ASP.NET routing iterates through the routes in the Routes collection to find the first route that matches the pattern of the URL. Set the Url property to a URL pattern. The URL pattern consists of segments that come after the application name in an HTTP request. For example, in the URL http://www.contoso.com/products/show/beverages, the pattern applies to products/show/beverages. A pattern with three segments, such as {controller}/{action}/{id}, matches the URL http://www.contoso.com/products/show/beverages. Each segment is delimited by the / character. When a segment is enclosed in braces ( { and } ), the segment is referred to a URL parameter. ASP.NET routing retrieves the value from the request and assigns it to the URL parameter. In the previous example, the URL parameter action is assigned the value show. If the segment is not enclosed in braces, the value is treated as a literal value. Set the Defaults property to a RouteValueDictionary object that includes values that are used if a parameter is missing from the URL or to set additional values that are not parameterized in the URL. Set the Constraints property to a RouteValueDictionary object that contains values that are either regular expressions or IRouteConstraint objects. These values are used to determine whether a parameter value is valid. Example: The following example shows how to create a Route object and add it to the Routes property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,1,1
"Additional online Documentation: Syntax: public IDisposable GetWriteLock() Return Value Type: System.IDisposable An object that manages thread safety. Summary: Provides an object for managing thread safety when you add or remove elements in the collection. Remarks: The recommended approach for defining routes in an ASP.NET application is to add the routes to the Routes property in an event handler for the Application_Start event in the Global.asax file. For more information, see RouteCollection. If you have to add a route when the application is running, you use the GetWriteLock method to guarantee thread safety. The write lock on the route collection is released when the IDisposable object that is returned by this method is disposed. Example: The following example shows how to use the GetWriteLock method when you add a route while the application is running.",1,0,0,0,1,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public RouteBase Route { get; set; } Property Value Type: System.Web.Routing.RouteBase An object that represents the route that matched the parameters that were used to generate a URL. Summary: Gets or sets the route that is used to create the URL.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Summary: Initializes a new instance of the WebMethodAttribute class.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the WebMethodAttribute class.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public WsiProfiles ConformsTo { get; set; } Property Value Type: System.Web.Services.WsiProfiles One of the WsiProfiles values, indicating a WSI specification. Summary: Gets or sets the Web Services Interoperability (WSI) specification to which the binding claims to conform. Remarks: The WS-I organization publishes guidelines to ensure the interoperability of Web services across platforms. This property indicates the WSI specification to which the binding claims to conform. The EmitConformanceClaims property controls whether the conformance claims are provided when a WSDL description of the Web service is published.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(WsiProfilesElement))] public sealed class WsiProfilesElementCollection : ConfigurationElementCollection Summary: Contains a strongly typed collection of WsiProfilesElement objects. Remarks: The WsiProfilesElementCollection class is used to work with a collection of WsiProfilesElement objects. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class)] public sealed class XmlFormatExtensionPointAttribute : Attribute Summary: Specifies the XML namespace and XML namespace prefix to use for a service description format extension within a service description. This class cannot be inherited. Remarks: A service description format extension extends how a service description is generated for an XML Web service created using ASP.NET. Specifically, a service description format extension adds XML elements to the service description. This is useful when a SOAP extension is built to run on both the client and server side of an XML Web service, as information about SOAP extensions is not automatically placed in the service description. If you add information about the SOAP extension to the service description, a client can thus interpret that it must run the specific SOAP extension. An example of a SOAP extension that must run on both the client and server is an encryption SOAP extension. If an encryption SOAP extension runs on only the server, and it encrypts return values before sending them back to the client, the client must have the SOAP extension running to decrypt the SOAP message. Otherwise, the client cannot process the return value. Use the following steps to build a service description format extension: Build a class that derives from ServiceDescriptionFormatExtension. Apply a XmlFormatExtensionAttribute to the class and specify the extension points at which the service description format extension should run. Optionally, apply a XmlFormatExtensionPointAttribute to the class and specify a member within the class to act as a new extension point. Optionally, apply a XmlFormatExtensionPrefixAttribute to the class and specify the XML namespace prefix to be associated with XML elements generated by the service description format extension. Configure the service description format extension to run within the serviceDescriptionFormatExtensionTypes section of the configuration file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Determines whether a sequence contains a specified element.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class BasicProfileViolationEnumerator : IEnumerator<BasicProfileViolation>, IDisposable, IEnumerator Summary: Enumerates the elements in a BasicProfileViolationCollection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class MessageBinding : NamedItem Summary: Describes how abstract content is mapped into a concrete format. Remarks: This abstract class forms the base class for the following classes: FaultBinding InputBinding OutputBinding Example: The following example demonstrates a typical use of the MessageBinding class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [XmlFormatExtensionPointAttribute(#Extensions#)] public sealed class MimePart : ServiceDescriptionFormatExtension Summary: Represents an extensibility element added to a MimeMultipartRelatedBinding, specifying the concrete MIME type for the MessagePart to which the MimePart applies. This class cannot be inherited. Remarks: For more information about specifying protocols for XML Web services, see [<topic://cpconbuildingaspnetwebservices>]. For more information about Web Services Description Language (WSDL), see the specification at http://www.w3.org/TR/wsdl/. Example: The following example demonstrates the use of the methods and properties exposed by the MimePart class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,1,0,1,1
"Additional online Documentation: Syntax: [XmlFormatExtensionPointAttribute(#Extensions#)] public sealed class Operation : NamedItem Summary: Provides an abstract definition of an action supported by the XML Web service. This class cannot be inherited. Remarks: The Operation class corresponds to the Web Services Description Language (WSDL) operation element enclosed by the portType element. For more information about WSDL, see the specification at http://www.w3.org/TR/wsdl/. Example: The following example demonstrates a typical use of the Operation class. The example takes a ServiceDescription that does not have a PortType that supports the HTTP POST protocol. It adds a PortType instance that supports POST, and writes out a new WSDL contract. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: public sealed class OperationCollection : ServiceDescriptionBaseCollection Summary: Represents a collection of instances of the Operation class. This class cannot be inherited. Remarks: The Operation class corresponds to the Web Services Description Language (WSDL) <operation> element enclosed by the <portType> element. For more information about WSDL, see the specification at http://www.w3.org/TR/wsdl/. Example: The following example demonstrates the use of the properties and methods exposed by the OperationCollection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: public sealed class OperationFaultCollection : ServiceDescriptionBaseCollection Summary: Represents a collection of instances of the OperationFault class. This class cannot be inherited. Remarks: The OperationFault class corresponds to the Web Services Description Language (WSDL) <fault> element enclosed by the <operation> element that is in turn enclosed by the <portType> element. For more information about WSDL, see the specification at http://www.w3.org/TR/wsdl/. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public sealed class OperationMessageCollection : ServiceDescriptionBaseCollection Summary: Represents a collection of OperationInput and OperationOutput messages related to an XML Web service. This class cannot be inherited. Remarks: An instance of this class will be returned by the Messages property of the parent Operation. As such, it can have exactly two members, one an OperationInput and the other an OperationOutput. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class PortCollection : ServiceDescriptionBaseCollection Summary: Represents a collection of instances of the Port class. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public void CopyTo( PortType[] array, int index ) Parameters arrayType: System.Web.Services.Description.PortType() An array of type PortType serving as the destination for the copy action.  indexType: System.Int32 The zero-based index at which to start placing the copied collection. Summary: Copies the entire PortTypeCollection to a one-dimensional array of type PortType, starting at the specified zero-based index of the target array.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Gets or sets the PortType specified by the parameter passed in.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public Operation Operation { get; } Property Value Type: System.Web.Services.Description.Operation The abstract Web Services Description Language (WSDL) operation that the protocol importer is currently processing to generate a method in a binding class. Summary: Gets the abstract Web Services Description Language (WSDL) operation that the protocol importer is currently processing to generate a method in a binding class. Remarks: The operation appears as a child of the PortType element in a WSDL document. The method is generated with a WebMethodAttribute class.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Service Service { get; } Property Value Type: System.Web.Services.Description.Service The Web Services Description Language (WSDL) service that contains a reference to the binding that the protocol importer is currently processing to generate a binding class. Summary: Gets the Web Services Description Language (WSDL) service that contains a reference to the binding that the protocol importer is currently processing to generate a binding class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Binding GetBinding( XmlQualifiedName name ) Parameters nameType: System.Xml.XmlQualifiedName An XmlQualifiedName whose Name property is used to retrieve a Binding instance. Return Value Type: System.Web.Services.Description.Binding A Binding. Summary: Searches the ServiceDescriptionCollection and returns the Binding with the specified name that is a member of one of the ServiceDescription instances contained in the collection.",1,0,0,1,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public abstract class ServiceDescriptionFormatExtension Summary: Represents an extensibility element added to an XML Web service. Remarks: In a derived class, the ServiceDescriptionFormatExtension class allows users to define extensibility elements in addition to those defined in the Web Services Description Language (WSDL) specification. Extensibility elements can be added to a ServiceDescription at any of several levels within the class hierarchy. Thus many classes derived from the DocumentableItem class (including the ServiceDescription class) have an Extensions property, which returns a ServiceDescriptionFormatExtensionCollection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ServiceDescriptionFormatExtensionCollection : ServiceDescriptionBaseCollection Summary: Represents the collection of extensibility elements used by the XML Web service. This class cannot be inherited. Remarks: This collection can either contain instances of classes deriving from ServiceDescriptionFormatExtension, or instances of the XmlElement class. In a derived class, ServiceDescriptionFormatExtension class allows users to define extensibility elements in addition to those defined in the Web Services Description Language (WSDL) specification. Use these in your ServiceDescriptionFormatExtensionCollection if you know in advance the type of extensibility element you want to make. Use an XmlElement when you do not know the format of an element in advance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] public class ServiceDescriptionImporter Summary: Exposes a means of generating client proxy classes for XML Web services. Remarks: The interface to an XML Web service is typically described by a Web Services Description Language (WSDL) file. For example, to obtain a WSDL description of a Web service using ASP.NET exposed at http://localhost/service.asmx, simply navigate to http://localhost/service.asmx?WSDL. The ServiceDescriptionImporter class allows you to easily import the information contained in a WSDL description into a System.CodeDom.CodeCompileUnit object. By adjusting the value of the Style parameter, you can instruct a ServiceDescriptionImporter instance either to generate a client proxy class that provides the functionality of the Web service by transparently calling it or to generate an abstract class that encapsulates the functionality of the Web service without implementing it. The code in the resulting CodeCompileUnit object can then either be called directly or exported in the language of your choice. Example: The following example illustrates the use of the ServiceDescriptionImporter class to generate proxy client code that calls an XML Web service described by a WSDL file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum ServiceDescriptionImportWarnings Summary: Specifies the type of warnings produced by Import.",1,1,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public ServiceDescriptionCollection ServiceDescriptions { get; } Property Value Type: System.Web.Services.Description.ServiceDescriptionCollection A ServiceDescriptionCollection. Summary: Gets a reference to the ServiceDescriptionCollection associated with the XML Web service. Remarks: This property is initialized with a Count of zero. Any members must be explicitly added using the collection's Add method. For more information about Web Services Description Language (WSDL), see the specification at http://www.w3.org/TR/wsdl/.",1,0,0,0,1,0,0,1,0,0,1,1
"Additional online Documentation: Syntax: public enum SoapBindingStyle Summary: Specifies the type of action that occurs in the XML Web service at the level of the class hierarchy to which this enumeration is applied. Remarks: This enumeration allows the user to specify whether the message being transmitted is procedure-oriented or document-oriented. Procedure-oriented messages contain parameters and return values, while document-oriented messages contain documents.",1,1,0,1,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public enum SoapBindingUse Summary: Specifies whether the message parts are encoded as abstract type definitions or concrete schema definitions. Remarks: This enumeration applies to extensibility elements which specify that data transmissions use the SOAP protocol, and which are added to FaultBinding, InputBinding and OutputBinding instances. For more information about specifying protocols for XML Web services, see [<topic://cpconbuildingaspnetwebservices>]. For more information about Web Services Description Language (WSDL), see the specification at http://www.w3.org/TR/wsdl/.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] public abstract class SoapExtensionReflector Summary: Provides a common interface and functionality for classes to add SOAP extension information to a ServiceDescription object on a per-method basis. Remarks: The abstract SoapExtensionReflector class exposes an abstract method, ReflectMethod. This abstract method allows a derived class to add descriptions of SOAP extensions when reflecting a Web method into objects that are placed in a ServiceDescription object. The method itself is not an input. The descriptions get added for all Web methods belonging to a specified binding that produces a ServiceDescription. You can use a ServiceDescriptionto generate a Web Services Description Language (WSDL) document via the Write method. The ServiceDescriptionImporter class and related classes can also use a ServiceDescription to generate client proxy code or abstract server code. Use a class derived from the SoapExtensionReflector class in conjunction with a class derived from the abstract SoapExtension class to extend run-time processing of SOAP messages on the client or service. You can specify SoapExtensionReflectorin a configuration file via the <soapExtensionReflectorTypes> element and its child add element. You can also apply the configuration to an ASP.NET Web application that publishes a Web service. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public bool MapToProperty { get; set; } Property Value Type: System.Boolean true if the SoapHeaderBinding maps to a specific property; otherwise false. Summary: Gets or sets a value indicating whether the SoapHeaderBinding instance is mapped to a specific property in generated proxy classes.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class SoapHeaderFaultBinding : ServiceDescriptionFormatExtension Summary: Represents an extensibility element added to an InputBinding or an OutputBinding within an XML Web service. It specifies the SOAP header types used to transmit error information within the SOAP header. Remarks: For more information about specifying protocols for XML Web services, see [<topic://cpconbuildingaspnetwebservices>]. For more information about Web Services Description Language (WSDL), see the specification at http://www.w3.org/TR/wsdl/. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public SoapCodeExporter SoapExporter { get; } Property Value Type: System.Xml.Serialization.SoapCodeExporter An object of type SoapCodeExporter used internally by the SoapProtocolImporter class to generate code from mappings between SOAP-encoded XML schema content and .NET Framework types. Summary: Gets the object of type SoapCodeExporter used internally by the SoapProtocolImporter class to generate code from mappings between SOAP-encoded XML schema content and .NET Framework types. Remarks: The SoapProtocolImporter class uses a SoapCodeExporter object to create code from .NET Framework type mappings for XML schema elements and data types that enable SOAP encoding, as opposed to literal XML Schema usage. SOAP encoding is specified in section 5 of the SOAP 1.1 specification. SOAP encoding uses the namespace #http://schemas.xmlsoap.org/soap/encoding/#.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public class WebReferenceOptions Summary: The WebReferenceOptions class represents code generation options specified in an XML text file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class DiscoveryClientResultCollection : CollectionBase Summary: Contains a collection of DiscoveryClientResult objects. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public const string Namespace Summary: Namespace of the discovery XML element of a discovery document. Remarks: A discovery document contains references to documents describing Web Services. These references are XML elements contained within a discovery XML element. That discovery XML element is a member of the XML namespace specified by the Namespace constant. Example: The following code example displays the XML namespace associated with the discovery XML element of a discovery document.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class DiscoveryDocumentReference : DiscoveryReference Summary: Represents a reference to a discovery document. This class cannot be inherited. Remarks: XML Web services discovery involves discovering the available XML Web services given an URL. The URL typically points to a discovery document, which usually has a.disco file name extension. The discovery document contains references to information about the existance of XML Web services, such as Service Descriptions, XML Schema Definition language (XSD) schemas, or other discovery documents. This class represents a reference to a discovery document. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DiscoveryDocumentReference class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class DiscoveryDocumentSearchPattern : DiscoverySearchPattern Summary: Obtains the file locations of Web services discovery documents for use in populating another Web services discovery document. This class cannot be inherited. Remarks: The DiscoveryDocumentSearchPattern class inherits from the abstract DiscoverySearchPattern class and is employed by the DiscoveryRequestHandler class's ProcessRequest method, which handles an HTTP request for a discovery document. Normally, none of these classes need to be used directly by a developer. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public static string FilenameFromUrl( string url ) Parameters urlType: System.String The URL on which the name of the file is based. Return Value Type: System.String Name of the file based on the passed URL. Summary: Returns a file name based on the passed URL.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static DynamicDiscoveryDocument Load( Stream stream ) Parameters streamType: System.IO.Stream A Stream object from which the XML dynamic discovery document is deserialized. Return Value Type: System.Web.Services.Discovery.DynamicDiscoveryDocument A DynamicDiscoveryDocument. Summary: Deserializes an XML document into a DynamicDiscoveryDocument instance. Remarks: This static method takes an XML document, represented as a Stream, and converts in to a DynamicDiscoveryDocument .",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void Write( Stream stream ) Parameters streamType: System.IO.Stream A Stream object to which the XML dynamic discovery document is serialized. Summary: Serializes a DynamicDiscoveryDocument instance into an XML document specified as an output stream.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class HttpPostClientProtocol : HttpSimpleClientProtocol Summary: The base class for XML Web service client proxies that use the HTTP-POST protocol. Remarks: When an XML Web service client uses the HTTP-POST protocol, by default parameters are encoded within the HTTP body using URL encoding rules and uses plain XML for the response. This protocol uses classes that derive from MimeFormatter to encode parameters and return values into standard MIME formats. The encoders to use are specified in the service description. If you are building an XML Web service client using ASP.NET, then a proxy class deriving indirectly or directly from WebClientProtocol needs to be created for the XML Web service you want to call. When the XML Web service client is calling using HTTP, derive the proxy class HttpSimpleClientProtocol, which in turn derives from WebClientProtocol. HttpGetClientProtocol and HttpPostClientProtocol derive from HttpSimpleClientProtocol, providing the support for calling an XML Web service method using HTTP-GET and HTTP-POST respectively. Clients calling an XML Web service using SOAP should derive from SoapHttpClientProtocol. For details on building a proxy class, see [<topic://cpconcreatingwebserviceproxy>]. Example: The following example is a proxy class generated by the Wsdl.exe utility for the Math XML Web service below. The proxy class derives from HttpPostClientProtocol, which derives from the abstract HttpSimpleClientProtocol class.  The following example is the Math XML Web service, from which the previous proxy class was created.    <%@ WebService Language=## Class=#Math#%> using System.Web.Services; using System; public class Math { [ WebMethod ] public int Add(int num1, int num2) { return num1+num2; } } ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,1,1,0,1,1
"Additional online Documentation: Syntax: public string Name { get; } Property Value Type: System.String The name of the method represented by this LogicalMethodInfo. Summary: Gets the name of the method represented by this LogicalMethodInfo.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public abstract class MimeFormatter Summary: Provides an abstract base class for all readers and writers for Web services and clients implemented using HTTP but without SOAP. Remarks: Web service writers and readers serialize and deserialize, respectively, between the parameter or return objects of Web methods and the HTTP request or response streams. The MimeFormatter class establishes a common interface and functionality for reader and writer classes, in both client and service-side . The MimeFormatter class supports the .NET Framework's implementations of Web services via the HTTP-GET and HTTP-POST operations. In HTTP-GET operations request parameters are encoded in the HTTP request's Uniform Resource Locator (URL). In HTTP-POST operations, request parameters are encoded in the HTTP request body, as with an HTML form. With both implementations, the return value appears in the HTTP response body as a non-SOAP XML document. A developer typically does not need to directly use MimeFormatter or its descendant classes. Instead, when the Wsdl.exe tool generates client proxy code according to the HTTP-GET or HTTP-POST implementations, it applies the HttpMethodAttribute to each Web method and sets the attribute's ParameterFormatter and ReturnFormatter properties to the appropriate type derived from the MimeFormatter class. On the server, the appropriate derived types are used according to settings in an ASP.NET configuration file (Web.config). On the client the appropriate derived types are determined from the WSDL. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected MimeParameterReader() Summary: Initializes a new instance of the MimeParameterReader class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class NopReturnReader : MimeReturnReader Summary: Serves as a non-acting reader of incoming response return values for Web service clients implemented using HTTP but without SOAP. Remarks: NopReturnReader and other classes in the System.Web.Services.Protocols namespace support the .NET Framework's implementations of Web services via the HTTP-GET and HTTP-POST operations. Web service writers and readers serialize and deserialize, respectively, between the parameters or return objects of Web methods and the HTTP request or response streams. Web service writers and readers use HTTP for transport but don't exchange messages using the SOAP standard. The NopReturnReader class provides a non-reading implementation of the interface of the abstract class MimeReturnReader. You typically will not need to use the NopReturnReader class. Instead, when the Wsdl.exe tool generates client proxy code according to the HTTP-GET or HTTP-POST implementations, .it applies the HttpMethodAttribute to each Web method and, by default, sets the attribute's ReturnFormatter property to XmlReturnReader, another class derived from MimeReturnReader. Wsdl.exe sets the property to NopReturnReader if it is otherwise unable to determine a value. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override Object Read( WebResponse response, Stream responseStream ) Parameters responseType: System.Net.WebResponse A WebResponse object containing the output message for an operation. responseStreamType: System.IO.Stream A Stream whose content is the body of the HTTP response represented by the response parameter. Return Value Type: System.Object Nothing. Summary: Returns Nothing instead of deserializing the HTTP response stream into a Web method return value. Remarks: The NopReturnReader class's implementation of the Read method does no reading. Instead it returns Nothing. It also closes the response stream.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Object Match( string text ) Parameters textType: System.String The text to search, which is the body of the HTTP response. Return Value Type: System.Object An object representing a Web method return value. Summary: Searches a text input to deserialize an object representing a Web method return value. Remarks: The Match method's return value is the Web method return value deserialized from the input text.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected internal HttpRequest Request { get; } Property Value Type: System.Web.HttpRequest An HttpRequest object. Summary: Gets the HttpRequest object for the derived class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class SoapException : SystemException Summary: Represents the exception that is thrown when an XML Web service method is called over SOAP and an exception occurs. Remarks: The SoapException can either be thrown by the common language runtime or by an XML Web service method. The common language runtime can throw a SoapException if a response to a request is not formatted correctly. XML Web service methods can generate a SoapException by simply throwing an exception within the XML Web service method. If the client accessed the method over SOAP, the exception is caught on the server and wrapped inside a new SoapException. The SoapException thrown has the following property values: Property Value Message The Message property of the original exception. Code ServerFaultCode . Actor The URL of the XML Web service method. Detail Nothing , but an empty detail element is present in the fault element. An XML Web service method might throw a SoapException when clients call using SOAP. If an XML Web service throws the SoapException, other details can be added through the Actor, Code and Detail properties that cannot otherwise be set by an XML Web service method if another type of exception is thrown. Example: The following example throws a SoapException where the XML Web service method sets the Detail property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,1,1,0,1,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the SoapException class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method, AllowMultiple = true)] public sealed class SoapHeaderAttribute : Attribute Summary: This attribute is applied to an XML Web service method or an XML Web service client to specify a SOAP header that the XML Web service method or XML Web service client can process. This class cannot be inherited. Remarks: The basic steps to receiving and processing a SOAP header are: Create a class deriving from SoapHeader representing the data passed in the SOAP header. Add a member to the XML Web service class or XML Web service client proxy class of the type created in step 1. Apply a SoapHeaderAttribute to the XML Web service method or the corresponding method in the proxy class, specifying the member created in step 2 in the MemberName property. Within the XML Web service method or XML Web service client code, access the MemberName property to process the data sent in the SOAP header. For more details, see the MemberName property. Example: The following MyWebService XML Web service defines one SoapHeader of type MyHeader. The Hello XML Web service method requires the client to invoke the XML Web service method with this SoapHeader. The Hello XML Web service also catches any SOAP headers other than MyHeader. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class SoapHeaderException : SoapException Summary: The SOAP representation of a server error. Remarks: When an XML Web service client adds a SOAP header to an XML Web service method call with the MustUnderstand property set to true, the XML Web service method must set the DidUnderstand property to true; otherwise, a SoapHeaderException is thrown. The Detail property cannot be set according to the SOAP specification for a SoapHeaderException. Note Applications that use the SOAP 1.1 specification as the service protocol can use the SoapHeaderException to access SOAP faults. However, applications that use the SOAP 1.2 specification must use the SoapException to access SOAP faults. Example: In the following example, an XML Web service client calls the MyWebMethod XML Web service method, passing in a SOAP header of type MyHeader with the MustUnderstand property set to true. If the XML Web service method does not set the DidUnderstand property of the MyHeader SOAP header to true, a SoapHeaderException is thrown. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,0,0,1,1,0,0
"Additional online Documentation: Summary: Initializes a new instance of the SoapHeaderException class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected Object[] Invoke( string methodName, Object[] parameters ) Parameters methodNameType: System.String The name of the XML Web service method.  parametersType: System.Object() An array of objects that contains the parameters to pass to the XML Web service. The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class. Return Value Type: System.Object() An array of objects that contains the return value and any reference or out parameters of the derived class method. Summary: Invokes an XML Web service method synchronously using SOAP. Remarks: Typically, you do not call the Invoke method directly, unless you are building your own proxy class for an XML Web service. A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class. The proxy class calls the Invoke method to invoke an XML Web service method call. For example, if an XML Web service exposes an XML Web service method named Add, the proxy class also contains a method named Add. Within the code for the Add method in the proxy class, a synchronous call is made to the XML Web service method through the Invoke method and then the results are placed into the expected return type for Add. The methodName parameter is used to find the custom attributes that may have been added to the method, such as SoapDocumentMethodAttribute. SoapDocumentMethodAttribute provides additional information on the derived method which is required for the SOAP protocol. Example: The following code example is a proxy class generated by Wsdl.exe for the Math XML Web service. Within the Add method of the proxy class, the Invoke method is calling the Add XML Web service method.  The following code example is the Math XML Web service, from which the preceding proxy class was created.    <%@ WebService Language=## Class=#MyMath#%> using System.Web.Services; using System; [WebService(Namespace=#http://www.contoso.com/#)] public class MyMath { [ WebMethod ] public int Add(int num1, int num2) { return num1+num2; } }",1,0,0,1,1,1,1,0,1,0,0,0
"Additional online Documentation: Syntax: protected abstract void EnsureOutStage() Summary: When overridden in a derived class, asserts that the current SoapMessageStage stage is a stage where out parameters are available. Remarks: The asserted stage is different for XML Web service clients and XML Web service methods. An XML Web service method's out parameters are available prior to the SOAP response serialization process in the BeforeSerialize stage. In an XML Web service client, the out parameters are available after the SOAP response deserialization process in the AfterDeserialize stage. EnsureOutStage can be called during any SoapMessageStage, however an InvalidOperationException is thrown when out parameters are not available.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public SoapHeaderCollection Headers { get; } Property Value Type: System.Web.Services.Protocols.SoapHeaderCollection A SoapHeaderCollection of the SOAP headers applied to the current SOAP request or SOAP response. Nothing, if there are no SOAP headers. Summary: A collection of the SOAP headers applied to the current SOAP request or SOAP response. Remarks: SOAP headers are an optional portion of a SOAP request or SOAP response. For more details on using SOAP headers in XML Web services created using ASP.NET and their clients, see the SoapHeader class. Although the Headers property can be accessed at any stage, it is only populated with the SOAP header information in the BeforeSerialize and AfterDeserialize stages.",1,0,0,0,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class)] public sealed class SoapRpcServiceAttribute : Attribute Summary: Sets the default format of SOAP requests and responses sent to and from XML Web service methods within the XML Web service. Remarks: The SoapRpcServiceAttribute allows you to set the default encoding style for XML Web service methods within an XML Web service to RPC method encoding and Encoded parameter encoding. Web Services Description Language (WSDL) defines two styles for how an XML Web service method, or operation, can be encoded in a SOAP request or a SOAP response: RPC and Document. The RPC style refers to encoding the XML Web service method according to section 7 of the SOAP specification for using SOAP for RPC. This style specifies that all parameters are encapsulated within a single element named after the XML Web service method, and that each element within that element represents a parameter named after its respective parameter name. To set the default method level encoding to Document, apply a SoapDocumentServiceAttribute to the class implementing the XML Web service. For more details, see [<topic://cpconCustomizingSOAPInASPNETWebServicesWebServiceClients>]. This attribute can be applied to a class implementing an XML Web service. Example: The following example shows how to use the SoapRpcServiceAttribute class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public bool OneWay { get; } Property Value Type: System.Boolean true if the XML Web service client does not wait for the Web server to completely process this XML Web service method; otherwise, false. Summary: Gets a Boolean that indicates whether an XML Web service client waits for the Web server to finish processing this XML Web service method.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public SoapServerProtocolFactory() Summary: Creates a new SoapServerProtocolFactory.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class UrlEncodedParameterWriter : MimeParameterWriter Summary: Provides URL encoding functionality for writers of out-going request parameters for Web service clients implemented using HTTP but without SOAP. Remarks: UrlEncodedParameterWriter and other classes in the System.Web.Services.Protocols namespace support the .NET Framework's implementations of Web services via the HTTP-GET and HTTP-POST operations. Web service writers and readers serialize and deserialize, respectively, between the parameters or return objects of Web methods and the HTTP request or response streams. Web service writers and readers use HTTP for transport but don't exchange messages using the SOAP standard. The abstract UrlEncodedParameterWriter class inherits from the abstract MimeParameterWriter class, adding URL encoding functionality for client-side writing of Web method parameters into HTTP request streams. You typically will not need to use UrlEncodedParameterWriter or its descendant classes directly. Instead, when the Wsdl.exe tool generates client proxy code according to the HTTP-GET or HTTP-POST implementations, it applies the HttpMethodAttribute to each Web method and sets the attribute's ParameterFormatter property to the appropriate type. Note The Hypertext Transfer Protocol--HTTP/1.1 specifies the use of a variation on Multipurpose Internet Mail Extensions (MIME) message format, which itself allows e-mail messages to specify different content types, both text and binary. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] public class WebClientAsyncResult : IAsyncResult Summary: Provides an implementation of IAsyncResult for use by XML Web service proxies to implement the standard asynchronous method pattern. Remarks: When you call the BeginMyMethodName method, where MyMethodName is the synchronous version of the method, on an XML Web service proxy class, an instance of the WebClientAsyncResult is returned. Following the standard asynchronous design pattern, that instance of WebClientAsyncResult must later be passed to EndMyMethodName to complete the asynchronous method call. For details on calling XML Web services asynchronously, see [<topic://cpconInvokingWebServicesAsynchronously>]. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: public class DefaultHttpHandler : IHttpAsyncHandler, IHttpHandler Summary: Represents the properties and methods of a default HTTP handler. Remarks: A DefaultHttpHandler object intercepts incoming requests in the HTTP pipeline when both request interception has been configured through Internet Information Services (IIS) 6.0 and no explicit httpHandlers bindings apply to the requested extension. Request interception can be set up through the wildcard application mapping feature introduced in IIS 6.0. For more information, search the MSDN Library for information about using wildcard application maps to remap a URL. The DefaultHttpHandler class implements the IHttpAsyncHandler interface to provide asynchronous request processing. For general information about HTTP handlers, see HTTP Handlers and HTTP Modules Overview. Additionally, for more information see the following: About creating asynchronous HTTP handlers, see Walkthrough: Creating an Asynchronous HTTP Handler. About registering HTTP handlers, see How to: Register HTTP Handlers. Classes can derive from the DefaultHttpHandler class to provide customized handling of requests. An asynchronous HTTP handler that is derived from the DefaultHttpHandler could override the BeginProcessRequest method to change how requests are processed. A DefaultHttpHandler does not use ASP.NET errors. Existing content that uses IIS errors or a propriety ISAPI custom error mechanism would work unchanged. Example: The following code example demonstrates how to implement a customized HTTP handler by deriving from the DefaultHttpHandler class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public virtual void OnExecuteUrlPreconditionFailure() Summary: Called when preconditions prevent the DefaultHttpHandler object from processing a request. Remarks: Preconditions are specified by the client in the request-header fields and are evaluated on the Web server. For example, by using preconditions, clients can prevent a requested method (for example, GET) from being applied to a resource other than the one intended. For more information, see section 14, #Header Field Definitions,# in the Hypertext Transfer Protocol -- HTTP/1.1 specification on the World Wide Web Consortium (W3C) Web site. The OnExecuteUrlPreconditionFailure method is called when preconditions prevent the DefaultHttpHandler object from processing a request. A deriving class might override the OnExecuteUrlPreconditionFailure method to throw an exception when the preconditions fail. The DefaultHttpHandler does not throw an exception in the OnExecuteUrlPreconditionFailure method. Any of the following will cause the preconditions to fail: Calling HttpResponse.Write. Calling HttpResponse.AddHeader. Calling HttpResponse.Flush. Changing the cache policy for the response. Adding a Stream object as a filter to the HttpResponse.Filter property.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public delegate void EndEventHandler( IAsyncResult ar ) Parameters arType: System.IAsyncResult The IAsyncResult that is the result of the BeginEventHandler operation. Summary: Represents the method that handles asynchronous events such as application events. Remarks: This delegate is called by the event source when completion of the asynchronous operation is signaled by a callback to the BeginEventHandler delegate. When you create an EndEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates. Example: The following code example uses the EndEventHandler delegate to register a handler for an asynchronous page.",1,0,0,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public class HtmlString : IHtmlString Summary: Represents an HTML-encoded string that should not be encoded again. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Adds the specified PostRequestHandlerExecute event to the collection of asynchronous PostRequestHandlerExecute event handlers for the current request.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Disposed Implements IComponent.Disposed Summary: Occurs when the application is disposed. Remarks: When you create a Disposed delegate, you identify the method that handles the event. To associate the event with your event handler, add an instance of the Disposed delegate to the event. The event handler is called whenever the event occurs, unless you remove the Disposed delegate. For more information about how to handle events, see Consuming Events.",0,0,0,0,0,1,0,1,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler MapRequestHandler Summary: Occurs when the handler is selected to respond to the request. Remarks: The MapRequestHandler event is used by the ASP.NET infrastructure to determine the request handler for the current request. For more information, see How to: Register HTTP Handlers. For more information about how to handle events, see Consuming Events. MapRequestHandler is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",1,0,0,0,0,0,0,0,0,1,1,0
"Additional online Documentation: Syntax: public event EventHandler PostLogRequest Summary: Occurs when ASP.NET has completed processing all the event handlers for the LogRequest event. Remarks: For more information about how to handle events, see Consuming Events. PostLogRequest is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",0,0,0,0,0,0,0,0,0,1,1,0
"Additional online Documentation: Syntax: public event EventHandler PostMapRequestHandler Summary: Occurs when ASP.NET has mapped the current request to the appropriate event handler. Remarks: For more information about how to handle events, see Consuming Events.",0,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler PostUpdateRequestCache Summary: Occurs when ASP.NET finishes updating caching modules and storing responses that are used to serve subsequent requests from the cache. Remarks: The PostUpdateRequestCache event is raised after the UpdateRequestCache event has occurred. When the PostUpdateRequestCache is raised, ASP.NET has completed processing code and the content of the cache is finalized. For more information about how to handle events, see Consuming Events.",0,0,0,0,0,1,1,0,0,0,1,0
"Additional online Documentation: Syntax: public event EventHandler UpdateRequestCache Summary: Occurs when ASP.NET finishes executing an event handler in order to let caching modules store responses that will be used to serve subsequent requests from the cache. Remarks: For more information about how to handle events, see Consuming Events.",0,0,0,1,0,1,0,0,0,0,1,0
"Additional online Documentation: Syntax: public override void RemoveAll() Summary: Removes all objects from the collection.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override Object SyncRoot { get; } Property Value Type: System.Object An object that can be used to synchronize access to the collection. Implements ICollection.SyncRoot Summary: Gets an object that can be used to synchronize access to the collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class HttpBrowserCapabilitiesBase : IFilterResolutionService Summary: Serves as the base class for classes that enable the server to gather information about the capabilities of the browser that made the current request. Remarks: The HttpBrowserCapabilitiesBase class is an abstract class that contains the same members as the HttpBrowserCapabilities class. The HttpBrowserCapabilitiesBase class enables you to create derived classes that are like the HttpBrowserCapabilities class, but that you can customize and that work outside the ASP.NET pipeline. When you perform unit testing, you typically use a derived class to implement members with customized behavior that fulfills the scenario you are testing. The HttpBrowserCapabilitiesWrapper class derives from the HttpBrowserCapabilitiesBase class. The HttpBrowserCapabilitiesWrapper class serves as a wrapper for the HttpBrowserCapabilities class. At run time, you typically use an instance of the HttpBrowserCapabilitiesWrapper class to call members of the HttpBrowserCapabilities object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public virtual bool CanRenderOneventAndPrevElementsTogether { get; } Property Value Type: System.Boolean true if the browser supports WML onevent and prev elements in the same WML card; otherwise, false. Summary: When overridden in a derived class, gets a value that indicates whether the browser supports WML onevent and prev elements in the same card.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual int ScreenCharactersWidth { get; } Property Value Type: System.Int32 The approximate width of the display, in characters. Summary: When overridden in a derived class, gets the approximate width of the display, in characters.",1,0,0,0,0,0,0,0,0,0,0,0
"Default value. Sets Cache-Control: private to specify that the response is cacheable only on the client and not by shared (proxy server) caches.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public void AppendCacheExtension( string extension ) Parameters extensionType: System.String The text to append to the Cache-Control header. Summary: Appends the specified text to the Cache-Control HTTP header. Remarks: If the browser does not recognize cache control directives or extensions, the browser must ignore the unrecognized terms. For more information, see RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1, available on the World Wide Web Consortium (W3C) Web site. AppendCacheExtension is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies. Example: The following code example demonstrates the use of a cache-control extension supported by Internet Explorer. The server is indicating to the browser that the content will not change for one hour (pre-check=3600) and instructs it to retrieve the content directly from the local cache. However, if the content is modified by the server and the page is requested by the user within a fifteen-minute (post-check= 900) to one-hour period, the browser displays the information found in the local cache but also performs a background check and optional fetch of the new content on the server.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public HttpCacheVaryByHeaders VaryByHeaders { get; } Property Value Type: System.Web.HttpCacheVaryByHeaders An HttpCacheVaryByHeaders that specifies which HTTP headers are used to select the cached response. Summary: Gets the list of all HTTP headers that will be used to vary cache output. Remarks: When a cached item has several vary headers, a separate version of the requested document is available from the cache for each HTTP header type. VaryByHeaders is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",1,0,0,0,0,0,0,0,0,1,0,0
"Additional online Documentation: Syntax: public HttpCacheVaryByParams VaryByParams { get; } Property Value Type: System.Web.HttpCacheVaryByParams An HttpCacheVaryByParams that specifies which cache-control headers are used to select the cached response. Summary: Gets the list of parameters received by an HTTP GET or HTTP POST that affect caching. Remarks: A separate version of the requested document is available from the cache for each named parameter in the VaryByParams collection. VaryByParams is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies. Topic Location Walkthrough: Using Output Caching to Enhance Web Site Performance Building ASP .NET Web Applications in Visual Studio",1,0,0,0,0,0,0,0,0,1,0,0
"Additional online Documentation: Syntax: public bool IsValid { get; } Property Value Type: System.Boolean true if the client certificate is valid; otherwise, false. Summary: Gets a value that indicates whether the client certificate is valid. Remarks: The client certificate is not valid if the Certificate Authority (CA) is not in the list of recognized CAs on the server.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation:",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public int WebEventCode { get; internal set; } Property Value Type: System.Int32 An integer representing a Web event code. Summary: Gets the event codes that are associated with the HTTP exception.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class HttpFileCollection : NameObjectCollectionBase Summary: Provides access to and organizes files uploaded by a client. Remarks: Clients encode files and transmit them in the content body using multipart MIME format with an HTTP Content-Type header of multipart/form-data. ASP.NET extracts the encoded file(s) from the content body into individual members of an HttpFileCollection. Methods and properties of the HttpPostedFile class provide access to the contents and properties of each file. Example: The following example demonstrates how to access the HttpFileCollection collection returned from the Files property of the HttpRequest object. The HttpFileCollection collection is populated by two FileUpload controls on the Web page. Items in the file collection are displayed in a BulletedList control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public override string FileName { get; } Property Value Type: System.String The name of the file on the client, which includes the directory path. Summary: Gets the fully qualified name of the file on the client.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string this[ string key ] { get; } Parameters keyType: System.String The name of the collection member to get. Property Value Type: System.String The QueryString, Form, Cookies, or ServerVariables collection member specified in the key parameter. If the specified key is not found, then Nothing is returned. Summary: Gets the specified object from the QueryString, Form, Cookies, or ServerVariables collections.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public void AddCacheDependency( params CacheDependency[] dependencies ) Parameters dependenciesType: System.Web.Caching.CacheDependency() A file, cache key, or CacheDependency to add to the list of application dependencies. Summary: Associates a set of cache dependencies with the response to facilitate invalidation of the response if it is stored in the output cache and the specified dependencies change. Remarks: The AddCacheDependency method allows dependencies to be created between cached responses and a CacheDependency object. Example: The following example demonstrates how to create a cache dependency by using the AddCacheDependency method and a CacheDependency object.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public void AddCacheItemDependency( string cacheKey ) Parameters cacheKeyType: System.String The key of the item that the cached response is dependent upon. Summary: Makes the validity of a cached response dependent on another item in the cache. Remarks: When the item corresponding to the cacheKey parameter is removed from the cache, the cached response of the current item is invalid. Topic Location How to: Cache Versions of a Page Using HTTP Headers Building ASP .NET Web Applications How to: Set the Cacheability of an ASP.NET Page Declaratively Building ASP .NET Web Applications How to: Set a Page's Cacheability Programmatically Building ASP .NET Web Applications How to: Cache Page Output with File Dependencies Building ASP .NET Web Applications How to: Cache Versions of a Page Using Requesting Browser Building ASP .NET Web Applications How to: Set Expiration Values for ASP.NET Page Caching Building ASP .NET Web Applications How to: Cache Page Output with Cache Key Dependencies Building ASP .NET Web Applications How to: Retrieve Values of Cached Items Building ASP .NET Web Applications How to: Cache Versions of a Page Using HTTP Headers Building ASP .NET Web Applications How to: Set the Cacheability of an ASP.NET Page Declaratively Building ASP .NET Web Applications How to: Set a Page's Cacheability Programmatically Building ASP .NET Web Applications How to: Cache Page Output with File Dependencies Building ASP .NET Web Applications How to: Cache Versions of a Page Using Requesting Browser Building ASP .NET Web Applications How to: Set Expiration Values for ASP.NET Page Caching Building ASP .NET Web Applications How to: Cache Page Output with Cache Key Dependencies Building ASP .NET Web Applications How to: Retrieve Values of Cached Items Building ASP .NET Web Applications Example: The following example is an ASP.NET user control that is output cached. The code for the control calls the AddCacheItemDependency method with the key of an item stored in the Cache object passed as its parameter. If the item does not exist in the cache, the control's response that was stored in the output cache is invalidated. This means that on the subsequent request, a new version of the control's response will be added to the output cache. Next, the code checks whether an item associated with a bookData key is stored in the Cache object, and displays one of two lines of text dependent upon the result. Then, the code sets the DataSource property of a DataGrid control, which is named dgBooks, with a call to a custom DataHelper class's shared GetBookData method, and populates the DataGrid with the DataBind method.",1,0,0,0,0,1,1,0,1,0,1,0
"Additional online Documentation: Syntax: public Stream Filter { get; set; } Property Value Type: System.IO.Stream The Stream object that acts as the output filter. Summary: Gets or sets a wrapping filter object that is used to modify the HTTP entity body before transmission. Remarks: When you create a Stream object and set the Filter property to the Stream object, all HTTP output sent by Write passes through the filter. Example: The following example is an ASP.NET page that sets the Filter property to a new instance of the UpperCaseFilter class, a custom Stream class that converts all text that passes through it to uppercase. The information about the request is saved to a text file, and then the Filter property is set. After the response filter is in place, the code calls the MapPath method to get the absolute path to a text file named TestFile.txt that serves as the source for the content of the response. The code then creates a new StreamReader object to read the text file from beginning to end, and then calls the Write method to display the content of the file on the page.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Summary: Performs a permanent redirection from a requested URL to a new URL by using route parameter values, a route name, or both.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Summary: When overridden in a derived class, redirects the request to a new URL by using route parameter values, a route name, or both.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: When overridden in a derived class, performs a permanent redirection from the requested URL to a new URL by using route parameter values, a route name, or both.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: When overridden in a derived class, writes the specified file to the HTTP response output stream, without buffering it in memory.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override void ClearContent() Summary: Clears all content output from the current response.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class HttpRuntime Summary: Provides a set of ASP.NET run-time services for the current application. Remarks: The HttpRuntime object is used at the beginning of the ASP.NET pipeline model that processes HTTP requests. The ProcessRequest method drives all subsequent ASP.NET Web processing. Page developers can use the HttpRuntime class properties to find out information about the current application domain for diagnostic purposes, for example. Developers creating custom process pipeline or a custom hosting environment should call the ProcessRequest method from a class derived from the HttpWorkerRequest or SimpleWorkerRequest class. Example: The following example demonstrates how to get properties of the HttpRuntime class representing the current application domain and display them to the browser. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class HttpServerUtility Summary: Provides helper methods for processing Web requests. Remarks: The methods and properties of the HttpServerUtility class are exposed through the intrinsic Server object provided by ASP.NET. Example: A Visual Studio Web site project with source code is available to accompany this topic: Download. The following example demonstrates how to use the HtmlEncode method and the UrlEncode method of the HttpServerUtility class. The HtmlEncode method helps ensure that any user-supplied string input will be rendered as static text in browsers instead of executable script or HTML elements. The UrlEncode method encodes URLs so that they are correctly transmitted in the HTTP stream. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public bool IsSynchronized { get; } Property Value Type: System.Boolean In this implementation, this property always returns false. Implements ICollection.IsSynchronized Summary: Gets a value indicating whether the collection is synchronized (that is, thread-safe).",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class HttpStaticObjectsCollectionBase : ICollection, IEnumerable Summary: Serves as the base class for classes that provide a collection of application-scoped objects for the StaticObjects property. Remarks: The HttpStaticObjectsCollectionBase class is an abstract class that contains the same members as the HttpStaticObjectsCollection class. The HttpStaticObjectsCollectionBase class lets you create derived classes that are like the HttpStaticObjectsCollection class, but that you can customize and that work outside the ASP.NET pipeline. When you perform unit testing, you typically use a derived class to implement members with customized behavior that fulfills the scenario you are testing. The HttpStaticObjectsCollectionWrapper class derives from the HttpStaticObjectsCollectionBase class. The HttpStaticObjectsCollectionWrapper class serves as a wrapper for the HttpStaticObjectsCollection class. At run time, you typically use an instance of the HttpStaticObjectsCollectionWrapper class to call members of the HttpStaticObjectsCollection object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public override void CopyTo( Array array, int index ) Parameters arrayType: System.Array The one-dimensional array that is the destination of the elements that are copied from the collection. The array must have zero-based indexing. indexType: System.Int32 The zero-based index in array at which to begin copying. Implements ICollection.CopyTo(Array, Int32) Summary: Copies the elements of the collection to an array, starting at the specified index in the array.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Overloaded. Returns the portion of the HTTP request body that has currently been read.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Overloaded. Reads request data from the client (when not preloaded).",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public delegate void EndOfSendNotification( HttpWorkerRequest wr, Object extraData ) Parameters wrType: System.Web.HttpWorkerRequest The current HttpWorkerRequest.  extraDataType: System.Object Any additional data needed to process the request. Summary: Represents the method that Notifies callers when sending of the response is complete. Remarks: The host can use this notification to implement buffer recycling.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: void Init( HttpApplication context ) Parameters contextType: System.Web.HttpApplication An HttpApplication that provides access to the methods, properties, and events common to all application objects within an ASP.NET application Summary: Initializes a module and prepares it to handle requests. Remarks: Use the Init method to register event handling methods with specific events. Example: For an example of a custom module that implements IHttpModule, see Walkthrough: Creating and Registering a Custom HTTP Module.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public class ProcessModelInfo Summary: Contains methods that return information about worker processes. Remarks: The ProcessModelInfo class is not meant to be instantiated in your own code. Use the static GetCurrentProcessInfo and GetHistory methods to populate ProcessInfo objects, and then use the properties of the ProcessInfo objects to obtain information about the processes. Note The GetCurrentProcessInfo and GetHistory methods can be used only with Microsoft Internet Information Services (IIS) version 5.0 on Microsoft Windows 2000 and Windows XP or with IIS 6.0 on Windows Server 2003 and using IIS 5.0 isolation mode. For more information, see How to: Configure ASP.NET Applications for an ASP.NET Version. Example: The following code example demonstrates how to call the GetCurrentProcessInfo method to display statistics about the currently executing ASP.NET process on a Web page. This example will work with Internet Information Services 5.0 on Windows 2000 and Windows XP or with IIS 6.0 on Windows Server 2003 and using IIS 5.0 isolation mode. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public static bool Enabled { get; } Property Value Type: System.Boolean true if a site map provider is configured and enabled; otherwise, false. Summary: Gets a Boolean value indicating if a site map provider is specified in the Web.config file and if the site map provider is enabled. Remarks: A default site map configuration is specified that manages the site navigation configuration. You can override this configuration in the Web.config file, should you choose to write your own site map provider. Example: The following code example is a Web.config configuration section that demonstrates how an XmlSiteMapProvider object is declared to be the default SiteMapProvider object.",1,0,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: public virtual bool HasChildNodes { get; } Property Value Type: System.Boolean true if the node has children; otherwise, false. Summary: Gets a value indicating whether the current SiteMapNode has any child nodes. Remarks: This property is a convenience property that calls the ChildNodes property internally, so it will not perform better than if you call the ChildNodes property yourself and check to see if it is empty.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual SiteMapNode NextSibling { get; } Property Value Type: System.Web.SiteMapNode The next SiteMapNode, serially, after the current one, under the parent node; otherwise, Nothing, if no parent exists, there is no node that follows this one, or security trimming is enabled and the user cannot view the parent or next sibling nodes. Summary: Gets the next SiteMapNode node on the same hierarchical level as the current one, relative to the ParentNode property (if one exists). Remarks: The NextSibling property presumes that the SiteMapProvider object implements its internal collections such that when a parent node retrieves its ChildNodes property, the nodes are in the same order as they appear in the site map. If you use .NET Framework collection classes in an implementation of a site map provider, choose collections that implement the IList interface, such as the ArrayList or ListDictionary classes. If you choose collections that do not implement the IList interface, such as the Hashtable class, unexpected results can occur for simple site navigation operations.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: bool IHierarchyData.HasChildren { get; } Property Value Type: System.Boolean true if the node has child nodes; otherwise, false. Implements IHierarchyData.HasChildren Summary: Gets a value that indicates whether the current SiteMapNode object has any child nodes. For a description of this member, see IHierarchyData.HasChildren. Remarks: The HasChildren property delegates to the HasChildNodes property. This member is an explicit interface member implementation. It can be used only when the SiteMapNode instance is cast to an IHierarchyData interface.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual string Title { get; set; } Property Value Type: System.String A string that represents the title of the node. The default is String.Empty. Summary: Gets or sets the title of the SiteMapNode object. Remarks: The Title property is used by navigation controls to render a label for the node, instead of using the Url property, while the Description property is used as a ToolTip element for mouse-over events. A localized value of the Title property is returned if the EnableLocalization property is true. Topic Location How to: Localize Site-Map Data Building ASP .NET Web Applications How to: Localize Site-Map Data Building ASP .NET Web Applications",1,0,0,0,0,0,1,0,0,0,1,1
"Additional online Documentation: Syntax: IEnumerator IEnumerable.GetEnumerator() Return Value Type: System.Collections.IEnumerator An IEnumerator that can be used to iterate through the SiteMapNodeCollection. Implements IEnumerable.GetEnumerator Summary: Returns an enumerator that iterates through a collection. For a description of this member, see IEnumerable.GetEnumerator.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: void IList.Clear() Implements IList.Clear Summary: Removes all items from the collection in the IList interface. For a description of this member, see IList.Clear.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class SiteMapProvider : ProviderBase Summary: Provides a common base class for all site map data providers, and a way for developers to implement custom site map data providers that can be used with the ASP.NET site map infrastructure as persistent stores for SiteMap objects. Remarks: The StaticSiteMapProvider and XmlSiteMapProvider classes represent the default implementations of the abstract SiteMapProvider class. The XmlSiteMapProvider uses an XML file named Web.sitemap to store site map data. For more information on about the Web.sitemap file, see ASP.NET Site Maps. The SiteMapProvider class supports the concept of a site map provider hierarchy, by declaring the RootProvider and ParentProvider properties. A SiteMapProvider can be a child or parent of an provider. This enables scenarios where different content areas of a site are owned or implemented by different development groups that maintain their own site maps and site map providers. All SiteMapProvider objects are configured in the Web.config files. Any site map providers that are declared in these configuration files are loaded at run time and are used to load and process site navigation data. The SiteMap object, which keeps track of all the providers that are available to it through its Providers property collection, provides programmatic access to the navigation data that is managed by the providers. The following code example demonstrates the format that is used to declare a site map provider in a Web.config file.  The site navigation data that is loaded by these providers is used by  components of the site map infrastructure, such as the SiteMapPath and TreeView controls, to display site map information for users. If you implement your own site map provider, you can place the source file in the App_Code directory of your ASP.NET application, and then the assembly will be compiled automatically. You can also place your own site map provider in the Global Assembly Cache (GAC), and provide a fully-qualified reference to it in the Web.config file. For more information on compiler services, see Working with Assemblies and the Global Assembly Cache. Notes to Inheritors When you inherit from the SiteMapProvider class, you must override the following members: GetRootNodeCore, FindSiteMapNode, GetChildNodes, and GetParentNode. Topic Location How to: Programmatically Enumerate Site-Map Nodes Building ASP .NET Web Applications How to: Configure Multiple Site Maps and Site-Map Providers Building ASP .NET Web Applications How to: Filter the Nodes Retrieved by SiteMapDataSource Web Server Controls Building ASP .NET Web Applications How to: Display Site-Map Data in Non-Hierarchical Web Server Controls Building ASP .NET Web Applications How to: Add Simple Site Navigation Building ASP .NET Web Applications How to: Implement ASP.NET Site-Map Providers Building ASP .NET Web Applications How to: Programmatically Enumerate Site-Map Nodes Building ASP .NET Web Applications How to: Configure Multiple Site Maps and Site-Map Providers Building ASP .NET Web Applications How to: Filter the Nodes Retrieved by SiteMapDataSource Web Server Controls Building ASP .NET Web Applications How to: Display Site-Map Data in Non-Hierarchical Web Server Controls Building ASP .NET Web Applications How to: Add Simple Site Navigation Building ASP .NET Web Applications How to: Implement ASP.NET Site-Map Providers Building ASP .NET Web Applications How to: Add Simple Site Navigation Building ASP .NET Web Applications in Visual Studio Example: The following code example demonstrates how to write a class that implements the abstract SiteMapProvider class. This example includes only a sample SiteMapProvider and a sample text file that works with it. To run the example you also need an entry in the Web.config file and an .aspx page. You can find these in the documentation for the SiteMapDataSource.SiteMapProvider property. The example uses a comma-delimited file that follows an expected structure to load sitemap information. The first line of the file represents the root node of the sitemap, and subsequent lines are subnodes. Each subnode identifies its parent node by URL. An example of a file that meets these criteria is shown below.  The SimpleTextSiteMapProvider provides example implementations of all the SiteMapProvider properties and methods. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: protected internal abstract SiteMapNode GetRootNodeCore() Return Value Type: System.Web.SiteMapNode A SiteMapNode that represents the root node of the set of nodes that the current provider manages. Summary: When overridden in a derived class, retrieves the root node of all the nodes that are currently managed by the current provider. Remarks: The GetRootNodeCore method enables a parent provider in a provider hierarchy to obtain a SiteMapNode object that acts as a frame of reference for building the provider hierarchy and the larger site map node hierarchy that is the sum of the site map data that each provider manages.",1,1,0,1,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public static class VirtualPathUtility Summary: Provides utility methods for common virtual path operations. Remarks: The VirtualPathUtility class provides utility methods for common operations involving virtual paths. For ASP.NET server controls and server code, virtual paths using the Web application root operator, the tilde (~), commonly are used instead of relative and absolute paths. For more information, see ASP.NET Web Project Paths. Use the VirtualPathUtility class when you need to convert application-relative paths to absolute virtual paths, as might be the case in developing a custom Web service handler. An absolute virtual path starts with the literal slash mark (/). A relative virtual path is relative to the application root directory, if it is just a tilde (~) or starts with the tilde and a double backslash (~\\\\) or the tilde and a slash mark (~/). Making a virtual path relative makes the path independent of the application. The virtual directory for the application can be obtained from the AppDomainAppVirtualPath and ApplicationPath properties. Note The VirtualPathUtility class is not intended for security or canonicalization purposes. For more information about Web application security, see Overview of Web Application Security Threats. For generic URL processing functionality, see Uri. Example: The following code example demonstrates how to use the VirtualPathUtility class and some of its methods. First, the FilePath property generates the virtual path to the Web page. The GetFileName, GetExtension, and GetDirectory methods return information about the virtual path. Next, the CurrentExecutionFilePath property generates a virtual path of the current request, which might be different from the FilePath property, if a Redirect method was called. The IsAbsolute, IsAppRelative, and ToAppRelative methods return information about the virtual path. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public enum CacheItemPriority Summary: Specifies the relative priority of items stored in the Cache object. Remarks: When the Web server hosting an ASP.NET application runs low on memory, the Cache object selectively purges items to free system memory. When an item is added to the cache, you can assign it a relative priority compared to the other items stored in the cache. Items to which you assign higher priority values are less likely to be deleted from the cache when the server is processing a large number of requests, whereas items to which you assign lower priority values are more likely to be deleted. The default is Normal. Note Items can always be removed from the cache programmatically, regardless of their cache priority. Example: The following code example uses the Insert method to add an item to the Cache object with its priority parameter set to High.",1,0,0,0,0,0,1,0,1,0,0,0
"The item is removed from the cache because it expired.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Assert, Flags = SecurityPermissionFlag.SerializationFormatter)] public static void Serialize( Stream stream, Object data ) Parameters streamType: System.IO.Stream The object to contain the serialized binary data. dataType: System.Object The output-cache data to serialize. Summary: Serializes output-cache data into binary data. Remarks: This method is used by output-cache providers that are operating under partial trust.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract Object Get( string key ) Parameters keyType: System.String A unique identifier for a cached entry in the output cache. Return Value Type: System.Object The key value that identifies the specified entry in the cache, or Nothing if the specified entry is not in the cache. Summary: Returns a reference to the specified entry in the output cache.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class SqlCacheDependency : CacheDependency Summary: Establishes a relationship between an item stored in an ASP.NET application's Cache object and either a specific SQL Server database table or the results of a SQL Server 2005 query. This class cannot be inherited. Remarks: On all supported versions of SQL Server (Microsoft SQL Server 7.0, Microsoft SQL Server 2000, and SQL Server 2005) the SqlCacheDependency class monitors a specific SQL Server database table. When the table changes, items associated with the table are removed from the Cache, and a new version of the item is added to the Cache. The SqlCacheDependency class also supports integration with the System.Data.SqlClient.SqlDependency class when using a SQL Server 2005 database. The query notification mechanism of SQL Server 2005 detects changes to data that invalidate the results of an SQL query and removes any cached items associated with the SQL query from the System.Web.Caching.Cache. You can use the SqlCacheDependency class to add items to your application's Cache that are dependent on either a SQL Server database table or on an SQL query when using SQL Server 2005. You can also use this class with the @ OutputCache directive to make an output-cached page or a user control dependent on a SQL Server database table. Finally, you can use the SqlCacheDependency class with the @ OutputCache page directive to make an output-cached page dependent on the results of an SQL query when using SQL Server 2005. Query notification using SQL Server 2005 is not supported on the @ OutputCache directive for user controls. Note For this class to work correctly when using table-based notifications, the database and any tables that you want to make dependencies on must have notifications enabled. You can enable notifications by calling methods of the SqlCacheDependencyAdmin class or by using the Aspnet_regsql.exe command-line tool. In addition, the proper configuration settings must be included in the application's Web.config file. Using a SqlCacheDependency object with SQL Server 2005 query notification does not require any explicit configuration. Consult the SQL Server 2005 Books Online for information about restrictions on the types of Transact-SQL queries that are allowed when using query notification. The following example shows an ASP.NET Web.config file that enables table-based dependencies on a SQL Server database table.  Topic Location Walkthrough: Using ASP.NET Output Caching with SQL Server Building ASP .NET Web Applications in Visual Studio Example: The following code example uses the SqlDataSource and GridView controls to display a database table. When the page is loaded, the page attempts to create a SqlCacheDependency object. After the SqlCacheDependency object is created, the page adds an item to the Cache with a dependency on the SqlCacheDependency object. You should use exception handling similar to that shown here. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.High)] public static class SqlCacheDependencyAdmin Summary: Performs administrative tasks required on a SQL Server database to support the SqlCacheDependency class when using polling-based dependencies. This class cannot be inherited. Remarks: You can use the methods of this class to programmatically enable and disable a SQL Server database and its tables for SqlCacheDependency object change notifications. In addition, this class obtains information about which tables in a database are enabled for change notifications using the GetTablesEnabledForNotifications method. However, you can also use the Aspnet_regsql command-line tool to manage change notifications for a SQL Server database and its tables. Note To call any of the methods in this class, the account you use to access the SQL Server database must have permissions to create tables and stored procedures. To enable notifications on a specific table, you must have permissions to create a SQL Server trigger on that table. For more information on how to set permissions on a database, see the SQL Server documentation. For more information about the account used by the ASP.NET process, see ASP.NET Impersonation. Example: The following code example is a simple ASP.NET page for enabling and disabling change notifications on SQL Server database tables. It uses the SqlCacheDependencyAdmin object to manage change notifications in the database specified in a connection string called MyConnectionString. The example includes two files, an .aspx file that defines the user interface and a code-behind file containing the source code for the ASP.NET events. The first sample is the .aspx file that defines the user interface. Security Note This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview.  The second sample is the code-behind file containing the source code for the page events. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Unrestricted)] public class SubstitutionResponseElement : ResponseElement Summary: Represents a managed delegate that can be called to insert dynamically generated output into an output-cache response. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Returns a value from the <appSettings> section of the Web.config file.",1,1,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public class AssemblyBuilder Summary: Provides a container for building an assembly from one or more virtual paths within an ASP.NET project. Remarks: Instances of the AssemblyBuilder class are used with BuildProvider class methods to build one or more files into a compiled assembly. The BuildProvider class defines build functionality for individual files, and the AssemblyBuilder class combines the source code contributed by each BuildProvider instance into a single assembly. The ASP.NET build environment passes an AssemblyBuilder object to the BuildProvider methods when building an assembly from one or more files, so that each BuildProvider instance can contribute source code for its file to the overall assembly. The ASP.NET build environment determines the language and compiler required by files within the project, based on the BuildProvider.CodeCompilerType property. The build environment groups files based on their compiler settings and builds an assembly from files that require the same compiler. The CodeDomProvider property indicates the CodeDomProvider implementation that the ASP.NET build environment uses to compile an assembly from the source code contributed by each BuildProvider implementation. A BuildProvider object contributes source code in the form of a CodeDOM graph using the AddCodeCompileUnit method. A BuildProvider object contributes source code stored in a physical file using the CreateCodeFile method. After each BuildProvider object contributes source code using the appropriate AssemblyBuilder methods, the ASP.NET build environment uses the AssemblyBuilder class to compile the collected source code into an assembly. Topic Location How To: Secure an ASP.NET Application on a Shared Server Building ASP .NET Web Applications How To: Secure an ASP.NET Application on a Shared Server Building ASP .NET Web Applications Example: The following code example illustrates a simple build provider implementation, inheriting from the abstract BuildProvider base class. The build provider overrides the CodeCompilerType, GetGeneratedType, and GenerateCode members of the base class. In the GenerateCode method implementation, the build provider adds the generated code for the assembly compilation using the CreateCodeFile method. The example does not include the implementation of the SampleClassGenerator class. For more information, see CodeCompileUnit. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,1,0,1,0
"Additional online Documentation: Syntax: public Stream CreateEmbeddedResource( BuildProvider buildProvider, string name ) Parameters buildProviderType: System.Web.Compilation.BuildProvider The build provider generating the resource. nameType: System.String The name of the resource file to be created. Return Value Type: System.IO.Stream An open Stream that can be used to write resources, which are included in the assembly compilation. Summary: Allows a build provider to create a resource file to include in the assembly compilation. Remarks: After calling the CreateEmbeddedResource method, a BuildProvider object writes the resource file contents using the returned Stream object. For example, the build provider can write the resources using a ResourceWriter object. After writing the resource file, the build provider must use the Close method to close the Stream object and free associated system resources.",1,0,1,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class BuildManager Summary: Provides a set of methods to help manage the compilation of an ASP.NET application. Remarks: The BuildManager class manages the process of compiling assemblies and pages for an application. It is a sealed class and cannot be inherited. BuildManager contains static members that provide information about the compiled assemblies. Topic Location How To: Secure an ASP.NET Application on a Shared Server Building ASP .NET Web Applications How To: Secure an ASP.NET Application on a Shared Server Building ASP .NET Web Applications ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.InheritanceDemand, Unrestricted = true)] [PermissionSetAttribute(SecurityAction.LinkDemand, Unrestricted = true)] public class BuildManagerHostUnloadEventArgs : EventArgs Summary: Contains event data for the AppDomainShutdown event and the AppDomainUnloaded event. Remarks: When an AppDomain instance is shut down or unloaded, an AppDomainShutdown event or an AppDomainUnloaded event is raised, respectively. The BuildManagerHostUnloadEventArgs object stores the reason for the shutdown or unload and is passed to the event handler as one of its parameters. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Opens a stream for reading from a virtual path.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.LinkDemand, Unrestricted = true)] [PermissionSetAttribute(SecurityAction.InheritanceDemand, Unrestricted = true)] public sealed class ClientBuildManager : MarshalByRefObject, IDisposable Summary: Provides compilation services for ASP.NET applications. Remarks: The ClientBuildManager class offers methods and properties for compiling ASP.NET Web applications, and retrieving the generated assemblies or generated source code. Instances of the class are established in the client's application domain and provide access to the ASP.NET build system outside of Microsoft Internet Information Services (IIS). The class can be used to develop customized tools for compiling Web applications. The command-line tool aspnet_compiler uses the ClientBuildManager class. Topic Location How To: Secure an ASP.NET Application on a Shared Server Building ASP .NET Web Applications How To: Secure an ASP.NET Application on a Shared Server Building ASP .NET Web Applications ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event BuildManagerHostUnloadEventHandler AppDomainShutdown Summary: Occurs when an application domain is shut down.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public Type GetCompiledType( string virtualPath ) Parameters virtualPathType: System.String The virtual path of the file to compile. Return Value Type: System.Type The Type of the compiled file. Summary: Compiles the file represented by the virtual path and returns its compiled type.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public PrecompilationFlags PrecompilationFlags { get; set; } Property Value Type: System.Web.Compilation.PrecompilationFlags The PrecompilationFlags for a client build. Summary: Gets or sets the flags that determine precompilation behavior. Remarks: The PrecompilationFlags property determines how the assembly will be built. For example, you can set PrecompilationFlags to Clean to recompile any previously compiled components, or set it to OverwriteTarget to permit the resulting assembly to overwrite any components in the target directory. The PrecompilationFlags enumerator has a FlagsAttribute attribute that allows a bitwise combination of its member values. The PrecompilationFlags property can contain more than one value from the PrecompilationFlags enumeration to specify a combination of precompilation behaviors. Example: The following code example is part of a code example found in the ClientBuildManager class overview. In the example, a ClientBuildManagerParameter object is created and its values set. The resulting assembly will have a strong name based on the provided key file and will precompile according to the provided PrecompilationFlags values.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class)] public sealed class DesignTimeResourceProviderFactoryAttribute : Attribute Summary: Specifies the type of resource provider factory for design time. This class cannot be inherited. Remarks: The DesignTimeResourceProviderFactoryAttribute class allows a ResourceProviderFactory object to specify the type of the associated DesignTimeResourceProviderFactory object. The DesignTimeResourceProviderFactory class is used to create design-time providers for reading and writing resources. Within Microsoft Visual Studio 2005, a developer can use the Generate Local Resource command on the Tools menu to create resources during design time. Example: The following code example shows a customized resource provider factory that specifies a customized design-time resource provider factory through the DesignTimeResourceProviderFactoryAttribute attribute. This example does not include the code necessary to implement a customized design-time resource provider factory. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public override int GetHashCode() Return Value Type: System.Int32 The hash code of the value of this ExpressionEditorAttribute. Summary: Retrieves the hash code for the value of this ExpressionEditorAttribute attribute. Remarks: The value of an ExpressionEditorAttribute attribute is the value of its EditorTypeName property.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string KeyPrefix { get; set; } Property Value Type: System.String A String containing the prefix for an implicit resource expression. Summary: Gets or sets the prefix for identifying a group of properties. Remarks: The KeyPrefix property ties together a collection of properties that can be assigned to a control. The KeyPrefix property refers to the value after the colon (:) in an expression, if present, and before the first period (.). For example, suppose you had an implicit resource in the following form:  This resource contains three keys, Welcome.Text, Ie:Welcome.Text, and Welcome.Forecolor, that potentially have localized resource values to retrieve from the resource file or source code. Each key has #Welcome# as the KeyPrefix value.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: IResourceReader ResourceReader { get; } Property Value Type: System.Resources.IResourceReader The IResourceReader associated with the current resource provider. Summary: Gets an object to read resource values from a source. Remarks: An IResourceReader object reads sequential name/value pairs from a source. The ResourceReader and ResXResourceReader classes provide default IResourceReader interface implementation for reading from .resources and .resx files, respectively. Other implementations of the IResourceProvider interface could read from any source containing resource values. Example: The following code example shows a customized resource provider factory that retrieves cached values. The resource provider factory creates an instance of a customized resource provider that implements IResourceProvider. The resource provider includes a customized ResourceReader property.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: [FlagsAttribute] public enum PrecompilationFlags Summary: Provides flags that determine precompilation behavior. Remarks: The PrecompilationFlags class defines the behavior of the build manager during precompilation. The ClientBuildManager class takes PrecompilationFlags as one of its constructor parameters. Precompilation can be performed programmatically through ClientBuildManager or through the Aspnet_compiler.exe command-line tool.",1,1,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public sealed class AnonymousIdentificationSection : ConfigurationSection Summary: Configures anonymous identification for users that are not authenticated. This class cannot be inherited. Remarks: The AnonymousIdentificationSection class allows you to programmatically access and modify the anonymousIdentification element of a configuration file. The purpose of anonymous identification is to assign, at machine and application level, a unique identity to a non-authenticated user. This unique identity can then be used to track the user. Anonymous identification as used in this context does not have any relationship with the identity of the issuer of the Web request or with other security aspects related to the user; it simply assigns a unique identity for tracking purposes and user state management. Anonymous users are often tracked using the Session identifier. The main problems with this approach are the non-uniqueness of the identifier and the overhead involved in storing data to set a Session state value, which must be done in order to assign a session identifier to a user. Anonymous identification resolves these problems by providing a unique identifier for each non-authenticated user and not requiring the user to store any data to set the identifier. Example: The following example shows how to obtain the AnonymousIdentificationSection object from the underlying configuration file. You use this object to get or set the related configuration values. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#domain#)] public string Domain { get; set; } Property Value Type: System.String The name of the cookie domain. The default is an empty string (##). Summary: Gets or sets the cookie domain. Remarks: This attribute allows sharing of the anonymous identification cookie across domains that have a common DNS namespace (for example, all sites that end in #contoso.com#). The following requirements must be met in order for anonymous identification cookies to be shared: Sites that want to share the cookie need to have common decryption and validation keys. Other anonymous identification configuration attributes such as cookie path and cookie name must be the same for all the sites. For more information, refer to the HttpCookie class. Example: The following code example shows how to access the Domain property.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public enum AuthorizationRuleAction Summary: Specifies the type of authorization to apply when accessing a resource. Remarks: Use the Action property to programmatically configure the authorization action to be used by a Web application. Example: The following code example shows how use the Action property. This code example is part of a larger example provided for the AuthorizationRule class.",1,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: protected virtual void CpuProcessBrowsers( bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps ) Parameters ignoreApplicationBrowsersType: System.Boolean true to ignore definitions for the Cpu browser in application-level browser definition files; otherwise, false. headersType: System.Collections.Specialized.NameValueCollection The collection of headers included in the current request. browserCapsType: System.Web.HttpBrowserCapabilities The HttpBrowserCapabilities object to initialize. Summary: Initializes an HttpBrowserCapabilities object that represents the capabilities of the Cpu browser handling the current request.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected virtual void Ie7ProcessGateways( NameValueCollection headers, HttpBrowserCapabilities browserCaps ) Parameters headersType: System.Collections.Specialized.NameValueCollection The collection of headers included in the current request. browserCapsType: System.Web.HttpBrowserCapabilities The HttpBrowserCapabilities object to initialize. Summary: Initializes an HttpBrowserCapabilities object that represents the capabilities of the IE7 gateway handling the current request.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected virtual void PlatformwebtvProcessGateways( NameValueCollection headers, HttpBrowserCapabilities browserCaps ) Parameters headersType: System.Collections.Specialized.NameValueCollection The collection of headers included in the current request. browserCapsType: System.Web.HttpBrowserCapabilities The HttpBrowserCapabilities object to initialize. Summary: Initializes an HttpBrowserCapabilities object that represents the capabilities of the Platformwebtv gateway handling the current request.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(BufferModeSettings))] public sealed class BufferModesCollection : ConfigurationElementCollection Summary: A collection of BufferModeSettings objects. This class cannot be inherited. Remarks: The BufferModeSettings object is used to define roles for event providers such as Critical, Notification, Analysis, and Logging. Each role sets buffer mode events differently. For example, a Critical role keeps the MaxBufferSize, MaxFlushSize and UrgentFlushInterval properties small, whereas an Analysis role sets those properties to higher values. Example: The following code example shows how to use the BufferModesCollection type. This code example is part of a larger example provided for the HealthMonitoringSection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class BufferModeSettings : ConfigurationElement Summary: Configures the ASP.NET event-buffering settings for event providers. This class cannot be inherited. Remarks: The BufferModeSettings class is used to define roles for event providers, such as Critical, Notification, Analysis, and Logging. Each role would buffer events differently, as appropriate for that role. For example a Critical role would keep the MaxBufferSize, MaxFlushSize, and UrgentFlushInterval properties small, whereas an Analysis role would set those properties to higher values. This class corresponds to the bufferModes configuration-file element. Example: The following configuration file excerpt shows how to declaratively specify values for several properties of the BufferModeSettings class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [TypeConverterAttribute(typeof(InfiniteIntConverter))] [IntegerValidatorAttribute(MinValue = )] [ConfigurationPropertyAttribute(#maxBufferSize#, IsRequired = true, DefaultValue = )] public int MaxBufferSize { get; set; } Property Value Type: System.Int32 The maximum number of events that can be buffered at one time. Summary: Gets or sets the maximum number of events that can be buffered at one time. Remarks: This property must have a value greater than zero. Invalid values may cause an exception to be thrown when the configuration section is saved. The default value varies based on the provider. The BufferModeSettings objects in the BufferModes collection are referred to by name by the providers in the Providers collection. Example: The following code example shows how to use the MaxBufferSize property. This code example is part of a larger example provided for the HealthMonitoringSection class.",1,0,1,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(BuildProvider))] public sealed class BuildProviderCollection : ConfigurationElementCollection Summary: Represents a collection of BuildProvider objects. This class cannot be inherited. Remarks: The BuildProviderCollection is used to compile custom resource files. You can have any number of build providers. The BuildProviderCollection does not refer to any actual element in the underlying configuration file. It is a construct that allows easy access to the compilation information it contains. Example: This section provides two code examples. The first demonstrates how to declaratively specify values for several properties of the BuildProviderCollection class. The second demonstrates how to use members of the BuildProviderCollection class. The following configuration file example shows how to declaratively specify values for several properties of the BuildProviderCollection class.  The following code example demonstrates how to use members of the BuildProviderCollection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(ClientTarget))] public sealed class ClientTargetCollection : ConfigurationElementCollection Summary: Represents a collection of ClientTarget objects. This class cannot be inherited. Remarks: The ClientTargetCollection type allows access to the ClientTarget elements of the ClientTargetSection section element collection. It belongs to a group that includes ClientTarget and ClientTargetSection. Example: The following code example shows how to obtain the ClientTargetCollection object from the configuration file of an existing Web application.  The following example shows an excerpt from the configuration file. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,1,0,1,1
"Additional online Documentation: Syntax: public sealed class ClientTargetSection : ConfigurationSection Summary: Configures the clientTarget section. This class cannot be inherited. Remarks: The ClientTargetSection class provides a way to programmatically access and modify the clientTarget section of the configuration file. It belongs to a group that includes the ClientTargetCollection class and the ClientTarget class. The ClientTargetSection class contains ClientTarget objects that define pairs of aliases and associated target user agents for which ASP.NET server controls should render content. Example: This section provides two code examples. The first displays a declarative representation of the ClientTargetSection class and also demonstrates how to declaratively specify values for several properties of the ClientTarget class. The second shows how to obtain the ClientTargetCollection object from the configuration file. You use this object to access the ClientTarget objects it contains. The following code example shows how to declaratively specify values for several properties of the ClientTarget class.  The following code example shows how to obtain the ClientTargetCollection object from the configuration file ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,1,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(CustomError), AddItemName = #error#, CollectionType = ConfigurationElementCollectionType.BasicMap)] public sealed class CustomErrorCollection : ConfigurationElementCollection Summary: Represents a collection of CustomError objects. This class cannot be inherited. Remarks: The CustomErrorCollection type allows access to the error elements of the customErrors section element collection. It belongs to a group that includes the CustomError, CustomErrorsMode, and CustomErrorsSection. Example: This example demonstrates how to specify values declaratively for the error elements of the customErrors section, which can also be accessed as elements of the CustomErrorCollection collection. The following configuration file example shows how to specify values declaratively for the error elements.  The following code example demonstrates how to use the CustomErrorCollection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public bool Contains( string name ) Parameters nameType: System.String The name of an EventMappingSettings object in the collection. Return Value Type: System.Boolean true if the collection contains an EventMappingSettings object with the specified name; otherwise, false. Summary: Indicates whether the collection contains an EventMappingSettings object with the specified name. Remarks: This method returns false if the specified name does not exist. Example: The following code example shows how to use the Contains method. This code example is part of a larger example provided for the HealthMonitoringSection class.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#passwordFormat#, DefaultValue = FormsAuthPasswordFormat.SHA1)] public FormsAuthPasswordFormat PasswordFormat { get; set; } Property Value Type: System.Web.Configuration.FormsAuthPasswordFormat One of the FormsAuthPasswordFormat values. Summary: Gets or sets the password format. Example: The following code example shows how to access the PasswordFormat property. Refer to the code example in the FormsAuthenticationCredentials class topic to learn how to get the section.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public void Set( FormsAuthenticationUser user ) Parameters userType: System.Web.Configuration.FormsAuthenticationUser The FormsAuthenticationUserCollection object that must be changed. Summary: Modifies the specified FormsAuthenticationUser object contained in the collection. Example: The following code example shows how to use the Set method.",1,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: public enum FormsAuthPasswordFormat Summary: Defines the encryption format for storing passwords. Remarks: To programmatically configure the type of encryption used to store passwords in a Web application, use the AuthenticationSection class. This class is also used internally by FormsAuthentication in the processing of authentication tickets. Example: The following code example shows how to use the FormsAuthPasswordFormat enumeration. Refer to the code example in the FormsAuthenticationUserCollection class topic to learn how to get the collection.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#requestEncoding#, DefaultValue = #utf-8#)] public Encoding RequestEncoding { get; set; } Property Value Type: System.Text.Encoding The content encoding of HTTP requests. The default is UTF-8. Summary: Gets or sets a value specifying the content encoding of HTTP requests. Remarks: The RequestEncoding property specifies the assumed encoding of each incoming HTTP request, including posted data and query-string data. If the request comes with a request header containing a ContentType field, the AcceptCharset field of the request header overrides the RequestEncoding of the configuration. The default encoding is UTF-8, specified in the globalization section of the Machine.config file that was created when the .NET Framework was installed. If the RequestEncoding property is not specified in the Machine.config or Web.config file, encoding defaults to the Regional Options locale setting on the computer. For single-server applications, the RequestEncoding and ResponseEncoding properties should be the same. When using multiple server applications where the default server encodings are different, you can use local Web.config files to vary the RequestEncoding and ResponseEncoding properties. Example: The following code example demonstrates how to use the RequestEncoding property. This code example is part of a larger example provided for the GlobalizationSection class.",1,0,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class HttpCapabilitiesBase : IFilterResolutionService Summary: Provides access to detailed information about the capabilities of the client's browser. Remarks: HttpCapabilitiesBase is the base class from which the HttpBrowserCapabilities class is derived. HttpCapabilitiesBase offers a large number of read-only properties that provide type-safe access to a browser's capabilities dictionary. You can access the HttpBrowserCapabilities class through the Browser property that is exposed by the ASP.NET HttpRequest.Browser property. Topic Location How to: Detect Browser Types in ASP.NET Web Pages Building ASP .NET Web Applications How to: Detect Browser Types in ASP.NET Web Pages Building ASP .NET Web Applications Example: The following example shows how to access information about the browser. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public HttpCapabilitiesBase() Summary: Creates a new instance of the HttpCapabilitiesBase class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual bool CanRenderInputAndSelectElementsTogether { get; } Property Value Type: System.Boolean true if the browser supports WML <input> and <select> elements together; otherwise, false. The default is false. Summary: Gets a value indicating whether the browser supports WML INPUT and SELECT elements together on the same card. Remarks: The CanRenderInputAndSelectElementsTogether property applies only to WML-compatible mobile devices. Example: The following code example shows how to determine whether the browser supports HTML <input> and <select> elements together.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public Version[] GetClrVersions() Return Value Type: System.Version() An array of Version objects. Summary: Returns all versions of the .NET Framework common language runtime that are installed on the client. Remarks: The GetClrVersions method is supported only when the browser is Internet Explorer version 5.0 or later. If the common language runtime is not installed on the client, the property returns an array containing a single Version object with the values 0, 0,-1,-1.",1,0,1,0,0,0,0,0,0,1,0,1
"Additional online Documentation: Syntax: public string HtmlTextWriter { get; set; } Property Value Type: System.String The fully qualified class name of the HtmlTextWriter to use. Summary: Gets or sets the fully qualified class name of the HtmlTextWriter to use.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual bool RequiresUniqueHtmlCheckboxNames { get; } Property Value Type: System.Boolean true if the browser requires unique name attribute values of multiple HTML <input type=#checkbox#> elements; otherwise, false. The default is false. Summary: Gets a value indicating whether the browser requires unique name attribute values of multiple HTML <input type=#checkbox#> elements. Example: The following code example shows how to determine whether the browser requires unique NAME attribute values of multiple HTML <input type=#checkbox#> elements.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public virtual bool SupportsFontColor { get; } Property Value Type: System.Boolean true if the browser supports the color attribute of HTML <font> elements; otherwise, false. The default is true. Summary: Gets a value indicating whether the browser supports the color attribute of HTML <font> elements. Example: The following code example shows how to determine whether the browser supports the color attribute of HTML <font> elements.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public string Version { get; } Property Value Type: System.String The full version number of the browser as a string. Summary: Gets the full version number (integer and decimal) of the browser as a string. Remarks: The Version property returns a string. In some scenarios, the Version property might contain letter characters, as in the case of a browser or client device that is a beta version such as #7.0b.# To correctly get the version as a data type that can be used in a numeric comparison, concatenate the MajorVersion and MinorVersion property values. Example: The following code example shows how to determine the Version of the browser. The MajorVersion property and MinorVersion property are concatenated and the result is used to determine whether the browser version is greater than 5.01.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public virtual void AddRuleList( ArrayList ruleList ) Parameters ruleListType: System.Collections.ArrayList The search string that modifies a browser definition. Summary: Adds a search string that modifies a browser definition. Remarks: This method adds to the collection that is created by the filter child element of the browserCaps element of the Web.config file.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override ConfigurationElementCollectionType CollectionType { get; } Property Value Type: System.Configuration.ConfigurationElementCollectionType The ConfigurationElementCollectionType of this collection. Summary: Gets the type of HttpHandlerActionCollection.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(HttpModuleAction))] public sealed class HttpModuleActionCollection : ConfigurationElementCollection Summary: Represents a collection of HttpModuleAction objects. This class cannot be inherited. Remarks: The HttpModuleActionCollection collection allows access to the HttpModuleAction elements of the HttpModulesSection section. Example: The following example shows how to use the HttpModuleActionCollection class.  The following example is an excerpt of the configuration file that enables ASP.NET to use a custom module. For a complete example of how to build and configure an HTTP module, see the HTTP Module Configuration Sample. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [IntegerValidatorAttribute(MinValue = )] [ConfigurationPropertyAttribute(#maxUrlLength#, DefaultValue = )] public int MaxUrlLength { get; set; } Property Value Type: System.Int32 The length of the URL, in number of characters. The default is 260. Summary: Gets or sets the maximum possible length, in number of characters, of the URL in an HTTP request. Remarks: The value of the MaxUrlLength property can be any integer, zero or larger. Note Extremely small values can make a Web site unusable. If the length of the request URL (which is the value of the Path property) exceeds the configured size limit, ASP.NET returns an HTTP 400 (Bad Request) status code You can set this value in a configuration file by setting the MaxUrlLength attribute of the httpRuntime element. For more information, see httpRuntime Element (ASP.NET Settings Schema).",1,0,1,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Summary: Removes a IgnoreDeviceFilterElement object from the collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [StringValidatorAttribute(MinLength = )] [TypeConverterAttribute(typeof(WhiteSpaceTrimStringConverter))] [ConfigurationPropertyAttribute(#decryptionKey#, DefaultValue = #AutoGenerate,IsolateApps#)] public string DecryptionKey { get; set; } Property Value Type: System.String A key value, or a value that indicates how the key is generated. The default is #AutoGenerate,IsolateApps#. Summary: Gets or sets the key that is used to encrypt and decrypt data, or the process by which the key is generated. Remarks: The DecryptionKey property is used for encryption and decryption, such as in Windows Forms authentication, and for view state when the Validation property is set to #3DES# or #AES#. Use the #AutoGenerate# option to specify that ASP.NET generates a random key and stores it in the Local Security Authority. The #AutoGenerate# option is part of the default value. If you add the #IsolateApps# modifier to the #AutoGenerate# DecryptionKey value, ASP.NET generates a unique encrypted key for each application by using each application's application ID. #IsolateApps# is also part of the default value. If you need to support configuration across a network of Web servers (a Web farm), set the DecryptionKey property manually to ensure consistent configuration. For information about how to manually generate values for the DecryptionKey attribute, see How To: Configure MachineKey in ASP.NET 2.0. This property is typically set declaratively in the DecryptionKey attribute of the machineKey element of the Web.config file. For more information, see the machineKey element. Example: The following example demonstrates how to set the DecryptionKey property by using code. This example is part of a larger example provided for the MachineKeySection class.",1,0,0,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public enum MachineKeyValidation Summary: Specifies the hashing algorithm that ASP.NET uses for forms authentication and for validating view state data, and for out-of-process session state identification. Remarks: ASP.NET uses a hash-based message authentication code (HMAC) to help detect whether data that is used for forms authentication or view state has been tampered with. The HMAC is generated when view state content is created, and the HMAC is checked on subsequent requests. The HMAC helps ASP.NET determine whether someone has changed data that is sent between the server and the client, but the data can be read by anyone as it travels through the Internet unless it is also encrypted. By default, view state is validated but not encrypted. For more information, see ViewStateEncryptionMode and RegisterRequiresViewStateEncryption. The MachineKeyValidation enumeration lets you specify the algorithm that ASP.NET uses to create the HMAC. The default value is HMACSHA256. ASP.NET uses the value of the ValidationKey property with the selected algorithm to generate the HMAC. Example: The following code example shows how to use the MachineKeyValidation enumeration. In the example, configSection is an instance of MachineKeySection.This code example is part of a larger example provided for the MachineKeySection class.",1,1,0,1,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public void Remove( string name ) Parameters nameType: System.String The name of the OutputCacheProfile element to remove from the collection. Summary: Removes the OutputCacheProfile object with the specified name from the collection. Remarks: The Remove method inserts a remove element into the appropriate section of the configuration file for any element defined in a higher-level configuration file. If the element is defined in the appropriate section of the current configuration file, its entry is removed from the configuration file. The object to remove must exist in the collection. Example: The following code example shows how to use the Remove method.",1,0,1,0,0,0,0,0,1,0,0,0
"Session state is enabled.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ObsoleteAttribute(#This type is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.#)] public sealed class PassportAuthentication : ConfigurationElement Summary: Configures Passport-based authentication in ASP.NET applications. Remarks: The PassportAuthentication class allows you to access and configure a node in the Machine.config or Web.config configuration file identified by the passport tag. This type is part of a group that includes the AuthenticationSection, FormsAuthenticationConfiguration, and AuthenticationMode types. Note The PassportAuthentication class can write information into the related section of the configuration file at machine, site, or application level only. Any attempt to write in a configuration file at a different level in the hierarchy will result in an error message generated by the parser. You can use this class to read configuration information at any level in the hierarchy. Example: The following code example shows how to obtain the PassportAuthentication object from the configuration file of an existing Web application. Also shown is a configuration example. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#comImpersonationLevel#, DefaultValue = ProcessModelComImpersonationLevel.Impersonate)] public ProcessModelComImpersonationLevel ComImpersonationLevel { get; set; } Property Value Type: System.Web.Configuration.ProcessModelComImpersonationLevel One of the ProcessModelComImpersonationLevel values. The default value is Impersonate. Summary: Gets or sets a value indicating the level of authentication for COM security. Remarks: When this property value is set to Default, DCOM determines the impersonation level using its normal security-negotiation algorithm. The default value assigned to this property, as specified in the Machine.config file, is Impersonate. In this case, the server process can impersonate the client's security context while acting on behalf of the client. Example: The following code example shows how to access the ComImpersonationLevel property.",1,1,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#minWorkerThreads#, DefaultValue = )] [IntegerValidatorAttribute(MinValue = , MaxValue = )] public int MinWorkerThreads { get; set; } Property Value Type: System.Int32 The minimum number of worker threads per CPU in the CLR thread pool Summary: Gets or sets the minimum number of worker threads per CPU in the CLR thread pool. Example: The following code example shows how to access the MinWorkerThreads property.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class ProfileGroupSettings : ConfigurationElement Summary: Provides programmatic access to the group subsection of the profiles configuration file section. Remarks: The ProfileGroupSettings class provides a way to programmatically create, access, and modify groups of properties added to the group subsection of the profile section of a configuration file. The profile section of the configuration file specifies a schema for user profiles. At run time, the ASP.NET compilation system uses the information specified in the profile section to generate a class called ProfileCommon, which is derived from ProfileBase. The ProfileCommon class definition is based on the properties defined in the properties subsection of the profile section of the configuration file. An instance of this class is created for each user profile, and you can access the individual profile values in your code through the HttpContext.Profile property. For more information about the profile features added to ASP.NET 2.0, see ASP.NET Profile Properties Overview. Example: The following code example shows how to use the ProfileGroupSettings type. This code example is part of a larger example provided for the ProfileSection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,1,1,0,1,1
"Additional online Documentation: Syntax: public void Add( ProfileGroupSettings group ) Parameters groupType: System.Web.Configuration.ProfileGroupSettings A ProfileGroupSettings object to add to the collection. Summary: Adds a ProfileGroupSettings object to the collection. Remarks: The collection must not already contain a ProfileGroupSettings object with the same name. Example: The following code example shows how to use the Add method. This code example is part of a larger example provided for the ProfileSection class.",1,0,1,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public sealed class ProfileSection : ConfigurationSection Summary: The ProfileSection class provides a way to programmatically access and modify the profile section of a configuration file. This class cannot be inherited. Remarks: The ProfileSection class provides a way to programmatically access and modify the content of the configuration file profile section. The profile section of the configuration file specifies a schema for user profiles. At run time, the ASP.NET compilation system uses the information specified in the profile section to generate a class called ProfileCommon, which is derived from ProfileBase. The ProfileCommon class definition is based on the properties defined in the profile section of the configuration file. The class allows you to access and modify the values for individual profiles. An instance of this class is created for each user profile, and you can access the individual profile values in your code through the HttpContext.Profile property. For more information about the profile features added to ASP.NET 2.0, see ASP.NET Profile Properties Overview. Example: The following configuration file excerpt shows how to declaratively specify values for several properties of the ProfileSection class.  The following code example shows how to use the ProfileSection type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#enabled#, DefaultValue = true)] public bool Enabled { get; set; } Property Value Type: System.Boolean true if the ASP.NET compilation system should generate a ProfileCommon class that can be used to access information about individual user profiles; otherwise, false. The default is true. Summary: Gets or sets a value indicating whether the ASP.NET profile feature is enabled. Remarks: When the Enabled property is false, the profile feature is disabled, and you will not be able to access user-profile information from your ASP.NET code. When the property is true, at run time the ASP.NET compilation system uses the information specified in the profile section to generate a class called ProfileCommon, which is derived from ProfileBase. Example: The following code example shows how to use the Enabled property. This code example is part of a larger example provided for the ProfileSection class.",1,0,1,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(ProtocolElement))] public sealed class ProtocolCollection : ConfigurationElementCollection Summary: Represents a configuration element that contains a collection of protocols. Remarks: ProtocolCollection is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,1,0,0
"Additional online Documentation: Summary: Initializes a new instance of the ProtocolElement class. Remarks: For more information, see .NET Framework Versions and Dependencies.",0,0,1,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] [ClassInterfaceAttribute(ClassInterfaceType.AutoDual)] [GuidAttribute(#9FDB6D2C-90EA-4e42-99E6-38B96E28698E#)] [SecurityPermissionAttribute(SecurityAction.Demand, Unrestricted = true)] public class RemoteWebConfigurationHostServer : IRemoteWebConfigurationHostServer Summary: Used internally at run time to support accessing configuration data remotely. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#minInstances#, DefaultValue = )] [IntegerValidatorAttribute(MinValue = )] public int MinInstances { get; set; } Property Value Type: System.Int32 The minimum number of occurrences of the same type of event before the event is raised to the provider. The default value is 1. Summary: Gets or sets the minimum number of occurrences of the same type of event before the event is raised to the provider. Remarks: This property must have a value greater than zero. Invalid values may cause an exception to be thrown when the configuration section is saved. This represents the minimum number of times an event occurs before an event is raised to the provider. For example, if the return value is 5, then ASP.NET will not raise an event to the provider until the fifth instance of the event occurs. Example: The following code example shows how to use the MinInstances property. This code example is part of a larger example provided for the HealthMonitoringSection class.",1,0,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public enum SerializationMode Summary: Determines the serialization method used for a ProfilePropertySettings object. Remarks: The SerializeAs property of the ProfilePropertySettings object controls the serialization mode for a single profile property setting. Example: The following code example shows how to use the SerializeAs property. This code example is part of a larger example provided for the ProfileSection class.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class SiteMapSection : ConfigurationSection Summary: Defines configuration settings that are used to support the infrastructure for configuring, storing, and rendering site navigation. This class cannot be inherited. Remarks: The SiteMapSection class provides a way to programmatically access and modify the content of the configuration file siteMap section. Example: This example demonstrates how to specify values declaratively for several attributes of the siteMap section, which can also be accessed as members of the SiteMapSection class. The following configuration file example shows how to specify values declaratively for the siteMap section.  The following code example demonstrates how to use the SiteMapSection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Returns the specified SqlCacheDependencyDatabaseCollection element.",1,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#hostingEnvironment#)] public HostingEnvironmentSection HostingEnvironment { get; } Property Value Type: System.Web.Configuration.HostingEnvironmentSection The HostingEnvironmentSection object refers to the hostingEnvironment section of the configuration file. Summary: Gets the hostingEnvironment section. Example: The following code example shows how to obtain the HostingEnvironmentSection object from the configuration file of an existing Web application.",1,0,0,0,0,0,1,0,1,0,1,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#xhtmlConformance#)] public XhtmlConformanceSection XhtmlConformance { get; } Property Value Type: System.Web.Configuration.XhtmlConformanceSection The XhtmlConformanceSection object refers to the xhtmlConformance section of the configuration file. Summary: Gets the xhtmlConformance section. Example: The following code example shows how to obtain the XhtmlConformanceSection object from the configuration file of an existing Web application.",0,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public sealed class VirtualDirectoryMapping Summary: Specifies a custom virtual-directory hierarchy for a Web application. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class VirtualDirectoryMappingCollection : NameObjectCollectionBase Summary: Contains a collection of VirtualDirectoryMapping objects. This class cannot be inherited. Remarks: The VirtualDirectoryMappingCollection class allows you to programmatically access a collection of VirtualDirectoryMapping objects. The collection can be accessed with either the key or the index. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the WebConfigurationFileMap class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Opens the machine-configuration file as a Configuration object to allow read or write operations.",1,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class WebControlsSection : ConfigurationSection Summary: Configures the webControls section. This class cannot be inherited. Remarks: The WebControlsSection class provides a way to programmatically access and modify the webControls section of a configuration file. Note ASP.NET provides a shared location for the client script files, where they can be accessed from multiple pages and across applications. The WebControlsSection can read and write information from and to the related section of the configuration file according to the section property AllowDefinition whose value is Everywhere. Topic Location How to: Secure Connection Strings When Using Data Source Controls Building ASP .NET Web Applications How to: Secure Connection Strings When Using Data Source Controls Building ASP .NET Web Applications How To: Secure Connection Strings when Using Data Source Controls (Visual Studio) Building ASP .NET Web Applications in Visual Studio Example: The following code example shows how to obtain the WebControlsSection object from the configuration file associated with an existing Web application. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: public TraceHandler() Summary: Initializes a new instance of the TraceHandler class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected bool IsReusable { get; } Property Value Type: System.Boolean false in all cases. Summary: Gets a value indicating whether another request can use the TraceHandler instance.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected void ShowVersionDetails() Summary: Writes the details of the current Common Language Runtime and ASP.NET build versions that the Web server is using. Remarks: The ShowVersionDetails method writes tracing details on the Common Language Runtime (CLR) and ASP.NET versions currently in use. It is called by ProcessRequest, and cannot be overridden.",1,0,1,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class AppDomainInfo : IAppDomainInfo Summary: Provides information about the application domain. Remarks: AppDomainInfo is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IAppDomainInfo GetData() Return Value Type: System.Web.Hosting.IAppDomainInfo An IAppDomainInfo interface. Implements IAppDomainInfoEnum.GetData Summary: Gets an IAppDomainInfo interface. Remarks: GetData is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public override Object InitializeLifetimeService() Return Value Type: System.Object true if the service is initiated; otherwise, false. Summary: Gives the protocol handler an infinite lifetime by preventing a lease from being created. Remarks: For more information, see .NET Framework Versions and Dependencies.",1,0,1,1,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public sealed class ApplicationHost Summary: Enables hosting of ASP.NET pages outside the Internet Information Services (IIS) application. This class enables the host to create application domains for processing ASP.NET requests. Remarks: ApplicationHost is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string PhysicalPath { get; } Property Value Type: System.String The physical path corresponding to the application's root. Summary: Gets the physical path corresponding to the application's root. Remarks: The PhysicalPath property is the path that was passed to the CreateObject method when the application was created.",1,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static ApplicationManager GetApplicationManager() Return Value Type: System.Web.Hosting.ApplicationManager The single instance of the ApplicationManager object associated with the ASP.NET host process that is running. Summary: Returns the single instance of the ApplicationManager object associated with this ASP.NET host process. Remarks: Only one instance of the ApplicationManager object is created by an ASP.NET host process in the default application domain. If an instance of the ApplicationManager class is not available, the GetApplicationManager method first creates an instance of the ApplicationManager class and then returns the newly created object. If an instance of the ApplicationManager class was previously created, the GetApplicationManager method returns the existing object. Example: The following code example uses the GetApplicationManager method to retrieve the ApplicationManager instance for a Web application.",1,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class AppManagerAppDomainFactory : IAppManagerAppDomainFactory Summary: Creates and stops application domains for a Web-application manager. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IAdphManager Summary: Manages an application domain protocol handler Remarks: IAdphManager is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [GuidAttribute(#1cc9099d-0a8d-41cb-87d6-845e4f8c4e91#)] [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)] public interface IPphManager Summary: Provides stop and start control of listener channels. Remarks: IPphManager is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [GuidAttribute(#f11dc4c9-ddd1-4566-ad53-cf6f3a28fefe#)] [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)] public interface IProcessPingCallback Summary: Provides functionality to respond to a ping request. Remarks: IProcessPingCallback is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",1,0,1,0,0,0,0,0,0,1,1,0
"Additional online Documentation: Syntax: public sealed class ProcessHost : MarshalByRefObject, IProcessHost, IAdphManager, IPphManager, IProcessHostIdleAndHealthCheck, IApplicationPreloadManager Summary: Represents a process host. Remarks: ProcessHost is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,1,0,0
"Additional online Documentation: Syntax: public void SetApplicationPreloadState( string context, string appId, bool enabled ) Parameters contextType: System.String The application context.  appIdType: System.String The unique ID of the application. enabledType: System.Boolean true to indicate the application should be preloaded; otherwise, false. Implements IApplicationPreloadManager.SetApplicationPreloadState(String, String, Boolean) Summary: Notifies ASP.NET that a particular application that is running on IIS 7.0 is configured to be preloaded. Remarks: This method implements the SetApplicationPreloadState method of the IApplicationPreloadManager interface. IIS 7.0 calls the SetApplicationPreloadState method to notify ASP.NET whether the application that is being loaded supports preloading. Note This method applies only to applications that run on IIS 7.0.",1,0,0,0,0,0,0,0,0,1,0,0
"Additional online Documentation: Syntax: public override string GetPathInfo() Return Value Type: System.String Additional path information for a resource. Summary: Returns additional path information for a resource with a URL extension. That is, for the path /virdir/page.html/tail, the return value is /tail.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override string GetRemoteAddress() Return Value Type: System.String The client's IP address. Summary: Returns the IP address of the client.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override int GetRemotePort() Return Value Type: System.Int32 The client's port number. Summary: Returns the client's port number.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override IntPtr GetUserToken() Return Value Type: System.IntPtr A value representing the client's impersonation token. The default is Zero. Summary: Returns the client's impersonation token.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Summary: Adds the contents of a file to the response.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract Stream Open() Return Value Type: System.IO.Stream A read-only stream to the virtual file. Summary: When overridden in a derived class, returns a read-only stream to the virtual resource. Remarks: The Open method returns a stream containing the data treated as a file by the VirtualPathProvider class. The stream is read-only and is seekable (the CanSeek property is true). Notes to Inheritors In derived classes the Open method must return a seekable stream. If the method returns a stream that does not support seeking, a NotSupportedException is thrown when the stream is passed to the HttpResponse object to write out the data. The exception occurs because the response tries to read the Length property, and on a stream that is not seekable, attempting to access the property causes an exception. For more information, see the CanSeek property. Example: The following code example is an implementation of the Open method that combines virtual-file-specific information with a template file and then returns the combination. The template file is cached to reduce the overhead of reading the file system multiple times to retrieve the template file. For the full code required to run the example, see the Example section of the VirtualFile class overview.",1,0,1,0,0,1,1,0,1,0,0,0
"Additional online Documentation: Syntax: public IList Attachments { get; } Property Value Type: System.Collections.IList An IList collection of MailAttachment objects. Summary: Specifies the collection of attachments that are transmitted with the message. Recommended alternative: System.Net.Mail. Remarks: New attachments can be added to the mail message by a call to Message.Attachments.Add(MyMailMessage). See Send for an example of SmtpMail usage.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public override void ProcessEvent( WebBaseEvent eventRaised ) Parameters eventRaisedType: System.Web.Management.WebBaseEvent The WebBaseEvent object to process. Summary: Processes the event passed to the provider. Remarks: This is the method that ASP.NET health monitoring calls to start the processing of the event.",0,0,0,0,0,0,0,0,0,0,0,1
"The notification of an event is triggered by a requested flush.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public IisTraceWebEventProvider() Summary: Initializes a new instance of the Iis7TraceWebEventProvider class. Remarks: The \#ctor constructor is not intended to be used directly from your code. It is called by ASP.NET. IisTraceWebEventProvider is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class RegiisUtility : IRegiisUtility Summary: Provides authorization utilities to support specific Web-application configuration, assembly registration, and assembly-key container manipulation. This class cannot be inherited. Remarks: The RegiisUtility class provides utility functions that support the system.web assembly registration. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: protected internal SqlWebEventProvider() Summary: Initializes a new instance of the SqlWebEventProvider class. Remarks: This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the SqlWebEventProvider class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void Shutdown() Summary: Performs tasks associated with shutting down the provider. Remarks: ASP.NET calls the Shutdown method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class WebApplicationLifetimeEvent : WebManagementEvent Summary: Represents a significant event in the lifetime of an application. Remarks: ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The System.Web.Management namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events. Application lifetime events include events such as application startup and shutdown events. If an application is terminated, you can determine why by viewing the related event message field. When a WebApplicationLifetimeEvent instance occurs, ASP.NET health monitoring updates the Application Lifetime Events performance counter. You can log these events by adding the WebApplicationLifetimeEvent object to the rules subsection of the healthMonitoring section of the configuration file, as shown in the following example.  The Application Lifetime Events performance counter contains the sum total of all ASP.NET lifetime events. To view this performance counter in System Monitor (PerfMon), in the Add Counters window select ASP.NET from the Performance object drop-down list. Select the Application Lifetime Events performance counter, and click the Add button. For more information, see #Using the System Monitor (PerfMon) with ASP.NET Applications# on MSDN. If you allow events to be logged by the standard EventLogWebEventProvider, you can view them in Event Viewer by selecting the Application log. For more information, see Event Viewer in the Windows Server 2003 documentation on TechNet. Caution Because the WebApplicationLifetimeEvent object is a high-volume event, logging it is resource-intensive and might slow down your system. It can also cause  events to be overwritten in the case of the EventLogWebEventProvider class due to the high volume of events and the way the event logging works. Note In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the healthMonitoring configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebApplicationLifetimeEvent class, see the example provided in this topic. Notes to Inheritors When formatting your custom event information for display, override the FormatCustomEventDetails method rather than the ToString method. This will avoid overwriting or tampering with sensitive system information. Example: The following code example shows how to derive from the WebApplicationLifetimeEvent class to create a custom event.  The following configuration-file excerpt shows how to configure the healthMonitoring section of a configuration file to add the SampleWebApplicationLifetimeEvent code defined above to the ASP.NET health-monitoring system. To add the event to the system, you must define the event by adding a new entry to the eventMappings section and map the event to a provider by adding a new entry to the rules section. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public int EventCode { get; } Property Value Type: System.Int32 One of the WebEventCodes values. Summary: Gets the code value associated with the event. Remarks: More information about the event is contained in the related Message value. Note If you inherit from the WebBaseEvent class, the event code you specify for your custom event must be greater than WebExtendedBase. Example: The following code example shows how to obtain the event code.",1,0,1,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public virtual void FormatCustomEventDetails( WebEventFormatter formatter ) Parameters formatterType: System.Web.Management.WebEventFormatter A WebEventFormatter object that contains the formatted event information. Summary: Provides standard formatting of the event information. Remarks: The FormatCustomEventDetails method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user. It is called internally when the provider invokes one of the ToString methods. Note When you format your custom event information for display, override the FormatCustomEventDetails method rather than the ToString method. This will avoid overwriting or tampering with sensitive system information. Example: The following code example shows how to customize the FormatCustomEventDetails method.",1,0,0,1,0,1,0,0,1,0,0,1
"Additional online Documentation: Syntax: public const int AuditFileAuthorizationFailure Summary: Represents the event code indicating that a file-authorization failure occurred during a Web request. This field is constant. Remarks: AuditFileAuthorizationFailure is the major code for the health event related to the access of a file for which authorization is not granted. When a file-authorization failure occurs, ASP.NET raises a WebFailureAuditEvent with a major code of AuditFileAuthorizationFailure.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public const int MiscCodeBase Summary: Identifies the offset for the ASP.NET health-monitoring Web miscellaneous event codes. This field is constant. Remarks: The MiscCodeBase value represents the offset for the major event code range associated with health events that have not been categorized. All miscellaneous codes are assigned values greater than MiscCodeBase.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string ToString() Return Value Type: System.String The event information. Summary: Returns the event information in string format. Remarks: The WebEventFormatter uses an internal StringBuilder variable to store the event information. This ToString method allows you to get all the information in a string format.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static class WebEventManager Summary: Provides functionality for managing Web events in an application. This class cannot be inherited. Remarks: Use the WebEventManager class to flush currently buffered events for providers that are contained in the healthMonitoring section of the configuration. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected WebEventProvider() Summary: Initializes a new instance of the WebEventProvider class. Remarks: The WebEventProvider constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the WebEventProvider constructor when deriving from the WebEventProvider class. Example: The following code example shows how to use this constructor in a custom event provider.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public abstract void ProcessEvent( WebBaseEvent raisedEvent ) Parameters raisedEventType: System.Web.Management.WebBaseEvent The WebBaseEvent object to process. Summary: Processes the event passed to the provider. Remarks: This is the method that ASP.NET health monitoring calls to start processing the event. Example: The following code example shows how to implement the ProcessEvent method. This method appends the customized string representation of the event to a specific log file.",0,0,0,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public class WebHeartbeatEvent : WebManagementEvent Summary: Defines those health-monitoring events raised at a periodic interval. Remarks: ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The System.Web.Management namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events. The heartbeat health-monitoring events serve as a timer for the ASP.NET health-monitoring system. They are raised at an interval defined by the heartBeatInterval attribute of the healthMonitoring configuration section. The WebHeartbeatEvent uses the WebProcessStatistics class to obtain process information. Note In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the healthMonitoring configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. Example: The following configuration file excerpt shows the configuration for the EventLogWebEventProvider so it can handle heartbeat health events. Note The EventLogWebEventProvider and the heartbeat health event types to monitor are configured by default. The only thing you need to do is to define the rule to monitor the heartbeat health events. Remember that by default only the failure audits are logged. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.InheritanceDemand, Unrestricted = true)] public class WebManagementEvent : WebBaseEvent Summary: Defines the base class for events that carry application and process information. Remarks: ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The System.Web.Management namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events. The WebManagementEvent is the base class for all the ASP.NET health-monitoring event types. It uses the WebProcessInformation class to obtain process information that is available to its derived classes. Note In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the healthMonitoring configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebManagementEvent class, see the example provided in this topic. Notes to Inheritors When formatting your custom event information for display, override the FormatCustomEventDetails method rather than the ToString method. This will avoid overwriting or tampering with sensitive system information. The event code you specify for your custom event must be greater than WebExtendedBase. Example: The following example shows how to implement a custom event by deriving it from the WebManagementEvent class.  The following is an excerpt of the configuration file that enables ASP.NET to use the custom event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class WebSuccessAuditEvent : WebAuditEvent Summary: Provides information about successful security events. Remarks: ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The System.Web.Management namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events. The WebSuccessAuditEvent class is used when a successful security-related operation occurs. An example of this is a successful URL authorization for a Web request. The following list describes the features for which events of type WebSuccessAuditEvent are raised by ASP.NET: File Authorization. Successful conditions are audited. File authorization is only attempted by ASP.NET when a Windows Identity is associated with the request. The related event audit code is AuditFileAuthorizationSuccess. URL Authorization. It signifies access of a URL resource for which authorization is granted. Successful conditions are audited. The related event audit code is AuditUrlAuthorizationSuccess. Other security conditions. The following is a list of the related event codes: AuditFormsAuthenticationSuccess AuditMembershipAuthenticationSuccess When a WebSuccessAuditEvent is raised, ASP.NET health monitoring increments the related Audit Success Events Raised performance counter and then checks the healthMonitoring configuration to determine whether any providers subscribe to the event. If providers subscribe to the event, ASP.NET dispatches the event to them for processing. Note To view the Audit Success Event Raised performance counter in System Monitor (PerfMon), in the Add Counters window select ASP.NET from the Performance object drop-down list, select the Audit Success Event Raised performance counter, and click the Add button. For more information, see Monitoring ASP.NET Application Performance. Because success audits represent an expected condition, you may not want to subscribe to them. You can subscribe to them in order to provide access auditing for the site. Note In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the healthMonitoring configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebSuccessAuditEvent class, see the example provided in this topic. Example: The following code example shows how to derive from the WebSuccessAuditEvent class to create a custom audit event.  The following example is an excerpt of the configuration file that enables ASP.NET health monitoring to use the event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public class WebViewStateFailureAuditEvent : WebFailureAuditEvent Summary: Provides Web-application view-state-related-failure information. Remarks: ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The System.Web.Management namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events. ASP.NET raises events of type WebViewStateFailureAuditEvent when a view-state failure occurs. This failure indicates either an attempt to tamper with view state or its reuse from another machine with a different key. The related audit event code is AuditInvalidViewStateFailure. Note In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the healthMonitoring configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. Example: The following is an excerpt of a configuration file showing how to configure the EventLogWebEventProvider to capture view-state failures. For completeness we are showing the setup for the provider and eventMappings sections. They are already set by default. The only thing you need to do is to provide the setup for the rules section. Refer to healthMonitoring for more information. To generate a view-state error, enter a URL in your browser with the following query string:  The Windows Application Eventlog will capture a view-state failure, if you enter the following configuration settings. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public DefaultProfile() Summary: Creates a new instance of the DefaultProfile class. Remarks: The DefaultProfile class is used by ASP.NET to return a default instance of a user profile when the profile feature is enabled but no properties are defined.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public bool ContinueWithProfileAutoSave { get; set; } Property Value Type: System.Boolean true if the ProfileModule will automatically save the user profile; otherwise, false. The default is true. Summary: Gets or sets a value indicating whether the ProfileModule will automatically save the user profile. Remarks: The Save method automatically determines whether properties that are made up of primitive types, strings, or DateTime objects have been changed, by checking the IsDirty property value for each SettingsPropertyValue in the user profile. The Save method cannot explicitly determine whether a custom class has changed. You can use the ProfileAutoSaving event to determine whether a custom object has been modified and then either continue with the automatic save if the object has been modified or cancel the automatic save if the object has not been modified. To cancel the automatic profile save operation, set the ContinueWithProfileAutoSave property to false in the ProfileAutoSaving event; otherwise, set the ContinueWithProfileAutoSave property to true. There may be multiple subscribers to the ProfileAutoSaving event. The ProfileModule will use the last value that the ContinueWithProfileAutoSave property is set to. As a result, it is recommended that you explicitly set the ContinueWithProfileAutoSave property in the ProfileAutoSaving event whether you are canceling or continuing with the automatic save, as you may need to overwrite the value set by an earlier subscriber. Example: The following code example shows the ProfileAutoSaving event included in the Global.asax file for an ASP.NET application.",1,1,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public delegate void ProfileAutoSaveEventHandler( Object sender, ProfileAutoSaveEventArgs e ) Parameters senderType: System.Object The ProfileModule that raised the ProfileAutoSaving event. eType: System.Web.Profile.ProfileAutoSaveEventArgs A ProfileAutoSaveEventArgs that contains the event data. Summary: Represents the method that will handle the ProfileAutoSaving event of a ProfileModule. Remarks: The ProfileAutoSaveEventHandler delegate is defined for the ProfileAutoSaving event of the ProfileModule class. You can access the ProfileAutoSaving event of the ProfileModule class in the Global.asax file for your ASP.NET application, as shown in the example for this topic. The ProfileAutoSaving event is raised at the end of page execution if the AutomaticSaveEnabled property is true. The Save method automatically determines whether properties that are made up of primitive types, strings, or DateTime objects have been changed, by checking the IsDirty property value for each SettingsPropertyValue in the user profile. However, the Save method cannot explicitly determine whether a custom class has changed. You can handle the ProfileAutoSaving event to determine whether a custom object has been modified and to continue with the automatic save for modified objects and cancel the automatic save if no objects have been modified. To cancel the automatic profile save operation, set the ContinueWithProfileAutoSave property to false in the ProfileAutoSaving event; otherwise, set the ContinueWithProfileAutoSave property to true. There may be multiple subscribers to the ProfileAutoSaving event. The ProfileModule will use the last value that the ContinueWithProfileAutoSave property is set to. As a result, it is recommended that you explicitly set the ContinueWithProfileAutoSave property in the ProfileAutoSaving event, regardless of whether you are canceling or continuing with the automatic save, as you may need to overwrite the value set by an earlier subscriber. Example: The following code example shows the ProfileAutoSaving event included in the Global.asax file for an ASP.NET application.",1,0,0,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public override void Save() Summary: Updates the profile data source with changed profile property values. Remarks: The Save method writes modified profile property values to the data source. The profile provider can reduce the amount of activity at the data source by performing updates only when the IsDirty property is set to true. This is the case for the default SqlProfileProvider. After the Save method has saved the property values to the data source, IsDirty is set to false. You can use the ProfileAutoSaving event to implement custom logic that determines whether a profile property with a custom type or a complex type has been modified and continue with the automatic save for modified objects or cancel the automatic save if no objects have been modified.",1,0,0,0,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ProfileMigrateEventArgs : EventArgs Summary: Provides data for the MigrateAnonymous event of the ProfileModule class. Remarks: The ProfileMigrateEventArgs object provides event information to the MigrateAnonymous event of the ProfileModule class. The ProfileMigrateEventArgs object provides access to the HttpContext of the current request and the anonymous user identifier for the anonymous profile in the AnonymousID property. You can use the MigrateAnonymous event to copy profile property values from an anonymous profile to an authenticated profile when a user who has been anonymously using your application logs in. When an application that has the user profile enabled is started, ASP.NET creates a new class of type ProfileCommon, which inherits from the ProfileBase class. When the ProfileCommon class is generated, based on the profile properties specified in the Web.config file, a GetProfile method is added that enables you to retrieve a ProfileCommon object based on a user name. You can use the GetProfile method of the current profile to retrieve the property values of the anonymous profile. The anonymous property values can then be copied to the current profile for the authenticated user. Topic Location Walkthrough: Maintaining Web Site User Information with Profile Properties Building ASP .NET Web Applications in Visual Studio Example: The following code examples show a Web.config file that enables anonymous authentication and the MigrateAnonymous event included in the Global.asax file for an ASP.NET application. The following code example shows a Web.config file that enables anonymous identification and profile properties that support anonymous users.  The following code example shows the MigrateAnonymous event included in the Global.asax file for an ASP.NET application. The MigrateAnonymous event copies profile property values from the anonymous profile to the profile for the current user. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public abstract class ProfileProvider : SettingsProvider Summary: Defines the contract that ASP.NET implements to provide profile services using custom profile providers. Remarks: ASP.NET profiles offer persistent storage and retrieval of user-specific properties. Profile property values and information are stored in a data source in a manner determined by the ProfileProvider implementation. You can use the profile providers that are included with the .NET Framework (represented by the classes that derive from the ProfileProvider abstract class), or you can implement your own provider by creating a new class that derives from ProfileProvider. There are two primary reasons for creating a custom profile provider. You need to store profile information in a data source that is not supported by the profile providers included with the .NET Framework, such as a FoxPro database, an Oracle database, or other data stores. You need to manage profile information using a database schema that is different from the database schema used by the providers that ship with the .NET Framework. A common example of this would be user data that already exists in a SQL Server database for a company network or a Web site. The ProfileProvider abstract class inherits from the SettingsProvider abstract class, which inherits from the ProviderBase abstract class. Classes that implement ProfileProvider must also implement the required members of the SettingsProvider and ProviderBase abstract classes. For more information about implementing a profile provider, see Implementing a Profile Provider. Topic Location Implementing a Profile Provider Building ASP .NET Web Applications Implementing a Profile Provider Building ASP .NET Web Applications Example: For an example of a ProfileProvider implementation, see How to: Build and Run the Profile Provider Example. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,0,0,1,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property)] public sealed class SettingsAllowAnonymousAttribute : Attribute Summary: Identifies whether a profile property can be set or accessed for an anonymous user. Remarks: The SettingsAllowAnonymousAttribute class is used to identify whether a property of a custom profile implementation can be accessed if the user is an anonymous user. For information about enabling anonymous identification, see the documentation provided for the anonymousIdentification configuration element. If no SettingsAllowAnonymousAttribute is specified for a profile property, anonymous access of the profile property is not allowed. A custom profile implementation is a class that inherits from the ProfileBase abstract class and defines properties for the user profile that are not specified in the profile configuration element. You can specify a custom user-profile type in the application's Web.config file with the inherits attribute of the profile configuration element as shown in the following example. <configuration> <connectionStrings> <add name=#SqlServices# connectionString=#Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;# /> </connectionStrings> <system.web> <authentication mode=#Forms# > <forms loginUrl=#login.aspx# name=#.ASPXFORMSAUTH# /> </authentication> <authorization> <deny users=#?# /> </authorization> <profile inherits=#Samples.AspNet.Profile.EmployeeProfile# defaultProvider=#SqlProvider#> <providers> <clear /> <add name=#SqlProvider# type=#System.Web.Profile.SqlProfileProvider# connectionStringName=#SqlServices# description=#SQL Profile Provider for Sample#/> <add name=#EmployeeInfoProvider# type=#System.Web.Profile.SqlProfileProvider# connectionStringName=#SqlServices# description=#SQL Profile Provider for Employee Info#/> </providers> <properties> <add name=#GarmentSize# /> </properties> </profile> </system.web> </configuration> Example: The following code example defines a class that inherits from the ProfileBase to create a custom profile. The type of the custom profile is specified in the inherits attribute of the profile configuration element in the Web.config file for an application. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class PageRouteHandler : IRouteHandler Summary: Provides properties and methods for defining how a URL maps to a physical file. Remarks: You pass an instance of PageRouteHandler to the Route constructor in order to map a URL of a physical file. The PageRouteHandler object specifies the virtual path of the physical file and determines whether authorization rules for the physical URL is checked. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public class Route : RouteBase Summary: Provides properties and methods for defining a route and for obtaining information about the route. Remarks: The Route class enables you to specify how routing is processed in an ASP.NET application. You create a Route object for each URL pattern that you want to map to a class that can handle requests that correspond to that pattern. You then add the route to the Routes collection. When the application receives a request, ASP.NET routing iterates through the routes in the Routes collection to find the first route that matches the pattern of the URL. Set the Url property to a URL pattern. The URL pattern consists of segments that come after the application name in an HTTP request. For example, in the URL http://www.contoso.com/products/show/beverages, the pattern applies to products/show/beverages. A pattern with three segments, such as {controller}/{action}/{id}, matches the URL http://www.contoso.com/products/show/beverages. Each segment is delimited by the / character. When a segment is enclosed in braces ( { and } ), the segment is referred to a URL parameter. ASP.NET routing retrieves the value from the request and assigns it to the URL parameter. In the previous example, the URL parameter action is assigned the value show. If the segment is not enclosed in braces, the value is treated as a literal value. Set the Defaults property to a RouteValueDictionary object that includes values that are used if a parameter is missing from the URL or to set additional values that are not parameterized in the URL. Set the Constraints property to a RouteValueDictionary object that contains values that are either regular expressions or IRouteConstraint objects. These values are used to determine whether a parameter value is valid. Example: The following example shows how to create a Route object and add it to the Routes property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class ActiveDirectoryMembershipUser : MembershipUser Summary: Exposes and updates membership user information stored in an Active Directory data store. Remarks: The ActiveDirectoryMembershipUser object is used to represent a single membership user in the Active Directory membership data store. It exposes information about the membership user such as the e-mail address, and provides functionality for the membership user such as the ability to change or reset his or her password. An ActiveDirectoryMembershipUser object is returned by the application's membership provider whenever the application is configured to use an Active Directory data store. In an application that can be configured to use different data stores, or in an application that uses multiple data stores, you can refer to the base class, MembershipUser. Because the ActiveDirectoryMembershipUser object does not implement the LastActivityDate and LastLoginDate properties, you must be prepared to handle the NotSupportedException that is thrown when these members are accessed on an ActiveDirectoryMembershipUser object. The ActiveDirectoryMembershipUser class implements internal optimizations used by the ActiveDirectoryMembershipProvider class to minimize the number of attribute updates that occur when calling the UpdateUser method. It also serializes the SecurityIdentifier representation (available in the ProviderUserKey property) so that an ActiveDirectoryMembershipUser object can be serialized and deserialized without throwing exceptions. A ActiveDirectoryMembershipUser object is returned by the GetUser and CreateUser methods or as part of a MembershipUserCollection returned by the GetAllUsers, FindUsersByName, and FindUsersByEmail methods. An ActiveDirectoryMembershipUser object is required by the UpdateUser method when you want to update the information for an existing membership user. ActiveDirectoryMembershipUser properties are mapped to Active Directory attributes. The following table lists the ActiveDirectoryMembershipUser properties and their default attribute mappings. Property Default directory attribute Can be mapped? ProviderUserKey securityIdentifier No UserName userPrincipalName Yes, but must be either userPrincipalName or sAMAccountName Comment comment No CreationDate whenCreated No Email mail Yes, but must be a single-valued attribute of type Unicode String. LastActivityDate n/a Not supported by ActiveDirectoryMembershipProvider. LastLoginDate n/a Not supported by ActiveDirectoryMembershipProvider. LastPasswordChangedDate pwdLastSet No PasswordQuestion none, but must be mapped to an attribute if using question-and-answer security for password reset or retrieval. Yes, but must be a single-valued attribute of type Unicode String. IsApproved User-Account-Control (AD) mDS-UserAccountDisabled (ADAM) No IsLockedOut computed from lockoutTime and the AD lockout duration (AD on Windows 2000) msDS-User-Account-Control-Computed (AD on Windows Server 2003) msDS-User-Account-Control-Computed (ADAM) No LastLockoutDate If locked out due to too many bad password attempts, the lockout time attribute is returned. If locked out due to too many bad password answer attempts, the value stored in the attribute defined by attributeMapFailedPasswordAnswerLockoutTime is returned. If locked out due to both a bad password and too many bad password attempts, the most recent date/time value is returned. If the account is not locked out, return 1/1/1753 for SQL compatibility. No Example: The following code example demonstrates using properties on the ActiveDirectoryMembershipUser object on a Web page that may return user information from multiple membership data stores. Because the ActiveDirectoryMembershipUser object that underlies the MembershipUser object returned by the membership provider does not implement the LastActivityDate and LastLoginDate properties, the code first checks the type of the user object returned from the membership provider before displaying the contents of those properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: public class AuthorizationStoreRoleProvider : RoleProvider Summary: Manages storage of role-membership information for an ASP.NET application in an authorization-manager policy store, either in an XML file, in an Active Directory, or on an Active Directory Application Mode server. Remarks: This class is used by the Roles and RolePrincipal classes to provide role-management services for an ASP.NET application using an authorization-manager store. You can use role management to specify different levels of authorization for your application. The authorization manager can be accessed using the Microsoft Management Console. The AuthorizationStoreRoleProvider object works with both Windows authentication and forms authentication modes. You can configure the AuthorizationStoreRoleProvider object to use either a local XML file or an Active Directory or Active Directory Application Mode (ADAM) server. When using a local file, the connection string should look like the following example.  If the local file is stored in the directory tree of an ASP.NET Web application, you can use the tilde (#~#) character to indicate the root directory. For example, to indicate that the local file is stored in the Web application's data directory, you would use a connection string similar to the following example. msxml://~\\App_Data\\datafilename.xml Security Note Storing an XML data file in the Web application directory is a potential security threat. By default, IIS will serve XML data files to the Web. To improve security when using a local data file in an ASP.NET application, you should store the data file in the App_Data directory. Files stored in the App_Data directory will not be served to the Web. If you are using an Active Directory or ADAM server for the policy store, your connection string should be similar to the following example. msldap://myserver/CN=MyAzManStore,OU=MyOU,DC=MyDomain,DC=MyDC,DC=Com The exceptions listed in the documentation for AuthorizationStoreRoleProvider object methods are the exceptions that are raised by the AuthorizationStoreRoleProvider object. Since the provider relies on the underlying Authentication Manager runtime, a COMException exception may be thrown whenever the AuthorizationStoreRoleProvider object forwards a method call to the Authentication Manager runtime. Security Note The AuthorizationStoreRoleProvider object has the following requirements for running in partial-trust environments: When using a file-based policy store in an ASP.NET application, the file I/O permissions granted by the current trust level determine whether read and write actions are allowed by the provider. The ASP.NET application must have read permission on the file to read data from the policy store, and must have write permission to save new information or update existing information in the policy store. The default Medium-trust policy file gives an ASP.NET application read/write permissions in its application directory. The default Low-trust policy file only gives an ASP.NET application read permission in its application directory. In addition, the process identity under which the ASP.NET application runs must have file-system permissions to read and/or write the policy file. When using an Active Directory or ADAM server, the ASP.NET application needs unmanaged-code permission because the internal AuthorizationStoreRoleProvider object code uses COM interop. When using the AuthorizationStoreRoleProvider object outside of ASP.NET, the calling code needs unmanaged-code permission. Example: The following code example shows a Web.config file set to use the AuthorizationStoreRoleProvider for role management. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public enum CookieProtection Summary: Describes how information in a cookie is protected.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class FormsAuthentication Summary: Manages forms-authentication services for Web applications. This class cannot be inherited. Remarks: Forms authentication enables user and password validation for Web applications that do not require Windows authentication. With forms authentication, user information is stored in an external data source, such as a Membership database, or in the configuration file for an application. Once a user is authenticated, forms authentication maintains an authentication ticket in a cookie or in the URL so that an authenticated user does not need to supply credentials with each request. Forms authentication is enabled by setting the mode attribute of the authentication configuration element to Forms. You can require that all requests to an application contain a valid user authentication ticket by using the authorization configuration element to deny the request of any unknown user, as shown in the following example.  In the previous example, any request for an ASP.NET page that is part of the application requires a valid user name that is supplied by forms authentication. If no user name exists, then the request is redirected to the configured LoginUrl. The FormsAuthentication class provides access to methods and properties that you can use in an application that authenticates users. The RedirectToLoginPage method redirects a browser to the configured LoginUrl for users to log into an application. The RedirectFromLoginPage method redirects an authenticated user back to the original protected URL that was requested or to the DefaultUrl. There are also methods that enable you to manage forms-authentication tickets, if needed. Topic Location How to: Implement Simple Forms Authentication Building ASP .NET Web Applications How to: Use Advanced Features of the ASP.NET Login Control Building ASP .NET Web Applications How to: Create an ASP.NET Login Page Building ASP .NET Web Applications How to: Implement Simple Forms Authentication Building ASP .NET Web Applications How to: Use Advanced Features of the ASP.NET Login Control Building ASP .NET Web Applications How to: Create an ASP.NET Login Page Building ASP .NET Web Applications Walkthrough: Creating a Web Site with Membership and User Login (Visual Studio) Building ASP .NET Web Applications in Visual Studio How to: Create an ASP.NET Login Page Building ASP .NET Web Applications in Visual Studio Example: The following code example shows the Web.config file for an ASP.NET application that uses the ASP.NET membership provider for forms authentication and requires all users to be authenticated.  The following code example shows the login page for an ASP.NET application that uses forms authentication and ASP.NET membership. Security Note This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview.   <%@ Page Language=## %> <%@ Import Namespace=#System.Web.Security# %> <!DOCTYPE html PUBLIC #-//W3C//DTD XHTML 1.0 Transitional//EN# #http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd#> <script runat=#server#> public void Login_OnClick(object sender, EventArgs args) { if (Membership.ValidateUser(UsernameTextbox.Text, PasswordTextbox.Text)) FormsAuthentication.RedirectFromLoginPage(UsernameTextbox.Text, NotPublicCheckBox.Checked); else Msg.Text = #Login failed. Please check your user name and password and try again.#; } </script> <html xmlns=#http://www.w3.org/1999/xhtml# > <head> <title>Login</title> </head> <body> <form id=#form1# runat=#server#> <h3>Login</h3> <asp:Label id=#Msg# ForeColor=#maroon# runat=#server# /><br /> Username: <asp:Textbox id=#UsernameTextbox# runat=#server# /><br /> Password: <asp:Textbox id=#PasswordTextbox# runat=#server# TextMode=#Password# /><br /> <asp:Button id=#LoginButton# Text=#Login# OnClick=#Login_OnClick# runat=#server# /> <asp:CheckBox id=#NotPublicCheckBox# runat=#server# /> Check here if this is <span style=#text-decoration:underline#>not</span> a public computer. </form> </body> </html> ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public delegate void FormsAuthenticationEventHandler( Object sender, FormsAuthenticationEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Web.Security.FormsAuthenticationEventArgs A FormsAuthenticationEventArgs that contains the event data. Summary: Represents the method that handles the FormsAuthentication_OnAuthenticate event of a FormsAuthenticationModule. Remarks: The FormsAuthenticationEventHandler delegate is defined for the Authenticate event of the FormsAuthenticationModule class. You can access the Authenticate event of the FormsAuthenticationModule class by specifying a subroutine named FormsAuthentication_OnAuthenticate in the Global.asax file for your ASP.NET application. The Authenticate event is raised during the AuthenticateRequest event. The FormsAuthenticationModule constructs a FormsAuthenticationEventArgs object using the current HttpContext and passes it to the FormsAuthentication_OnAuthenticate event. You can use the User property of the FormsAuthenticationEventArgs object supplied to the FormsAuthentication_OnAuthenticate event to set the User property of the current HttpContext to a custom IPrincipal object. If you do not specify a value for the User property during the FormsAuthentication_OnAuthenticate event, the identity supplied by the forms authentication ticket in the cookie or URL is used. The FormsAuthentication_OnAuthenticate event is only raised when the authentication Mode is set to Forms and the FormsAuthenticationModule is an active HTTP module for the application. Example: The following code example uses the FormsAuthentication_OnAuthenticate event to set the User property of the current HttpContext to a GenericPrincipal object with a custom Identity.",1,0,0,0,0,0,0,0,1,1,1,1
"Additional online Documentation: Syntax: public static class Membership Summary: Validates user credentials and manages user settings. This class cannot be inherited. Remarks: The Membership class is used in ASP.NET applications to validate user credentials and manage user settings such as passwords and e-mail addresses. The Membership class can be used on its own, or in conjunction with the FormsAuthentication to create a complete system for authenticating users of a Web application or site. The Login control encapsulates the Membership class to provide a convenient mechanism for validating users. Note If you are not familiar with the membership features of ASP.NET, see Introduction to Membership before continuing. For a list of  topics related to membership, see Managing Users by Using Membership. The Membership class provides facilities for: Creating new users. Storing membership information (user names, passwords, e-mail addresses, and supporting data) in Microsoft SQL Server or in an alternative data store. Authenticating users who visit your site. You can authenticate users programmatically, or you can use the Login control to create a complete authentication system that requires little or no code. Managing passwords, which includes creating, changing, retrieving, and resetting them, and so on. You can optionally configure ASP.NET membership to require a password question and answer to authenticate password reset or retrieval requests for users that have forgotten their password. Although ASP.NET membership is a self-standing feature in ASP.NET For authentication, it can be integrated with ASP.NET role management to provide authorization services for your site. Membership can also be integrated with the ASP.NET user System.Web.Profile to provide application-specific customization that can be tailored to individual users. For details, see Understanding Role Management and ASP.NET Profile Properties Overview. The Membership class relies on membership providers to communicate with a data source. The .NET Framework includes a SqlMembershipProvider, which stores user information in a Microsoft SQL Server database, and an ActiveDirectoryMembershipProvider, which enables you to store user information on an Active Directory or Active Directory Application Mode (ADAM) server. You can also implement a custom membership provider to communicate with an alternative data source that can be used by the Membership class. Custom membership providers inherit the MembershipProvider abstract class. For more information, see Implementing a Membership Provider. By default, ASP.NET membership is enabled for all ASP.NET applications. The default membership provider is the SqlMembershipProvider and is specified in the machine configuration with the name AspNetSqlProvider. The default instance of the SqlMembershipProvider is configured to connect to a local instance of Microsoft SQL Server. You can modify the default settings to specify a SqlMembershipProvider  than the AspNetSqlProvider instance as the default provider, or specify an instance of a custom provider as the default provider for your ASP.NET application using the Web.config file. You can specify the ASP.NET membership configuration for your Web application using the membership configuration section in the Web.config file. You can use the providers subsection of the membership section to specify a membership provider  than one of the default providers. For example, the following membership section removes the default membership providers from the current application configuration and adds a new provider with a name of SqlProvider that connects to a SQL Server instance named AspSqlServer.  Topic Location Walkthrough: Creating a Web Site with Membership and User Login (Visual Studio) Building ASP .NET Web Applications in Visual Studio Example: The following code example shows the login page for an ASP.NET application configured to use forms authentication and ASP.NET membership. If the supplied user credentials are invalid, a message is displayed to the user. Otherwise, the user is redirected to the originally requested URL using the RedirectFromLoginPage method. Note The ASP.NET login controls (Login, LoginView, LoginStatus, LoginName, and PasswordRecovery) encapsulate virtually all of the logic required to prompt users for credentials and validate the credentials in the membership system and can be used in place of programmatic checking using the Membership class. Security Note This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public void Dispose() Implements IHttpModule.Dispose Summary: Disposes of the module derived from IHttpModule when called by the HttpRuntime. This class is deprecated. Remarks: This class has been deprecated and is no longer supported. Microsoft Passport Network has been replaced by Windows Live ID. For more information about how to use Windows Live ID to authenticate users in a Web application, see Windows Live ID SDK.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string GetDomainAttribute( string strAttribute, int iLCID, string strDomain ) Parameters strAttributeType: System.String The name of the attribute value to retrieve.  iLCIDType: System.Int32 The language in which various Passport network pages should be displayed to the member.  strDomainType: System.String The domain authority name to query for an attribute. Return Value Type: System.String A string representing the requested attribute. Summary: Provides information for a Passport domain by querying the Passport manager for the requested domain attribute. This class is deprecated. Remarks: This class has been deprecated and is no longer supported. Microsoft Passport Network has been replaced by Windows Live ID. For more information about how to use Windows Live ID to authenticate users in a Web application, see Windows Live ID SDK.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public bool GetFromNetworkServer { get; } Property Value Type: System.Boolean true if a connection is coming back from the Passport server (logon, update, or registration) and if the Passport data contained on the query string is valid; otherwise, false. Summary: Gets information on a Passport server connection and query string. This class is deprecated. Remarks: This class has been deprecated and is no longer supported. Microsoft Passport Network has been replaced by Windows Live ID. For more information about how to use Windows Live ID to authenticate users in a Web application, see Windows Live ID SDK.",1,0,1,0,0,0,0,0,0,1,1,0
"Additional online Documentation: Syntax: public bool HasFlag( int iFlagMask ) Parameters iFlagMaskType: System.Int32 The Passport profile flag to query. Return Value Type: System.Boolean true if the Passport profile flag iFlagMask is set in this user's profile; otherwise, false. Summary: Indicates whether a given flag is set in this user's profile. This class is deprecated. Remarks: This class has been deprecated and is no longer supported. Microsoft Passport Network has been replaced by Windows Live ID. For more information about how to use Windows Live ID to authenticate users in a Web application, see Windows Live ID SDK.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Object Ticket( string strAttribute ) Parameters strAttributeType: System.String A string identifying the Passport authentication ticket to return. Return Value Type: System.Object An object representing an attribute of the Passport authentication ticket. Summary: Gets information on a specific attribute of the Passport authentication ticket. This class is deprecated. Remarks: This class has been deprecated and is no longer supported. Microsoft Passport Network has been replaced by Windows Live ID. For more information about how to use Windows Live ID to authenticate users in a Web application, see Windows Live ID SDK.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public sealed class RoleManagerEventArgs : EventArgs Summary: Provides event data for the GetRoles event of the RoleManagerModule class. Remarks: The RoleManagerEventArgs object provides event information to the GetRoles event of the RoleManagerModule class. The RoleManagerEventArgs object provides access to the HttpContext of the current request, and a Boolean RolesPopulated property is used to enable or cancel creation of a RolePrincipal by the RoleManagerModule. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class RolePrincipal : IPrincipal, ISerializable Summary: Represents security information for the current HTTP request, including role membership. This class cannot be inherited. Remarks: The RolePrincipal object implements the IPrincipal interface and represents the current security context for the HTTP request. When role management is enabled (see Roles), the RoleManagerModule assigns a RolePrincipal object to the User property of the Current HttpContext. The RolePrincipal class exposes the security identity for the current HTTP request and additionally performs checks for role membership. If CacheRolesInCookie is true, then the RolePrincipal object manages the cached list of roles and looks up role membership for the current user in the cached list first, then the role Provider. If CacheRolesInCookie is false, the RolePrincipal object always looks up role membership using the role provider. The RolePrincipal object encrypts and decrypts role information cached in the cookie identified by the CookieName based on the CookieProtectionValue. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public RoleProviderCollection() Summary: Creates a new, empty role-provider collection. Remarks: This constructor is not intended to be used from your code.",1,0,1,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public SqlMembershipProvider() Summary: Initializes a new instance of the SqlMembershipProvider class. Remarks: The SqlMembershipProvider constructor is called by ASP.NET to create an instance of the SqlMembershipProvider class as specified in the configuration for the application. This constructor is not intended to be used from your code.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public SqlRoleProvider() Summary: Creates an instance of the SqlRoleProvider class. Remarks: The SqlRoleProvider constructor is called by ASP.NET to create an instance of the SqlRoleProvider class as specified in the configuration for the application. This constructor is not intended to be used from your code.",0,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void AddUsersToRoles( string[] usernames, string[] roleNames ) Parameters usernamesType: System.String() A string array of user names to be added to the specified roles. roleNamesType: System.String() A string array of role names to add the specified user names to. Summary: Adds the specified user names to each of the specified roles. Remarks: The AddUsersToRoles method is called by the Roles class to associate one or more users with one or more roles in the SQL Server database specified in the ASP.NET application's configuration file (Web.config). This method is called by the AddUserToRole, AddUserToRoles, AddUsersToRole, and AddUsersToRoles methods of the Roles class. The database updates that are performed during the call to the AddUsersToRoles method are made within a transaction. If an error is encountered, such as a user name that is already in a specified role, the transaction is rolled back and no updates are performed. If the SqlRoleProvider is being used with the SqlMembershipProvider, and one of the specified user names does not exist in the database, the user name will be automatically added to the database. User names and role names cannot contain commas. Example: The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see SqlRoleProvider.",1,0,1,0,0,1,1,0,1,0,0,0
"Additional online Documentation: Syntax: public override string[] GetUsersInRole( string roleName ) Parameters roleNameType: System.String The name of the role to get the list of users for. Return Value Type: System.String() A string array containing the names of all the users who are members of the specified role. Summary: Gets a list of users in the specified role. Remarks: The GetUsersInRole method is called by the Roles class to retrieve the list of users associated with the specified role in the SQL Server database specified in the ASP.NET application's configuration file (Web.config). Example: The following code example uses the GetUsersInRole method to get a list of the users in a particular role and bind the results to a System.Web.UI.WebControls.GridView control. For an example of a Web.config file that enables role management, see SqlRoleProvider.",1,0,0,1,0,0,0,1,1,0,1,1
"Additional online Documentation: Syntax: public class HttpSessionStateContainer : IHttpSessionState Summary: Contains session-state values as well as session-level settings for the current request. Remarks: ASP.NET provides session-state management to enable you to store information associated with a unique browser session across multiple requests. You can store a collection of values referenced by a key name or by numerical index. Access to session values and functionality is available using the HttpSessionState class, which is accessible through the Session property of the current HttpContext or the Session property of the Page. The HttpSessionState class accesses session-state values and session-level settings by referencing a session-state container, which is an implementation of the IHttpSessionState interface that has been populated with session-state data and added to the HttpContext of the current request by the session-state module for the HttpApplication. The HttpSessionState class calls the HttpSessionStateContainer class, which manages session settings and values in memory. The HttpSessionStateContainer class is the ASP.NET implementation of the IHttpSessionState interface. The HttpSessionStateContainer class is not intended to be called from application code. If you replace the SessionStateModule with a custom session-state module, you can use the HttpSessionStateContainer class, or supply your own implementation of the IHttpSessionState interface. Example: For an example of a custom session-state module that uses the HttpSessionStateContainer class as the session-state container for the current request, see the SessionStateUtility class overview. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,1,1,1,0,0,1,0
"Additional online Documentation: Syntax: public string SessionID { get; } Property Value Type: System.String The unique session identifier. Implements IHttpSessionState.SessionID Summary: Gets the unique identifier for the session.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Gets or sets individual session-state item values.",1,0,0,0,0,0,0,0,1,0,1,1
"Additional online Documentation: Syntax: void RemoveAll() Summary: Clears all values from the session-state item collection. Remarks: RemoveAll performs the same function as Clear. Example: The following code example implements the RemoveAll method of the IHttpSessionState interface to delete all items from an internal session-state item collection.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public interface IPartialSessionState Summary: When implemented in a type, returns a list of zero or more session keys that indicate to a session-state provider which session-state items have to be retrieved. Remarks: When a type that implements this interface returns a non-null generic list of strings in the PartialSessionStateKeys property, the list indicates to a session-state provider that the provider should retrieve only the session-state values that are specified in the list. If the type returns a Nothing value for the PartialSessionStateKeys property, a session-state provider should get all session-state values.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: IList<string> PartialSessionStateKeys { get; } Property Value Type: System.Collections.Generic.IList(Of String) A generic list of strings that serve as keys for session-state values. Summary: Gets a list of keys that are associated with session-state values. Remarks: A Nothing return value indicates to a session-state provider that the provider should return all session state values.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IReadOnlySessionState : IRequiresSessionState Summary: Specifies that the target HTTP handler requires only read access to session-state values. This is a marker interface and has no methods. Remarks: Implement the IReadOnlySessionState interface in your custom handler to identify that your handler requires only read access to session-state values. Example: The following code example examines the current HTTP Handler property to determine whether it requires only read access to session-state values.",1,0,0,1,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public interface ISessionIDManager Summary: Defines the contract that a custom session-state identifier manager must implement. Remarks: The ISessionIDManager interface identifies the methods that you must implement to create a custom manager for session-identifier values. An ISessionIDManager interface implementation creates and validates session-identifier values, and manages the storage of a session identifier in the HTTP response as well as the retrieval of a session-identifier value from the HTTP request. You enable the custom session-ID manager using the sessionIDManagerType attribute of the sessionState Element (ASP.NET Settings Schema) configuration element. If your ISessionIDManager interface implementation will support cookieless session identifiers, you will need to implement a solution for sending and retrieving session identifiers in the URL, such as an ISAPI filter. If you only want to supply custom session-identifier values to be used by ASP.NET session state, you can create a class that inherits the SessionIDManager class and override only the CreateSessionID and Validate methods with your own custom implementation. This enables you to supply your own session-identifier values, while relying on the base SessionIDManager class to store values to the HTTP response and retrieve values from the HTTP request. For an example of overriding the SessionIDManager class and implementing these methods, see the example provided for the CreateSessionID method of the SessionIDManager class. Example: The following code example shows a class that implements a cookie-based session-ID manager.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum SessionStateActions Summary: Identifies whether a session item from a data store is for a session that requires initialization. Remarks: The SessionStateActions enumeration is used by the GetItem and GetItemExclusive methods of a SessionStateStoreProviderBase implementation. When a session item is retrieved from the data store, the enumeration value indicates whether the session requires initialization or not based on a value stored with the data. The GetItem and GetItemExclusive methods set an actions parameter to a SessionStateActions enumeration value based on this value retrieved with the session item. If the value of the actions parameter is set to InitializeItem, the SessionStateModule initializes the session and executes the Session_OnStart event defined in the Global.asax file for the ASP.NET application. If the value of the actions parameter is None, no additional steps are taken for the current session. A session item created by the CreateUninitializedItem method is created with a value indicating that the item requires initialization and that the GetItem and GetItemExclusive methods should set the actions parameter to InitializeItem. Example: For an example of a session-state store provider implementation that uses the SessionStateActions enumeration, see Implementing a Session-State Store Provider.",1,0,0,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Start Summary: The event that occurs when a session is created. Remarks: The Start event is raised at the beginning of a request when a new session is started. A new session is started if a request is made that does not contain a session identifier, the session identifier is invalid, or the session associated with a session identifier has expired. The Session_OnStart event is used to perform any initialization work for a session such as setting up default values for session variables. You can specify a handler for the Start event by adding a public subroutine named Session_OnStart to the Global.asax file. For more information about the Global.asax file, see Global.asax Syntax. Example: The following code example shows the contents of a Global.asax file with the Session_OnStart and Session_OnEnd events defined.    <script language=## runat=#server#> public void Session_OnStart() { } public void Session_OnEnd() { } </script>",1,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public static class SessionStateUtility Summary: Provides helper methods used by session-state modules and session-state store providers to manage session information for an ASP.NET application. This class cannot be inherited. Remarks: The SessionStateUtility class provides static helper methods that are used by a session-state module or a session-state store provider. Application developers will not need to call these methods from their code. The following table describes the ways the session-state module and session-state store provider use the methods. Method Use GetHttpSessionStateFromContext method Can be used by custom session-state modules to either retrieve session information for an existing session or create session information for a new session. AddHttpSessionStateToContext method Called by the session-state module to add the session data to the current HttpContext and make it available to application code through the Session property. RemoveHttpSessionStateFromContext method Called by the session-state module during the ReleaseRequestState or EndRequest events at the end of a request, to clear session data from the current HttpContext. GetSessionStaticObjects method Called by the session-state module to get a reference to the StaticObjects collection based on objects defined in the Global.asax file. The HttpStaticObjectsCollection collection returned is included with the session data added to the current HttpContext. Session data is passed to and retrieved from the current HttpContext as an HttpSessionStateContainer object or any valid implementation of the IHttpSessionState interface. For information about implementing a session-state store provider, see Implementing a Session-State Store Provider. Example: The following code example shows a custom session-state module implementation that stores session information in memory using a Hashtable. The module uses the SessionStateUtility class to reference the current HttpContext and SessionIDManager, retrieve the current HttpStaticObjectsCollection, and raise the Session_OnEnd event defined in the Global.asax file for the ASP.NET application. This application does not prevent simultaneous Web requests from using the same session identifier.  To use this custom session-state module in an ASP.NET application, you can replace the existing SessionStateModule reference in the Web.config file, as shown in the following example. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class StateRuntime : IStateRuntime Summary: Manages session data stored in the ASP.NET state service. This class cannot be inherited. Remarks: ASP.NET supports the option of managing session state out-of-process using a Windows service called the ASP.NET state service. The StateRuntime class is used by unmanaged code in this service to manage session data. This class supports the .NET Framework infrastructure implementation of the ASP.NET state service and is not intended be used directly from your code. The ASP.NET state service is not the default method of ASP.NET session-state management; ASP.NET supports an in-process management of session state by default. It also supports a second out-of-process option that manages session state in a Microsoft SQL Server database and enables custom session-state management solutions. For more information about session-state storage options, see Session-State Modes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public sealed class AttributeCollection Summary: Provides object-model access to all attributes declared in the opening tag of an ASP.NET server control element. This class cannot be inherited. Remarks: Individual items in the collection return a String object as their value. If there are no attribute items in the collection, the collection returns Nothing. Attributes on an HTML server control are programmatically available through the Attributes property, which is inherited by all HTML server controls. ASP.NET exposes attributes of HTML server controls as properties of those controls. You can add attributes to a Web server control through the Attributes property, which is inherited by all Web server controls. The attributes in the attributes collection for a Web server control do not necessarily correspond to the control's strongly typed properties for that control. Topic Location How to: Read HTML Attributes for Controls in Web Forms Pages Building ASP .NET Web Applications How to: Read HTML Attributes for Controls in Web Forms Pages Building ASP .NET Web Applications Example: The following example creates a new AttributeCollection object that is named myAttributeCollection, and then checks whether the page has been posted back. If it has not, the code adds two attributes to the collection. It then gets the number of attributes in the collection and iterates through the collection, writing the key to each attribute to the page. If the page is a postback, the code gets the new number of attributes and iterates through the collection, writing the key and value of each attribute to the page. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public string this[ string key ] { get; set; } Parameters keyType: System.String The location of the attribute in the collection. Property Value Type: System.String The attribute value. Summary: Gets or sets a specified attribute value for a server control. Remarks: You can add an attribute to or retrieve one from an ASP.NET server control that uses this property. Topic Location How to: Read HTML Attributes for Controls in Web Forms Pages Building ASP .NET Web Applications How to: Read HTML Attributes for Controls in Web Forms Pages Building ASP .NET Web Applications Example: The following example shows how to set a dynamic HTML onblur attribute to run an ECMAScript (JavaScript) command when a TextBox Web server control loses focus.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Summary: Initializes a new instance of the ChtmlTextWriter class.",1,0,0,0,0,1,1,1,1,0,0,1
"Additional online Documentation: Summary: Determines whether the client script block is registered with the Page object.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Validates a client event.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public class ComplexPropertyEntry : BuilderPropertyEntry Summary: Serves as the property entry for read/write and read-only properties such as templates. Remarks: A complex property entry represents an item such as a template. The page parser uses property entry classes during parsing to represent expressions found within server control tags. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: public enum ConflictOptions Summary: Determines how ASP.NET data source controls handle data conflicts when updating or deleting data. Remarks: Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data. For example, one client reads data and presents it to a user, while another client reads the same data, and presents it to a different user. If both users update the data and submit it to the data storage, some unexpected result might occur, because the clients might update different values for the same data. This is considered a conflict. The ConflictDetection property that is defined for ASP.NET data source controls is used to determine how a control handles data conflicts in the underlying data storage when the underlying data storage is using optimistic concurrency and a delete or update operation is performed. By default, the ConflictDetection property is set to OverwriteChanges, which means the data source control will overwrite any changes made to a data row between the time the data source control first read data from the row and the time that the row is updated. The primary key is used for locating the data row that will be updated or deleted, but no other comparison of the data is performed. If the data source control is configured to use the CompareAllValues option, however, the control passes the original data in the oldValues collections of the Update and Delete methods so that you can write logic to update or delete data only if these values match the values currently in the data storage. The matching values indicate that the data has not changed since the time it was read.",1,1,0,1,1,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Init Summary: Occurs when the server control is initialized, which is the first step in its lifecycle. Remarks: Server controls should perform any initialization steps that are required to create and set up an instance. You cannot use view-state information within this event; it is not populated yet. You should not access another server control during this event, regardless of whether it is a child or parent to this control. Other server controls are not certain to be created and ready for access. For more information on server control events, see ASP.NET Web Server Control Event Model. Example: The following example assigns a custom event handler, Calendar_Init, to the Init event of a Calendar control.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler PreRender Summary: Occurs after the Control object is loaded but prior to rendering. Remarks: Use this event to perform any updates before the server control is rendered to the page. Any changes in the view state of the server control can be saved during this event. Such changes made in the rendering phase will not be saved. Topic Location How to: Create Event Handlers in ASP.NET Web Pages Building ASP .NET Web Applications How to: Create Event Handlers in ASP.NET Web Pages Building ASP .NET Web Applications",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public void SetExpires( DateTime expirationTime ) Parameters expirationTimeType: System.DateTime A DateTime after which the cached entry expires. Summary: Instructs the BasePartialCachingControl control that wraps the user control to expire the cache entry at the specified date and time. Remarks: Use the SetExpires and SetSlidingExpiration methods (passing true) to instruct the BasePartialCachingControl control that wraps the user control to use a sliding expiration caching policy instead of an absolute expiration policy. Use the SetExpires method and the SetSlidingExpiration method (passing false) to specify an absolute expiration policy. Example: The following code example demonstrates how a user control can be loaded dynamically and manipulated programmatically at run time. The PartialCachingAttribute attribute is applied to a user control named SimpleControl, which means the user control is wrapped by a PartialCachingControl control at run time. The SimpleControl object's caching settings can be programmatically manipulated through its associated ControlCachePolicy object, which is available through a reference to the PartialCachingControl control that wraps it. In this example, the Duration property is examined during page initialization and changed using the SetSlidingExpiration and SetExpires methods if some conditions are met. This example is part of a larger example provided for the ControlCachePolicy class.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: protected Control Owner { get; } Property Value Type: System.Web.UI.Control The Control to which the ControlCollection belongs. Summary: Gets the ASP.NET server control to which the ControlCollection object belongs. Example: The following code example is a custom ControlCollection class that overrides the ControlCollection method to write messages (which include the name of the Owner property) to the trace log when an instance of the collection is created. You must enable tracing for the page or application for this example to work.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public class ControlSkin Summary: Represents a control skin, which is a means to define stylistic properties that are applied to an ASP.NET Web server control. Remarks: Page and control developers do not use the ControlSkinDelegate, ControlSkin, or PageTheme classes directly. These classes are used internally by the ASP.NET page framework to apply server-side properties and cascading style sheet definitions that are defined in ASP.NET themes and control skin files to specific types of controls. ControlSkin objects represent a named skin or default skin of a Control control at run time and design time. ASP.NET builds PageTheme, ControlSkin and ControlSkinDelegate objects to apply the style elements defined in themes and control skin files to ASP.NET Web pages and controls. For more information about themes and control skins, see ASP.NET Themes and Skins. Topic Location How to: Define ASP.NET Themes Building ASP .NET Web Applications How to: Define ASP.NET Themes Building ASP .NET Web Applications Example: The following code example demonstrates how control skins are specified for controls in a declarative ASP.NET page. The example shows three ASP.NET server controls found in the same page, two that use the same named skin and one that uses a different skin. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public delegate Control ControlSkinDelegate( Control control ) Parameters controlType: System.Web.UI.Control The Control to which to apply the theme skin. Return Value Type: System.Web.UI.Control The Control that was passed to the method, with a control skin applied. Summary: Represents the method that applies the correct control skin to the specified control. Remarks: Page and control developers do not use the ControlSkinDelegate, ControlSkin, or PageTheme classes directly. These classes are used internally by the ASP.NET page framework to apply server- side properties and cascading style sheet definitions that are defined in ASP.NET themes and control skin files to specific types of controls. The ControlSkinDelegate delegate is associated with the ApplySkin method of the ControlSkin class. The ControlSkin class represents an ASP.NET control skin, which is a component of an ASP.NET theme represented by a PageTheme object. For more information about ASP.NET themes, see ASP.NET Themes and Skins.",1,0,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class)] public sealed class ControlValuePropertyAttribute : Attribute Summary: Specifies the default property of a control that a ControlParameter object binds to at run time. This class cannot be inherited. Remarks: When defining a ControlParameter object, you typically bind a control's property to a parameter by setting both the ControlID and PropertyName properties. If the PropertyName property is not set, a default property is used. The ControlValuePropertyAttribute attribute is applied to a control to specify its default property that a ControlParameter object binds to at run time. For more information about using attributes, see Extending Metadata Using Attributes. For a list of initial property values for an instance of the ControlValuePropertyAttribute class, see the ControlValuePropertyAttribute constructor. Example: The following code example demonstrates how to apply a ControlValuePropertyAttribute attribute that specifies a default property and value to a custom control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public virtual ContentAlignment AnchorAlignment { get; set; } Property Value Type: System.Drawing.ContentAlignment A ContentAlignment enumeration value that represents the alignment of the annotation to the anchor point. Summary: Gets or sets the alignment of an annotation to the anchor point. Remarks: The annotation must be anchored by either using the AnchorDataPoint property, or by setting the AnchorX and AnchorY properties. Its X and Y properties must be set to NaN.",0,1,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public double NewLocationY { get; set; } Property Value Type: System.Double A double value that represents the new Y coordinate of the annotation location. Summary: Gets or sets the new Y coordinate of the annotation location. Remarks: When the AnnotationPositionChanging and AnnotationPositionChanged events are raised, the NewLocationY property defines the Y-coordinate location of the annotation.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class AnovaResult Summary: Represents the results of an ANOVA statistical test. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public override ContentAlignment AnchorAlignment { get; set; } Property Value Type: System.Drawing.ContentAlignment A ContentAlignment enumeration value that represents the alignment of the annotation to the anchor point. Summary: Gets or sets the position alignment of the annotation to the anchor point. Remarks: The annotation must be anchored using either AnchorDataPoint, or the AnchorX and AnchorY properties. Its X and Y properties must be set to NaN.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum ArrowStyle Summary: Specifies styles for an arrow annotation.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public AxisScaleView() Summary: Initializes a new instance of the AxisScaleView class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BindableAttribute(false)] [BrowsableAttribute(false)] public bool IsZoomed { get; } Property Value Type: System.Boolean True if the axis is zoomed in, otherwise false. Summary: Gets a flag that indicates whether the axis is zoomed in.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum AxisType Summary: Specifies the axis type for the X and Y-axes of a Series. Remarks: The AxisType enumeration represents the axis type used for the X and Y-axes of a Series. A Series is plotted using two axes, with the exception of pie and doughnut charts. This enumeration is used in conjunction with the XAxisType and YAxisType properties to set the axes used for plotting the associated data points of the series. For all charts except for bar, stacked bar, pie and doughnut types, the primary and secondary axes are as follows: Axis Type Description Primary X-Axis Bottom horizontal axis. Secondary X-Axis Top horizontal axis. Primary Y-Axis Left vertical axis. Secondary Y-Axis Right vertical axis. Bar and stacked bar charts have their axes rotated 90 degrees clockwise. For example, the primary X-axis for these two charts is the left-vertical axis.",1,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(true)] public ChartHatchStyle BackHatchStyle { get; set; } Property Value Type: System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle A ChartHatchStyle enumeration value. Summary: Gets or sets the background hatch style of a skin frame.",0,0,0,0,0,0,0,0,0,0,0,1
"Use a thin border skin with rounded top corners.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum BreakLineStyle Summary: Specifies line styles for axis scale breaks.",1,0,0,0,0,0,0,0,0,0,0,0
"Scale break is displayed as a ragged line.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<ScrollBarEventArgs> AxisScrollBarClicked Summary: Occurs when the axis scroll bar is clicked by the end-user.",0,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<CursorEventArgs> CursorPositionChanging Summary: Occurs when the cursor position is about to change.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(true)] public Object DataSource { get; set; } Property Value Type: System.Object An Object that represents the data source for the Chart object. Summary: Gets or sets the data source for the Chart object. Remarks: The data points in a series can be bound to a data source at any time using the DataSource property. To force the chart to bind to the data source, call the DataBind method. The following is a list of objects that you can use as the data source: DataView Data readers (SQL, OleDB) DataSet DataTable Binding Source IDataSource Arrays Lists All Enumerable objects SqlCommand / OleDbCommand (DataSource data-binding only) SqlDataAdapter / OleDbDataAdapter (DataSource data-binding only)",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected virtual void OnCustomize() Summary: Raises the Customize event.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected override void OnRightToLeftChanged( EventArgs e ) Parameters eType: System.EventArgs An EventArgs object that contains the event arguments. Summary: Overrides the OnRightToLeftChanged method.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<ChartPaintEventArgs> PostPaint Summary: Occurs when the chart element is painted.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ChartArea : ChartNamedElement Summary: Represents a chart area on the chart image. Remarks: Within any given chart, the inner plot position is the rectangular area, inside the x and y-axis lines, where the data points are drawn. The plot position is the rectangular area that encompasses the inner plot position, the tick marks, and the axis labels. The chart area is the rectangular area that encompasses the plot position, the tick marks, the axis labels and the axis titles on the chart. A chart area is represented by a ChartArea class; ChartArea objects are stored in the ChartAreaCollection class. The number of chart series that can be plotted in a chart area is unlimited. A ChartArea object: Uses one distinct inner plotting area. Is used to plot one or more chart series. Has primary and secondary x and y-axes, except for pie and doughnut chart types. When you use Shape chart types, which includes pie, doughnut, funnel, pyramid, polar, and radar charts, the inner plotting position defines the size of the chart type shape. For example, when you increase the value of the InnerPlotPosition property on a pie chart, you will increase the radius of the pie shape. For all other chart types, each chart area has two sets of X- and Y-axes, primary and secondary. To access properties related to these axes, use the AxisX, AxisX2, AxisY and AxisY2 properties. If you need to set a property that affects all axes on the chart, use the Axes property. One or more series are associated with a chart area. The series has a ChartArea property that determines the chart area that each series belongs to. By default, the series is connected to the default chart area. To disable the display of a series, set the ChartArea property of that series to a zero-length string. If another chart area is added to the chart, you can associate any series with the new chart area. In all Shape chart types, as well as bar and stacked bar chart types, each series must be plotted in a separate chart area. In all other chart types, multiple series can be combined in the same chart area. A 3D chart is displayed on a chart area-by-chart area basis. You can use the Area3DStyle property to enable and customize your chart in 3D. The chart area minimum and maximum will not be automatically recalculated if you add new data, so the chart will not automatically change axis sizes.  You can require the chart area to recalculate these values by using the RecalculateAxesScale method. To align multiple chart areas vertically, set the AlignmentOrientation property. To align multiple chart areas horizontally, you must first position the chart areas using the Position property, and then set the AlignmentOrientation property to Horizontal. To suppress the display of a series, set the Series property of that series to a zero-length string. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public virtual bool Visible { get; set; } Property Value Type: System.Boolean True if the chart area is visible, otherwise false. Summary: Gets or sets a flag that determines if a chart area is visible. Remarks: When this flag is set to false, all series, legends, titles and annotation objects associated with the chart area will also be hidden.",1,0,0,0,0,0,0,0,0,0,0,1
"Palette utilizes pastel colors.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class ChartElement : IDisposable Summary: Base class for all the chart elements. The ChartElement class represents the most basic element of the chart element hierarchy. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override int GetHashCode() Return Value Type: System.Int32 An integer value that represents the hash code for the current Object. Summary: Returns a hash function for a particular type.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ReadOnlyCollection<PointF> Markers { get; internal set; } Property Value Type: System.Collections.ObjectModel.ReadOnlyCollection(Of PointF) An array of PointF values that represents the marker points. Summary: Gets or sets the markers.",0,0,0,0,0,0,0,0,0,0,0,1
"Diagonal brick style.",0,0,0,0,0,0,0,0,0,0,0,1
"Narrow vertical style.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected override void RemoveItem( int index ) Parameters indexType: System.Int32 The zero-based index of the chart element to remove. Summary: Removes the chart element at the specified index of the collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class Cursor : IDisposable Summary: Represents a horizontal or vertical line that defines a position along an axis. Remarks: A cursor is a horizontal or vertical line that defines a position along an axis. A range selection is a range along an axis that is defined by a beginning and end position, and is displayed using a semi-transparent color. Cursors and range selections are both implemented by the Cursor class, which is exposed as the CursorX and CursorY properties of the ChartArea object. The CursorX object is for the X axis of a chart area, and the CursorY object is for the Y axis. The AxisType property of these objects determines whether the associated axis is primary or secondary. The only cursor and range selection functionality found outside the Cursor class are the events related to the cursor and range selection that are in the root Chart object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class CustomizeLegendEventArgs : EventArgs Summary: Provides data for the CustomizeLegend event of the Chart control. Remarks: The CustomizeLegendEventArgs class is used in the CustomizeLegend event. There are only two properties in this class. The LegendItems property allows you to delete or modify both default and custom legend items, and to add custom legend items. This property can also be used to change the order of legend items. The LegendName property is used to identify the legend that raised this event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(true)] public string Text { get; set; } Property Value Type: System.String A string value that represents the label text. Summary: Gets or sets the custom label text. Remarks: The Text property gets or sets the label text of the CustomLabel object. Note that axis labels for the first label row are generated automatically, but can be overridden using CustomLabel objects. If you specify a custom label along the first axis row, no axis labels will be automatically generated for the entire first row.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class DataPointCollection : ChartElementCollection<DataPoint> Summary: Represents a collection of DataPoint objects. Remarks: The DataPointCollection class represents a collection of DataPoint objects, which in turn represent the data points that are part of a Series object. This collection class is implemented as the Points property of a Series object. DataPoint objects can be appended or inserted into the collection with their X-value and Y-value(s) already specified as parameters. Note that they are also added automatically when a series is bound to a data source using either the DataBindY or DataBindXY method. Data points are plotted in the order that they occur in this collection only if the series that the collection belongs to has its IsXValueIndexed property set to true (the default value is false), or if all X-values for all data points are zero. Otherwise data points are plotted using their X-values. Data points can be located, and manipulated, based on maximum, minimum or specified X or Y-values using the overloaded FindMaxValue, FindMinValue or FindValue methods, respectively. The Count property indicates the total number of items in the collection, and is commonly used to find the upper bound of the collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation:",1,0,1,0,0,0,1,1,0,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,1
"The number of axis intervals depends on the axis length.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum LabelAlignmentStyles Summary: Specifies a label alignment when SmartLabelStyle is used. Remarks: The LabelAlignmentStyles enumeration represents the alignment of a label; it is set by the MovingDirection property.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum LabelAutoFitStyles Summary: Specifies style changes that can automatically be made to a label when the LabelAutoFitStyle property is used. Remarks: The LabelAutoFitStyles enumeration represents the changes to the font or orientation of labels that can be automatically made to enable labels to fit along the axis.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public enum LabelCalloutStyle Summary: Specifies the type of leader line that should be drawn from the point to the label. Remarks: The LabelCalloutStyle enumeration represents the type of leader line that should be drawn from the point to the label. It is used in conjunction with the CalloutStyle property of the SmartLabelStyle object.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class LegendCell : ChartNamedElement Summary: Represents a legend cell in a legend item. Remarks: A legend is populated with legend items, which are represented by the LegendItemsCollection. These legend items consist of individual legend cells, which are in turn represented by the LegendCellCollection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class LegendCellCollection : ChartNamedElementCollection<LegendCell> Summary: Stores legend cells in a LegendCellCollection object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class LegendCellColumn : ChartNamedElement Summary: Represents a cell column in a legend, which is used to extend the functionality of the default legend. Remarks: Any number of cell columns can be placed in any order, which gives you the flexibility to extend the abilities of the default legend entries. The legend cell columns are only applicable to items that are automatically generated from series or data points. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public LegendSeparatorStyle SeparatorType { get; set; } Property Value Type: System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle A LegendSeparatorStyle enumeration value. Summary: Gets or sets the separator style of the legend item.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum LegendSeparatorStyle Summary: Specifies the styles for legend separator lines.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual bool IsInfinitive { get; set; } Property Value Type: System.Boolean True if a line should be drawn infinitely through two points provided, otherwise false. Summary: Gets or sets a flag that indicates whether an infinite line should be drawn.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override bool Equals( Object obj ) Parameters objType: System.Object The object to compare with the current object. Return Value Type: System.Boolean True if the specified object is equal to the current object, otherwise false. Summary: Determines whether the specified object is equal to the current object.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class NamedImage : ChartNamedElement Summary: Represents named images, which are stored in the NamedImagesCollection. Remarks: The NamedImage class represents an image that has a unique name, and is useful when an image is dynamically created using a particular drawing routine, and then specified as the image for one of the image properties of the Chart control. The Name property determines the unique name of a NamedImage object. The Image property determines its associated image, which can be any object derived from the .NET Framework Image class. When one of the image properties of the Chart control is set by specifying a string value, the Images collection property is first checked to determine whether an image with the specified name exists. If a matching NamedImage object is found, this image is used. If a matching NamedImage object is not located, the string value is treated as a URL, image resource name, or an image path. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public class NamedImagesCollection : ChartNamedElementCollection<NamedImage> Summary: Represents a collection of NamedImage objects. Remarks: The NamedImagesCollection class represents a collection of NamedImage objects, which are objects that have an associated image and a name that is unique to the collection. This class is exposed as the Images collection property of the root Chart object, and is only available at run time. An image can be any object derived from the .NET Framework Image class, such as Bitmap, which is created dynamically. The image can be stored in this collection, and then assigned at a later time to any image property in the Chart control, such as BackImage. When one of the image properties in the Chart control is set by specifying a string value, the Images collection property, of type NamedImagesCollection, is first checked to see if an image with that name exists. If a matching NamedImage object is found, this image is used. If a matching NamedImage object is not located, the string expression is treated as a URL, image resource name or pathname. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public enum PointSortOrder Summary: Indicates whether the sort order for data points is ascending or descending. Remarks: The PointSortOrder enumeration represents the order of the sort to be performed on data point values. It is used with the Sort method definitions in the DataManipulator class that include a pointSortOrder parameter.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class PolygonAnnotation : PolylineAnnotation Summary: Represents a polygon annotation. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public virtual GraphicsPath GraphicsPath { get; set; } Property Value Type: System.Drawing.Drawing2D.GraphicsPath A GraphicsPath object with the polyline shape. Summary: Gets or sets the path points of a polyline annotation at run time. Remarks: A polyline must use coordinates relative to an annotation object, where (0,0) denotes the top-left coordinates and (100,100) denotes the bottom-right coordinates of the annotation. This property is not accessible at design time, when you should use the GraphicsPathPoints property instead.",1,0,1,0,0,0,0,1,0,0,0,0
"Data is scrolled to the last displayed view.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(true)] public ChartColorPalette Palette { get; set; } Property Value Type: System.Windows.Forms.DataVisualization.Charting.ChartColorPalette An ChartColorPalette enumeration value that determines the palette for the data series. Summary: Gets or sets the color palette of a Series object. Remarks: A palette is used to automatically assign colors to data elements if the data points themselves do not have colors assigned to them and if the data Series object that the data points belong to also does not have an assigned color. If no series or data point colors are explicitly specified, the colors used depend on the chart type and the Chart control palette or Series palette, if one is specified. See the table below for further details: Chart Type Series Palette Used? Colors Displayed by Data Points Any shape chart (for example, Pie and Doughnut charts) No First available colors used from Chart control palette. One color per data point. All charts except shape charts. No First available colors from Chart control palette. One color per data series. Any shape chart (for example, Pie and Doughnut charts) Yes First available colors used from Series palette. One color per data point. All charts except shape charts. Yes First available colors used from Series palette. One color per data series. This Palette property has precedence over the Palette property of the root Chart object, with respect to the display of data. NOTE: If the Palette property for both the Chart and Series objects is set to None, and no color is assigned to the relevant data series/data points, the default palette #BrightPastel# or PaletteCustomColors is used.",1,0,0,1,0,0,1,0,0,0,0,1
"FastPoint chart type.",0,0,0,0,0,0,0,0,0,0,0,1
"Column chart type.",0,0,0,0,0,0,0,0,0,0,0,1
"Stock chart type.",0,0,0,0,0,0,0,0,0,0,0,1
"ThreeLineBreak chart type.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class SmartLabelStyle Summary: Provides methods and properties used to perform intelligent, rule-based data point label positioning to resolve overlapping data point label issues. Remarks: When smart labels are enabled, the chart repositions overlapping data point labels, based on a set of user-defined rules. Callout lines will be drawn to link the label with its data point. The visual attributes of the callout line can be controlled. These visual attributes include color, line style, and line width. The CalloutStyle and CalloutLineAnchorCapStyle properties control the embellishments, such as arrowheads, that appear at the end of the callout line. The CalloutLineColor property can be set to any Color object. If you set the color of the callout line, you will also automatically set the color of the CalloutLineAnchorCapStyle and the embellishment defined by the CalloutStyle. The CalloutLineWidth property controls the pixel width of the callout line. Use of this property will also scale the embellishments of the CalloutLineAnchorCapStyle and the CalloutStyle. The movement of smart labels can be controlled through the use of several motion-related properties. These define the rules of movement for the direction, distance and whether the data point label is allowed to leave the plotting area. The default movement rules will normally resolve most issues. The MaxMovingDistance defines a value that specifies the maximum distance in pixels from the data point that data point labels are allowed to be moved in case of overlapping. The MinMovingDistance property defines a value that specifies the minimum distance in pixels from the data point that data point labels will be moved in case of overlapping. When a data point label needs to be repositioned, the label will be moved by at least the number of pixels specified. The IsOverlappedHidden property indicates whether the labels are hidden when overlapping issues cannot be resolved. If the IsOverlappedHidden property is true, and the data point cannot be drawn within the area specified by MinMovingDistance and MaxMovingDistance in the directions allowed by MovingDirection, the data point label will not be drawn. The MovingDirection property defines the direction(s) in which the data point label can be moved. This property accepts one LabelAlignmentStyles value or a bitwise-OR of multiple LabelAlignmentStyles values. The default is the bitwise-OR of all LabelAlignmentStyles values, to allow repositioning in all possible directions except to the center of the data point. Smart labels are not supported for the following chart types: Bar charts: bar and hundred-percent-stacked bar charts. Shape charts: pie, doughnut, polar and radar charts. Range charts: range, range column and range bar charts. Stacked area charts: stacked area and hundred-percent-stacked area charts. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(true)] public virtual double MaxMovingDistance { get; set; } Property Value Type: System.Double A double value. Summary: Gets or sets the maximum distance, in pixels, that the overlapped SmartLabelStyle object can be moved from the marker. Remarks: This property specifies the maximum distance in pixels from the data point that data point labels are allowed to be moved in case of overlapping.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public double InverseNormalDistribution( double probability ) Parameters probabilityType: System.Double The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1. Return Value Type: System.Double A double value from the inverse standard normal cumulative distribution function. Summary: Returns the inverse of the standard normal cumulative distribution. Remarks: This method returns the F value for the given F distribution probability. It is assumed that the distribution has a mean of 0 (zero) and a standard deviation of one.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BindableAttribute(true)] public GradientStyle BackGradientStyle { get; set; } Property Value Type: System.Windows.Forms.DataVisualization.Charting.GradientStyle A GradientStyle enumeration. The default value is None. Summary: Gets or sets the gradient style of the strip line. Remarks: The BackGradientStyle property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used. To use gradient colors: Use the BackColor property to set the primary color. Use the BackSecondaryColor property to set the secondary color. Set this BackGradientStyle property of the chart element to the desired gradient style. This property is not applicable if the StripWidth property is set to a value of 0.0.",1,0,1,1,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: [BindableAttribute(true)] public string BackImage { get; set; } Property Value Type: System.String A string value that represents an image file's URL. The default is an empty string. Summary: Gets or sets the background image of the strip line. Remarks: The BackImage property defines a path to a background image for many chart elements, and is an absolute or relative URL. To position this image, use the BackImageAlignment and BackImageWrapMode properties. You can also specify that one color will be displayed by the image as #transparent# by setting the BackImageTransparentColor property. An image can be any valid graphics file supported by .NET Framework, including icons. This property is not applicable if the StripWidth property is set to a value of 0.0. Background images take precedence over other background properties, such as gradient colors.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [BindableAttribute(true)] public DateTimeIntervalType StripWidthType { get; set; } Property Value Type: System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType A DateTimeIntervalType enumeration value that indicates the width type. The default value is Auto. Summary: Gets or sets the unit of measurement for the StripWidth property. Remarks: This property determines the units used for the StripWidth property. For example, to set a strip line to represent #one week#, you could set this property to Weeks and set the StripWidth property to one (1.0). You can change the value of this property from Auto to a DateTime value when the relevant axis scale uses a DateTime value.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class TitleCollection : ChartNamedElementCollection<Title> Summary: Represents a collection of Title objects. Remarks: The TitleCollection class is implemented as the Titles collection property of the root Chart object. Title objects can be appended, inserted or removed from the collection at design time and run time. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public class TTestResult Summary: Stores the results of a T Test statistical formula. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public double ProbabilityZOneTail { get; } Property Value Type: System.Double A double value. Summary: Gets the Probability Z one tail value.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] public sealed class ResXDataNode : ISerializable Summary: Represents an element in a resource file. Remarks: ResXDataNode supports the representation of rich data types within a resources file. ResXDataNode can support the storage of any object in a resource file, so long as the object supports serialization and type editors. For more information on object serialization, see Serialization (C\# and Visual Basic) ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] public class Converter : TypeConverter Summary: Provides a type converter to convert data for a ResXFileRef to and from a string. Remarks: A ResXFileRef.Converter provides the object the ResXFileRef refers to. For example, if the ResXFileRef is #xplogo.bmp;System.Drawing.Bitmap, System.Drawing#, then calling the ConvertFrom method of the converter will return a Bitmap, not a ResXFileRef. For more information about type converters, see the TypeConverter base class and How to: Implement a Type Converter. Note Typically, you do not directly create an instance of an ImageIndexConverter. Instead, call the GetConverter method of TypeDescriptor. For more information, see the examples in the TypeConverter base class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,1,0
"Additional online Documentation: Summary: Creates a new ResXResourceReader object and initializes it to read a string whose contents are in the form of an XML resource file.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: IEnumerator IEnumerable.GetEnumerator() Return Value Type: System.Collections.IEnumerator An enumerator that can iterate through the name/value pairs in the XML resource (.resx) stream or string associated with the current ResXResourceReader object. Implements IEnumerable.GetEnumerator Summary: Returns an enumerator for the current ResXResourceReader object. For a description of this member, see IEnumerable.GetEnumerator. Remarks: This member is an explicit interface member implementation. It can be used only when the ResXResourceReader instance is cast to an IEnumerable interface. If the UseResXDataNodes property is set to true before the enumerator is used, the resource items are retrieved as ResXDataNode objects. In this case, all resource nodes are returned regardless of type.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public virtual void AddAlias( string aliasName, AssemblyName assemblyName ) Parameters aliasNameType: System.String The name of the alias. assemblyNameType: System.Reflection.AssemblyName The name of the assembly represented by aliasName. Summary: Adds the specified alias to a list of aliases. Remarks: Resources whose values are from an aliased assembly are automatically added to the list of aliases. The resource is not written until Generate is called.",1,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public static readonly string BinSerializedObjectMimeType Summary: Specifies the default content type for a binary object. This field is read-only.",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Releases the resources used by the ResXResourceWriter.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum AccessibleEvents Summary: Specifies events that are reported by accessible applications. Remarks: The operating system and accessibility server applications generate accessibility events in response to changes in the user interface. This enumeration is used by AccessibleObject and Control. For more information about the accessibility application, search for #Microsoft Active Accessibility# in the MSDN Library. Example: The following code example demonstrates the creation of an accessibility-aware chart control, using the AccessibleObject and Control.ControlAccessibleObject classes to expose accessible information. The control plots two curves along with a legend. The ChartControlAccessibleObject class, which derives from ControlAccessibleObject, is used in the CreateAccessibilityInstance method to provide custom accessible information for the chart control. Because the chart legend is not an actual Control -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the ChartControlAccessibleObject class overrides the GetChild method to return the CurveLegendAccessibleObject that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information. This example demonstrates using the AccessibleEvents enumeration with the AccessibilityNotifyClients method. See the AccessibleObject class overview for the complete code example.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public virtual AccessibleObject Navigate( AccessibleNavigation navdir ) Parameters navdirType: System.Windows.Forms.AccessibleNavigation One of the AccessibleNavigation values. Return Value Type: System.Windows.Forms.AccessibleObject An AccessibleObject that represents one of the AccessibleNavigation values. Summary: Navigates to another accessible object. Remarks: Navigation, both spatial and logical, is always restricted to the user interface elements within a container. With spatial navigation, clients can navigate only to a sibling of the starting object. Depending on the navigational flag used with logical navigation, clients can navigate to either a child or to a sibling of the starting object. This method does not change the selection or focus. To change the focus or to select an object, use Select. The Navigate method retrieves only user interface elements that have a defined screen location. Notes to Inheritors All visual objects must support this method. If an object has the state AccessibleStates.Invisible, navigation to this hidden object might fail. Some system-defined interface elements such as menus, menu items, and pop-up menus allow navigation to objects that are not visible. However, other system-defined user interface elements do not support this. If possible, servers should support navigation to objects that are not visible, but this support is not required and clients should not expect it. Example: The following example demonstrates the creation of an accessibility-aware chart control, using the AccessibleObject and Control.ControlAccessibleObject classes to expose accessible information. The control plots two curves along with a legend. The ChartControlAccessibleObject class, which derives from ControlAccessibleObject, is used in the CreateAccessibilityInstance method to provide custom accessible information for the chart control. Since the chart legend is not an actual Control -based control, but instead is drawn by the chart control, it does not have any built-in accessible information. Because of this, the ChartControlAccessibleObject class overrides the GetChild method to return the CurveLegendAccessibleObject that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information. This code demonstrates shows overriding the Navigate method. See the AccessibleObject class overview for the complete code example.",1,0,1,0,0,0,1,1,1,0,0,1
"The appearance of a Windows button.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static CultureInfo CurrentCulture { get; set; } Property Value Type: System.Globalization.CultureInfo A CultureInfo representing the culture information for the current thread. Summary: Gets or sets the culture information for the current thread. Example: The following code example gets this property and displays its value in a text box. The example requires that textBox1 has been placed on a form.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Summary: Instructs the application how to respond to unhandled exceptions. Example: The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads. It sets SetUnhandledExceptionMode so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file. It uses the ThreadException event to handle UI thread exceptions, and the UnhandledException event to handle non-UI thread exceptions. Since UnhandledException cannot prevent an application from terminating, the example simply logs the error in the application event log before termination. This example assumes that you have defined two Button controls, button1 and button2, on your Form class.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public static VisualStyleState VisualStyleState { get; set; } Property Value Type: System.Windows.Forms.VisualStyles.VisualStyleState A bitwise combination of the System.Windows.Forms.VisualStyles.VisualStyleState values. Summary: Gets a value that specifies how visual styles are applied to application windows. Remarks: This VisualStyleState property determines whether visual styles are enabled in client areas or nonclient areas of application windows. Generally, this property should be set within the main form's constructor or Load event handler. Example: The following code example sets the VisualStyleState property to one of the System.Windows.Forms.VisualStyles.VisualStyleState values within the Click event handler for a Button control. This code example is part of a larger example provided for the System.Windows.Forms.VisualStyles.VisualStyleState enumeration.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Summary: Releases the resources used by the ApplicationContext.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum ArrowDirection Summary: Specifies the direction to move when getting items with the GetNextItem method. Remarks: ArrowDirection works with Orientation so you can quickly determine an orientation from a direction.",1,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class AutoCompleteStringCollection : IList, ICollection, IEnumerable Summary: Contains a collection of strings to use for the auto-complete feature on certain Windows Forms controls. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsReadOnly { get; } Property Value Type: System.Boolean false in all cases. Summary: Gets a value indicating whether the contents of the collection are read-only.",1,0,0,0,0,0,1,0,0,0,0,1
"Controls scale relative to the display resolution. Common resolutions are 96 and 120 DPI.",1,0,0,0,1,0,0,1,0,0,0,0
"Implicit validation occurs, but if validation fails, focus will still change to the new control. If validation fails, the Validated event will not fire.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler BackgroundImageChanged Summary: The BackgroundImageChanged event is not supported by the AxHost class. Remarks: If you attempt to add or remove a handler for the BackgroundImageChanged event, a NotSupportedException is thrown. The events derived from the Control class are not supported by the AxHost class. The events exposed by the ActiveX control when the AxHost wrapper is created are the events that should be used.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected override Size DefaultSize { get; } Property Value Type: System.Drawing.Size The default Size of the control. Summary: Gets the default size of the control.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public virtual bool Enabled { get; set; } Property Value Type: System.Boolean A Boolean value. Summary: This property is not relevant for this class.",0,0,1,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler MouseHover Summary: The MouseHover event is not supported by the AxHost class. Remarks: If you attempt to add or remove a handler for the MouseHover event, a NotSupportedException is thrown. The events derived from the Control class are not supported by the AxHost class. The events exposed by the ActiveX control when the AxHost wrapper is created are the events that should be used.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event PaintEventHandler Paint Summary: The Paint event is not supported by the AxHost class. Remarks: If you attempt to add or remove a handler for the Paint event, a NotSupportedException is thrown. The events derived from the Control class are not supported by the AxHost class. The events exposed by the ActiveX control when the AxHost wrapper is created are the events that should be used.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event QueryContinueDragEventHandler QueryContinueDrag Summary: The QueryContinueDrag event is not supported by the AxHost class. Remarks: If you attempt to add or remove a handler for the QueryContinueDrag event, a NotSupportedException is thrown. The events derived from the Control class are not supported by the AxHost class. The events exposed by the ActiveX control when the AxHost wrapper is created are the events that should be used.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler RightToLeftChanged Summary: The RightToLeftChanged event is not supported by the AxHost class. Remarks: If you attempt to add or remove a handler for the RightToLeftChanged event, a NotSupportedException is thrown. The events derived from the Control class are not supported by the AxHost class. The events exposed by the ActiveX control when the AxHost wrapper is created are the events that should be used.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ComVisibleAttribute(false)] [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] public class AxComponentEditor : WindowsFormsComponentEditor Summary: Provides an editor that uses a modal dialog box to display a property page for an ActiveX control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] public class InvalidActiveXStateException : Exception Summary: The exception that is thrown when the ActiveX control is referenced while in an invalid state. Remarks: The public properties and methods of an ActiveX control can only be referenced after the ActiveX control has been instantiated and initialized completely; otherwise the AxHost.InvalidActiveXStateException exception is thrown. The AxHost.InvalidActiveXStateException exception class contains the name of the member that made the reference and the member type. The member type is one of the AxHost.ActiveXInvokeKind enumerated values. Example: The following code example overrides the constructor, and the SetAboutBoxDelegate and AttachInterfaces methods of an AxHost derived class that wraps the Microsoft Masked Edit ActiveX Control. This code requires that you have created the generated source code by running the AxImp.exe on the MSMask32.ocx file with the /source switch to generate the wrapper class to be edited. This code is only shown in  syntax because that is the only language output by the AxImp.exe. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,1,0,0,0
"Indicates a critically low level of battery charge.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum BindingCompleteContext Summary: Specifies the direction of the binding operation. Remarks: The BindingCompleteContext enumeration is used by the BindingCompleteEventArgs class.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the BindingCompleteEventArgs class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class BindingContext : ICollection, IEnumerable Summary: Manages the collection of BindingManagerBase objects for any object that inherits from the Control class. Remarks: Each Windows Form has at least one BindingContext object that manages the BindingManagerBase objects for the form. Because the BindingManagerBase class is abstract, the return type of the Item property is either a CurrencyManager or a PropertyManager. If the data source is an object that can return only a single property (instead of a list of objects), the Type is a PropertyManager. For example, if you specify a TextBox as the data source, a PropertyManager is returned. On the other hand, if the data source is an object that implements IList or IBindingList, a CurrencyManager is returned. For each data source on a Windows Form, there is a single CurrencyManager or PropertyManager. Because there may be multiple data sources associated with a Windows Form, the BindingContext enables you to retrieve any particular CurrencyManager associated with a data source. Note When using the Item property, the BindingContext creates a new BindingManagerBase if one does not already exist. This can lead to some confusion, as the returned object may not manage the list (or any list) that you intend. To prevent returning an invalid BindingManagerBase, use the Contains method to determine if the intended BindingManagerBase already exists. If you use a container control, such as a GroupBox, Panel, or TabControl, to contain data-bound controls, you can create a BindingContext for just that container control and its controls. Then, each part of your form can be managed by its own BindingManagerBase. See the BindingContext constructor for more information about creating multiple BindingManagerBase objects for the same data source. If you add a TextBox control to a form and bind it to a column of a table in a dataset, the control communicates with the BindingContext of that form. The BindingContext, in turn, talks to the specific CurrencyManager for that data association. If you queried the Position property of the CurrencyManager, it would report the current record for the binding of that TextBox control. In the following code example, a TextBox control is bound to the FirstName column of a Customers table on the dataSet1 dataset through the BindingContext for the form it is on.  You can add a second TextBox control (TextBox2) to the form and bind it to the LastName column of the Customers table in the same dataset. The BindingContext is aware of the first binding (TextBox1 to Customers.FirstName), so it would use the same CurrencyManager, as both text boxes are bound to the same dataset (DataSet1).    If you bind TextBox2 to a different dataset, the BindingContext creates and manages a second CurrencyManager. It is important to be consistent about how you set the DataSource and DisplayMember properties; otherwise, the BindingContext creates multiple currency managers for the same dataset, which results in errors. The following code example shows a few ways to set the properties and their associated BindingContext objects. You can set the properties using either of the following methods, as long as you are consistent throughout your code.       Note Most Windows Forms applications bind through a BindingSource. The BindingSource component encapsulates a CurrencyManager and exposes the CurrencyManager programming interface. When using a BindingSource for binding, you should use the members exposed by the BindingSource to manipulate #currency# (that is, Position) rather than go through the BindingContext. Example: The following code example creates four Binding objects to bind five controls-a DateTimePicker and four TextBox controls-to several data sources. The BindingContext is then used to get the BindingManagerBase for each data source. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public BindingContext() Summary: Initializes a new instance of the BindingContext class. Remarks: If you want to have multiple BindingManagerBase instances for the same data source, create a new BindingContext and set it to the BindingContext property of an object that inherits from the Control class. For example, if you have two BindingManagerBase objects (from two different BindingContext objects), you can set the Position properties of each BindingManagerBase to different values. This causes each set of data-bound controls to display different values from the same data source. Example: The following code example creates two new BindingContext objects and assigns each object to the BindingContext property of a GroupBox control. GroupBox1 contains TextBox1, and GroupBox2 contains TextBox2 (which is accomplished by using the AddRange method of the Control.ControlCollection class). The example then adds Binding objects to the two TextBox controls, binding each to the same data source and data member. The example also shows two event handlers that use the BindingContext from the GroupBox controls to set the Position property on different BindingManagerBase objects.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event CollectionChangeEventHandler CollectionChanged Summary: Always raises a NotImplementedException when handled. Remarks: The CollectionChanged event is obsolete and always raises a NotImplementedException when handled. For more information about handling events, see Consuming Events.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Gets a BindingManagerBase.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override int GetHashCode() Return Value Type: System.Int32 The hash code for this BindingMemberInfo. Summary: Returns the hash code for this BindingMemberInfo.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler RefreshItems Summary: Occurs when the state of the navigational user interface (UI) needs to be refreshed to reflect the current state of the underlying data. Remarks: The BindingNavigator.RefreshItems event signals that the navigational UI of the BindingNavigator needs to be updated to reflect the current state of the associated BindingSource. This is the default event for the BindingNavigator class. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RefreshItems event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type BindingNavigator named BindingNavigator1. Then ensure that the event handler is associated with the RefreshItems event.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public event BindingManagerDataErrorEventHandler DataError Summary: Occurs when a currency-related exception is silently handled by the BindingSource. Remarks: This event is informational and reports CLS-compliant exceptions only. To determine what type of exception occurred, handle this event and check the Exception property of the BindingManagerDataErrorEventArgs. For more information about handling events, see Consuming Events.",0,0,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: void ISupportInitialize.BeginInit() Implements ISupportInitialize.BeginInit Summary: Signals the BindingSource that initialization is starting.",1,0,0,0,0,0,0,0,0,0,0,0
"The interior of the rectangle is filled with the color defined for three-dimensional controls instead of the background color for the form.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event MouseEventHandler MouseDoubleClick Summary: Occurs when the user double-clicks the Button control with the mouse. Remarks: By default, the ControlStyles.StandardClick and ControlStyles.StandardDoubleClick style bits are set to false for the Button control, and the MouseDoubleClick event is not raised. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type Button named Button1. Then ensure that the event handler is associated with the MouseDoubleClick event.",0,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(true)] public event EventHandler AutoSizeChanged Summary: Occurs when the value of the AutoSize property changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AutoSizeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of a type that inherits from ButtonBase, such as a Button or CheckBox. Then name the instance ButtonBase1 and ensure that the event handler is associated with the AutoSizeChanged event.",0,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: protected override CreateParams CreateParams { get; } Property Value Type: System.Windows.Forms.CreateParams A CreateParams that contains the required creation parameters when the handle to the control is created. Summary: Gets the required creation parameters when the control handle is created.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation:",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum ButtonBorderStyle Summary: Specifies the border style for a button control. Remarks: This enumeration is used by ControlPaint.DrawBorder. DrawBorder updates the display of the button when controls are initially drawn or refreshed.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum CaptionButton Summary: Specifies the type of caption button to display. Remarks: This enumeration is used by ControlPaint.DrawCaptionButton. Caption buttons are the system buttons usually found on the rightmost side of a form's title bar. Example: The following code example demonstrates the use the ControlPaint.DrawCaptionButton method and the CaptionButton enumeration. To run this example paste the following code in a form containing a Button named Button1. The form should import the System.Windows.Forms and System.Drawing namespaces. Ensure the button's Paint event is associated with the event-handling method in this example.",1,1,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler CheckedChanged Summary: Occurs when the value of the Checked property changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CheckedChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type CheckBox named CheckBox1. Then ensure that the event handler is associated with the CheckedChanged event.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public CheckedListBox..::..CheckedItemCollection CheckedItems { get; } Property Value Type: System.Windows.Forms.CheckedListBox.CheckedItemCollection The CheckedListBox.CheckedItemCollection collection for the CheckedListBox. Summary: Collection of checked items in this CheckedListBox. Remarks: The collection is a subset of the objects in the Items collection, representing only those items whose System.Windows.Forms.CheckState is Checked or Indeterminate. The indexes in this collection are in ascending order. Example: The following example enumerates the checked items in the CheckedListBox.CheckedIndexCollection to see what check state an item is in. The example demonstrates using the CheckedIndices property to get the CheckedListBox.CheckedIndexCollection, and the CheckedItems property to get the CheckedListBox.CheckedItemCollection. The first loop uses the GetItemCheckState method to get the CheckState of each checked item, given the index of the item. The second loop also uses GetItemCheckState, but uses the ListBox.ObjectCollection.IndexOf method to retrieve the index for the item. To run this example, perform the following steps: Create a new Windows Forms application. Add a CheckedListBox and a Button to the form. Name the button WhatIsChecked, add a handler for its Click event, and copy in the code from the body of the following handler. Add some items to the CheckedListBox. Run the example and check some of the check boxes in the list box. Click the button. You will see a series of message boxes that indicate which items were checked.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event DrawItemEventHandler DrawItem Summary: Occurs when a visual aspect of an owner-drawn CheckedListBox changes. This event is not relevant to this class. Remarks: This event is used by an owner-drawn CheckedListBox. The event is raised only when the DrawMode property is set to DrawMode.OwnerDrawFixed or DrawMode.OwnerDrawVariable. You can use this event to perform the tasks needed to draw items in the CheckedListBox. If you have a variable-sized item (that is, DrawMode is set to DrawMode.OwnerDrawVariable), the MeasureItem event is raised before the item is drawn. You can create an event handler for the MeasureItem event to specify the size for the item that you are going to draw in your event handler for the DrawItem event. This event is not relevant to this class.",0,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler ValueMemberChanged Summary: Occurs when the ValueMember property changes. This event is not relevant to this class. Remarks: This event is not relevant to this class.",0,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Summary: Adds an item to the list of items for a CheckedListBox.",1,0,0,0,0,0,0,0,0,0,0,0
"The control is unchecked.",1,0,0,0,0,0,0,0,0,0,0,1
"The control is checked.",0,0,0,0,0,0,0,0,1,0,0,1
"The control is indeterminate. An indeterminate control generally has a shaded appearance.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public sealed class Clipboard Summary: Provides methods to place data on and retrieve data from the system Clipboard. This class cannot be inherited. Remarks: For a list of predefined formats to use with the Clipboard class, see the DataFormats class. Call SetDataObject to put data on the Clipboard, replacing its current contents. To place a persistent copy of the data on the Clipboard, set the copy parameter to true. Note To place data on the Clipboard in multiple formats, use the DataObject class or an IDataObject implementation. Place data on the Clipboard in multiple formats to maximize the possibility that a target application, whose format requirements you might not know, can successfully retrieve the data. Call GetDataObject to retrieve data from the Clipboard. The data is returned as an object that implements the IDataObject interface. Use the methods specified by IDataObject and fields in DataFormats to extract the data from the object. If you do not know the format of the data you retrieved, call the GetFormats method of the IDataObject interface to get a list of all formats that data is stored in. Then call the GetData method of the IDataObject interface, and specify a format that your application can use. In .NET Framework version 2.0, the Clipboard class provides additional methods that make it easier to work with the system Clipboard. Call the Clear method to remove all data from the Clipboard. To add data of a particular format to the Clipboard, replacing the existing data, call the appropriate SetFormat method, such as SetText, or call the SetData method to specify the format. To retrieve data of a particular format from the Clipboard, first call the appropriate ContainsFormat method (such as ContainsText) method to determine whether the Clipboard contains data in that format, and then call the appropriate GetFormat method (such as GetText) to retrieve the data if the Clipboard contains it. To specify the format in these operations, call the ContainsData and GetData methods instead. Note All Windows-based applications share the system Clipboard, so the contents are subject to change when you switch to another application. An object must be serializable for it to be put on the Clipboard. If you pass a non-serializable object to a Clipboard method, the method will fail without throwing an exception. See System.Runtime.Serialization for more information on serialization. If your target application requires a very specific data format, the headers added to the data in the serialization process may prevent the application from recognizing your data. To preserve your data format, add your data as a Byte array to a MemoryStream and pass the MemoryStream to the SetData method. The Clipboard class can only be used in threads set to single thread apartment (STA) mode. To use this class, ensure that your Main method is marked with the STAThreadAttribute attribute. Special considerations may be necessary when using the metafile format with the Clipboard. Due to a limitation in the current implementation of the DataObject class, the metafile format used by the .NET Framework may not be recognized by applications that use an older metafile format. In this case, you must interoperate with the Win32 Clipboard application programming interfaces (APIs). For more information, see article 323530, #Metafiles on Clipboard Are Not Visible to All Applications,# in the Microsoft Knowledge Base at http://support.microsoft.com. Example: The following code example uses Clipboard methods to place data on and retrieve it from the system Clipboard. This code assumes button1, button2, textBox1, and textBox2 have been created and placed on the form. The button1_Click method calls SetDataObject to take selected text from the text box and place it on the system Clipboard. The button2_Click method calls GetDataObject to retrieve data from the system Clipboard. The code uses IDataObject and DataFormats to extract the data returned and displays the data in textBox2. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public static bool ContainsFileDropList() Return Value Type: System.Boolean true if there is a file drop list on the Clipboard; otherwise, false. Summary: Indicates whether there is data on the Clipboard that is in the FileDrop format or can be converted to that format. Remarks: A file drop list is a collection of strings containing path information for files. Use this method to determine whether the Clipboard contains a file drop list before retrieving it with the GetFileDropList method. Note The Clipboard class can only be used in threads set to single thread apartment (STA) mode. To use this class, ensure that your Main method is marked with the STAThreadAttribute attribute. Example: The following example demonstrates this member.",1,1,0,1,1,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public enum CloseReason Summary: Specifies the reason that a form was closed. Remarks: The FormClosing and FormClosed events are raised when a Form is closed, either through user action or programmatically. Handlers for these events receive parameters of type FormClosingEventArgs and FormClosedEventArgs, respectively. Both of these event argument classes use the CloseReason enumeration.",1,0,0,0,0,0,1,0,0,0,0,0
"A 16-bit image.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [TypeConverterAttribute(typeof(ColumnHeaderConverter))] public class ColumnHeader : Component, ICloneable Summary: Displays a single column header in a ListView control. Remarks: A column header is an item in a ListView control that contains heading text. ColumnHeader objects can be added to a ListView using the Add method of the ListView.ColumnHeaderCollection class. To add a group of columns to a ListView, you can use the AddRange method of the ListView.ColumnHeaderCollection class. You can use the Index property of the ColumnHeader class to determine where the ColumnHeader is located in the ListView.ColumnHeaderCollection. ColumnHeader provides the Text and TextAlign properties to set the text displayed in the control and the alignment of the text in the column header. To determine whether a ColumnHeader is associated with a ListView control, you can reference the ListView property. If you want to copy a ColumnHeader for use in another ListView control, you can use the Clone method. Example: The following code example demonstrates initializing a ListView control. The example creates ColumnHeader objects and sets the column header's Text, TextAlign and Width properties. The example also adds items and subitems to the ListView. To run this example paste the following code in a form and call the PopulateListView method from the form's constructor or Load event handler. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class ColumnReorderedEventArgs : CancelEventArgs Summary: Provides data for the ColumnReordered event. Remarks: The ColumnReordered event can be canceled by setting the Cancel property to true. However, if the event is cancelled, the NewDisplayIndex will not change to the OldDisplayIndex value. Example: The following code example demonstrates the use of this type. In the example, an event handler reports on the occurrence of the ColumnReordered event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type ListView named ListView1. Then ensure that the event handler is associated with the ColumnReordered event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the ColumnWidthChangingEventArgs class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(true)] public AutoCompleteSource AutoCompleteSource { get; set; } Property Value Type: System.Windows.Forms.AutoCompleteSource One of the values of AutoCompleteSource. The options are AllSystemSources, AllUrl, FileSystem, HistoryList, RecentlyUsedList, CustomSource, and None. The default is None. Summary: Gets or sets a value specifying the source of complete strings used for automatic completion. Remarks: Use the AutoCompleteCustomSource, AutoCompleteMode, and AutoCompleteSource properties to create a ComboBox that automatically completes input strings by comparing the prefix being entered to the prefixes of all strings in a maintained source. This is useful for ComboBox controls in which URLs, addresses, file names, or commands will be frequently entered. The use of the AutoCompleteCustomSource property is optional, but you must set the AutoCompleteSource property to CustomSource in order to use AutoCompleteCustomSource. You must use the AutoCompleteMode and AutoCompleteSource properties together. With AutoCompleteMode set to SuggestAppend and AutoCompleteSource set to ListItems, the behavior is as follows: If the list of strings is empty, pressing the BACKSPACE or DELETE key does nothing. If the BACKSPACE key is pressed in less than one second, the previous item is selected, or nothing is selected if the list of string is empty. If the BACKSPACE key is pressed in more than one second, the first item is selected. If the DELETE key is pressed, the first item is selected. Note The operating system might limit the number of custom strings that it can display at once. For strings that contain a forward slash (/) or backward slash (\\), automatic completion appends all characters only up to and including the slash.",1,0,1,0,0,0,1,1,0,1,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler BackgroundImageLayoutChanged Summary: Occurs when the BackgroundImageLayout property changes. Remarks: This event is not relevant to this class.",0,0,0,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler DoubleClick Summary: This event is not relevant for this class. Remarks: This event is not relevant for this class.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler DropDown Summary: Occurs when the drop-down portion of a ComboBox is shown. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates how to initialize a ComboBox control by setting the text property and using the AddRange method to populate the ComboBox. It also demonstrates handling the DropDown event. To run the example, paste the following code in a form and call the InitializeComboBox method in the form's constructor or Load event.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler SelectionChangeCommitted Summary: Occurs when the selected item has changed and that change is displayed in the ComboBox. Remarks: SelectionChangeCommitted is raised only when the user changes the combo box selection. Do not use SelectedIndexChanged or SelectedValueChanged to capture user changes, because those events are also raised when the selection changes programmatically. You can create a SelectionChangeCommitted event handler to provide special handling for the ComboBox when the user changes the selected item in the list. For more information about handling events, see Consuming Events. Example: The following code example uses the SelectionChangeCommitted event and the SelectionLength property to change the length of the text box depending on what the user has selected and committed.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler HelpRequest Summary: Occurs when the user clicks the Help button on a common dialog box. Remarks: For information about handling events, see Consuming Events. Example: The following code example demonstrates initializing a ColorDialog object setting the AnyColor, AllowFullOpen properties. The ColorDialog object does not allow the user to set a custom color, but it allows the full set of basic colors to be displayed. By setting the SolidColorOnly property to false, it allows the display of colors that are combinations of other colors on systems with 256 or less colors. The example also shows setting the ShowHelp property and handling a HelpRequest event for a dialog box. To run the example, paste the following code in a form and call the InitializeColorDialog method in the form's constructor or Load method. This example requires that the Click event of the button is connected to the event handler defined in the example.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class ContextMenu : Menu Summary: Represents a shortcut menu. Although ContextMenuStrip replaces and adds functionality to the ContextMenu control of previous versions, ContextMenu is retained for both backward compatibility and future use if you choose. Remarks: The ContextMenu class represents shortcut menus that can be displayed when the user clicks the right mouse button over a control or area of the form. Shortcut menus are typically used to combine different menu items from a MainMenu of a form that are useful for the user given the context of the application. For example, you can use a shortcut menu assigned to a TextBox control to provide menu items for changing the font of the text, finding text within the control, or Clipboard features for copying and pasting text. You can also display new MenuItem objects in a shortcut menu that are not located within a MainMenu to provide situation specific commands that are not appropriate for the MainMenu to display. Typically, a shortcut menu is displayed when a user clicks the right mouse button over a control or the form itself. Visible controls and Form have a ContextMenu property that binds the ContextMenu class to the control that displays the shortcut menu. More than one control can use a ContextMenu. You can use the SourceControl property to determine which control last displayed the shortcut menu in order to perform tasks specific to the control or to modify the shortcut menu displayed for the control. You might want to know when the shortcut menu is being displayed in order to set check marks, disable items, and perform other menu tasks before the menu is displayed to the user. You can handle the Popup event to determine when the shortcut menu is being displayed. Note In order to reuse MenuItem objects that are displayed in a MainMenu for use in a ContextMenu, you must create a copy of the menu using the CloneMenu method of the MenuItem class. You can also merge menu items and their submenu items into a single MenuItem object using the MergeMenu method of the MenuItem class. Example: The following code example creates an event handler for the Popup event of the ContextMenu. The code in the event handler determines which of two controls a PictureBox named pictureBox1 and a TextBox named textBox1 is the control displaying the shortcut menu. Depending on which control caused the ContextMenu to display its shortcut menu, the control adds the appropriate MenuItem objects to the ContextMenu. This example requires that you have an instance of the ContextMenu class, named contextMenu1, defined within the form. This example also requires that you have a TextBox and PictureBox added to a form and that the ContextMenu property of these controls is set to contextMenu1. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the ContextMenu class.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: protected internal virtual void OnCollapse( EventArgs e ) Parameters eType: System.EventArgs An EventArgs that contains the event data. Summary: Raises the Collapse event.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual Color BackColor { get; set; } Property Value Type: System.Drawing.Color A Color that represents the background color of the control. The default is the value of the DefaultBackColor property. Summary: Gets or sets the background color for the control. Remarks: The BackColor property does not support transparent colors unless the SupportsTransparentBackColor value of System.Windows.Forms.ControlStyles is set to true. The BackColor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a Button will have the same BackColor as its parent Form by default. For more information about ambient properties, see the AmbientProperties class or the Control class overview. Notes to Inheritors When overriding the BackColor property in a derived class, use the base class's BackColor property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the get and set accessors of the BackColor property; you can override only one if needed. Example: The following code example sets the BackColor and ForeColor of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a Form with at least one child control; however, a child container control, like a Panel or GroupBox, with its own child control(s) would better demonstrate the recursion.",0,1,1,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public int Bottom { get; } Property Value Type: System.Int32 An Int32 representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area. Summary: Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area. Remarks: The value of this property is equal to the sum of the Top property value, and the Height property value. The Bottom property is a read-only property. You can manipulate this property value by changing the value of the Top or Height properties or calling the SetBounds, SetBoundsCore, UpdateBounds, or SetClientSizeCore methods. Example: The following code example uses the Bottom property to define the lower limit of a TextBox control relative to the client area of the container.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(true)] public event ControlEventHandler ControlRemoved Summary: Occurs when a control is removed from the Control.ControlCollection. Remarks: For more information about handling events, see Consuming Events. Example: The following code example uses ControlRemoved to remove a control from a form and displays the name of the removed control in a MessageBox.",0,0,0,0,0,1,0,0,1,0,1,0
"Additional online Documentation: Syntax: protected virtual AccessibleObject CreateAccessibilityInstance() Return Value Type: System.Windows.Forms.AccessibleObject A new AccessibleObject for the control. Summary: Creates a new accessibility object for the control. Remarks: If you do not explicitly call the CreateAccessibilityInstance method, it will be called when the AccessibilityObject property is referenced. Note To get or set the AccessibilityObject property, you must add a reference to the Accessibility assembly installed with the .NET Framework. Notes to Inheritors When overriding CreateAccessibilityInstance in a derived class, do not call the base class's CreateAccessibilityInstance method. Example: The following code example demonstrates the creation of an accessibility-aware chart control, using the AccessibleObject and Control.ControlAccessibleObject classes to expose accessible information. The control plots two curves along with a legend. The ChartControlAccessibleObject class, which derives from ControlAccessibleObject, is used in the CreateAccessibilityInstance method to provide custom accessible information for the chart control. Since the chart legend is not an actual Control -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the ChartControlAccessibleObject class overrides the GetChild method to return the CurveLegendAccessibleObject that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information. This code excerpt demonstrates overriding the CreateAccessibilityInstance method. See the AccessibleObject class overview for the complete code example.",1,0,1,0,0,1,0,0,1,0,0,1
"Additional online Documentation: Syntax: protected virtual bool DoubleBuffered { get; set; } Property Value Type: System.Boolean true if the surface of the control should be drawn using double buffering; otherwise, false. Summary: Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker. Remarks: Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface. Buffered graphics require that the updated graphics data is first written to a buffer. The data in the graphics buffer is then quickly written to displayed surface memory. The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur. Note DoubleBuffered is not a bindable property.",1,1,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler GotFocus Summary: Occurs when the control receives focus. Remarks: When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the Select or SelectNextControl methods, or by setting the ContainerControl.ActiveControl property to the current form, focus events occur in the following order: Enter GotFocus Leave Validating Validated LostFocus When you change the focus by using the mouse or by calling the Focus method, focus events occur in the following order: Enter GotFocus LostFocus Leave Validating Validated If the CausesValidation property is set to false, the Validating and Validated events are suppressed. Note   The GotFocus and LostFocus events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages. Typically, the GotFocus and LostFocus events are only used when updating UICues or when writing custom controls. Instead the Enter and Leave events should be used for all controls except the Form class, which uses the Activated and Deactivate events. For more information about the GotFocus and LostFocus events, see the WM_SETFOCUS and WM_KILLFOCUS topics in the #Keyboard Input Reference# section in the MSDN library at http://msdn.microsoft.com/library. Caution Do not attempt to set focus from within the Enter, GotFocus, Leave, LostFocus, Validating, or Validated event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the WM_KILLFOCUS topic in the #Keyboard Input Reference# section, and the #Message Deadlocks# section of the #About Messages and Message Queues# topic in the MSDN library at http://msdn.microsoft.com/library. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the GotFocus event. This report helps you to learn when the event occurs and can assist you in debugging. To run the example code, paste it into a project that contains an instance of a type that inherits from Control, such as a Button or ComboBox. Then name the instance Control1 and ensure that the event handler is associated with the GotFocus event.",1,0,1,0,0,1,0,1,1,0,1,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler HandleDestroyed Summary: Occurs when the control's handle is in the process of being destroyed. Remarks: During the HandleDestroyed event, the control is still a valid Windows control and the Handle can be recreated by calling the RecreateHandle method. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HandleDestroyed event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of a type that inherits from Control, such as a Button or ComboBox. Then name the instance Control1 and ensure that the event handler is associated with the HandleDestroyed event.",0,0,0,0,0,1,1,1,1,0,1,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public bool IsHandleCreated { get; } Property Value Type: System.Boolean true if a handle has been assigned to the control; otherwise, false. Summary: Gets a value indicating whether the control has a handle associated with it. Remarks: Use the IsHandleCreated property to determine whether CreateHandle has been called.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public event KeyEventHandler KeyDown Summary: Occurs when a key is pressed while the control has focus. Remarks: Key events occur in the following order: KeyDown KeyPress KeyUp To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the KeyPressEventArgs.Handled property in your form's KeyPress event-handling method to true. Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically. To have these keys raise the KeyDown event, you must override the IsInputKey method in each control on your form. The code for the override of the IsInputKey would need to determine if one of the special keys is pressed and return a value of true. Instead of overriding the IsInputKey method, you can handle the PreviewKeyDown event and set the IsInputKey property to true. For a code example, see the PreviewKeyDown event. For more information about handling events, see Consuming Events. Example: The following code example uses the KeyDown event to determine the type of character entered into the control.",1,1,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public event MouseEventHandler MouseUp Summary: Occurs when the mouse pointer is over the control and a mouse button is released. Remarks: Mouse events occur in the following order: MouseEnter MouseMove MouseHover / MouseDown / MouseWheel MouseUp MouseLeave Note The following events are not raised for the TabControl class unless there is at least one TabPage in the TabControl.TabPages collection: Click, DoubleClick, MouseDown, MouseUp, MouseHover, MouseEnter, MouseLeave and MouseMove. If there is at least one TabPage in the collection, and the user interacts with the tab control's header (where the TabPage names appear), the TabControl raises the appropriate event. However, if the user interaction is within the client area of the tab page, the TabPage raises the appropriate event. For more information about handling events, see Consuming Events. Example: The following code example demonstrates using different mouse events to draw the path of the mouse on a Panel. A line segment is added to the GraphicsPath for each MouseMove and MouseDown events that occur. To update the graphics, the Invalidate method is called for the Panel on each MouseDown and MouseUp event. In addition, the graphic path is scrolled up or down when the MouseWheel event occurs. Additional mouse events, like MouseHover, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the SystemInformation class.",1,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: protected virtual void OnLostFocus( EventArgs e ) Parameters eType: System.EventArgs An EventArgs that contains the event data. Summary: Raises the LostFocus event. Remarks: Raising an event invokes the event handler through a delegate. For more information, see Raising an Event. The OnLostFocus method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class. Notes to Inheritors When overriding OnLostFocus in a derived class, be sure to call the base class's OnLostFocus method so that registered delegates receive the event.",1,0,1,0,0,1,0,1,0,0,0,0
"Additional online Documentation: Syntax: protected virtual void OnParentFontChanged( EventArgs e ) Parameters eType: System.EventArgs An EventArgs that contains the event data. Summary: Raises the FontChanged event when the Font property value of the control's container changes. Remarks: Raising an event invokes the event handler through a delegate. For more information, see Raising an Event. The OnParentFontChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class. Notes to Inheritors When overriding OnParentFontChanged in a derived class, be sure to call the base class's OnParentFontChanged method so that registered delegates receive the event. Example: The following code example is an event-raising method that is executed when the Text property value changes. The Control class has several methods with the name pattern On PropertyName Changed that raise the corresponding PropertyName Changed event when the PropertyName value changes (PropertyName represents the name of the corresponding property). The following code example changes the ForeColor of a TextBox derived class displaying currency data. The example converts the text to a decimal number and changes the ForeColor to Color.Red if the number is negative and to Color.Black if the number is positive. This example requires that you have a class that derives from the TextBox class.",1,0,1,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public event QueryContinueDragEventHandler QueryContinueDrag Summary: Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled. Remarks: The QueryContinueDrag event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation. The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled. The following describes how and when events related to drag-and-drop operations are raised. The DoDragDrop method determines the control under the current cursor location. It then checks to see if the control is a valid drop target. If the control is a valid drop target, the GiveFeedback event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the DragDropEffects enumeration. Changes in the mouse cursor position, keyboard state, and mouse button state are tracked. If the user moves out of a window, the DragLeave event is raised. If the mouse enters another control, the DragEnter for that control is raised. If the mouse moves but stays within the same control, the DragOver event is raised. If there is a change in the keyboard or mouse button state, the QueryContinueDrag event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the Action property of the event's QueryContinueDragEventArgs. If the value of DragAction is Continue, the DragOver event is raised to continue the operation and the GiveFeedback event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the DragDropEffects enumeration. Note The DragOver and GiveFeedback events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position. If the value of DragAction is Drop, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move. If the value of DragAction is Cancel, the DragLeave event is raised. By default, the QueryContinueDrag event sets Action to Cancel in DragAction if the ESC key was pressed and sets Action to Drop in DragAction if the left, middle, or right mouse button is pressed. For more information about handling events, see Consuming Events. Example: The following code example demonstrates a drag-and-drop operation between two ListBox controls. The example calls the DoDragDrop method when the drag action starts. The drag action starts if the mouse has moved more than SystemInformation.DragSize from the mouse location during the MouseDown event. The IndexFromPoint method is used to determine the index of the item to drag during the MouseDown event. The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, 3dwarro.cur and 3dwno.cur, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the UseCustomCursorsCheck CheckBox is checked. The custom cursors are set in the GiveFeedback event handler. The keyboard state is evaluated in the DragOver event handler for the right ListBox, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the ListBox where the drop would occur is also determined during the DragOver event. If the data to drop is not a String, then the DragEventArgs.Effect is set to None in DragDropEffects. Finally, the status of the drop is displayed in the DropLocationLabel Label. The data to drop for the right ListBox is determined in the DragDrop event handler and the String value is added at the appropriate place in the ListBox. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the QueryContinueDrag event handler. This code excerpt demonstrates using the QueryContinueDrag event. See the DoDragDrop method for the complete code example.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Resize Summary: Occurs when the control is resized. Remarks: To determine the Size of the resized control, you can cast the sender parameter of the EventArgs data to a Control and get its Size property (or Height and Width properties individually). To handle custom layouts, use the Layout event instead of the Resize event. The Layout event is raised in response to a Resize event, but also in response to other changes that affect the layout of the control. For more information about handling events, see Consuming Events. Example: The following code example handles the Resize event of a Form. When the form is resized, the event handler ensures that the form stays square (its Height and Width remain equal).",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public event EventHandler SizeChanged Summary: Occurs when the Size property value changes. Remarks: It is preferable to use the Layout event to handle custom layouts. The Layout event is raised in response to Resize events, but also in other conditions when layout might need to be applied. This event is raised if the Size property is changed by either a programmatic modification or user interaction. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the SizeChanged event. An instance of a Button control has been provided that can be scaled both horizontally and vertically. A NumericUpDown instance provides the horizontal and vertical scale value. The Button instance named OK is used to set the scale values for the Button control instance. Whenever the size of the control changes, the event handler associated with the SizeChanged event of the control is called. This event handler displays a message box indicating that the size of the control has changed.",0,0,0,0,0,0,1,0,1,0,1,1
"Additional online Documentation: Syntax: public event EventHandler VisibleChanged Summary: Occurs when the Visible property value changes. Remarks: This event is raised if the Visible property is changed by either a programmatic modification or user interaction. For more information about handling events, see Consuming Events. Example: The following code example raises the VisibleChanged event when the Visible property value of the Label control has changed.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [TypeConverterAttribute(#System.Windows.Forms.Design.ControlBindingsConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a#)] public class ControlBindingsCollection : BindingsCollection Summary: Represents the collection of data bindings for a control. Remarks: Simple data binding is accomplished by adding Binding objects to a ControlBindingsCollection. Any object that inherits from the Control class can access the ControlBindingsCollection through the DataBindings property. For a list of Windows controls that support data binding, see the Binding class. The ControlBindingsCollection contains standard collection methods such as Add, Clear, and Remove. To get the control that the ControlBindingsCollection belongs to, use the Control property. Example: The following code example adds Binding objects to a ControlBindingsCollection of five controls: four TextBox controls and a DateTimePicker control. The ControlBindingsCollection is accessed through the DataBindings property of the Control class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: protected override void ClearCore() Summary: Clears the bindings in the collection.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public void Remove( Binding binding ) Parameters bindingType: System.Windows.Forms.Binding The Binding to remove. Summary: Deletes the specified Binding from the collection. Example: The following code example removes a specific Binding from a TextBox control's ControlBindingsCollection. The example gets the required Binding by using the Item property, and removes the Binding with the Remove method.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Summary: Draws a check box control.",1,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Draws a three-state check box control.",1,0,0,0,0,0,0,0,0,0,0,1
"If true, the control does its own mouse processing, and mouse events are not handled by the operating system.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class CurrencyManager : BindingManagerBase Summary: Manages a list of Binding objects. Remarks: The CurrencyManager derives from the BindingManagerBase class. Use the BindingContext to return either a CurrencyManager or a PropertyManager. The actual object returned depends on the data source and data member passed to the Item property of the BindingContext. If the data source is an object that can return only a single property (instead of a list of objects), the type will be a PropertyManager. For example, if you specify a TextBox as the data source, a PropertyManager will be returned. If, on the other hand, the data source is an object that implements the IList, IListSource, or IBindingList interface, a CurrencyManager will be returned. The Current property returns the current item in the underlying list. To change the current item, set the Position property to a new value. The value must be greater than 0 and must be less than the value of the Count property. If the underlying data source implements the IBindingList interface, and the AllowNew property is set to true, you can use the AddNew method. Example: The following code example binds a TextBox control to a column in a DataTable, gets the CurrencyManager for the binding, and sets its position. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: protected void CheckEmpty() Summary: Throws an exception if there is no list, or the list is empty.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override int Count { get; } Property Value Type: System.Int32 The number of items in the list. Summary: Gets the number of items in the list. Remarks: Use the count property to determine when the end of a list has been reached. Because the CurrencyManager maintains a 0-based array of items, the end of the list is always Count minus one. Example: The following code example iterates through the list until the final item, determined by the Count property, is reached.",1,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public static Cursor NoMoveVert { get; } Property Value Type: System.Windows.Forms.Cursor The Cursor that represents the cursor that appears during wheel operations when the mouse is not moving. Summary: Gets the cursor that appears during wheel operations when the mouse is not moving, but the window can be scrolled in a vertical direction.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class DataFormats Summary: Provides static, predefined Clipboard format names. Use them to identify the format of data that you store in an IDataObject. Remarks: The IDataObject and DataObject classes also use the static format list to determine the type of data that is retrieved from the system Clipboard, or that is transferred in a drag-and-drop operation. The GetFormat method allows you to: Get a predefined DataFormats.Format object for a format name or ID number. Add a new format name/ID number pair to the static list in this class, and to register the format with the Windows registry as a Clipboard format when you pass it the format name. You can get the Id number or format Name from the appropriate property in the DataFormats.Format instance. Example: The following code example creates a new data format named myFormat. The code then creates a MyNewObject which it stores in a DataObject. The DataObject is copied to the Clipboard. Next, the DataObject is retrieved from the Clipboard and the MyNewObject is recovered. The value of the MyNewObject is printed in a text box. This code requires that textBox1 has been created and placed on a form. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler BackgroundImageChanged Summary: Occurs when the value of the BackgroundImage property changes. Remarks: The BackgroundImage property is not meaningful for this control, although you can change its value and handle the BackgroundImageChanged event to detect the change.",1,0,1,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler BorderStyleChanged Summary: Occurs when the BorderStyle has changed. Remarks: Possible values include None, FixedSingle, and Fixed3D. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BorderStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGrid named DataGrid1. Then ensure that the event handler is associated with the BorderStyleChanged event.",1,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: protected override AccessibleObject CreateAccessibilityInstance() Return Value Type: System.Windows.Forms.AccessibleObject The Control.ControlAccessibleObject for this control. Summary: Constructs a new instance of the accessibility object for this control. Remarks: Derived classes should not call the base class's CreateAccessibilityInstance method. Only the following properties of the AccessibleObject should be set: Role Description Name All other properties are handled by the System.Windows.Forms.DataGrid itself.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler CurrentCellChanged Summary: Occurs when the CurrentCell property has changed. Remarks: To determine the current cell, use the CurrentCell property. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public void ResetLinkHoverColor() Summary: Resets the LinkHoverColor property to its default value. Remarks: You typically use this method if you are either creating a designer for the System.Windows.Forms.DataGrid or creating your own control incorporating the System.Windows.Forms.DataGrid. You can use the ShouldSerializeLinkHoverColor method to determine whether the property value has changed from its default.",1,0,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler ShowParentDetailsButtonClick Summary: Occurs when the ShowParentDetails button is clicked. Example: The following code example demonstrates the use of this member.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum HitTestType Summary: Specifies the part of the System.Windows.Forms.DataGrid control the user has clicked. Remarks: Use the members of this enumeration to determine which part of the grid has been clicked. The Type property of a DataGrid.HitTestInfo returns a DataGrid.HitTestType. The DataGrid.HitTestInfo is created by invoking the HitTest method of a System.Windows.Forms.DataGrid control. Example: The following example uses the HitTest method in a MouseDown event to return the DataGrid.HitTestInfo. The row, column, and part of the grid are then printed.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public class DataGridBoolColumn : DataGridColumnStyle Summary: Specifies a column in which each cell contains a check box for representing a Boolean value. Remarks: The DataGridBoolColumn derives from the abstract class DataGridColumnStyle. At run time, the DataGridBoolColumn contains check boxes in each cell that have three states by default: checked (true), unchecked (false), and Value. To use two-state check boxes, set the AllowNull property to false. Properties added to the class include FalseValue, NullValue, and TrueValue. These properties specify the value underlying each of the column's states. Example: The following code example first creates a new DataGridBoolColumn and adds it to the GridColumnStylesCollection of a DataGridTableStyle. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DataGridBoolColumn class.",1,0,0,0,0,1,0,1,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler AllowNullChanged Summary: Occurs when the AllowNull property is changed. Example: The following code example demonstrates the use of this member.",0,0,0,0,0,1,0,0,1,0,0,1
"Additional online Documentation: Summary: Prepares the cell for editing a value.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected internal abstract Size GetPreferredSize( Graphics g, Object value ) Parameters gType: System.Drawing.Graphics A Graphics object.  valueType: System.Object An object value for which you want to know the screen height and width. Return Value Type: System.Drawing.Size A Size that contains the dimensions of the cell. Summary: When overridden in a derived class, gets the width and height of the specified value. The width and height are used when the user navigates to DataGridTableStyle using the DataGridColumnStyle. Remarks: Use GetPreferredSize to determine the width a column should resize to, given a particular string or numeral. Example: The following code example uses the GetPreferredSize method to return the optimum size for a value.",1,0,0,1,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public event EventHandler ForeColorChanged Summary: Occurs when the ForeColor value changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ForeColorChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridTableStyle named DataGridTableStyle1. Then ensure that the event handler is associated with the ForeColorChanged event.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public event EventHandler HeaderBackColorChanged Summary: Occurs when the HeaderBackColor value changes. Example: The following code example demonstrates the use of this member.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public event EventHandler MappingNameChanged Summary: Occurs when the MappingName value changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: protected virtual void OnLinkColorChanged( EventArgs e ) Parameters eType: System.EventArgs An EventArgs that contains the event data. Summary: Raises the LinkColorChanged event. Remarks: Raising an event invokes the event handler through a delegate. For more information, see Raising an Event. The OnLinkColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class. Notes to Inheritors When overriding OnLinkColorChanged in a derived class, be sure to call the base class's OnLinkColorChanged method so that registered delegates receive the event.",0,0,0,1,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: protected virtual void OnSelectionBackColorChanged( EventArgs e ) Parameters eType: System.EventArgs An EventArgs that contains the event data. Summary: Raises the SelectionBackColorChanged event. Remarks: Raising an event invokes the event handler through a delegate. For more information, see Raising an Event. The OnSelectionBackColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class. Notes to Inheritors When overriding OnSelectionBackColorChanged in a derived class, be sure to call the base class's OnSelectionBackColorChanged method so that registered delegates receive the event.",1,1,0,1,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler PreferredRowHeightChanged Summary: Occurs when the PreferredRowHeight value changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public Color SelectionBackColor { get; set; } Property Value Type: System.Drawing.Color The Color that represents the background color of selected cells. Summary: Gets or sets the background color of selected cells. Example: The following code example demonstrates the use of this member.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] [ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)] public class DataGridTextBox : TextBox Summary: Represents a TextBox control that is hosted in a DataGridTextBoxColumn. Remarks: The DataGridTextBox and the DataGridTextBoxColumn work together so that users can directly edit values in a DataGrid control column. The DataGridTextBoxColumn derives from DataGridColumnStyle, and is designed to host the DataGridTextBox, which derives from the TextBox control. In addition to the properties, events, and methods of the base control, you can call the KeyPress and KeyDown events with the OnKeyPress and OnMouseDown methods. Example: The following code example demonstrates how to get the DataGridTextBox hosted by a DataGridTextBoxColumn. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public virtual DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle { get; } Property Value Type: System.Windows.Forms.DataGridViewAdvancedBorderStyle A DataGridViewAdvancedBorderStyle that represents the style of the border of the upper-left cell in the DataGridView. Summary: Gets the border style for the upper-left cell in the DataGridView. Remarks: The upper-left cell is the cell that is shared by the column header row and the row header column. The DataGridView gets the value of this property while painting the upper-left cell. Notes to Inheritors Override this property if you want to customize the appearance of the border on the upper-left header cell. Example: The following code example demonstrates how to override the AdjustedTopLeftHeaderBorderStyle property to customize the borders of the upper-left cell. This code example is part of a larger example provided for the DataGridViewAdvancedBorderStyle class.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler AllowUserToAddRowsChanged Summary: Occurs when the value of the AllowUserToAddRows property changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AllowUserToAddRowsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the AllowUserToAddRowsChanged event.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler AutoGenerateColumnsChanged Summary: Occurs when the value of the AutoGenerateColumnsChanged property changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AutoGenerateColumnsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the AutoGenerateColumnsChanged event.",0,0,0,0,0,0,0,1,1,0,1,1
"Additional online Documentation: Syntax: public event DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged Summary: Occurs when the value of the DataGridViewAutoSizeRowsMode property changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example illustrates the use of this event. This example is part of a larger example available in How to: Automatically Resize Cells When Content Changes in the Windows Forms DataGridView Control.",0,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public event EventHandler BackgroundColorChanged Summary: Occurs when the value of the BackgroundColor property changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BackgroundColorChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the BackgroundColorChanged event.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler BackgroundImageChanged Summary: Occurs when the value of the BackgroundImage property changes. Remarks: For more information about handling events, see Consuming Events.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler BackgroundImageLayoutChanged Summary: Occurs when the BackgroundImageLayout property changes. Remarks: Although this event occurs as described, the BackgroundImageLayout property is not relevant for this control. For more information about handling events, see Consuming Events.",0,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: public event DataGridViewCellEventHandler CellEndEdit Summary: Occurs when edit mode stops for the currently selected cell. Remarks: For more information about handling events, see Consuming Events. Example: The following code example illustrates how to handle this event to clear the row DataGridViewRow.ErrorText property in case it was previously set by a CellValidating event handler. The CellValidating event handler can clear the error text when the new cell value meets the validation criteria, but when the user reverts to the old cell value by pressing ESC, the CellValidating event does not occur. This example is part of a larger example available in Walkthrough: Validating Data in the Windows Forms DataGridView Control.",0,0,0,0,0,1,0,1,1,0,1,0
"Additional online Documentation: Syntax: public event DataGridViewCellEventHandler CellMouseEnter Summary: Occurs when the mouse pointer enters a cell. Remarks: For more information about handling events, see Consuming Events. Example: The following code example shows a CellMouseEnter event handler in a Tic-Tac-Toe game implementation that uses image columns in a DataGridView control. The event handler uses the cell value to determine the cursor and ToolTip to display. This code is part of a larger example shown in How to: Work with Image Columns in the Windows Forms DataGridView Control.",0,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public event DataGridViewCellPaintingEventHandler CellPainting Summary: Occurs when a cell needs to be drawn. Remarks: You can handle this event to customize the appearance of cells in the control. You can paint entire cells yourself, or paint specific parts of cells and use the DataGridViewCellPaintingEventArgs.PaintBackground or DataGridViewCellPaintingEventArgs.PaintContent methods to paint other parts. You can also use the VisualStyleRenderer class to paint standard controls using the current theme. For more information, see Rendering Controls with Visual Styles. If you are using Visual Studio 2005, you also have access to a large library of standard images that you can use with the DataGridView control. For more information, see Visual Studio 2005 Image Library and Visual Studio 2008 Image Library and Visual Studio Image Library. When handling this event, you should access the cell through the parameters of the event handler, rather than access the cell directly. For more information about handling events, see Consuming Events. Example: The following code example illustrates how to use this event to customize the appearance of all cells in a particular column. This code is part of a larger example available in How to: Customize the Appearance of Cells in the Windows Forms DataGridView Control.",0,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public event DataGridViewCellParsingEventHandler CellParsing Summary: Occurs when a cell leaves edit mode if the cell value has been modified. Remarks: By default, the DataGridView control will attempt to convert a user-specified value displayed in a cell to an actual underlying cell value in the type specified by the cell ValueType property. This conversion uses the formatting properties of the cell style returned by the cell InheritedStyle property. If the standard conversion does not meet your needs, handle the CellParsing event to provide custom value conversion to the required type. Users can enter edit mode using the method specified by the EditMode property, and can leave edit mode, committing any changes to a cell, by moving to another cell or by pressing ENTER. Pressing ESC will revert any changes to the value before it is committed, and the CellParsing event will not occur. The CellParsing event occurs only if the cell value has actually been modified, even if the final value is the same as the original value. It also occurs when the CommitEdit method is called. When you handle the CellParsing event, you can convert the value yourself or you can customize the default conversion. For example, you can convert the value yourself using the cell ParseFormattedValue method with type converters of your choosing. Alternatively, you can let the default type converters parse the value, but modify the NullValue, DataSourceNullValue, and FormatProvider properties of the object returned by the DataGridViewCellParsingEventArgs.InheritedCellStyle property, which is initialized using the cell InheritedStyle property. When you convert the value yourself, replace the initial, formatted value of the ConvertEventArgs.Value property with the converted value in the type specified by the cell ValueType property. To indicate that no further parsing is necessary, set the DataGridViewCellParsingEventArgs.ParsingApplied property to true. When the event handler completes, if the ConvertEventArgs.Value is Nothing or is not of the correct type, or the DataGridViewCellParsingEventArgs.ParsingApplied property is false, the Value is parsed using the cell ParseFormattedValue method with default type converters. The default implementation of this method parses the value using the NullValue, DataSourceNullValue, and FormatProvider properties of the cell style passed in. If the value is not equal to NullValue, the value is parsed using the FormatProvider property and the type converters passed in. To customize the conversion of a cell value into a formatted value for display, handle the CellFormatting event. For more information about handling events, see Consuming Events. Example: The following code example shows how to handle the CellParsing event. It also shows how to use the DataGridViewCellParsingEventArgs class.",1,1,0,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public event DataGridViewCellStateChangedEventHandler CellStateChanged Summary: Occurs when a cell state changes, such as when the cell loses or gains focus. Remarks: For more information about handling events, see Consuming Events. Example: The following code example illustrates the use of this event.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public event DataGridViewColumnEventHandler ColumnDataPropertyNameChanged Summary: Occurs when the value of the DataPropertyName property for a column changes. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnDataPropertyNameChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the ColumnDataPropertyNameChanged event.",0,0,0,0,0,0,0,1,1,0,1,1
"Additional online Documentation: Syntax: public event DataGridViewColumnEventHandler ColumnMinimumWidthChanged Summary: Occurs when the value of the MinimumWidth property for a column changes. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnMinimumWidthChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the ColumnMinimumWidthChanged event.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: protected override Control..::..ControlCollection CreateControlsInstance() Return Value Type: System.Windows.Forms.Control.ControlCollection An empty Control.ControlCollection. Summary: Creates and returns a new Control.ControlCollection that can be cast to type DataGridView.DataGridViewControlCollection. Remarks: This method is called by the Controls property to initialize its value.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler DefaultCellStyleChanged Summary: Occurs when the value of the DefaultCellStyle property changes. Remarks: This event occurs when any properties of the DataGridViewCellStyle returned by the DefaultCellStyle property are set to new values or when the DefaultCellStyle property is set to a new DataGridViewCellStyle with at least one property value different than the previous cell style object. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DefaultCellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the DefaultCellStyleChanged event.",0,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public void InvalidateRow( int rowIndex ) Parameters rowIndexType: System.Int32 The index of the row to invalidate. Summary: Invalidates the specified row of the DataGridView, forcing it to be repainted. Remarks: Use this method to force a row to repaint itself. This method is useful in owner-drawing scenarios where you handle the RowPrePaint or RowPostPaint events. For more information about painting and invalidation, see Invalidate. Example: The following code example illustrates how to use the InvalidateRow method in a row-painting scenario. In the example, the row is invalidated when the current cell changes, forcing the row to repaint itself. This code is part of a larger example available in How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control.",1,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public event DataGridViewRowEventHandler RowDividerHeightChanged Summary: Occurs when the DividerHeight property changes. Remarks: The divider height is modified by setting the DividerHeight property. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowDividerHeightChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the RowDividerHeightChanged event.",1,0,0,0,0,1,0,1,1,0,1,0
"Additional online Documentation: Syntax: public event DataGridViewRowsAddedEventHandler RowsAdded Summary: Occurs after a new row is added to the DataGridView. Remarks: Rows in the control are not automatically sorted when new rows are added. To sort new rows into their correct position, call the Sort method in a RowsAdded event handler. When the user adds a new row using the row for new records, the DataGridViewRowsAddedEventArgs.RowIndex value in the handler for this event is equal to the index of the new location of the row for new records, which is one greater than the row just added. When you add rows programmatically, however, the RowIndex value is the index of the first row added. In virtual mode, this event occurs before the CellValuePushed event and can be used to create new records in your data store that you can then populate in the CellValuePushed event handler. For more information about handling events, see Consuming Events. Example: The following code example handles the RowsAdded event to increment the number of rows in a virtual DataGridView. The number of rows is used in the CellValueNeeded handler so it knows when to show a blank cell versus an initialized cell for a new row. This example is part of a larger example available in the VirtualMode reference topic.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Sorted Summary: Occurs when the DataGridView control completes a sorting operation. Remarks: This event does not occur when the VirtualMode property is set to true and the control is sorted by an unbound column. For more information about handling events, see Consuming Events. Example: The following code example illustrates how to ensure that the current cell is visible after sorting. This code works only with an unbound DataGridView control. With a DataGridView control bound to an external data source, the current cell is not automatically persisted when sorting. To run this example, paste the following code into a form that contains a DataGridView named dataGridView1. In , you must also connect the Sorted event to the event handler.",0,0,0,0,0,1,1,1,1,0,1,0
"Additional online Documentation: Syntax: public event DataGridViewRowCancelEventHandler UserDeletingRow Summary: Occurs when the user deletes a row from the DataGridView control. Remarks: This event can be canceled to prevent a row deletion from being completed. For more information about handling events, see Consuming Events. Example: The following code example demonstrates how to use the UserDeletingRow event to cancel the deletion of rows from the DataGridView if the starting balance row is included in the selection. This example is part of a larger example available in the SelectionChanged event.",0,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public override int GetChildCount() Return Value Type: System.Int32 The number of child objects belonging to the accessible object. Summary: Returns the number of child objects belonging to an accessible object. Remarks: The GetChildCount method returns the number of visible rows in the DataGridView, plus 1 for the column header row if it is visible and 1 for each visible scroll bar. If there are no columns in the control, this method always returns 0.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int RowIndex { get; } Property Value Type: System.Int32 The index of the row in the DataGridView that contains the coordinates described by the current DataGridView.HitTestInfo. Summary: Gets the index of the row that contains the coordinates described by the current DataGridView.HitTestInfo. Example: The following code example illustrates the use of this property. This example is part of a larger example available in the DataGridView.Columns property reference topic.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public delegate void DataGridViewAutoSizeColumnModeEventHandler( Object sender, DataGridViewAutoSizeColumnModeEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs A DataGridViewAutoSizeColumnModeEventArgs that contains the event data. Summary: Represents the method that will handle the AutoSizeColumnModeChanged event of a DataGridView control. Remarks: The AutoSizeColumnModeChanged event is raised when the value of the AutoSizeMode property of a column in a DataGridView control changes. When you create a DataGridViewAutoSizeColumnModeEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates.",0,0,0,0,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: public delegate void DataGridViewAutoSizeModeEventHandler( Object sender, DataGridViewAutoSizeModeEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Windows.Forms.DataGridViewAutoSizeModeEventArgs A DataGridViewAutoSizeModeEventArgs that contains the event data. Summary: Represents the method that will handle the AutoSizeRowsModeChanged or RowHeadersWidthSizeModeChanged events of a DataGridView. Remarks: The AutoSizeRowsModeChanged event is raised when the value of the AutoSizeRowsMode property of the DataGridView control changes. The RowHeadersWidthSizeModeChanged event is raised when the value of the RowHeadersWidthSizeMode property changes. When you create a DataGridViewAutoSizeModeEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, information about event-handler delegates, see Events and Delegates. Example: The following code demonstrates how to handle the AutoSizeRowsModeChanged event.",1,0,0,0,0,1,1,1,1,0,0,1
"The row heights adjust to fit the contents of all cells in rows currently displayed onscreen, including header cells.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public string ErrorText { get; set; } Property Value Type: System.String The text that describes an error condition associated with the cell. Summary: Gets or sets the text describing an error condition associated with the cell. Remarks: Typically, the ErrorText property is used when handling the CellValidating event of the DataGridView. If the cell's value fails some validation criteria, set the ErrorText property and cancel the commit operation by setting the Cancel property of the DataGridViewCellValidatingEventArgs to true. The text you specify is then displayed by the DataGridView, and the user is prompted to fix the error in the cell's data. When the VirtualMode property of the DataGridView is true, you can provide error text for rows and cells using the RowErrorTextNeeded and CellErrorTextNeeded events. When you assign a different ErrorText string to a cell, the CellErrorTextChanged event of the DataGridView control is raised. Example: The following code example demonstrates how to use this property when handling error conditions in an unbound DataGridView. The AnnotateCell method sets an error message string to the ErrorText property.",1,0,0,1,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public int RowIndex { get; } Property Value Type: System.Int32 The index of the row that contains the cell; -1 if there is no owning row. Summary: Gets the index of the cell's parent row. Remarks: When the RowIndex property returns -1, the cell is either a column header, or the cell's row is shared. For more information about row sharing, see Best Practices for Scaling the Windows Forms DataGridView Control. Example: The following code example illustrates the use of this property.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: protected virtual bool SetValue( int rowIndex, Object value ) Parameters rowIndexType: System.Int32 The index of the cell's parent row.  valueType: System.Object The cell value to set. Return Value Type: System.Boolean true if the value has been set; otherwise, false. Summary: Sets the value of the cell.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public Object Value { get; set; } Property Value Type: System.Object Gets or sets the data to be displayed by the cell. The default is Nothing. Summary: Gets or sets the value associated with this cell. Remarks: When you assign a different value to a cell, the CellValueChanged event of the DataGridView control is raised. The Value property is the actual data object contained by the cell, whereas the FormattedValue property is the formatted representation of the data. The ValueType and FormattedValueType properties correspond to the data types of these values, respectively. When you set the Value property, the specified value is not automatically converted from a formatted, display value to an underlying cell value. For example, the DataGridViewCellStyle in effect for the cell is ignored, so setting Value to DataGridViewCellStyle.NullValue does not result in a property value of DataGridViewCellStyle.DataSourceNullValue. Example: The following code example shows how to update a cell's contents with the Value property. This example is part of a larger code example provided in How to: Manipulate Rows in the Windows Forms DataGridView Control.",1,0,0,0,0,1,0,0,1,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the DataGridViewCell.DataGridViewCellAccessibleObject class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public enum DataGridViewCellBorderStyle Summary: Specifies the border styles that can be applied to the cells of a DataGridView control. Remarks: The CellBorderStyle property of the DataGridView control uses the DataGridViewCellBorderStyle enumeration. To draw borders only between the rows, specify SingleHorizontal, SunkenHorizontal or RaisedHorizontal. To draw borders only between the columns, specify SingleVertical, SunkenVertical or RaisedVertical. To draw borders between the rows and columns, specify Single Sunken or Raised. Example: The following code example illustrates the use of this type.",0,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public DataGridViewCellCollection( DataGridViewRow dataGridViewRow ) Parameters dataGridViewRowType: System.Windows.Forms.DataGridViewRow The DataGridViewRow that owns the collection. Summary: Initializes a new instance of the DataGridViewCellCollection class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected override ArrayList List { get; } Property Value Type: System.Collections.ArrayList ArrayList. Summary: Gets an ArrayList containing DataGridViewCellCollection objects.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: void IList.Clear() Implements IList.Clear Summary: Clears the collection. Remarks: Once you add the row to a control, the number of cells it contains always matches the number of columns in the control, so this method is no longer useful. This member is an explicit interface member implementation. It can be used only when the DataGridViewCellCollection instance is cast to an IList interface.",0,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public delegate void DataGridViewCellContextMenuStripNeededEventHandler( Object sender, DataGridViewCellContextMenuStripNeededEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs A DataGridViewCellContextMenuStripNeededEventArgs that contains the event data. Summary: Represents the method that will handle a CellContextMenuStripNeeded event of a DataGridView. Remarks: The CellContextMenuStripNeeded event occurs only when the DataGridView control DataSource property is set or its VirtualMode property is true. When you handle the CellContextMenuStripNeeded event, the shortcut menu that you specify in the handler is shown whenever the user right-clicks a cell. This is useful when you want to display shortcut menus determined by the current state or value of a cell. The CellContextMenuStripNeeded event also occurs whenever the value of the DataGridViewCell.ContextMenuStrip property is retrieved, either programmatically or when the user right-clicks the cell. You can use the ColumnIndex and RowIndex properties to determine the state or value of a cell, and use this information to set the ContextMenuStrip property. This property is initialized with the value of the cell ContextMenuStrip property, which the event value overrides. Handle the CellContextMenuStripNeeded event when working with large amounts of data to avoid the performance penalties of setting the cell ContextMenuStrip value for multiple cells. For more information, see Best Practices for Scaling the Windows Forms DataGridView Control. You can also specify shortcut menus for individual rows rather than individual cells by setting the row ContextMenuStrip property or handling the DataGridView control's RowContextMenuStripNeeded event. The cell ContextMenuStrip property setting overrides the row ContextMenuStrip property setting, and the CellContextMenuStripNeeded event overrides both the RowContextMenuStripNeeded event and the row ContextMenuStrip property setting. You can specify Nothing for a cell shortcut menu, however, to prevent a row shortcut menu from being overridden. For more information about handling events, see Consuming Events. When you create a DataGridViewCellContextMenuStripNeededEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates. Example: The following code example uses DataGridViewCellContextMenuStripNeededEventArgs to set the context menu without unsharing the row.",1,0,0,0,0,0,1,1,1,0,1,1
"Additional online Documentation: Syntax: public class DataGridViewCellEventArgs : EventArgs Summary: Provides data for DataGridView events related to cell and row operations. Remarks: The DataGridViewCellEventArgs class provides data for the following DataGridView events: CellClick CellContentClick CellContextMenuStripChanged CellEndEdit CellEnter CellErrorTextChanged CellLeave CellMouseEnter CellMouseLeave CellStyleChanged CellToolTipTextChanged CellValidated CellValueChanged RowEnter RowLeave RowValidated Example: The following code example demonstrates using CellMouseEnter and CellMouseLeave event handlers to determine whether a cell can be clicked. The example updates each ToolTipText property value to advertise the current image layout. This code is part of a larger example shown in How to: Work with Image Columns in the Windows Forms DataGridView Control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public Rectangle CellBounds { get; } Property Value Type: System.Drawing.Rectangle A Rectangle that represents the bounds of the current DataGridViewCell. Summary: Get the bounds of the current DataGridViewCell. Example: The following code example illustrates the use of this property. For more information, see How to: Customize the Appearance of Cells in the Windows Forms DataGridView Control.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public int ColumnIndex { get; } Property Value Type: System.Int32 The column index of the current DataGridViewCell. Summary: Gets the column index of the current DataGridViewCell. Remarks: The ColumnIndex property returns -1 when a row header cell is being painted. Example: The following code example demonstrates the use of this member.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public delegate void DataGridViewCellParsingEventHandler( Object sender, DataGridViewCellParsingEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Windows.Forms.DataGridViewCellParsingEventArgs A DataGridViewCellParsingEventArgs that contains the event data. Summary: Represents the method that will handle a CellParsing event of a DataGridView. Remarks: Handle the CellParsing event to provide custom value conversion from a user-specified value to a value in the type specified by the cell ValueType property. When you handle the CellParsing event, you can convert the value yourself or you can customize the default conversion. For example, you can convert the value yourself using the cell ParseFormattedValue method with type converters of your choosing. Alternatively, you can let the default type converters parse the value, but modify the NullValue, DataSourceNullValue, and FormatProvider properties of the object returned by the DataGridViewCellParsingEventArgs.InheritedCellStyle property, which is initialized using the cell InheritedStyle property. When you convert the value yourself, replace the initial, formatted value of the ConvertEventArgs.Value property with the converted value in the type specified by the cell ValueType property. To indicate that no further parsing is necessary, set the DataGridViewCellParsingEventArgs.ParsingApplied property to true. When the event handler completes, if the Value is Nothing or is not of the correct type, or the ParsingApplied property is false, the Value is parsed using the cell ParseFormattedValue method with default type converters. The default implementation of this method parses the value using the NullValue, DataSourceNullValue, and FormatProvider properties of the cell style passed in. If the value is not equal to NullValue, the value is parsed using the FormatProvider property and the type converters passed in. To customize the conversion of a cell value into a formatted value for display, handle the CellFormatting event. For more information about handling events, see Consuming Events. When you create a DataGridViewCellParsingEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates. Example: The following code example demonstrates using DataGridViewCellParsingEventHandler to check the validity of date entries.",1,0,0,1,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public class DataGridViewCellStyleContentChangedEventArgs : EventArgs Summary: Provides data for the CellStyleContentChanged event. Remarks: The CellStyleContentChanged event occurs when a property value of a DataGridViewCellStyle object returned by one of the following properties changes: DataGridViewCell.Style DataGridViewColumn.DefaultCellStyle DataGridViewRow.DefaultCellStyle DataGridView.RowHeadersDefaultCellStyle DataGridView.RowsDefaultCellStyle DataGridView.ColumnHeadersDefaultCellStyle DataGridView.AlternatingRowsDefaultCellStyle DataGridView.DefaultCellStyle If one of these properties is set to a different DataGridViewCellStyle object, however, the corresponding PropertyNameChanged event occurs but the CellStyleContentChanged event does not occur. Use the CellStyleScope property to determine which property has the DataGridViewCellStyle that changed. Use the CellStyle property to retrieve the updated value. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this type. In the example, an event handler reports on the occurrence of the CellStyleContentChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the CellStyleContentChanged event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,0,1,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum DataGridViewCellStyleScopes Summary: Specifies the DataGridView entity that owns the cell style that was changed. Remarks: This enumeration is used by DataGridViewCellStyleContentChangedEventArgs to indicate which part of the DataGridView owns the DataGridViewCellStyle that changed.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected class DataGridViewCheckBoxCellAccessibleObject : DataGridViewCell..::..DataGridViewCellAccessibleObject Summary: Provides information about a DataGridViewCheckBoxCell to accessibility client applications. Remarks: Windows Forms includes built-in accessibility support that allows your application to work with accessibility client applications. Examples of accessibility client applications include screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities. The DataGridViewCheckBoxCell.DataGridViewCheckBoxCellAccessibleObject class inherits from the AccessibleObject class to provide information about a DataGridViewCheckBoxCell to accessibility client applications. Each class that represents a visual part of the DataGridView-such as DataGridViewColumnHeaderCell, DataGridViewRowHeaderCell, DataGridViewRow and DataGridViewCell-also contains a class that inherits from AccessibleObject to provide information and perform actions on behalf of accessibility client applications. There are instances when you will want to provide additional information, such as the name or description of the DataGridView control, to accessibility client applications. There are two ways of providing this additional information. To provide limited accessibility information for existing controls, set the control's AccessibleName and AccessibleDescription property values, which will be reported to accessibility client applications. Note You should change the AccessibleDefaultActionDescription and AccessibleRole property values only in rare situations, such as if you make a DataGridView look like a list. Occasionally, you might require more accessibility information or different accessibility actions to be included with your custom DataGridView or DataGridViewCell. To customize accessibility, you can write your own class that derives from the DataGridView.DataGridViewAccessibleObject or DataGridViewCell.DataGridViewCellAccessibleObject classes and override the CreateAccessibilityInstance method. For example, if you are writing a custom row header cell that implements unique custom actions, such as special hit testing within your cell, you should create a class that inherits from the DataGridViewRowHeaderCell.DataGridViewRowHeaderCellAccessibleObject class and override the CreateAccessibilityInstance method. The DataGridView exposes its data structure by using AccessibleRole values to define the data table hierarchy. For more information on exposing data tables to Microsoft Active Accessibility, see #Exposing Data Tables through Microsoft Active Accessibility# in the MSDN library at http://msdn.microsoft.com/library. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,1,1
"Additional online Documentation: Syntax: [BrowsableAttribute(true)] public override DataGridViewCellStyle DefaultCellStyle { get; set; } Property Value Type: System.Windows.Forms.DataGridViewCellStyle The DataGridViewCellStyle to be applied as the default style. Summary: Gets or sets the column's default cell style. Remarks: The default DataGridViewCellStyle returned by this property has the following initial property values: DataGridViewCellStyle property Default value Alignment DataGridViewContentAlignment.MiddleCenter NullValue CheckState.Indeterminate if the initial ThreeState property value is true; otherwise, false. These values override the value specified in the DefaultCellStyle property of the DataGridView control, but may be overridden by other cell style properties. For more information, see Cell Styles in the Windows Forms DataGridView Control. If the NullValue property of the object returned by the DefaultCellStyle property has a value of false, changing the ThreeState property value to true automatically sets NullValue to Indeterminate. If NullValue has a value of Indeterminate, changing the ThreeState property value to false automatically sets NullValue to false. Example: The following code example demonstrates the use of this property.",1,0,0,0,0,0,0,1,1,0,1,1
"Additional online Documentation: Syntax: public DataGridViewColumnSortMode SortMode { get; set; } Property Value Type: System.Windows.Forms.DataGridViewColumnSortMode A DataGridViewColumnSortMode that specifies the criteria used to order the rows based on the cell values in a column. Summary: Gets or sets the sort mode for the column. Remarks: When a DataGridView control is sorted using a column with a SortMode property value of Automatic, a sorting glyph is automatically displayed in the column header. When the control is sorted using a column with a SortMode property value of Programmatic, you must display the sorting glyph yourself through the SortGlyphDirection property. The default sort mode of a DataGridViewTextBoxColumn is Automatic. The default sort mode for other column types is NotSortable. The SortMode value does not prevent you from sorting a column programmatically, although other restrictions may apply. For more information, see the Sort method. A SortMode property value of NotSortable will not prevent the DataGridView.ColumnHeaderMouseClick event from occurring, but it will prevent the header from changing its appearance when it is clicked. Example: The following code example demonstrates how to use the SortMode property.",1,0,1,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public DataGridViewColumnCollection( DataGridView dataGridView ) Parameters dataGridViewType: System.Windows.Forms.DataGridView The DataGridView that created this collection. Summary: Initializes a new instance of the DataGridViewColumnCollection class for the given DataGridView.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event CollectionChangeEventHandler CollectionChanged Summary: Occurs when the collection changes. Remarks: Examples of collection changes include additions or removals of columns. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CollectionChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridViewColumnCollection named DataGridViewColumnCollection1. Then ensure that the event handler is associated with the CollectionChanged event.",0,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public int IndexOf( DataGridViewColumn dataGridViewColumn ) Parameters dataGridViewColumnType: System.Windows.Forms.DataGridViewColumn The DataGridViewColumn to return the index of. Return Value Type: System.Int32 The index of the given DataGridViewColumn. Summary: Gets the index of the given DataGridViewColumn in the collection.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int ColumnIndex { get; } Property Value Type: System.Int32 The index of the column next to the divider. Summary: The index of the column next to the column divider that was double-clicked. Remarks: This method indicates the column to the left of the double-clicked divider if the DataGridView has a RightToLeft property value of No; otherwise, it indicates the column to the right of the double-clicked divider. The index is the zero-based index of the column in the DataGridView.Columns collection. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DataGridView.ColumnDividerDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the DataGridView.ColumnDividerDoubleClick event.",0,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public FlatStyle FlatStyle { get; set; } Property Value Type: System.Windows.Forms.FlatStyle One of the System.Windows.Forms.FlatStyle values. The default value is Standard. Summary: Gets or sets the flat style appearance of the cell. Remarks: The FlatStyle property affects the behavior and appearance of the drop-down arrow in the cell. To enable cell highlighting when the mouse pointer is over the cell, you must set the DisplayStyle property to ComboBox and the FlatStyle property value to Popup. Setting the FlatStyle property of the owning column also sets the FlatStyle property of every cell in the column and refreshes the column display. To override the specified value for individual cells, set the cell values after you set the column value. Example: The following code example demonstrates the use of the DataGridViewComboBoxColumn.FlatStyle property, which is similar to this property. This example is part of a larger example available in the DataGridViewComboBoxColumn class overview topic.",1,0,1,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: protected override Size GetPreferredSize( Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize ) Parameters graphicsType: System.Drawing.Graphics The Graphics used to draw the cell. cellStyleType: System.Windows.Forms.DataGridViewCellStyle A DataGridViewCellStyle that represents the style of the cell. rowIndexType: System.Int32 The zero-based row index of the cell. constraintSizeType: System.Drawing.Size The cell's maximum allowable size. Return Value Type: System.Drawing.Size A Size that represents the preferred size, in pixels, of the cell. Summary: Calculates the preferred size, in pixels, of the cell.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ListBindableAttribute(false)] public class ObjectCollection : IList, ICollection, IEnumerable Summary: Represents the collection of selection choices in a DataGridViewComboBoxCell. Remarks: You can retrieve DataGridViewComboBoxCell.ObjectCollection objects from the DataGridViewComboBoxCell.Items property or the DataGridViewComboBoxColumn.Items property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,0,1
"Additional online Documentation: Syntax: public bool DisplayStyleForCurrentCellOnly { get; set; } Property Value Type: System.Boolean true if the display style applies only to the current cell; otherwise false. The default is false. Summary: Gets or sets a value indicating whether the DisplayStyle property value applies only to the current cell in the DataGridView control when the current cell is in this column. Remarks: If the DisplayStyleForCurrentCellOnly property value is false, the DisplayStyle property affects all cells in the column; otherwise, the DisplayStyle property affects only the current cell. The DisplayStyle property affects the appearance of cells in the column when they are not in edit mode, and regardless of whether they are read-only. When a cell is in edit mode, it always looks like a ComboBox control. Getting or setting this property gets or sets the DisplayStyleForCurrentCellOnly property of the object returned by the CellTemplate property. Setting this property also sets the DisplayStyleForCurrentCellOnly property of every cell in the column and refreshes the column display. To override the specified value for individual cells, set the cell values after you set the column value.",1,0,0,1,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public class DataGridViewDataErrorEventArgs : DataGridViewCellCancelEventArgs Summary: Provides data for the DataError event. Remarks: Handling the DataError event lets you handle exceptions thrown by code outside your control (for example, by an external data source). Use the Context property to determine the state of the DataGridView at the time of the exception. Use the Exception property to retrieve the exception data. If you want to handle the exception by additional event handlers, set the ThrowException property to true. The ColumnIndex and RowIndex properties normally indicate the cell in which the data error occurred. When the error occurs in an external data source, however, the data source may not provide the column in which the error occurred. In this case, the ColumnIndex property typically indicates the column of the current cell at the time of the error. Example: The following code example demonstrates how to respond to information provided by the DataGridViewDataErrorEventArgs class. This example is part of a larger example available in the DataGridViewComboBoxColumn class overview topic. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public class DataGridViewElement Summary: Provides the base class for elements of a DataGridView control. Remarks: The .NET Framework supplies two specialized classes that derive from DataGridViewElement: DataGridViewCell, which represents individual elements, and DataGridViewBand, which represents a series of grouped subelements. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected void RaiseCellValueChanged( DataGridViewCellEventArgs e ) Parameters eType: System.Windows.Forms.DataGridViewCellEventArgs A DataGridViewCellEventArgs that contains the event data. Summary: Raises the DataGridView.CellValueChanged event.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Returns the bounding rectangle that encloses the cell's content area.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(DataGridViewImageColumn), #DataGridViewImageColumn.bmp#)] public class DataGridViewImageColumn : DataGridViewColumn Summary: Hosts a collection of DataGridViewImageCell objects. Remarks: The DataGridViewImageColumn class is a specialized type of the DataGridViewColumn class used to logically host cells that display images. A DataGridViewImageColumn has an associated DataGridViewImageCell in every DataGridViewRow that intersects it. Each cell is capable of containing an Image or an Icon, depending on the value of the DataGridViewImageCell.ValueIsIcon property. Displaying icons is useful to accommodate images with transparency. By default, empty cells display a default error graphic. To prevent this graphic from appearing for cell values equal to Nothing or DBNull.Value, set the DataGridViewCellStyle.NullValue property of the cell style object returned by the DefaultCellStyle property to Nothing before adding rows to the control. This does not affect the row for new records, however. To prevent the error graphic from appearing in the row for new records when the control AllowUserToAddRows property value is true, you must also either explicitly set the cell value to Nothing in a handler for the control RowsAdded event or set the column CellTemplate property to an instance of a DataGridViewImageCell-derived type with an overridden DefaultNewRowValue property that returns Nothing. The default sort mode for this column type is NotSortable. Notes to Inheritors When you derive from DataGridViewImageColumn and add new properties to the derived class, be sure to override the Clone method to copy the new properties during cloning operations. You should also call the base class's Clone method so that the properties of the base class are copied to the new cell. Example: The following code example demonstrates how to use images to create a TicTacToe game. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,1,0,1,1
"Additional online Documentation: Syntax: protected class DataGridViewLinkCellAccessibleObject : DataGridViewCell..::..DataGridViewCellAccessibleObject Summary: Provides information about a DataGridViewLinkCell control to accessibility client applications. Remarks: Windows Forms includes built-in accessibility support that allows your application to work with accessibility client applications. Examples of accessibility client applications include screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities. The DataGridViewLinkCell.DataGridViewLinkCellAccessibleObject class inherits from the AccessibleObject class to provide information about a DataGridViewLinkCell to accessibility client applications. Each class that represents a visual part of the DataGridView-such as DataGridViewColumnHeaderCell, DataGridViewRowHeaderCell, DataGridViewRow and DataGridViewCell-also contains a class that inherits from AccessibleObject to provide information about the containing class and perform actions on behalf of accessibility client applications. There are instances when you will want to provide additional information, such as the name or description of the DataGridView control, to accessibility client applications. There are two ways of providing this additional information. To provide limited accessibility information for existing controls, set the control's AccessibleName and AccessibleDescription property values, which will be reported to accessibility client applications. Note You should change the AccessibleDefaultActionDescription and AccessibleRole property values only in rare situations, such as if you make a DataGridView look like a list. Occasionally, you might require more accessibility information or different accessibility actions to be included with your custom DataGridView or DataGridViewCell. To customize accessibility, you can write your own class that derives from the DataGridView.DataGridViewAccessibleObject or DataGridViewCell.DataGridViewCellAccessibleObject classes and override the CreateAccessibilityInstance method. For example, if you are writing a custom row header cell that implements unique custom actions, such as special hit testing within your cell, you should create a class that inherits from the DataGridViewRowHeaderCell.DataGridViewRowHeaderCellAccessibleObject class and override the CreateAccessibilityInstance method. The DataGridView exposes its data structure by using AccessibleRole values to define the data table hierarchy. For more information on exposing data tables to Microsoft Active Accessibility, see #Exposing Data Tables through Microsoft Active Accessibility# in the MSDN library at http://msdn.microsoft.com/library. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public DataGridViewLinkCellAccessibleObject( DataGridViewCell owner ) Parameters ownerType: System.Windows.Forms.DataGridViewCell The DataGridViewCell that owns the DataGridViewLinkCell.DataGridViewLinkCellAccessibleObject. Summary: Initializes a new instance of the DataGridViewLinkCell.DataGridViewLinkCellAccessibleObject class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string Text { get; set; } Property Value Type: System.String A String containing the link text. Summary: Gets or sets the link text displayed in a column's cells if UseColumnTextForLinkValue is true. Remarks: The text is visible if the UseColumnTextForLinkValue property is set to true. Otherwise, each cell's link text is populated with the FormattedValue property of each cell. You can override the Text property value for individual cells by setting the cell UseColumnTextForLinkValue property to false after setting the column UseColumnTextForLinkValue property to true.",1,0,0,0,0,0,1,1,0,0,0,0
"The border of the cell should be painted.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] protected class DataGridViewRowAccessibleObject : AccessibleObject Summary: Provides information about a DataGridViewRow to accessibility client applications. Remarks: Windows Forms includes built-in accessibility support that allows your application to work with accessibility client applications. Examples of accessibility client applications include screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities. The DataGridViewRow.DataGridViewRowAccessibleObject class inherits from the AccessibleObject class to provide information about a DataGridViewRow to accessibility client applications. Each class that represents a visual part of the DataGridView-such as DataGridViewColumnHeaderCell, DataGridViewRowHeaderCell, DataGridViewRow and DataGridViewCell-also contains a class that inherits from AccessibleObject to provide information about the containing class and perform actions on behalf of accessibility client applications. There are instances when you will want to provide additional information, such as the name or description of the DataGridView control, to accessibility client applications. There are two ways of providing this additional information. To provide limited accessibility information for existing controls, set the control's AccessibleName and AccessibleDescription property values, which will be reported to accessibility client applications. Note You should change the AccessibleDefaultActionDescription and AccessibleRole property values only in rare situations, such as if you make a DataGridView look like a list. Occasionally, you might require more accessibility information or different accessibility actions to be included with your custom DataGridView or DataGridViewCell. To customize accessibility, you can write your own class that derives from the DataGridView.DataGridViewAccessibleObject or DataGridViewCell.DataGridViewCellAccessibleObject classes and override the CreateAccessibilityInstance method. For example, if you are writing a custom row header cell that implements unique custom actions, such as special hit testing within your cell, you should create a class that inherits from the DataGridViewRowHeaderCell.DataGridViewRowHeaderCellAccessibleObject class and override the CreateAccessibilityInstance method. The DataGridView exposes its data structure by using AccessibleRole values to define the data table hierarchy. For more information on exposing data tables to Microsoft Active Accessibility, see #Exposing Data Tables through Microsoft Active Accessibility# in the MSDN library at http://msdn.microsoft.com/library. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class DataGridViewRowCancelEventArgs : CancelEventArgs Summary: Provides data for the UserDeletingRow event of a DataGridView. Remarks: To cancel the deletion of a row in a UserDeletingRow event handler, set the Cancel property to true. For more information about handling events, see Consuming Events. Example: The following code example illustrates the use of this type. This example is part of a larger example available in How to: Implement Virtual Mode in the Windows Forms DataGridView Control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public event CollectionChangeEventHandler CollectionChanged Summary: Occurs when the contents of the collection change. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CollectionChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridViewRowCollection named DataGridViewRowCollection1. Then ensure that the event handler is associated with the CollectionChanged event.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Gets the first row in the collection that meets the specified criteria.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public int RowIndex { get; } Property Value Type: System.Int32 The index of the row above the divider. Summary: The index of the row above the row divider that was double-clicked. Remarks: The index is the zero-based index of the row in the DataGridView.Rows collection. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DataGridView.RowDividerDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the DataGridView.RowDividerDoubleClick event.",0,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: public class DataGridViewRowErrorTextNeededEventArgs : EventArgs Summary: Provides data for the RowErrorTextNeeded event of a DataGridView control. Remarks: The RowErrorTextNeeded event occurs only when the DataGridView control DataSource property is set or its VirtualMode property is true. Handling the RowErrorTextNeeded event is useful when you want to determine the error for a row depending on its state and the values it contains. When you handle the RowErrorTextNeeded event and specify error text in the handler, an error glyph appears in the row header unless the DataGridView.ShowRowErrors property is set to false. When the user moves the mouse pointer over the error glyph, the error text appears in a ToolTip. The RowErrorTextNeeded event also occurs whenever the value of the DataGridViewRow.ErrorText property is retrieved. You can use the RowIndex property to determine the state or value of a row, and use this information to change or modify the ErrorText property. This property is initialized with the value of the row ErrorText property, which the event value overrides. Handle the RowErrorTextNeeded event when working with large amounts of data to avoid the performance penalties of setting the row ErrorText value for multiple rows. For more information, see Best Practices for Scaling the Windows Forms DataGridView Control. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this type. In the example, an event handler reports on the occurrence of the RowErrorTextNeeded event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the RowErrorTextNeeded event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public delegate void DataGridViewRowErrorTextNeededEventHandler( Object sender, DataGridViewRowErrorTextNeededEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs A DataGridViewRowErrorTextNeededEventArgs that contains the event data. Summary: Represents the method that will handle the RowErrorTextNeeded event of a DataGridView. Remarks: The RowErrorTextNeeded event occurs only when the DataGridView control DataSource property is set or its VirtualMode property is true. Handling the RowErrorTextNeeded event is useful when you want to determine the error for a row depending on its state and the values it contains. When you handle the RowErrorTextNeeded event and specify error text in the handler, an error glyph appears in the row header unless the DataGridView.ShowRowErrors property is set to false. When the user moves the mouse pointer over the error glyph, the error text appears in a ToolTip. The RowErrorTextNeeded event also occurs whenever the value of the DataGridViewRow.ErrorText property is retrieved. You can use the DataGridViewRowErrorTextNeededEventArgs.RowIndex property to determine the state or value of a row, and use this information to change or modify the DataGridViewRowErrorTextNeededEventArgs.ErrorText property. This property is initialized with the value of the row ErrorText property, which the event value overrides. Handle the RowErrorTextNeeded event when working with large amounts of data to avoid the performance penalties of setting the row ErrorText value for multiple rows. For more information, see Best Practices for Scaling the Windows Forms DataGridView Control. For more information about handling events, see Consuming Events. When you create a DataGridViewRowErrorTextNeededEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates.",1,0,0,0,0,0,1,1,0,0,1,1
"Additional online Documentation: Syntax: public class DataGridViewRowHeightInfoPushedEventArgs : HandledEventArgs Summary: Provides data for the RowHeightInfoPushed event of a DataGridView. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this type. In the example, an event handler reports on the occurrence of the RowHeightInfoPushed event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridView named DataGridView1. Then ensure that the event handler is associated with the RowHeightInfoPushed event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public delegate void DataGridViewRowHeightInfoPushedEventHandler( Object sender, DataGridViewRowHeightInfoPushedEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs A DataGridViewRowHeightInfoPushedEventArgs that contains the event data. Summary: Represents the method that will handle the RowHeightInfoPushed event of a DataGridView. Remarks: When you create a DataGridViewRowHeightInfoPushedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates.",1,0,0,0,0,0,0,1,0,0,1,1
"Additional online Documentation: Syntax: public DataGridViewRowPostPaintEventArgs( DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow ) Parameters dataGridViewType: System.Windows.Forms.DataGridView The DataGridView that owns the row that is being painted. graphicsType: System.Drawing.Graphics The Graphics used to paint the DataGridViewRow. clipBoundsType: System.Drawing.Rectangle A Rectangle that represents the area of the DataGridView that needs to be painted. rowBoundsType: System.Drawing.Rectangle A Rectangle that contains the bounds of the DataGridViewRow that is being painted. rowIndexType: System.Int32 The row index of the cell that is being painted. rowStateType: System.Windows.Forms.DataGridViewElementStates A bitwise combination of DataGridViewElementStates values that specifies the state of the row. errorTextType: System.String An error message that is associated with the row. inheritedRowStyleType: System.Windows.Forms.DataGridViewCellStyle A DataGridViewCellStyle that contains formatting and style information about the row. isFirstDisplayedRowType: System.Boolean true to indicate whether the current row is the first row currently displayed in the DataGridView; otherwise, false. isLastVisibleRowType: System.Boolean true to indicate whether the current row is the last row in the DataGridView that has the Visible property set to true; otherwise, false. Summary: Initializes a new instance of the DataGridViewRowPostPaintEventArgs class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public void Clear() Summary: Clears the collection. Remarks: This method is not relevant for this class. You cannot change the DataGridViewSelectedCellCollection class directly. To clear the DataGridViewSelectedCellCollection, use the DataGridView.ClearSelection method.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(DataGridViewTextBoxColumn), #DataGridViewTextBoxColumn.bmp#)] public class DataGridViewTextBoxColumn : DataGridViewColumn Summary: Hosts a collection of DataGridViewTextBoxCell cells. Remarks: The DataGridViewTextBoxColumn class is a specialized type of DataGridViewColumn class used to logically host cells that enable displaying and editing of text strings. A DataGridViewTextBoxColumn has an associated DataGridViewTextBoxCell object in every DataGridViewRow that intersects it. When a DataGridViewTextBoxCell becomes activated, it supplies a DataGridViewTextBoxEditingControl control to handle user input. The sort mode for this column type defaults to Automatic. Notes to Inheritors When you derive from DataGridViewTextBoxColumn and add new properties to the derived class, be sure to override the Clone method to copy the new properties during cloning operations. You should also call the base class's Clone method so that the properties of the base class are copied to the new cell. Example: The following code example illustrates the use of this type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public override string ToString() Return Value Type: System.String A String that describes the column. Summary: Gets a string that describes the column.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public virtual void SetImage( Image image ) Parameters imageType: System.Drawing.Image The Image to add to the data object. Summary: Adds an Image to the data object in the Bitmap format. Remarks: To retrieve image data from the data object, first use the ContainsImage method to determine whether the data object contains image data before retrieving it with the GetImage method.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Adds text data to the data object.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] int IDataObject.EnumDAdvise( out IEnumSTATDATA enumAdvise ) Parameters enumAdviseType: System.Runtime.InteropServices.ComTypes.IEnumSTATDATA% When this method returns, contains an IEnumSTATDATA that receives the interface pointer to the new enumerator object. If the implementation sets enumAdvise to Nothing, there are no connections to advisory sinks at this time. This parameter is passed uninitialized. Return Value Type: System.Int32 This method supports the standard return value E_OUTOFMEMORY, as well as the following: Value 	 Description S_OK 	 The enumerator object is successfully instantiated or there are no connections. OLE_E_ADVISENOTSUPPORTED 	 This object does not support advisory notifications. Implements IDataObject.EnumDAdvise(IEnumSTATDATA) Summary: Creates an object that can be used to enumerate the current advisory connections. Remarks: This member is an explicit interface member implementation. It can be used only when the DataObject is cast to an IDataObject interface.",0,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] void IDataObject.SetData( ref FORMATETC pFormatetcIn, ref STGMEDIUM pmedium, bool fRelease ) Parameters pFormatetcInType: System.Runtime.InteropServices.ComTypes.FORMATETC% A FORMATETC structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium. pmediumType: System.Runtime.InteropServices.ComTypes.STGMEDIUM% A STGMEDIUM structure, passed by reference, that defines the storage medium in which the data is being passed. fReleaseType: System.Boolean true to specify that the data object called, which implements SetData, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only. Implements IDataObject.SetData(FORMATETC, STGMEDIUM, Boolean) Summary: Transfers data to the object that implements this method. This method is called by an object that contains a data source. Remarks: This member is an explicit interface member implementation. It can be used only when the DataObject is cast to an IDataObject interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class DateBoldEventArgs : EventArgs Summary: Provides data for events that are internal to the MonthCalendar control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public DateRangeEventArgs( DateTime start, DateTime end ) Parameters startType: System.DateTime The first date/time value in the range that the user has selected.  endType: System.DateTime The last date/time value in the range that the user has selected. Summary: Initializes a new instance of the DateRangeEventArgs class. Remarks: The Start and End property values are set by the start and end parameter values of this constructor.",1,0,0,0,1,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public delegate void DateRangeEventHandler( Object sender, DateRangeEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Windows.Forms.DateRangeEventArgs A DateRangeEventArgs that contains the event data. Summary: Represents the method that will handle the DateChanged or DateSelected event of a MonthCalendar. Remarks: When you create a DateRangeEventArgs delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see Events and Delegates. Example: The following example displays a form containing a MonthCalendar control that displays one calendar year. The example demonstrates setting properties like BackColor, ForeColor, TitleBackColor, TitleForeColor, CalendarDimensions, and TrailingForeColor to customize the look of the calendar control. Other properties like AnnuallyBoldedDates, BoldedDates, and MonthlyBoldedDates are set to customize which dates are bolded. The example also sets properties to change the calendar format, including FirstDayOfWeek, MaxDate, MinDate, and MaxSelectionCount. The DateSelected and DateChanged events are also handled and their status displayed on the form.",0,1,0,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public Color CalendarTrailingForeColor { get; set; } Property Value Type: System.Drawing.Color A Color that represents the foreground color of the calendar trailing dates. Summary: Gets or sets the foreground color of the calendar trailing dates. Remarks: When a DateTimePicker is created, this property is initially set equal to the DefaultTrailingForeColor field value. The trailing dates are the ending dates from the previous month or the beginning dates from the next month used to fill the calendar. Starting with Windows Vista and depending on the theme, setting this property might not change the appearance of the calendar. For example, if Windows is set to use the Aero theme, setting this property has no effect. This is because an updated version of the calendar is rendered with an appearance that is derived at run time from the current operating system theme. If you want to use this property and enable the earlier version of the calendar, you can disable visual styles for your application. Disabling visual styles might affect the appearance and behavior of other controls in your application. To disable visual styles in Visual Basic, open the Project Designer and uncheck the Enable XP visual styles check box. To disable visual styles in C\#, open Program.cs and comment out Application.EnableVisualStyles();. For more information about visual styles, see How to: Enable Windows XP Visual Styles.",1,1,0,0,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event MouseEventHandler MouseDoubleClick Summary: Occurs when the control is double-clicked with the mouse. Remarks: The event is not relevant for this class.",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event PaintEventHandler Paint Summary: Occurs when the control is redrawn.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler ValueChanged Summary: Occurs when the Value property changes. Remarks: User input is validated before this event is raised. This event is not raised when the entered date is earlier than MinDateTime or later than MaxDateTime. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ValueChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DateTimePicker named DateTimePicker1. Then ensure that the event handler is associated with the ValueChanged event.",1,0,0,0,0,0,0,1,1,0,1,1
"Additional online Documentation: Syntax: public enum DateTimePickerFormat Summary: Specifies the date and time format the DateTimePicker control displays. Remarks: This enumeration is used by members such as DateTimePicker.Format. Note The actual date/time formats are determined by the date, time, and regional settings set in the user's operating system. Example: The following code example demonstrates initializing a DateTimePicker object by setting the Format to a DateTimePickerFormat value. To run this example paste the following code in a form and call InitializeDateTimePicker from the form's constructor or Load event-handling method.",1,0,0,0,0,0,1,1,1,0,0,1
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] public enum DialogResult Summary: Specifies identifiers to indicate the return value of a dialog box. Remarks: The Button.DialogResult property and the Form.ShowDialog method use this enumeration. Example: The following code example demonstrates how to display a MessageBox with the options supported by this overload of Show. After verifying that a string variable, ServerName, is empty, the example displays a MessageBox, offering the user the option to cancel the operation. If the Show method's return value evaluates to Yes, the form that displayed the MessageBox is closed.",1,0,0,0,0,0,1,0,1,0,0,0
"The dialog box return value is Yes (usually sent from a button labeled Yes).",0,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: [DefaultBindingPropertyAttribute(#SelectedItem#)] [ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)] [ComVisibleAttribute(true)] public class DomainUpDown : UpDownBase Summary: Represents a Windows spin box (also known as an up-down control) that displays string values. Remarks: A DomainUpDown control displays a single string value that is selected from an Object collection by clicking the up or down buttons of the control. The user can also enter text in the control, unless the ReadOnly property is set to true (the string typed in must match an item in the collection to be accepted). When an item is selected, the object is converted to a string value so it can be displayed in the spin box. To create a collection of objects to display in the DomainUpDown control, you can add or remove the items individually by using the Add and Remove methods. This can be called in an event handler, such as the Click event of a button. The object collection can be sorted alphabetically by setting the Sorted property to true. When the Wrap property is set to true, if you scroll past the last or first object in the collection, the list will start over with the first or last object respectively and appear to roll in a continuous list. When the UpButton or DownButton methods are called, either in code or by the click of the up or down buttons, UpdateEditText is called to update the control with the new string. If UserEdit is set to true, the string is matched to one of the values in the collection prior to updating the control's text display. Example: The following code example creates and initializes a DomainUpDown control. The example allows you to set some of its properties and create a collection of strings for display in the spin box. The code assumes that a TextBox, CheckBox, and Button have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named myCounter. You can enter a string in the text box and add it to the Items collection when the button is clicked. By clicking the check box, you can toggle the Sorted property and observe the difference in the collection of items in the spin box. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public override string Value { get; } Property Value Type: System.String The Name property of the DomainUpDown.DomainItemAccessibleObject. Summary: Gets the value of an accessible object.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override AccessibleObject GetChild( int index ) Parameters indexType: System.Int32 The zero-based index of the accessible child. Return Value Type: System.Windows.Forms.AccessibleObject An AccessibleObject that represents the accessible child corresponding to the specified index. Summary: Gets the accessible child corresponding to the specified index. Remarks: The DomainUpDown.DomainUpDownAccessibleObject contains child accessible objects that correspond to the different parts of the DomainUpDown control. The following table shows the values of index and the child accessible object the GetChild method returns. Value Description 0 An accessible object for the text box 1 An accessible object for the up and down buttons. 2 An accessible object for the Items property of the DomainUpDown control.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] public enum DragAction Summary: Specifies how and if a drag-and-drop operation should continue. Remarks: This enumeration is used by QueryContinueDragEventArgs. Example: The following example demonstrates a drag-and-drop operation between two ListBox controls. The example calls the DoDragDrop method when the drag action starts. The drag action starts if the mouse has moved more than SystemInformation.DragSize from the mouse location during the MouseDown event. The IndexFromPoint method is used to determine the index of the item to drag during the MouseDown event. The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, 3dwarro.cur and 3dwno.cur, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the UseCustomCursorsCheck CheckBox is checked. The custom cursors are set in the GiveFeedback event handler. The keyboard state is evaluated in the DragOver event handler for the right ListBox, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the ListBox where the drop would occur is also determined during the DragOver event. If the data to drop is not a String, then the DragEventArgs.Effect is set to DragDropEffects.None. Finally, the status of the drop is displayed in the DropLocationLabel Label. The data to drop for the right ListBox is determined in the DragDrop event handler and the String value is added at the appropriate place in the ListBox. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the QueryContinueDrag event handler. This code excerpt demonstrates using the DragAction enumeration. See the DoDragDrop method for the complete code example.",1,0,0,0,0,0,1,0,1,0,0,0
"The item is checked. Only menu controls use this value.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public delegate void DrawListViewColumnHeaderEventHandler( Object sender, DrawListViewColumnHeaderEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Windows.Forms.DrawListViewColumnHeaderEventArgs A DrawListViewColumnHeaderEventArgs that contains the event data. Summary: Represents the method that will handle the DrawColumnHeader event of a ListView. Remarks: When you create a DrawListViewColumnHeaderEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Syntax: public class DrawListViewSubItemEventArgs : EventArgs Summary: Provides data for the ListView.DrawSubItem event. Remarks: The ListView.DrawSubItem event enables you to customize (or owner-draw) the appearance of a ListView control in the details view. The ListView.DrawSubItem event is raised by a ListView control when its ListView.OwnerDraw property is set to true and its View property is set to Details. The DrawListViewSubItemEventArgs passed to the event handler contains information about the ListViewItem.ListViewSubItem to draw and also provides methods to help you draw the subitem. Use the ItemState or Item properties to retrieve information about the parent item of the subitem to draw. To retrieve the ListViewItem.ListViewSubItem itself, use the SubItem property. Use the Header property to retrieve the ColumnHeader representing the header of the column in which the subitem is displayed. Use the Graphics property to do the actual drawing within the area specified by the Bounds property. To draw standard ListView elements that do not need customization, use the DrawBackground, DrawText, and DrawFocusRectangle methods. Use the DrawDefault property when you want the operating system to draw the subitem. This is useful when you want to customize only specific subitems. Note To avoid issues with graphics flickering when owner drawing, override the ListView control and set the DoubleBuffered property to true. This feature is available only on Windows XP and the Windows Server 2003 family when your application calls the Application.EnableVisualStyles method. Example: The following code example demonstrates how to provide custom drawing for a ListView control. The ListView control in the example has a gradient background. Subitems with negative values have a red foreground and a black background. A handler for the ListView.DrawItem event draws the background for entire items. A handler for the ListView.DrawSubItem event draws the text values and both the text and background for subitems that have negative values. A handler for the DrawColumnHeader event draws each column header. A ContextMenu component provides a way to switch between the details view and the list view. In the list view, only the ListView.DrawItem event is fired. In this case, the text and background are both drawn in the ListView.DrawItem event handler. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public delegate void DrawTreeNodeEventHandler( Object sender, DrawTreeNodeEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Windows.Forms.DrawTreeNodeEventArgs A DrawTreeNodeEventArgs that contains the event data. Summary: Represents the method that will handle the DrawNode event of a TreeView. Remarks: When you create a DrawTreeNodeEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see Events and Delegates.",1,1,0,0,0,0,0,1,0,0,1,0
"Additional online Documentation: Syntax: public string Filter { get; set; } Property Value Type: System.String The file filtering options available in the dialog box. Summary: Gets or sets the current file name filter string, which determines the choices that appear in the #Save as file type# or #Files of type# box in the dialog box. Remarks: For each filtering option, the filter string contains a description of the filter, followed by the vertical bar (|) and the filter pattern. The strings for different filtering options are separated by the vertical bar. The following is an example of a filter string: Text files (*.txt)|*.txt|All files (*.*)|*.* You can add several filter patterns to a filter by separating the file types with semicolons, for example: Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.* Use the FilterIndex property to set which filtering option is shown first to the user. Example: The following code example uses the OpenFileDialog implementation of FileDialog and illustrates creating, setting of properties, and showing the dialog box. The example uses the Filter and FilterIndex properties to provide a list of filters for the user. The example requires a form with a Button placed on it and the System.IO namespace added to it.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class FileDialogCustomPlace Summary: Represents an entry in a FileDialog custom place collection for Windows Vista. Remarks: The default open and save dialog boxes on Windows Vista have an area on the left side of the dialog box titled Favorite Links. This area is called custom places. This class represents a custom place. On Windows XP or Windows Server 2003, this class does not have any effect. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,0,1,1,0
"Additional online Documentation: Syntax: public class FileDialogCustomPlacesCollection : Collection<FileDialogCustomPlace> Summary: Represents a collection of Windows Vista custom places for the FileDialog class. Remarks: On Windows XP or Windows Server 2003, this class does not have any effect. Example: The following code example demonstrates how to use the FileDialogCustomPlacesCollection. To run this example, paste the following code into a Windows Form and call InitializeDialogAndButton from the form's constructor or Load event-handling method. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public enum FlatStyle Summary: Specifies the appearance of a control. Remarks: This enumeration is used by members such as ButtonBase.FlatStyle, GroupBox.FlatStyle, and Label.FlatStyle. In the case of the Popup style button, this enumeration controls some behavior as well as appearance. The Popup style control initially appears Flat until the mouse pointer moves over it. When the mouse pointer moves over the Popup control, it appears as a Standard style control until the mouse pointer is moved off of it again. If the System style is used, the appearance of the control is determined by the user's operating system and the following property values will be ignored: Control.BackgroundImage, ImageAlign, Image, ImageIndex, ImageList, and TextAlign. In addition, the Control.BackColor property will be ignored for button controls. If supported, users can change the appearance of controls by adjusting the appearance settings of their operating system. Note When the FlatStyle property of the RadioButton and CheckBox classes is set to FlatStyle.System, the control is drawn by the user's operating system and the check alignment is based upon the CheckAlign and ButtonBase.TextAlign property values. The CheckAlign property value is not changed, but the appearance of the control can be affected. The check box is horizontally aligned with either the left or right edge of the control (a left or center alignment appears left aligned, right remains unchanged), and vertically aligned the same as the descriptive text. For example, if you have a CheckBox control with a CheckAlign property value of ContentAlignment.MiddleCenter and a TextAlign property value of ContentAlignment.TopRight, and the FlatStyle property value is set to FlatStyle.System, the check box alignment will appear to be ContentAlignment.TopLeft while the text alignment remains unchanged. Caution Setting the FlatStyle property to FlatStyle.System is not advisable if you need to display an image on a control, display an image as a control's background, or perform precise text alignment. Windows XP Home Edition, Windows XP Professional x64 Edition, Windows Server 2003 Platform Note: To make your Windows Forms application support Windows XP visual styles, be sure to set the FlatStyle property to FlatStyle.System. If you are using version 1.0 of the .NET Framework, include a manifest with your executable. A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file. For an example of a manifest, see the Example section. For more information about using the visual styles available in Windows XP, see the topic #Using Windows XP Visual Styles# in the #User Interface Design and Development# section of the MSDN Library. Example: The following is an example of a manifest to allow your application to support the visual styles available in Windows XP if you are using version 1.0 of the .NET Framework. The manifest can be added to your application as a resource or as a stand-alone text file. The manifest file resides in the same directory as the executable file, and the name of the text file must be the complete name of the executable file with an additional file name extension of.manifest. For example, the manifest file for MyApp.exe would be MyApp.exe.manifest. This example assumes that the FlatStyle properties of the controls in your application are set to FlatStyle.System.",1,1,1,0,0,1,1,0,1,1,0,0
"Additional online Documentation: Syntax: public event EventHandler Apply Summary: Occurs when the user clicks the Apply button in the font dialog box. Remarks: Every time the Apply button is clicked, another Apply event is raised. For more information about handling events, see Consuming Events. Example: The following code example demonstrates using the MinSize, MaxSize, ShowEffects and FontMustExist members and handling the Apply event. To run this example paste the following code in a form containing a FontDialog named FontDialog1 and a Button named Button1.",0,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Activated Summary: Occurs when the form is activated in code or by the user. Remarks: Note When the application is active and has multiple forms, the active form is the form with the input focus. A form that is not visible cannot be the active form. The simplest way to activate a visible form is to click it or use an appropriate keyboard combination. To activate a form at run time using code, call the Activate method. You can use this event for tasks such as updating the contents of the form based on changes made to the form's data when the form was not activated. For more information about handling events, see Consuming Events. Example: The following code example demonstrates how to use the SetDesktopLocation, Closed, Load, Activated, and Activate members. To run the example, paste the following code in a form called Form1 containing a Button called Button1 and two Label controls called Label1 and Label2.",0,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public event EventHandler MaximizedBoundsChanged Summary: Occurs when the value of the MaximizedBounds property has changed. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MaximizedBoundsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type Form named Form1. Then ensure that the event handler is associated with the MaximizedBoundsChanged event.",0,0,0,0,0,0,0,1,1,0,1,1
"Additional online Documentation: Syntax: public event EventHandler MinimumSizeChanged Summary: Occurs when the value of the MinimumSize property has changed. Remarks: For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MinimumSizeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type Form named Form1. Then ensure that the event handler is associated with the MinimumSizeChanged event.",0,0,0,0,0,1,0,1,1,0,1,0
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler Shown Summary: Occurs whenever the form is first displayed. Remarks: The Shown event is only raised the first time a form is displayed; subsequently minimizing, maximizing, restoring, hiding, showing, or invalidating and repainting will not raise this event. For more information about the order of events of a form, see Order of Events in Windows Forms. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Shown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type Form named Form1. Then ensure that the event handler is associated with the Shown event.",0,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler TabStopChanged Summary: Occurs when the TabStop property changes.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected override void UpdateDefaultButton() Summary: Updates which button is the default button. Remarks: The UpdateDefaultButton method determines which button on the form raises its Click event when the user presses ENTER, according to the following priority: If the ActiveControl property implements the IButtonControl interface, that control is the default button. The AcceptButton property is the default button.",1,1,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public delegate void FormClosingEventHandler( Object sender, FormClosingEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Windows.Forms.FormClosingEventArgs A FormClosingEventArgs that contains the event data. Summary: Represents the method that handles a FormClosing event. Remarks: The FormClosing event occurs just before a form is closed, either by the user, through the user interface (UI), or programmatically, through calls to methods such as Close in the Form class, or Exit in the Application class. This event can be canceled. When you create a FormClosingEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see Events and Delegates.",0,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] public enum FormStartPosition Summary: Specifies the initial position of a form. Remarks: This enumeration is used by the StartPosition property of the Form class. It represents the different start positions of the form. The default start position is WindowsDefaultLocation. Example: In this example, you change the form's start position to the center of the screen and display the position information using a label. This example assumes that you have already created a Form named Form1.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: protected void OnCollectionChanged( CollectionChangeEventArgs e ) Parameters eType: System.ComponentModel.CollectionChangeEventArgs A CollectionChangeEventArgs that contains the event data event. Summary: Raises the CollectionChanged event. Remarks: Raising an event invokes the event handler through a delegate. For more information, see Raising an Event. Notes to Inheritors When overriding OnCollectionChanged in a derived class, be sure to call the base class's OnCollectionChanged method.",0,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class GridItem Summary: Implements one row in a PropertyGrid. Remarks: Grid items represent the hierarchy of the view into a PropertyGrid. You can use a GridItem to obtain information about the grid's state and contents. GridItem objects should not be cached because they represent a snapshot of the state of the PropertyGrid at the time they are accessed, and grid activity might dispose them. The PropertyGrid often recreates GridItem objects internally without changing the view to the user. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class GridItemCollection : ICollection, IEnumerable Summary: Contains a collection of GridItem objects. Remarks: This class represents a collection of GridItem objects stored in a PropertyGrid. You can retrieve a specific GridItem by using either an index into the collection or the label of a grid item in the collection that you access through the indexer. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,1
"Additional online Documentation: Summary: Gets a GridItem from the collection.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ListBindableAttribute(false)] public class GridTableStylesCollection : BaseCollection, IList, ICollection, IEnumerable Summary: Represents a collection of DataGridTableStyle objects in the DataGrid control. Remarks: The GridTableStylesCollection contains DataGridTableStyle objects that allows the DataGrid control to display a customized grid style for each DataTable in a DataSet. On the DataGrid control, the TableStyles property returns the GridTableStylesCollection. By default, the GridTableStylesCollection does not contain any DataGridTableStyle objects. Instead, the DataGrid displays each table using default settings for color, width, and formatting. All columns of each table are displayed. When a DataGridTableStyle is added to the collection, the DataGrid uses the MappingName to determine which object supplies the data for the grid. For example, if the data source is a DataSet that contains three DataTable objects, the MappingName must match the TableName of one of the objects. If the MappingName does not match any of the TableName values, the default settings will be used to display data for each table, and the DataGridTableStyle settings will be ignored. Caution Always create DataGridColumnStyle objects and add them to the GridColumnStylesCollection before adding DataGridTableStyle objects to the GridTableStylesCollection. When you add an empty DataGridTableStyle with a valid MappingName value to the collection, DataGridColumnStyle objects are automatically generated for you. Consequently, an exception will be thrown if you try to add new DataGridColumnStyle objects with duplicate MappingName values to the GridColumnStylesCollection. Alternatively, clear the GridColumnStylesCollection using the Clear method. Example: The following code example creates two DataGridTableStyle objects and adds each to the GridTableStylesCollection returned by the TableStyles property of a DataGrid control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler Click Summary: Occurs when the user clicks the GroupBox control.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class HScrollProperties : ScrollProperties Summary: Provides basic properties for the HScrollBar ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public string DefaultEncoding { get; } Property Value Type: System.String The String representing the encoding that the browser uses when the page is first displayed. Summary: Gets the encoding used by default for the current document. Remarks: The default encoding is the encoding the managed HTML Document Object Model (DOM) will attempt to use when the page is initially loaded. This encoding is derived either from Internet Explorer's Encoding settings, or from a META tag embedded within the page.",1,0,0,0,0,0,0,0,0,0,1,0
"Additional online Documentation: Syntax: public void Write( string text ) Parameters textType: System.String The HTML text to write into the document. Summary: Writes a new HTML page. Remarks: All calls to Write should be preceded by a call to OpenNew, which will clear the current document and all of its variables. Your calls to Write will create a new HTML document in its place. To change only a specific portion of the document, obtain the appropriate HtmlElement and set its InnerHtml property. It is recommended that you write an entire valid HTML document using the Write method, including HTML and BODY tags. However, if you write just HTML elements, the Document Object Model (DOM) will supply these elements for you. Example: The following code example opens a new HtmlDocument and writes in a new HTML file.",1,0,1,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public event HtmlElementEventHandler Drag Summary: Occurs when the user drags text to various locations. Remarks: This event occurs when text is dragged to the following locations: Within or between HTML pages hosted in the WebBrowser control or Internet Explorer To another application To the Windows desktop You can cancel the default action for a Drag event on an element by setting the ReturnValue property of the HtmlElementEventArgs class to true. A Drag event on an element will also occur on that element's parent elements and on the HtmlDocument class itself, unless you set the BubbleEvent property of the HtmlElementEventArgs class to true. For more information about the difference between canceling event bubbling and canceling the default action on an event, see About the DHTML Object Model. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Drag event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type HtmlElement named HtmlElement1. Then ensure that the event handler is associated with the Drag event.",0,0,0,0,0,0,1,1,1,0,1,0
"Additional online Documentation: Syntax: public event HtmlElementEventHandler DragLeave Summary: Occurs when the user is no longer dragging an item over this element. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type HtmlElement named HtmlElement1. Then ensure that the event handler is associated with the DragLeave event.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public event HtmlElementEventHandler KeyDown Summary: Occurs when the user presses a key on the keyboard. Remarks: KeyDown occurs before KeyPress, which in turns occurs before KeyUp. You can cancel the default action for a KeyDown event on an element by setting the ReturnValue property of the HtmlElementEventArgs class to true. A KeyDown event on an element will also occur on that element's parent elements and on the HtmlDocument class itself, unless you set the BubbleEvent property of the HtmlElementEventArgs class to true. For more information about the difference between canceling event bubbling and canceling the default action on an event, see About the DHTML Object Model. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type HtmlElement named HtmlElement1. Then ensure that the event handler is associated with the KeyDown event.",0,0,0,0,0,1,0,1,1,0,1,0
"Additional online Documentation: Syntax: public event HtmlElementEventHandler KeyUp Summary: Occurs when the user releases a key on the keyboard. Remarks: KeyUp occurs after KeyPress, which occurs after KeyDown. You cannot cancel this event. A KeyUp event on an element will also occur on that element's parent elements and on the HtmlDocument class itself, unless you set the BubbleEvent property of the HtmlElementEventArgs class to true. For more information about the difference between canceling event bubbling and canceling the default action on an event, see About the DHTML Object Model. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type HtmlElement named HtmlElement1. Then ensure that the event handler is associated with the KeyUp event.",1,0,0,0,0,0,0,1,1,0,1,0
"Additional online Documentation: Syntax: public event HtmlElementEventHandler MouseMove Summary: Occurs when the user moves the mouse cursor across the element. Remarks: You cannot cancel this event. A MouseMove event on an element will also occur on that element's parent elements and on the HtmlDocument class itself, unless you set the BubbleEvent property of the HtmlElementEventArgs class to true. For more information about the difference between canceling event bubbling and canceling the default action on an event, see About the DHTML Object Model. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type HtmlElement named HtmlElement1. Then ensure that the event handler is associated with the MouseMove event.",1,0,1,0,0,1,0,1,1,0,1,0
"Additional online Documentation: Syntax: public string Style { get; set; } Property Value Type: System.String A string consisting of all of the element's styles Summary: Gets or sets a comma-delimited list of styles for the current element. Remarks: The HTML Document Object Model (DOM) uses styles as defined in the World Wide Web Consortiums Cascading Style Sheets specification to control the display of an element. Styles in the Style property take the form of colon-delimited name-value pairs, with each pair separated by a semicolon, as follows: style-name1:value1;...;[style-nameN:valueN;] To set the font for a DIV element to 14-point Times New Roman bold, for example, you would assign the following string: font-face:Times New Roman;font-size:14px;font-weight:bold; For a full list of all available styles in the HTML DOM, see STYLE Attribute.",1,1,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public sealed class HtmlElementErrorEventArgs : EventArgs Summary: Provides data for the Error event. Example: The following code example demonstrates how to suppress a script error and display your own custom dialog box. This code example requires that your application host a WebBrowser control named webBrowser1. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public string Description { get; } Property Value Type: System.String The descriptive string corresponding to the error. Summary: Gets the descriptive string corresponding to the error. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HtmlWindow.Error event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type HtmlWindow named HtmlWindow1. Then ensure that the event handler is associated with the HtmlWindow.Error event.",1,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] public sealed class HtmlHistory : IDisposable Summary: Manages the list of documents and Web sites the user has visited within the current session. Remarks: The managed HTML Document Object Model (DOM) keeps track of the sites that a user has visited within a given session. A session is defined as the length of time from when an application hosting the managed HTML DOM starts until the application closes. When you use the Url property or Navigate method of the WebBrowser control to navigate to a new Web page, Internet Explorer may either retrieve the latest version of that page from the server or display the version that is currently in the Internet Explorer cache. By contrast, when you use HtmlHistory to navigate forward and backward in this stack, Internet Explorer will display the pages from the local computer's cache of downloaded Web content, unless the server indicates that the document's content should expire immediately. For more information on the history list and caching in Internet Explorer, see article 234067, #How To Prevent Caching in Internet Explorer,# in the Microsoft Knowledge Base at http://support.microsoft.com. The principal method of HtmlHistory is Go, which navigates either to the specified position in the navigation stack or to a new Uniform Resource Locator (URL). The Forward and Back methods navigate down and up the navigation stack, respectively, by the required number of entries. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,0,0,1,0
"Additional online Documentation: Summary: Moves the window to the specified coordinates on the screen.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event HtmlElementEventHandler Scroll Summary: Occurs when the user scrolls through the window to view off-screen text. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Scroll event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type HtmlWindow named HtmlWindow1. Then ensure that the event handler is associated with the Scroll event.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public int Count { get; } Property Value Type: System.Int32 The number of HtmlWindow objects in the current HtmlWindowCollection. Implements ICollection.Count Summary: Gets the number of elements in the collection.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IButtonControl Summary: Allows a control to act like a button on a form. Remarks: An example of where this interface might be implemented is default and cancel button processing. Default buttons are notified when an unprocessed ENTER key is entered for a form, just like a dialog box would be closed. Similarly, cancel buttons are notified whenever an unprocessed ESC key is entered on a form, much like a dialog box would be dismissed. Notes to Implementers Implement this interface in classes that act as button controls. The members of this interface will provide basic button functionality, such as providing a DialogResult to the parent form or the ability to perform a Click event, or acting as the default button of a form. Example: The following example inherits from the ButtonBase class and implements the IButtonControl interface. Implementation is added to the DialogResult property and the NotifyDefault and PerformClick methods.",1,0,1,1,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public interface IComponentEditorPageSite Summary: The site for a ComponentEditorPage.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: void SetDirty() Summary: Notifies the site that the editor is in a modified state.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public float DesiredExpansionX { get; set; } Property Value Type: System.Single The desired expansion along the x-axis, in coordinate units. Summary: Gets or sets the desired expansion along the x-axis, in coordinate units. Remarks: Expansion must be proportional. The value of this property must equal the value of the DesiredExpansionY property when the inertia processor starts; otherwise an exception is thrown. This property value is mutually exclusive with the DesiredDeceleration property; setting this property will set DesiredDeceleration to NaN. The default value for this property is NaN. DesiredExpansionX must be a finite, non-negative number. The rate of expansion is determined by the InitialVelocityX property. This property cannot be set while the inertia processor is running; otherwise, an exception is thrown.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public float InitialVelocityX { get; set; } Property Value Type: System.Single The initial expansion velocity along the x-axis, in coordinate units per millisecond. Summary: Gets or sets the initial expansion velocity along the x-axis, in coordinate units per millisecond. Remarks: Expansion must be proportional. The value of this property must equal the value of the InitialVelocityY property when the inertia processor starts; otherwise an exception is thrown. The default value for this property is NaN. Leaving this property and InitialVelocityY unchanged from the default or setting this property and InitialVelocityY to zero (0) will disable expansion inertia. This property cannot be set while the inertia processor is running; otherwise, an exception is thrown.",1,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ManipulationProcessor2D Summary: Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations in a shared coordinate space. Remarks: A ManipulationProcessor2D object treats a collection of manipulators as a composite object. Your application is then freed from the necessity of tracking and managing individual manipulators. A manipulation processor by itself does not cause an element to move. Your application begins a manipulation as necessary, and then receives information from a manipulation processor by listening to the Started, Delta and Completed events. The values received via these events enable you to change the location, size or orientation of an element as needed. You inform a manipulation processor which types of manipulations are allowed (translate, scale, rotate) by setting the SupportedManipulations property. You can then provide non-conditional logic to the transformation of the element that is being manipulated. For instance, instead of checking if rotation is enabled before changing the orientation of an element, you can unconditionally apply the rotation factor received from the manipulation processor; if rotation is not enabled, the manipulation processor will report that no rotational change has occurred. When an element that is being manipulated is released (all manipulators are removed), you can use inertia processing to simulate friction and cause the element to gradually slow its movements before coming to a stop. For more information see the InertiaProcessor2D class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: [FlagsAttribute] public enum Manipulations2D Summary: Represents the possible affine two-dimensional (2-D) manipulations.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public struct Manipulator2D Summary: Represents a 2D manipulator at an instant in time. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public static class DispatcherExtensions Summary: Provides a set of static methods that extend the Dispatcher class. Remarks: The methods in this class are defined as extension methods that extend the Dispatcher class. This means that they can be called like an instance method on any Dispatcher object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Executes the specified delegate asynchronously on the thread that the Dispatcher was created on.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class ActiveDirectoryRole : WorkflowRole, ISerializable, IDisposable Summary: Represents an Active Directory role in a Windows Workflow Foundation hosting environment. This class cannot be inherited. Remarks: Typically, the Active Directory store is used for storing organizational information for personnel. The main purpose for the ActiveDirectoryRole is for making queries against such organizational information for business reasons. Active Directory roles typically correspond to a job function, title, or job skill within the context of the organization. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override IList<string> GetIdentities() Return Value Type: System.Collections.Generic.IList(Of String) A generic list of values that represent the Windows NT accounts associated with the ActiveDirectoryRole. Summary: Gets a generic list of the Windows NT accounts associated with the ActiveDirectoryRole. Remarks: GetIdentities obtains all SecurityIdentifier objects associated with the ActiveDirectoryRole and converts each of them into a string value.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<ConditionalEventArgs> Condition Summary: Occurs when the condition is evaluated. Example: The following code shows how to attach a Condition event handler for the current CodeCondition instance. This code example is part of the ConditionedActivityGroup SDK sample from the SimpleCAGWorkflow.designer.cs file. For more information, seeUsing ConditionedActivityGroup.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: ActivityExecutionStatus ICompensatableActivity.Compensate( ActivityExecutionContext executionContext ) Parameters executionContextType: System.Workflow.ComponentModel.ActivityExecutionContext The execution context of the activity. Return Value Type: System.Workflow.ComponentModel.ActivityExecutionStatus The ActivityExecutionStatus after the operation has been tried. Implements ICompensatableActivity.Compensate(ActivityExecutionContext) Summary: Execute the activity using the Compensate interface.",1,0,0,0,0,0,0,0,0,0,1,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method|AttributeTargets.Event, AllowMultiple = false)] public sealed class CorrelationInitializerAttribute : Attribute Summary: Indicates the method or event on an ExternalDataExchange interface that initializes the correlation value. This class cannot be inherited. Remarks: The indicated method or event must be the first reference to the correlation value in the workflow for validation to succeed. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the ExternalDataEventArgs class. Example: The following example shows how to call the base ExternalDataEventArgs constructor from a derived class' constructor. This example is from the Ordering State Machine SDK sample. For more information, seeOrdering State Machine Sample.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public Guid InstanceId { get; set; } Property Value Type: System.Guid The workflow instance identifier for the workflow instance that contains the HandleExternalEventActivity that is expected to handle the event. Summary: Gets or sets the workflow instance identifier for the workflow instance that contains the HandleExternalEventActivity that is expected to handle the event. Remarks: This is a required property.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Interface, AllowMultiple = false, Inherited = false)] public sealed class ExternalDataExchangeAttribute : Attribute Summary: Marks an interface as a local service interface. This class cannot be inherited. Remarks: A class that implements a local service interface must be added to the ExternalDataExchangeService and can be used by CallExternalMethodActivity and HandleExternalEventActivity. Events on interfaces that are attributed with ExternalDataExchangeAttribute should have event data that derive from ExternalDataEventArgs. While generic types are supported for interface method and event declarations, generic types are not supported for the interface declaration itself. The following interface would not be valid for use as an ExternalDataExchange. Example: The following code example shows how to set the ExternalDataExchangeAttribute on an interface. This code example is part of the ActiveDirectoryRoles SDK sample from the IStartPurchaseOrder.cs file. For more information, seeUsing Active Directory Roles. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,1,0
"Additional online Documentation: Summary: Initializes a new instance of the ExternalDataExchangeService class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<ExternalDataEventArgs> Invoked Summary: Occurs when the external event is received. Example: The following code example shows how to create and set values for the HandleExternalEventActivity class. This code example is part of the RaiseEventToLoadWorkflow SDK sample from the DocumentApprovalWorkflow.cs file. For more information, seeRaise Event To Load Workflow.",0,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<ReplicatorChildEventArgs> ChildInitialized Summary: Occurs immediately after a child activity is initialized. Remarks: If subscribed to, this event is raised every time that an instance of the child activity is created for an item in the Children collection. The Children collection is set through the ReplicatorChildEventArgs of the Initialized event handler. The child Activity instance is passed in the call so that the ReplicatorActivity can set values on the child. The relevant InstanceData object from the Children collection is also passed. Example: The following code example shows how to set the value of the ChildInitialized event. This code example is part of the Replicator SDK sample from the SimpleReplicatorWorkflow.Designer.cs file. For more information, seeUsing Replicator.",0,0,0,0,0,1,1,0,1,0,0,0
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(SequenceActivity), #Resources.Sequence.png#)] public class SequenceActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> Summary: Runs a set of child activities according to a single defined ordering. Remarks: The SequenceActivity is a CompositeActivity, meaning the SequenceActivity can contain other activities. The SequenceActivity class coordinates the running of a set of child activities in an ordered manner, one at a time. The SequenceActivity is completed when the final child activity is finished. Classes that derive from SequenceActivity should not implement the IActivityEventListener(Of T) interface, or the derived class will not execute correctly. Example: The following code example demonstrates how to create a new instance of the SequenceActivity class and add the SequenceActivity classes to the ParallelActivity class. This code example is part of the WhileAndParallel SDK Sample from the WhileAndParallelWorkflow.Designer.cs file. For more information, see Using While and Parallel. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the SequentialWorkflowActivity class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ActivityValidatorAttribute(typeof(StateActivityValidator))] [ComVisibleAttribute(false)] [ToolboxBitmapAttribute(typeof(StateMachineWorkflowActivity), #Resources.StateMachineWorkflowActivity.png#)] public class StateMachineWorkflowActivity : StateActivity Summary: Serves as the root container for state machine workflows. Contains event-driven activities and states. Remarks: The StateMachineWorkflowActivity is an activity container used to create workflows that follow a state machine model. The StateMachineWorkflowActivity is a CompositeActivity, which means the StateMachineWorkflowActivity can contain other activities. The StateMachineWorkflowActivity and the EventDrivenActivity activities are the only permitted child activities of the StateMachineWorkflowActivity. EventDrivenActivity activities are permitted because the root activity itself behaves like a state. Therefore, you can have EventDrivenActivity activities at the root level that are used by all the State activities in the StateMachineWorkflowActivity. EventDrivenActivity activities at this level provide a global mechanism for processing workflow events and automate state transitions. StateActivity activities provide a mechanism to define the various stages in the model. The StateMachineWorkflowActivity has properties that are required for the execution of the state machine workflow. Most notably, the StateMachineWorkflowActivity has two properties that are important: InitialStateNameProperty and CompletedStateNameProperty. The InitialStateNameProperty of the state machine is the state in which the state machine is when an instance of the state machine is created. The InitialStateNameProperty property is mandatory and must be provided when a StateMachineWorkflowActivity is created. The InitialStateNameProperty of the state machine is like any other state activity that is contained within the state machine. The state activity can be a direct child of the StateMachineWorkflowActivity root activity and a StateMachineWorkflowActivity can have only one InitialStateNameProperty. The CompletedStateNameProperty of the StateMachineWorkflowActivity is a StateActivity activity that is designated as the end state of the StateMachineWorkflowActivity. When a transition is made to the CompletedStateNameProperty, the workflow execution is completed. The CompletedStateNameProperty is not mandatory. This means that you can have a StateMachineWorkflowActivity that is not completed. This does not mean that the state machine workflow is always active in memory. The StateMachineWorkflowActivity might be unloaded as it waits for an event. StateMachineWorkflowActivity activities that never complete are especially useful in processing long running business transactions, as in the case of a purchase order received by a supplier. The fact that the purchase order was fulfilled does not mean that the purchase order process is over. The goods that are part of the purchase order might be returned or the purchase order might be amended and have additional items added to it after the fulfillment. Sometimes there might be a requirement to keep the purchase order records for an extended period of time for legal or other purposes. The fact that a workflow does not finish just means that the workflow remains in an unloaded state. There may be a case for retiring the workflows, which means that after a set period of time the workflow instance may be forced to shut down. Example: The following code example shows how to create a new instance of the StateMachineWorkflowActivity class and use it to implement a basic state machine to transition between three states. This code example is part of the SimpleStateMachineWorkflow SDK sample from the StateMachineWorkflow.cs file. For more information, seeSimple State Machine. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public ActivityCondition DynamicUpdateCondition { get; set; } Property Value Type: System.Workflow.ComponentModel.ActivityCondition An ActivityCondition that identifies when dynamic updates can be made. Summary: Gets or sets an ActivityCondition that determines whether dynamic updates can be made in the workflow, when overridden in a derived class. Example: The following example shows how to set the DynamicUpdateCondition property. This example is from the Ordering State Machine SDK sample. For more information, seeOrdering State Machine Sample.",0,0,0,0,0,0,0,0,1,0,1,0
"Additional online Documentation: Syntax: public event EventHandler SendingOutput Summary: Occurs before the WebServiceOutputActivity sends output to the client.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(WhileActivity), #Resources.While.png#)] public sealed class WhileActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> Summary: Runs a child activity iteratively as long as a certain condition is true. Remarks: The WhileActivity is a CompositeActivity, meaning the WhileActivity can contain other activities. Before each iteration, the Condition property is evaluated. If the Condition property evaluates to false, the WhileActivity immediately finishes. Example: The following code example demonstrates how to create a new instance of the WhileActivity class and add the ParallelActivity class to the WhileActivity class. This code example is part of the WhileAndParallel SDK Sample from the WhileAndParallelWorkflow.Designer.cs file. For more information, see Using While and Parallel. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0
"Additional online Documentation: Syntax: public sealed class RemovedRuleSetAction : RuleSetChangeAction Summary: Represents the removal of a RuleSet during dynamic update. This class cannot be inherited. Remarks: This class can be used by a tracking service to determine which RuleSets have been removed during a dynamic update. An instance of this object is generated for every RuleSet that is removed (that is, that existed in the workflow before this dynamic update, but is gone afterward). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the Rule class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string Description { get; set; } Property Value Type: System.String A description of the Rule. Summary: Gets or sets a description of the Rule.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class RuleAnalysis Summary: Stores the fields and properties read by a condition or written to by an action. Remarks: The information stored by RuleAnalysis is important because it identifies dependencies and side effects of rules in the rule set. These dependencies and side effects drive the chaining behavior. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class RuleAttribute : Attribute Summary: Represents the base class for custom Rule attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum RuleChainingBehavior Summary: Specifies the forward chaining behavior of the RuleSet.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public abstract class RuleConditionChangeAction : WorkflowChangeAction Summary: Represents an abstract base class from which all dynamic update notifications of changes to RuleConditions must be derived. Remarks: This class can be used by a tracking service to determine that RuleConditions have been dynamically updated. The derived classes indicate which RuleCondition is being dynamically updated, and what operation is being performed (added to the workflow, removed from the workflow, or changed). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class RuleException : Exception, ISerializable Summary: Represents the base class for all exceptions caused by evaluation or validation of rules. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public static RuleExpressionInfo Validate( RuleValidation validation, CodeExpression expression, bool isWritten ) Parameters validationType: System.Workflow.Activities.Rules.RuleValidation The RuleValidation to manage the validation process. expressionType: System.CodeDom.CodeExpression The CodeExpression to evaluate. isWrittenType: System.Boolean true if fields and properties written by a RuleAction are stored in by RuleAnalysis; otherwise, false. Return Value Type: System.Workflow.Activities.Rules.RuleExpressionInfo The RuleExpressionInfo for the CodeExpression. Summary: Verifies that the expression and child nodes are configured correctly and has no errors.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override bool Validate( RuleValidation validator ) Parameters validatorType: System.Workflow.Activities.Rules.RuleValidation The RuleValidation to manage the validation process. Return Value Type: System.Boolean Always returns true. Summary: Returns true, no validation is performed.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method|AttributeTargets.Property, AllowMultiple = true)] public sealed class RuleInvokeAttribute : RuleAttribute Summary: Indicates that a method is invoked by a condition. This class cannot be inherited. Remarks: This attribute is used to support a forward chaining model that will cause the reevaluation of rules based on state change. The RuleReadAttribute, RuleInvokeAttribute, and RuleWriteAttribute classes each indicate the properties used to read a condition, write an action, and invoke a method. These attributes enable the workflow to only reevaluate rules that will change the final output. Example: The following code example demonstrates proper usage of the RuleInvokeAttribute. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public class RuleLiteralResult : RuleExpressionResult Summary: Represents the literal result of a custom expression written using IRuleExpression. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method|AttributeTargets.Property, AllowMultiple = true)] public sealed class RuleReadAttribute : RuleReadWriteAttribute Summary: Indicates that a property is read by a Rule. This class cannot be inherited. Remarks: This attribute is used to support a forward chaining model that causes the re-evaluation of rules based on state change. The RuleReadAttribute, RuleInvokeAttribute, and RuleWriteAttribute classes each indicate the properties used to read a condition, write an action, and invoke a method. These attributes enable the workflow to only reevaluate rules that change the final output. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool Validate( RuleValidation validation ) Parameters validationType: System.Workflow.Activities.Rules.RuleValidation The ValidationManager to manage the validation process. Return Value Type: System.Boolean A ValidationErrorCollection of errors found during validation. Summary: Validates the RuleSet attributes and the Rule classes in the RuleSet. Remarks: If the RuleSet contains errors (the Validate method returns false), then RuleValidation.Errors contains the list of errors encountered.",1,0,0,0,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override bool Validate( RuleValidation validator ) Parameters validatorType: System.Workflow.Activities.Rules.RuleValidation The RuleValidation to manage the validation process. Return Value Type: System.Boolean true if the RuleAction has no errors; otherwise, false. Summary: Verifies that the RuleAction is configured correctly and has no errors.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class UpdatedRuleSetAction : RuleSetChangeAction Summary: Represents the change to a RuleSet for dynamic updates. This class cannot be inherited. Remarks: This class can be used by a tracking service to determine which RuleSets have been changed during a dynamic update. An instance of this object will be generated for every RuleSet that existed before the dynamic update and remains afterwards, and has changes applied to one or more rules. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public CodeExpression Expression { get; } Property Value Type: System.CodeDom.CodeExpression The CodeExpression as modified by the dialog box user. Summary: Gets the CodeExpression as modified by the dialog box user.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Initializes a new instance of the Activity class.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public event EventHandler<ActivityExecutionStatusChangedEventArgs> Compensating Summary: Occurs when running a compensation method on the Activity. Remarks: Raising an event invokes the event handler through a delegate. For more information, seeRaising an Event. The Compensating method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class. Notes to Inheritors When overriding Compensating in a derived class, make sure to call the base class Compensating method so that registered delegates receive the event.",0,0,1,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Summary: Informs the run-time tracking infrastructure of pending tracking information.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: protected internal override ValidationErrorCollection ValidateChanges( Activity contextActivity ) Parameters contextActivityType: System.Workflow.ComponentModel.Activity The activity to have its changes validated. Return Value Type: System.Workflow.ComponentModel.Compiler.ValidationErrorCollection A ValidationErrorCollection that contains any ValidationError resulting from running each Validator defined for the target activity. Summary: Validates the changes pending on the target activity. Remarks: If contextActivity cannot be safely cast to a CompositeActivity a null reference is returned.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(CompensateActivity), #Resources.Compensate.png#)] public sealed class CompensateActivity : Activity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> Summary: Triggers the compensation of a completed child Activity that implements the ICompensatableActivity interface. This class cannot be inherited. Remarks: Any Activity that implements ICompensatableActivity is compensateable. A compensatable activity is a valid target of a CompensateActivity, as long as that activity is a child Activity of the CompositeActivity associated with the CompensateActivity. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [AlternateFlowActivityAttribute] [ToolboxBitmapAttribute(typeof(CompensationHandlerActivity), #Resources.Compensation.png#)] public sealed class CompensationHandlerActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> Summary: Specifies workflow logic that undoes, or compensates for, the successful execution of the associated CompositeActivity. This class cannot be inherited. Remarks: Any Activity definition can implement ICompensatableActivity. The parent of a CompensationHandlerActivity must implement this interface. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected internal override void Initialize( IServiceProvider provider ) Parameters providerType: System.IServiceProvider The specified IServiceProvider. Summary: Initializes all appropriate child activities of this instance and the specified IServiceProvider.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: event EventHandler IComponent.Disposed Implements IComponent.Disposed Summary: Represents the method that handles the Disposed event of a component. Remarks: When you create a Disposed delegate, you identify the method that handles the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsEvent { get; } Property Value Type: System.Boolean true if the DependencyProperty is an event Delegate; otherwise, false. Summary: Gets the property that indicates whether the DependencyProperty is an event Delegate.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(FaultHandlerActivity), #Resources.Exception.png#)] public sealed class FaultHandlerActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>, ITypeFilterProvider, IDynamicPropertyTypeProvider Summary: Represents the activity class used to handle an Exception of the type specified by the FaultType property. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: string ITypeFilterProvider.FilterDescription { get; } Property Value Type: System.String The filter description associated with this instance. Implements ITypeFilterProvider.FilterDescription Summary: Gets the filter description associated with this instance.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class RemovedActivityAction : ActivityChangeAction Summary: Represents a proposed removal of an Activity from a CompositeActivity within a running workflow instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Activity OriginalRemovedActivity { get; internal set; } Property Value Type: System.Workflow.ComponentModel.Activity The instance of the original Activity being removed. Summary: Gets the instance of original Activity being removed.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(SuspendActivity), #Resources.Suspend.png#)] public sealed class SuspendActivity : Activity Summary: Suspends the running workflow instance when executed. This class cannot be inherited. Remarks: SuspendActivity causes a running workflow instance to pause in running, perhaps to reflect an error condition that requires attention beyond the scope of the workflow. All the state information for the workflow instance is saved, and will be reinstated when the administrator resumes the workflow instance. You cannot include a SuspendActivity inside an atomic transaction. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(TerminateActivity), #Resources.Terminate.png#)] public sealed class TerminateActivity : Activity Summary: Terminates the running workflow instance when an abnormal situation occurs. This class cannot be inherited. Remarks: TerminateActivity immediately ends the execution of the current workflow instance. Unlike a suspended workflow instance, a terminated workflow instance can never be resumed. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected internal abstract bool ApplyTo( Activity rootActivity ) Parameters rootActivityType: System.Workflow.ComponentModel.Activity The root Activity of the workflow. Return Value Type: System.Boolean true if the root Activity was updated with the added Activity, false if the root Activity is a null reference (Nothing in Visual Basic). Summary: When overridden in a derived class, applies the changes to the root Activity.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Object Value { get; set; } Property Value Type: System.Object The assigned value as an Object. Summary: Gets or sets the value assigned to the corresponding parameter.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [FlagsAttribute] public enum AccessTypes Summary: Specifies the access mode for the dependency property.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class|AttributeTargets.Interface, AllowMultiple = false, Inherited = true)] public sealed class ActivityCodeGeneratorAttribute : Attribute Summary: Indicates the type to be used for code generation for an activity. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Object GetService( Type serviceType ) Parameters serviceTypeType: System.Type The desired Type. Return Value Type: System.Object The service object of the specified type. Implements IServiceProvider.GetService(Type) Summary: Provides access to the service object of the specified type. Remarks: This method cannot be overridden.",0,0,1,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ConditionValidator() Summary: Initializes a new instance of the ConditionValidator class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface ITypeProvider Summary: Defines the behavior of a service that acts as a container of types. Remarks: ITypeProvider can be pushed as a WorkflowRuntime service to discover data types that are necessary for extensible Application Markup Language (XAML) workflow activation.",0,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public bool IsWarning { get; } Property Value Type: System.Boolean true if a warning; otherwise false. Summary: Gets a value that indicates whether this instance is a warning.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class ValidationManager : IServiceProvider Summary: Enables the sharing of contextual information, such as property validation, parent activity, and so on, across validators during the compilation process. Remarks: For a list of initial property values regarding an instance of the ValidationManager class, see the ValidationManager constructor. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public string Language { get; } Property Value Type: System.String The workflow compiler options programming language that is available at the current scope. Summary: Gets the workflow compiler options Language that is available at the current scope.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class WorkflowCompilerError : CompilerError Summary: Represents a CompilerError that is obtained during the workflow compilation process. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string PropertyName { get; set; } Property Value Type: System.String The property associated with the compiler error. Summary: Returns the property associated with the compiler error. Remarks: The value that is returned by this property is used to map and navigate to the property that caused the compilation failure.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public string LanguageToUse { get; set; } Property Value Type: System.String A string which contains the language to use in compilation of the CodeCompileUnit. Summary: Gets or sets a string which contains the language to use in compilation of the CodeCompileUnit.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class WorkflowCompilerResults : CompilerResults Summary: Represents the results of a workflow compilation. This class cannot be inherited. Example: The following code example demonstrates how to set the value of the WorkflowCompilerResults class, and assumes that results is of type WorkflowCompilerResults, which is created earlier in the file. The code also creates new instances of the WorkflowCompiler and WorkflowCompilerParameters classes and sets some values. This code example is part of the Outlook Workflow Wizard SDK Sample from the WizardForm.cs file. For more information, see Outlook Workflow Wizard. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation:",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected virtual void Initialize( Activity activity ) Parameters activityType: System.Workflow.ComponentModel.Activity The Activity with which the designer should be initialized. Summary: Initializes the designer with the associated Activity. Remarks: Initialize loads the designer with the Activity specified. The designer loads the Activity service, updates the verbs associated with the activity and assigns the default text and image to the designer. Example: The following example shows how to override the base class implementation of the Initialize method. The Initialize method in this example is loading a Bitmap object from an embedded resource. The ToolboxImage resource is the Image that is used when the base ActivityDesigner class draws the custom ActivityDesigner.",1,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: protected virtual void OnMouseDoubleClick( MouseEventArgs e ) Parameters eType: System.Windows.Forms.MouseEventArgs A MouseEventArgs that contains the event data. Summary: Occurs when the mouse button is clicked multiple times on the designer. Remarks: OnMouseDoubleClick occurs when the mouse button is clicked twice in succession above a designer.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override string Description { get; } Property Value Type: System.String A description of the activity designer's visual appearance, or a null reference (Nothing in Visual Basic) if the object has no description. Summary: Gets a string that describes the visual appearance of the activity designer. Remarks: This property is displayed on the designer surface for users with impairments. Not all activity designers have a description.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ActivityDesignerGlyphCollection : List<DesignerGlyph> Summary: Exposes a generic List(Of T) of designer glyphs associated with an activity designer. Remarks: ActivityDesignerGlyphCollection contains all designer glyphs that appear on the ActivityDesigner class with which the collection is associated. You can access the contents of the ActivityDesignerGlyphCollection through the Glyphs property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public class ActivityDesignerResizeEventArgs : EventArgs Summary: Provides data for the OnBeginResizing and OnResizing methods. Remarks: ActivityDesignerResizeEventArgs contains information used by an activity designer when a user resized the activity designer on a workflow design surface. This information includes the designer edge that is being used to resize the designer and the designer's new bounds. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ActivityDragEventArgs : DragEventArgs Summary: Represents a class that provides data for the OnDragDrop, OnDragEnter, and OnDragOver events in the workflow designer. Remarks: These event arguments are passed to ActivityDesigner classes when a drag-and-drop operation is in progress on the workflow design surface. ActivityDesigner classes can access the information contained in the ActivityDragEventArgs class to influence the behavior of the operation. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,1,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Color PreviewBorderColor { get; set; } Property Value Type: System.Drawing.Color The Color to associate with the border of the activity preview section of the designer. Summary: Gets or sets the color set to associate with the border of the activity preview section of the designer.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected override void OnPaint( Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer ) Parameters graphicsType: System.Drawing.Graphics The Graphics to perform fill and drawing tasks. activatedType: System.Boolean true to indicate that the glyph appears on the design surface; otherwise, false.  ambientThemeType: System.Workflow.ComponentModel.Design.AmbientTheme The AmbientTheme to use to access ambient property settings. designerType: System.Workflow.ComponentModel.Design.ActivityDesigner The ActivityDesigner from which to obtain information about user actions. Summary: Performs any tasks required to render the comment glyph on the activity designer surface.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ConfigErrorGlyph : DesignerGlyph Summary: Provides a glyph for an ActivityDesigner to display when a user has not performed required designer actions at design time. Remarks: Activity designers use ConfigErrorGlyph to display actions associated with smart tags on the designer surface. For example, if an activity requires users to set a property, the activity designer displays ConfigErrorGlyph to help notify them that they are required to set the property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public override Rectangle GetBounds( ActivityDesigner designer, bool activated ) Parameters designerType: System.Workflow.ComponentModel.Design.ActivityDesigner The ActivityDesigner with which the glyph is associated. activatedType: System.Boolean true to indicate whether the glyph appears on the activity designer surface; otherwise, false. Return Value Type: System.Drawing.Rectangle A Rectangle that represents the bounds for the glyph. Summary: Returns the bounds for the glyph on the specified ActivityDesigner.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public Connector Connector { get; } Property Value Type: System.Workflow.ComponentModel.Design.Connector A Connector object passed as part of ConnectorEventArgs. Summary: Gets the connector object that is passed as a part of ConnectorEventArgs.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public delegate void ConnectorEventHandler( Object sender, ConnectorEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Workflow.ComponentModel.Design.ConnectorEventArgs A ConnectorEventArgs that contains the event data. Summary: Represents the method that will handle the ConnectorAdded, ConnectorRemoved, and ConnectorChanged events of a FreeformActivityDesigner.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public class ConnectorHitTestInfo : HitTestInfo Summary: Contains information about a connector at a specified coordinate in StructuredCompositeActivityDesigner and all classes that inherit from it. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DesignerAction class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [FlagsAttribute] public enum DesignerEdges Summary: Specifies the edge or edges of an activity designer on a workflow design surface where design-time processing is performed, such as a Connector location on the activity designer. Remarks: The enumeration value returned from ConnectionEdge that specifies where on the activity designer a ConnectionPoint or a collection of ConnectionPoint objects reside. The GetConnectionPoints method can be used to retrieve this collection. You can also use it to determine which edge or edges of an activity designer a user is resizing by observing the DesignerEdges enumeration value returned from SizingEdge.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the DesignerView class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected internal virtual bool CanResizeContainedDesigner( ActivityDesigner containedDesigner ) Parameters containedDesignerType: System.Workflow.ComponentModel.Design.ActivityDesigner The ActivityDesigner to check. Return Value Type: System.Boolean true if a user can visually resize the specified activity designer; otherwise, false. Summary: Returns a value that indicates whether a user can visually resize the specified child activity designer in the FreeformActivityDesigner. Remarks: Unless overridden in a derived class, CanResizeContainedDesigner returns true if containedDesigner is a FreeformActivityDesigner. Other types of designers cannot be resized.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: protected internal virtual void OnConnectorChanged( ConnectorEventArgs e ) Parameters eType: System.Workflow.ComponentModel.Design.ConnectorEventArgs A ConnectorEventArgs that contains the event data. Summary: Raises the ConnectorChanged event. Remarks: A connector is changed when a user changes the ConnectionPoint locations at either end of a Connector object.",1,1,0,0,0,0,0,0,0,0,0,1
"Indicates the top of the designer was hit.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IDesignerGlyphProvider Summary: Defines the method that glyph provider classes use to generate an array of glyphs to display on an activity designer. Remarks: This interface defines the method that implementing classes must use to provide an appropriate set of DesignerGlyph objects to activity designers. The implementing class should also render the DesignerGlyph objects onto the ActivityDesigner object. Example: The following code example demonstrates how you can implement the IDesignerGlyphProvider interface. It shows how you can implement the GetGlyphs method to draw custom glyph objects on an activity designer surface. This code example is part of the Workflow Monitor SDK Sample from the DesignerGlyphProvider.cs file. For more information, see Workflow Monitor.",1,0,1,1,0,0,1,0,1,0,1,0
"Additional online Documentation: Syntax: public interface IDesignerVerbProviderService Summary: Allows activity designer developers to add custom designer verb providers to an activity designer. Remarks: Classes that implement this interface can add and remove custom verb providers--any classes that implement the IDesignerVerbProvider interface -- to and from ActivityDesigner classes.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IExtendedUIService2 Summary: Defines the methods that workflow designer hosts can call to determine the environment settings.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IPersistUIState Summary: Defines methods that workflow designers and activity designers use to save UI state information to and restore UI state information from a binary stream.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public interface IWorkflowRootDesigner : IRootDesigner, IDesigner, IDisposable Summary: Defines the invoking designer and message filters properties and the method that determines whether an activity is supported for all workflow root designers. Remarks: All workflow root designers are either of type ActivityDesigner or inherit from it.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum LineAnchor Summary: Determines the shapes of connector points on a workflow design surface. Remarks: Connectors are the lines rendered on the workflow design surface between interconnected activity designers. The ends of each line are called connector points, which are where the lines attach to the activity designers that they connect. LineAnchor provides values that determine the appearance of the connector points.",1,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override bool CanMoveActivities( HitTestInfo moveLocation, ReadOnlyCollection<Activity> activitiesToMove ) Parameters moveLocationType: System.Workflow.ComponentModel.Design.HitTestInfo The HitTestInfo that describes the location to move the activities to. activitiesToMoveType: System.Collections.ObjectModel.ReadOnlyCollection(Of Activity) The Activity read-only collection that contains the activities to move. Return Value Type: System.Boolean true if the activities can be moved from the parent activity; otherwise false. Summary: Returns a value that indicates whether child activities of the activity associated with the ParallelActivityDesigner can be moved. Example: The following example shows how to override the CanMoveActivities method to allow the moving of child activities within the ParallelActivityDesigner.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public class SequenceDesigner : SequentialActivityDesigner Summary: Provides design-time support for SequenceActivity and all classes that derive from it. Remarks: SequenceDesigner provides design-time support for the following classes that derive from SequenceActivity: EventDrivenActivity IfElseBranchActivity StateFinalizationActivity StateInitializationActivity TransactionScopeActivity SynchronizationScopeActivity ReplicatorActivity ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: protected internal virtual Rectangle[] GetConnectors() Return Value Type: System.Drawing.Rectangle() The Rectangle array that bounds the connectors. Summary: Returns an array of rectangles that bound the activity designer's connectors. Remarks: If the current designer is not the active designer or if the designer is not expanded, GetConnectors returns an empty array. If there are no activity designers in the parent designer, GetConnectors returns an array of one rectangle.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected override bool ShowSmartTag { get; } Property Value Type: System.Boolean true if the SequentialWorkflowRootDesigner displays smart tags; otherwise, false. The default is false. Summary: Gets a value indicating whether the root designer displays smart tags. Remarks: If the Header property is not set to a null reference (Nothing in Visual Basic) and the corresponding Text property is not an empty string or set to a null reference (Nothing), ShowSmartTag returns true.",0,0,0,0,0,0,0,0,0,0,0,1
"The theme settings are provided by user-defined themes.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class TypeBrowserDialog : Form, ISite, IServiceProvider Summary: Represents a dialog box that allows the user to choose a type. This class cannot be inherited. Remarks: This class prompts the user to browse a list of Windows Workflow Foundation and .NET Framework namespaces and their contained types and select a single type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public static readonly CommandID NewDataBreakpointMenu Summary: A CommandID that can be used to access the new data breakpoint menu. This field is read-only. Remarks: The new data breakpoint menu typically inserts a new data-driven breakpoint.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public static readonly CommandID PageSetup Summary: A CommandID that can be used to access the page setup menu. This field is read-only. Remarks: The page setup menu is typically used to bring forward the page setup dialog.",1,0,0,1,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: protected internal TreeNode RootNode { get; } Property Value Type: System.Windows.Forms.TreeNode A TreeNode that is the root node. Summary: Gets the root node of the root provider.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class WorkflowTheme : IDisposable Summary: Provides the look and feel property settings to a workflow in design-time environment. Remarks: Workflow themes define the look and feel of a workflow design surface. This includes background styles, foreground styles, fonts, and icons defined for the workflow. A WorkflowTheme is a theme defined for a specific workflow. The AmbientTheme class can be used for default properties if a specific workflow theme is not desired. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public string Description { get; set; } Property Value Type: System.String The description of the theme. Summary: Gets or sets the description of the theme.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public ActivityDesignerTheme GetDesignerTheme( ActivityDesigner designer ) Parameters designerType: System.Workflow.ComponentModel.Design.ActivityDesigner The activity designer from which to retrieve the theme. Return Value Type: System.Workflow.ComponentModel.Design.ActivityDesignerTheme The ActivityDesignerTheme associated with the specified ActivityDesigner. Summary: Gets the theme for the specified ActivityDesigner. Remarks: Use GetDesignerTheme to retrieve the theme associated with a specified activity designer.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: protected override AccessibleObject CreateAccessibilityInstance() Return Value Type: System.Windows.Forms.AccessibleObject A new AccessibleObject for the WorkflowView. Summary: Creates a new AccessibleObject for the WorkflowView. Remarks: If you do not explicitly call the CreateAccessibilityInstance method, it will be called when the AccessibleObject property is referenced. Note To create a AccessibleObject, you must add a reference to the Accessibility assembly installed with the .NET Framework. Notes to Inheritors When overriding CreateAccessibilityInstance in a derived class, you should not call the base class CreateAccessibilityInstance method.",0,0,1,0,0,1,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler Idle Summary: Occurs when the WorkflowView finishes processing and is about to enter the idle state. Remarks: If you have tasks to perform before the thread becomes idle, attach them to this event.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public Point LogicalPointToScreen( Point logicalPoint ) Parameters logicalPointType: System.Drawing.Point The Point to convert to screen coordinates. Return Value Type: System.Drawing.Point A Point converted from logical to screen coordinates. Summary: Converts a Point from logical to screen coordinates. Remarks: WorkflowView uses two coordinate spaces: logical and client: Client coordinates are relative to the upper-left corner of the WorkflowView. The upper-left corner is 0,0; x and y coordinates increase vertically and horizontally in the viewable area. The client coordinate system is affected by the zoom level of the WorkflowView and by the scrollbar position. In the logical coordinate system every object is always mapped to 0,0. The position vertically and horizontally is not affected by zoom or scrollbar position.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public override string Help { get; } Property Value Type: System.String A string that contains the description of what the WorkflowViewAccessibleObject does or how it is used or a null reference (Nothing in Visual Basic) if no help is defined. Summary: Gets a description of what the accessible object does or how the accessible object is used.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ActivityCodeDomSerializationManager : IDesignerSerializationManager, IServiceProvider Summary: Manages serialization of activities into designer-generated source code segments before compilation. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public abstract class MarkupExtension Summary: Represents the abstract class for all Markup extensions for types. This class must be inherited. Remarks: This class, through its descendents, provides a mark-up representation for various types, such as arrays. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the WorkflowMarkupSerializationException class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: event EventHandler IDesignerSerializationManager.SerializationComplete Implements IDesignerSerializationManager.SerializationComplete Summary: Occurs when serialization is complete. Remarks: This event is raised when serialization or deserialization is complete. Generally, serialization code is written to emit serialization data and does not typically require state-related checking and processing. If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the SerializationComplete event, and clear the data after serialization. Restoring the proper state after serialization is important because serializers can be reused during serialization, and leftover state data or open streams might not be correct.",1,0,0,0,0,0,0,1,1,0,0,1
"Additional online Documentation: Syntax: protected virtual void OnAfterSerialize( WorkflowMarkupSerializationManager serializationManager, Object obj ) Parameters serializationManagerType: System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager The WorkflowMarkupSerializationManager that manages the serialization process. objType: System.Object The Object that was serialized. Summary: Notifies the WorkflowMarkupSerializer that an object has just been serialized. Remarks: OnAfterSerialize is called immediately after the Serialize method runs. You can override OnAfterSerialize in a class that inherits WorkflowMarkupSerializer to perform any required processing on obj after it has been serialized to extensible Application Markup Language (XAML). OnAfterSerialize provides no default behavior. You must override it in a derived class to add any processing logic.",1,0,1,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: string ICustomTypeDescriptor.GetComponentName() Return Value Type: System.String The activity name. Implements ICustomTypeDescriptor.GetComponentName Summary: Returns the name of the contained System.Workflow.ComponentModel.Activity. Remarks: This member is an explicit interface member implementation. It can be used only when the Interop instance is cast to an ICustomTypeDescriptor interface.",1,0,1,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: protected override TrackingRecord Clone() Return Value Type: System.Activities.Tracking.TrackingRecord A copy of the InteropTrackingRecord. Summary: Creates a copy of the InteropTrackingRecord.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public class CorrelationProperty Summary: Represents a name and value pair used to correlate messages to specific receiving activities. Remarks: CorrelationProperty classes are defined as ActivityBind properties of Workflow Connection Service activities. By default, these properties are bound to variables declared at the root workflow activity. For dynamic activities such as ReplicatorActivity and ConditionedActivityGroup each of its children cannot share a universal CorrelationProperty object. Consider the scenario where each task inside a ReplicatorActivity has to manage its own conversation. The child activities inside the ReplicatorActivity requires a CorrelationProperty instance unique per execution context, or per task. In order to accomplish this, you have to define a custom activity that has a CorrelationProperty instance property and the Workflow Connection Services activities have to bind to this property. Example: The following example demonstrates creating a correlation property object, and accessing the Name and Value properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class CorrelationTokenCollection : KeyedCollection<string, CorrelationToken> Summary: Represents a collection of CorrelationToken classes. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class CorrelationTokenEventArgs : EventArgs Summary: Contains the event data associated with the CorrelationToken. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class WorkflowInstance Summary: Represents a workflow instance. Remarks: The WorkflowInstance class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine. A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the WorkflowInstance class. If the requested action is not valid, for example, if the host calls Load on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception. Note If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime. However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the WorkflowInstance.Resume method. Example: The following code example demonstrates how you can create and start a WorkflowInstance in a workflow host. The code creates an instance of the WorkflowRuntime, adds services to the runtime, and then demonstrates the recommended way to create a WorkflowInstance object. The code initializes WorkflowInstance by calling the CreateWorkflow method and passing the previously created type to it. The WorkflowInstance is started with the Start method call. This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see Canceling a Workflow. ThreadSafety: This type is thread safe.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public void ApplyWorkflowChanges( WorkflowChanges workflowChanges ) Parameters workflowChangesType: System.Workflow.ComponentModel.WorkflowChanges A WorkflowChanges specifying dynamic updates for the workflow instance. Summary: Applies changes to the workflow instance specified by the WorkflowChanges object. Remarks: If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes. Example: The following example demonstrates calling ApplyWorkflowChanges to a WorkflowInstance object. This example is from the Ordering State Machine SDK sample, from the Mainform.cs file. For more information, see the Ordering State Machine Sample.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Summary: Initializes a new instance of the WorkflowRuntime class.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public event EventHandler<WorkflowRuntimeEventArgs> Started Summary: Occurs when the workflow run-time engine is started. Remarks: The StartRuntime method raises the Started event after it has validated the core service configuration of the workflow run-time engine, has invoked the Start method implemented by each of its services that derive from the WorkflowRuntimeService class, and has set IsStarted to true. There is no guarantee about the order in which the services that derive from the WorkflowRuntimeService class are started by the workflow run-time engine, and some of these workflow run-time engine services may depend on functionality supplied by other of these services to complete their startup tasks. Workflow run-time engine services can override the WorkflowRuntimeService.OnStarted method to perform any final startup tasks that require the support of other workflow run-time engine services when the Started event is raised. For more information about handling events, see Consuming Events. Example: In the following example, an event handler is added to the Started event of the WorkflowRuntime. In this example, the handler is an anonymous method that prints a simple message to the console.",0,0,1,0,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<WorkflowRuntimeEventArgs> Stopped Summary: Occurs when the workflow run-time engine is stopped. Remarks: The StopRuntime method raises the Stopped event after it has invoked the Stop method implemented by each of its services that derive from the WorkflowRuntimeService class. There is no guarantee about the order in which these workflow run-time engine services are stopped, and some of these services may need to preserve some functionality that is relied on by other services until they too are stopped. Such services can override the WorkflowRuntimeService.OnStopped method to perform any residual shutdown logic when the Stopped event is raised. For more information about handling events, see Consuming Events. Example: In the following example, an event handler is added to the Stopped event of the WorkflowRuntime. In this example, the handler is an anonymous method that prints a simple message to the console.",0,0,0,0,0,1,0,0,1,0,0,0
"Additional online Documentation: Syntax: public event EventHandler<WorkflowEventArgs> WorkflowAborted Summary: Occurs when a workflow instance is aborted. Remarks: WorkflowAborted occurs after all pending work for the workflow instance is cleared, but before the workflow instance is invalidated in memory. You can abort a workflow instance by calling WorkflowInstance.Abort. For this event, the sender contains the WorkflowRuntime and WorkflowEventArgs contains the WorkflowInstance associated with the event. For more information about handling events, see Consuming Events. Example: The following code example demonstrates how to use WorkflowRuntime functionality from a workflow host. The code associates the WorkflowAborted with an event handler, a method named OnWorkflowAborted. This code example is part of the Canceling a Workflow sample.",0,0,0,0,0,1,1,0,1,0,1,1
"Additional online Documentation: Syntax: public event EventHandler<WorkflowEventArgs> WorkflowPersisted Summary: Occurs when the state of a workflow instance is persisted. Remarks: The workflow instance can be persisted for many reasons. For example, the host can call WorkflowInstanceUnLoad on a workflow instance, or the workflow run-time engine can persist a workflow instance because the instance is idle or because an atomic scope has completed. If a persistence service is present in the WorkflowRuntime, WorkflowPersisted is raised by the runtime after the state of the workflow instance is saved to memory. If a persistence service is not present, the event is still raised but the instance state is not saved. If the WorkflowPersisted event occurs because the workflow instance is being unloaded, it is followed by a WorkflowUnloaded event. For the WorkflowPersisted event, the sender contains the WorkflowRuntime and WorkflowEventArgs contains the WorkflowInstance associated with the event. For more information about handling events, see Consuming Events. Example: The following code example demonstrates how you can use WorkflowRuntime functionality from a workflow host. The code associates the WorkflowPersisted with an event handler, a method named OnWorkflowPersisted. This code example is part of the Custom Persistence Service Sample.",0,0,0,0,0,1,1,0,1,0,1,0
"Additional online Documentation: Syntax: public enum WorkflowStatus Summary: Specifies the status of a workflow instance. Example: The following code example demonstrates how you can use the WorkflowStatus values to set the WorkflowStatus property. Each value constrains the SqlTrackingWorkflowInstance in a different way. This code example is part of the Workflow Monitor SDK Sample from the DatabaseService.cs file. For more information, see Workflow Monitor.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#WorkflowDefinitionCacheCapacity#, DefaultValue = )] public int WorkflowDefinitionCacheCapacity { get; set; } Property Value Type: System.Int32 The number of workflows. Summary: Gets the number of workflow definitions that can be cached by the runtime.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class DebugController : MarshalByRefObject Summary: Relays workflow instance creation, execution and termination events to the debugger process. This class cannot be inherited. Remarks: An instance of this class runs in the workflow host application. It is created by WorkflowRuntime if workflow debugging is enabled. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override Object InitializeLifetimeService() Return Value Type: System.Object An Object that implements ILease and is used to control the lifetime policy for the DebugController object. Summary: Establishes a lifetime lease for the DebugController object. Remarks: The return value is set to Nothing unless this method is overridden in a derived class.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IInstanceTable Summary: Reserved for future use.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public interface IWorkflowDebugger Summary: Defines the interface that receives workflow instance creation, execution, and termination status information from a DebugController object running inside the workflow host application. Remarks: This interface is implemented by a .NET remoting object hosted by the debugger.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: void SetInitialActivityStatus( Guid programId, Guid scheduleTypeId, Guid instanceId, string activityQualifiedName, string hierarchicalActivityId, ActivityExecutionStatus status, int stateReaderId ) Parameters programIdType: System.Guid An internally generated Guid associated with a WorkflowRuntime instance. scheduleTypeIdType: System.Guid An internally generated Guid associated with a workflow type.  instanceIdType: System.Guid A Guid associated with the currently running workflow instance. activityQualifiedNameType: System.String A String containing the fully qualified name of the current activity. hierarchicalActivityIdType: System.String A String containing the qualified name of the parent activity. statusType: System.Workflow.ComponentModel.ActivityExecutionStatus The ExecutionStatus of the current activity. stateReaderIdType: System.Int32 An Int32 containing the activity execution context ID associated with the current activity. Summary: Called to set the initial status of the activities in a workflow. Remarks: This method is called when a workflow instance is loaded from a persistence store or when the debugger is attached to a workflow host that has workflow instance already running.",1,0,0,0,0,1,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class SqlWorkflowPersistenceService : WorkflowPersistenceService, IPendingWork Summary: Represents a persistence service that uses a SQL database to store workflow state information. Remarks: The SqlWorkflowPersistenceService class represents a fully-functional persistence service. You can use this service out-of-box to persist and retrieve workflow state information about a workflow instance when requested to by the workflow runtime engine. The SqlWorkflowPersistenceService participates in the workflow transaction batching functionality provided by the WorkflowCommitWorkBatchService. That is, it adds objects that represent pending writes to the SQL database to the WorkBatch and implements the IPendingWork interface. The SqlWorkflowPersistenceService supports locking of workflow instances. This feature is used when several workflow runtimes share the same database. A column in the SQL database table is used to mark a workflow instance as locked whenever it is being used by a workflow runtime. The SqlWorkflowPersistenceService does not load a workflow instance that is marked as #in use# by another runtime. Typically these locks are released when the workflow instance is persisted, for example, on idle, completion, or termination. The locks can also be released automatically after a period of inactivity. This period of inactivity can be set using the constructor of the SqlWorkflowPersistenceService class. It can also be set through the configuration file. For more information about persistence services in general, see the WorkflowPersistenceService class. Workflow instances can contain timers, for example, if they have a DelayActivity. For workflows that contain timers, the SqlWorkflowPersistenceService records the time when the workflow's next timer expires. The SqlWorkflowPersistenceService periodically polls the database, looking for workflows whose timers have expired. The frequency of the polling interval can be set using the SqlWorkflowPersistenceService constructor or using a configuration file. Note When using both the SqlTrackingService and the SqlWorkflowPersistenceService in a workflow application, it is recommended to use a single database for both persistence and tracking. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,0,0,1,0
"Additional online Documentation: Syntax: protected internal abstract void SaveWorkflowInstanceState( Activity rootActivity, bool unlock ) Parameters rootActivityType: System.Workflow.ComponentModel.Activity The root activity of the workflow instance. unlockType: System.Boolean true if the workflow instance should not be locked; false if the workflow instance should be locked. Summary: When implemented in a derived class, saves the workflow instance state to a data store. Remarks: You must call one of the overloaded Save methods to serialize rootActivity into a Stream. You can then choose to additionally process the Stream before writing it to your data store. However, when the workflow runtime engine calls LoadWorkflowInstanceState, you must restore an identical copy of the root activity. If you cannot save the workflow instance state to your data store, you should throw a PersistenceException with an appropriate error message. The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store. This can be accessed by the persistence services running in multiple hosts and pointing to the same data store. The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time. Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality. If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a WorkflowOwnershipException. If unlock is true, you should unlock access to the workflow instance state after you save it. LoadWorkflowInstanceState takes the Guid of the workflow instance as a parameter. Therefore, you should save this Guid. You can also use this Guid to associate the workflow instance with the saved states of its completed scopes. You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes. The workflow runtime engine calls SaveWorkflowInstanceState a final time when the workflow instance is completed or terminated. Therefore, if GetWorkflowStatus is equal to Completed or Terminated, you can safely delete the workflow instance and all its associated completed scopes from your data store. Alternatively, you can subscribe to the WorkflowCompleted or WorkflowTerminated events to determine when it is safe to delete records associated with the workflow instance. Whether you actually delete the records from your data store depends on your implementation. If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item that represents the pending changes to your durable store to the WorkBatch property, and implement the IPendingWork interface in your persistence service. Example: The following example demonstrates an implementation of the SaveWorkflowInstanceState method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see Custom Persistence Service Sample.",1,0,1,0,0,1,1,1,1,0,0,1
"Additional online Documentation: Syntax: public abstract class WorkflowRuntimeService Summary: The abstract base class from which the workflow runtime engine core services are derived. Remarks: Services that derive from the WorkflowRuntimeService class can be started and stopped by the workflow runtime engine. The order in which the services are started or stopped, however, is indeterminate, and services may require the support of other services in order to properly initialize themselves when they are started, and, conversely, may require the to support of other services in order to properly shut down when they are stopped. To address this problem, the workflow runtime engine provides two-phase mechanisms for starting and stopping services. When StartRuntime is called, the workflow runtime engine invokes the Start method for each of its services that derive from the WorkflowRuntimeService class. After all of these services have been started, the workflow runtime engine raises the WorkflowRuntime.Started event, which causes the OnStarted method to be invoked for each workflow runtime engine service. Your service can override the OnStarted method to participate in this two phase process. Similarly, when StopRuntime is called, the Stop method, the WorkflowRuntime.Stopped event, and the OnStopped method provide this two-phase mechanism. The State property contains a WorkflowRuntimeServiceState value that indicates whether the service is in the process of starting or stopping or is completely started or stopped. Services that derive from the WorkflowRuntimeService class can raise the WorkflowRuntime.ServicesExceptionNotHandled event when they encounter a condition that causes an unhandled exception by calling RaiseServicesExceptionNotHandledEvent. Services derived from the WorkflowSchedulerService class, the WorkflowCommitWorkBatchService class, the WorkflowPersistenceService class, and the TrackingService class ultimately derives from the WorkflowRuntimeService class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,1,1,1,1,0,0,0,1
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class ActivityTrackingLocation Summary: Defines an activity-qualified location that corresponds to an activity status event in the potential execution path of a root workflow instance. This class cannot be inherited. Remarks: Whenever the execution status of an activity changes, the workflow instance emits an activity status event to the runtime tracking infrastructure. The runtime tracking infrastructure can send the tracking service an ActivityTrackingRecord whenever an activity status event occurs. Usually, a tracking service is not interested in every activity status event that occurs in the workflow instance, but only in activity status events associated with certain kinds of activities at specified locations in the workflow instance. An ActivityTrackingLocation defines the matching parameters for such a location by specifying a reference activity type, a set of activity status change events, and a set of conditions that can more precisely qualify an instance or instances of the reference activity type. Note A single ActivityTrackingLocation may refer to more than one actual location in the potential execution path of a workflow instance. You add ActivityTrackingLocation objects to MatchingLocations and ExcludedLocations in order to define the match parameters for an ActivityTrackPoint in a TrackingProfile. You must specify the reference activity type to be matched by setting either ActivityTypeName or ActivityType. You may set MatchDerivedTypes to specify interest in activities derived from the reference activity type. You may add ActivityExecutionStatus values to ExecutionStatusEvents to specify the activity status events to be matched. You may add ActivityTrackingCondition objects to Conditions to specify interest in the reference activity type only for specific conditions. For example, you can specify interest in only a particular named instance of the reference activity type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public IList<ActivityExecutionStatus> ExecutionStatusEvents { get; } Property Value Type: System.Collections.Generic.IList(Of ActivityExecutionStatus) A IList(Of T) that contains one or more of the ActivityExecutionStatus values. The default is an empty list. Summary: Gets the list of activity status events that can be matched for this location. Remarks: ExecutionStatusEvents specifies the activity status events for which the ActivityTrackingLocation can be matched. One of the ActivityExecutionStatus values in ExecutionStatusEvents must be matched and every TrackingCondition in Conditions must be true for the ActivityTrackingLocation to be matched. An empty list specifies that no events are to be matched.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public enum ComparisonOperator Summary: Specifies the operation to perform on the operands of a comparison. Remarks: ComparisonOperator specifies the type of comparison to perform in an ActivityTrackingCondition.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = true)] public sealed class PreviousTrackingServiceAttribute : Attribute Summary: Indicates the type of the TrackingService that was used prior to the current version. Remarks: When an assembly containing a new version of a TrackingService implementation is deployed, this attribute is applied to the new version of the tracking service class to identify the assembly of the previous version. This allows the runtime to utilize the newer tracking service for workflows that were using persisted while using the previous version of the tracking service, but resumed after the new version was implemented. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public Type WorkflowType { get; set; } Property Value Type: System.Type The Type of a workflow. Summary: Gets or sets the workflow Type for which the TrackingProfile should be removed. Remarks: WorkflowType specifies the workflow Type for which a TrackingProfile no longer exists, and which, therefore, should no longer be tracked by the runtime tracking infrastructure.",1,1,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class SqlTrackingQuery Summary: Contains methods and properties that are used to manage queries to the tracking data that is contained in the SQL database used by a SqlTrackingService. Remarks: SqlTrackingQuery provides methods and properties that you can use in order to access certain kinds of tracking data stored in a SQL database by the SqlTrackingService. Access to this data is provided through SqlTrackingWorkflowInstance objects. You can call TryGetWorkflow to try to get a SqlTrackingWorkflowInstance for a specific workflow instance. You can call GetWorkflows to get a collection of SqlTrackingWorkflowInstance objects that correspond workflow instances that have tracking data that matches a set of query parameters contained in a SqlTrackingQueryOptions that is passed as a parameter to the method. See the SqlTrackingWorkflowInstance class for more information about the kind of tracking data available and see the SqlTrackingQueryOptions class for more information about the kind of queries that can be performed. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public Type WorkflowType { get; set; } Property Value Type: System.Type The Type of the workflow instance. Summary: Gets and sets the Type of the workflow instance. Example: The following code example shows how to obtain information about all SqlTrackingWorkflowInstance objects contained in a list of displayed workflows. The code creates a ListViewItem for each SqlTrackingWorkflowInstance found in a displayedWorkflows variable. Each ListViewItem contains a string representation of the WorkflowInstanceInternalId, the WorkflowType and Status properties. It then adds the item to a workflowStatusList. The code uses the previously named property values and a string version of the Initialized property to create a new WorkflowStatusInfo object that is also added to the workflowStatusList. This code example is part of the Workflow Monitor SDK Sample from the Mainform.cs file. For more information, seeWorkflow Monitor.",0,0,0,0,0,0,0,1,1,0,1,1
"Additional online Documentation: Syntax: public bool MatchDerivedActivityTypes { get; set; } Property Value Type: System.Boolean true if the user data should be tracked when it is emitted from activities derived from the type specified by ActivityType or ActivityTypeName; otherwise, false. The default is false. Summary: Gets or sets a value that indicates whether the user data should be tracked when it is emitted from activities derived from the activity type specified by ActivityType or ActivityTypeName.",1,0,0,0,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public TrackingAnnotationCollection Annotations { get; } Property Value Type: System.Workflow.Runtime.Tracking.TrackingAnnotationCollection A TrackingAnnotationCollection. The default is an empty collection. Summary: Gets the collection of annotations associated with the track point. Remarks: You can add to Annotations to specify annotations to be returned in UserTrackPoint.Annotations when the track point is matched. If Annotations is empty, no annotations are associated with the track point. Annotations are strings that you define that contain information associated with the track point. For example, an annotation could contain information about the possible execution path the workflow can take from this track point, or it could contain information to be displayed in a user interface.",1,1,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: public sealed class WorkflowTrackPoint Summary: Defines a point associated with a set of workflow status events that are tracked in the potential execution path of a root workflow instance. Remarks: Whenever the status of the workflow instance changes, the workflow instance emits a workflow status event based on one of the TrackingWorkflowEvent values to the runtime tracking infrastructure. A WorkflowTrackPoint defines an interest in all the points during the execution of a workflow instance at which specific types of workflow status events occur. You can add a WorkflowTrackPoint to TrackingProfile.WorkflowTrackPoints to instruct the runtime tracking infrastructure to send a WorkflowTrackingRecord to the tracking service when a specified set of workflow status events occur. A WorkflowTrackPoint may be matched at multiple points in the workflow instance. Set MatchingLocation with an appropriately configured WorkflowTrackingLocation to specify the types of workflow status events that the runtime tracking infrastructure uses to match the WorkflowTrackPoint. You can add to Annotations to specify additional information associated with the track point that should be sent by the runtime tracking infrastructure when the track point is matched. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class WorkflowTrackPointCollection : List<WorkflowTrackPoint> Summary: Contains a collection of WorkflowTrackPoint objects. Remarks: WorkflowTrackPointCollection is used in a TrackingProfile to maintain a list of WorkflowTrackPoint objects to match. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,0,0,0,0,1
"Additional online Documentation: Syntax: public class WorkflowServiceHost : ServiceHostBase Summary: Provides host for workflow-based services. Remarks: Implements the host used by the service model programming model. Use the WorkflowServiceHost class to configure and expose a workflow as service for use by client applications when you are not using Internet Information Services (IIS) or Windows Activation Services (WAS) to expose a service. Both IIS and WAS interact with a WorkflowServiceHost object on your behalf. To expose a workflow as service for use by callers, WCF requires a complete service description (represented by the ServiceDescription class). The WorkflowServiceHost class creates a ServiceDescription from the workflow service type and configuration information and then uses that description to create ChannelDispatcher objects for each endpoint in the description. Use a WorkflowServiceHost object to load a workflow service, configure endpoints, apply security settings, and start listeners to handle incoming requests. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,1,0,0,0,0
"Additional online Documentation: Syntax: public WorkflowServiceHostFactory() Summary: Initializes a new instance of the WorkflowServiceHostFactory class.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#services#, DefaultValue = null)] public ExtendedWorkflowRuntimeServiceElementCollection Services { get; } Property Value Type: System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection A WorkflowRuntimeServiceElementCollection that contains the collection of services that will be added to the WorkflowRuntime engine. Summary: Gets the collection of services that will be added to the WorkflowRuntime engine. Remarks: The services specified in the WorkflowRuntimeServiceElementCollection will be initialized by the workflow runtime engine and added to its services when the appropriate WorkflowRuntime constructor is called. Therefore, the services specified in the WorkflowRuntimeServiceElementCollection must follow certain rules about the signatures of their constructors. For more information, see WorkflowRuntimeServiceElement.",1,0,0,0,0,0,0,1,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method)] public sealed class DurableOperationAttribute : Attribute, IOperationBehavior Summary: Specifies the local execution behavior of a durable service method. Remarks: Durable service state information will be persisted when the operation has successfully been invoked. You cannot persist state information during the middle of operation execution as you can with workflow services. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public TimeSpan CachedInstanceExpiration { get; set; } Property Value Type: System.TimeSpan A TimeSpan object indicating how long a workflow instance stays in-memory in the idle state before it is forcibly removed from memory. Summary: Gets or sets a value that indicates how long a workflow instance stays in-memory in the idle state before it is forcibly removed from memory.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation:",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public class PersistenceException : CommunicationException Summary: This exception is thrown by a SqlPersistenceProviderFactory when general connectivity errors are encountered. Remarks: This exception is the base class for InstanceNotFoundException and InstanceLockException. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public bool HasProtectionLevel { get; } Property Value Type: System.Boolean A Boolean value indicating whether or not the operation has a ProtectionLevel associated with it. Summary: Gets information on whether or not the operation has a defined ProtectionLevel. Example: The following example demonstrates how to access the HasProtectionLevel property.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: protected OperationInfoBase() Summary: When implemented in a derived class, initializes a new instance of the OperationInfoBase class.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public ContextToken ContextToken { get; set; } Property Value Type: System.Workflow.Activities.ContextToken A ContextToken that can be used for correlation. Summary: Represents a token that can be used to specify the context that should be used to correlate the exchange between a ReceiveActivity activity and the client that the activity is communicating with. Remarks: Each ContextToken is defined within the scope of an owner activity. Users can model two distinct context tokens with the same name but different owner scopes. The value of the contexts associated with these context tokens are different at runtime. By default, each workflow has an implicit root context token, scoped at the root activity level. The name of the root context token is '(RootContext)' and the OwnerActivityName is Nothing. If a ReceiveActivity activity does not have a ContextToken associated with it, the root context token is used. Example: The following code example shows how to access the ContextToken property. This code example is adapted from the Conversations SDK sample, from the SupplierWorkflow.Designer.cs file.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(SendActivity), #Design.Resources.SendActivity.png#)] public sealed class SendActivity : Activity Summary: Client activity that models the synchronous invocation of a service operation. Remarks: The SendActivity activity enables you to participate in a conversation with a service using a predefined message exchange pattern. Note The SendActivity activity is a blocking activity, meaning that workflow execution is blocked until the activity completes execution. The message exchange patterns supported by the SendActivity activity include: One-way Send Message The SendActivity activity sends a message but does not expect a response from the service. Send Request - Receive Reply The SendActivity activity sends a message and waits until a response is received from the service. Send Request - Receive Fault The SendActivity activity sends a message and waits until a response or a fault is received from the service. During execution, the send activity throws all of the faults that were received from the server. FaultHandlerActivity activities can be used to handle the faults in the client workflow. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,1,1,1,0,0,0,0,1
"Additional online Documentation: Syntax: [BrowsableAttribute(true)] public event EventHandler<SendActivityEventArgs> BeforeSend Summary: Occurs before the SendActivity activity sends the message to the service. Remarks: This event handler associated with this event can be used to set the parameter values for the service operation being invoked. Note The context of a SendActivity cannot be set in this event handler. Example: The following example shows how to use the BeforeSend event. This example was adapted from the Conversations SDK sample.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public bool ValidateMustUnderstand { get; set; } Property Value Type: System.Boolean true if the system is to perform SOAP header MustUnderstand processing; otherwise false, which indicates that the application performs this processing. Summary: Gets or sets a value that specifies whether the system or the application enforces SOAP MustUnderstand header processing. Remarks: The default value is true. Example: The following example demonstrates how to access the ValidateMustUnderstand property.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class ChannelManagerService : WorkflowRuntimeService Summary: Provides functionality for constructing client-side channels, caching channels, and channel factories. Remarks: The ChannelManagerService is responsible for creating a channel for a SendActivity based on the channel token defined in the activity's ChannelToken. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property)] public sealed class CallbackValidatorAttribute : ConfigurationValidatorAttribute Summary: Specifies a CallbackValidator object to use for code validation. This class cannot be inherited. Remarks: The CallbackValidatorAttribute attribute class provides an association between a CallbackValidator object and the code to validate. The CallbackValidatorAttribute class is derived from the ConfigurationValidatorAttribute class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Summary: Writes the configuration settings contained within this Configuration object to the current XML configuration file.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class|AttributeTargets.Property)] public sealed class ConfigurationCollectionAttribute : Attribute Summary: Declaratively instructs the .NET Framework to create an instance of a configuration element collection. This class cannot be inherited. Remarks: You use the ConfigurationCollectionAttribute attribute to decorate a ConfigurationElementCollection element. This instructs the .NET Framework to create an instance of the collection and to initialize it using your custom ConfigurationElement values. Note The simplest way to create a custom configuration element is to use the attributed (declarative) model. You declare the elements and decorate them with the ConfigurationCollectionAttribute attribute. For each element marked with this attribute, the .NET Framework uses reflection to read the decorating parameters and create a related ConfigurationElementCollection instance. You can also use the programmatic model. In this case it is your responsibility to declare the custom public collection but also to override the ConfigurationElementCollection member and return the properties collection. The .NET Framework configuration system provides attribute types that you can use during the creation of custom configuration elements. There are two kinds of attributes: The attributes that instruct the .NET Framework how to create instances of the custom configuration element properties. These types include: ConfigurationCollectionAttribute ConfigurationPropertyAttribute The attributes that instruct the .NET Framework how to validate the custom configuration element properties. These types include: IntegerValidatorAttribute LongValidatorAttribute RegexStringValidatorAttribute StringValidatorAttribute TimeSpanValidatorAttribute Example: The following example shows how to use the ConfigurationCollectionAttribute. This example consists of three classes: UrlsSection, UrlsCollection and UrlConfigElement.The UrlsSection class uses the ConfigurationCollectionAttribute to define a custom configuration section. This section contains a URL collection (defined by the UrlsCollection class) of URL elements (defined by the UrlConfigElement class). When you run the example, an instance of the UrlsSection class is created and the following configuration elements are generated in the application configuration file: ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public enum ConfigurationElementCollectionType Summary: Specifies the type of a ConfigurationElementCollectionType object. Remarks: This enumeration contains all the possible return values for the CollectionType property. It is used by the configuration system during run time to correctly merge configuration settings. It is also used when creating a custom class that extends ConfigurationElementCollection. By default, the type of a ConfigurationElementCollection object is AddRemoveClearMap. If a BasicMap is required, override the ConfigurationElementCollectionType property when extending ConfigurationElementCollection.",1,0,0,1,0,0,0,0,0,0,0,1
"Additional online Documentation: Summary: Gets the line number within the configuration file that was being processed when this configuration exception was thrown.",0,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class ConfigurationLocationCollection : ReadOnlyCollectionBase Summary: Contains a collection of ConfigurationLocationCollection objects. Remarks: Use the ConfigurationLocationCollection class to iterate through a collection of ConfigurationLocation objects, which represent the resources for which location-specific configuration settings are defined. ConfigurationLocationCollection is the type returned by the Locations property. Note The ConfigurationLocationCollection class might not reference the collection of ConfigurationLocation objects in the order that they are specified in the configuration file. Example: In the following code example, the Web configuration for the application MySampleApp is loaded, and the locations defined in this configuration are displayed by iterating through the ConfigurationLocationCollection object returned by the Locations property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: public void CopyTo( string[] array, int index ) Parameters arrayType: System.String() A one-dimensional Array that is the destination of the elements copied from the ConfigurationLockCollection. The Array must have zero-based indexing. indexType: System.Int32 The zero-based index in array at which copying begins. Summary: Copies the entire ConfigurationLockCollection collection to a compatible one-dimensional Array, starting at the specified index of the target array.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public bool IsModified { get; } Property Value Type: System.Boolean true if the ConfigurationLockCollection collection has been modified; otherwise, false. Summary: Gets a value specifying whether the collection has been modified. Example: The following code example demonstrates how to use the IsModified property. This code example is part of a larger example provided for the ConfigurationLockCollection class.",0,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: void ICollection.CopyTo( Array array, int index ) Parameters arrayType: System.Array A one-dimensional Array that is the destination of the elements copied from the ConfigurationLockCollection collection. The Array must have zero-based indexing. indexType: System.Int32 The zero-based index in array at which copying begins. Implements ICollection.CopyTo(Array, Int32) Summary: Copies the entire ConfigurationLockCollection collection to a compatible one-dimensional Array, starting at the specified index of the target array.",1,0,1,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public enum ConfigurationSaveMode Summary: Determines which properties are written out to a configuration file. Remarks: The ConfigurationSaveMode enumeration values identify which properties are written out to a configuration file when calling the Save and SaveAs methods.",1,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: [SerializableAttribute] public sealed class ConfigurationSectionCollection : NameObjectCollectionBase Summary: Represents a collection of related sections within a configuration file. Remarks: Use the ConfigurationSectionCollection class to iterate through a collection of ConfigurationSection objects. You can access this collection of objects using the Sections property or the Sections property. The ConfigurationSectionCollection class is also used in the creation of custom types that extend the ConfigurationSection class. Example: The following code example shows how to use the ConfigurationSectionCollection class.  The following example is an excerpt of the configuration file used by the previous example. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: protected internal virtual bool ShouldSerializeSectionGroupInTargetVersion( FrameworkName targetFramework ) Parameters targetFrameworkType: System.Runtime.Versioning.FrameworkName The target version of the .NET Framework. Return Value Type: System.Boolean true if the current section group should be serialized; otherwise, false. Summary: Indicates whether the current ConfigurationSectionGroup instance should be serialized when the configuration object hierarchy is serialized for the specified target version of the .NET Framework. Remarks: Each configuration section group that is created for the .NET Framework version 4 and later versions must explicitly override this method and return true, but only if the section group is valid for the specified version of the .NET Framework. Existing configuration section groups that were created for earlier versions of the .NET Framework do not have to be changed. The base type contains a default implementation of this method that always returns true. In other words, if a configuration section group implementer does not override this method, by default the configuration section group will be serialized for all framework versions.",1,0,1,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override IEnumerator GetEnumerator() Return Value Type: System.Collections.IEnumerator An IEnumerator that can be used to iterate through the ConfigurationSectionGroupCollection object. Implements IEnumerable.GetEnumerator Summary: Gets an enumerator that can iterate through the ConfigurationSectionGroupCollection object. Example: The following code example shows how to use the GetEnumerator method.",1,0,0,0,0,0,1,0,1,0,0,1
"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property)] public class ConfigurationValidatorAttribute : Attribute Summary: Serves as the base class for the System.Configuration validator attribute types. Remarks: All the ASP.NET configuration standard validator attribute types derive from ConfigurationValidatorAttribute. You can use this type to create your own custom validator attribute. Example: The following code examples demonstrate how to create two custom validators using the ConfigurationValidatorAttribute type. The first example performs validation using hard-coded parameters; the second example performs validation using the parameters assigned to it at the time it is applied to the related section property. This code example also contains three supporting files. The first file contains the custom section that uses the validators described above, the second file contains a custom converter type, and the third file contains the console application that builds and uses the custom validators and the section that contains them. The following code example shows how to create a fixed validator with hard-coded parameters.  The following code example shows how to create a programmable validator.    The following code example shows how to create a custom section using the previous validators.    The following code example shows how to create a custom converter.    The following code example shows how to create the console application that builds and uses the custom validators and their containing section.    The following code example is a configuration excerpt used by the previous example. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public virtual ConfigurationValidatorBase ValidatorInstance { get; } Property Value Type: System.Configuration.ConfigurationValidatorBase The current ConfigurationValidatorBase. Summary: Gets the validator attribute instance.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override void Validate( Object value ) Parameters valueType: System.Object The object value. Summary: Determines whether the value of an object is valid. Remarks: The Validate method validates any object with a value.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public string LocalUserConfigFilename { get; set; } Property Value Type: System.String The configuration file name. Summary: Gets or sets the name of the configuration file for the local user.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public sealed class ExeContext Summary: Manages the path context for the current application. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: public class IntegerValidator : ConfigurationValidatorBase Summary: Provides validation of an Int32 value. Remarks: The IntegerValidator class is used to ensure that an integer meets specific criteria. The criteria for validation are established when an instance of the IntegerValidator class is created. The IntegerValidator constructor with two parameters ensures that the integer being verified adheres to both a minimum and a maximum value. The IntegerValidator constructor with three parameters checks both the minimum and maximum Int32 values, as well as whether the value to be validated is within the specified range. The IntegerValidator constructor with four parameters checks the previous three parameters and also checks whether the Int32 value is equal to a specific resolution. The CanValidate method determines whether the object type being validated matches the expected type. The object being validated is passed as a parameter of the Validate method. Example: The following code example demonstrates how to use the IntegerValidator type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,1,1,1,1,0,0,0
"Additional online Documentation: Syntax: public override void Validate( Object value ) Parameters valueType: System.Object The value to be validated. Summary: Determines whether the value of an object is valid. Remarks: An IntegerValidator object contains the rules necessary to validate an integer object. The rules are established when an instance of the IntegerValidator class is created. The integer object to validate is passed as a parameter of the Validate method. Example: The following code example demonstrates how to use the Validate method. This code example is part of a larger example provided for the IntegerValidator class.",1,0,0,0,0,0,0,0,1,0,0,0
"Additional online Documentation: Syntax: public sealed class NameValueConfigurationElement : ConfigurationElement Summary: A configuration element that contains a String name and String value. This class cannot be inherited. Remarks: The NameValueConfigurationElement inherits from the ConfigurationElement base class. The ConfigurationElement represents an element within a configuration file. There is a difference between the NameValueConfigurationElement class and KeyValueConfigurationElement class. The NameValueConfigurationElement class does not require the first string to be unique, whereas KeyValueConfigurationElement class requires the first string to be a key, and therefore unique in the collection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0
"Additional online Documentation: Syntax: public override bool CanValidate( Type type ) Parameters typeType: System.Type The object type. Return Value Type: System.Boolean true if the type parameter matches a TimeSpan object; otherwise, false. Summary: Determines whether the object type can be validated. Example: The following code example demonstrates how to use the CanValidate method. This code example is part of a larger example provided for the PositiveTimeSpanValidator class.",1,0,0,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public void Remove( string name ) Parameters nameType: System.String The name of the ProviderSettings object to remove. Summary: Removes an element from the collection. Remarks: Use the Remove method to remove a specified ProviderSettings object from the collection.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: [PermissionSetAttribute(SecurityAction.Demand, Name = #FullTrust#)] public sealed class RsaProtectedConfigurationProvider : ProtectedConfigurationProvider Summary: Provides a ProtectedConfigurationProvider instance that uses RSA encryption to encrypt and decrypt configuration data. Remarks: The RsaProtectedConfigurationProvider class gives you a way to encrypt sensitive information stored in a configuration file, which helps protect it from unauthorized access. You use the built-in RsaProtectedConfigurationProvider instance by declaring the provider and making appropriate settings in the configuration file instead of creating an instance of this class, as shown in the example later in this topic. The RsaProtectedConfigurationProvider object uses the cryptography functions provided by RSA class to encrypt and decrypt configuration sections. Note Before ASP.NET can decrypt encrypted information in your configuration file, the identity of your ASP.NET application must have read access to the encryption key used to encrypt and decrypt the configuration data. For more information, see Walkthrough: Encrypting Configuration Information Using Protected Configuration. Example: The following code example shows how to use the standard RsaProtectedConfigurationProvider to protect or unprotect a configuration section.  The following example shows an excerpt from a configuration file after encryption. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public ConfigurationAllowDefinition AllowDefinition { get; set; } Property Value Type: System.Configuration.ConfigurationAllowDefinition A value that indicates where in the configuration file hierarchy the associated ConfigurationSection object can be declared. Summary: Gets or sets a value that indicates where in the configuration file hierarchy the associated configuration section can be defined. Remarks: AllowDefinition applies only to configuration files of Web applications. For client applications, you must use AllowExeDefinition. Example: The examples in this section show how to get the AllowDefinition property value after accessing the related section information in the configuration file. The following example gets the SectionInformation object.  The following example gets the AllowDefinition value.",1,0,1,0,0,0,0,0,1,0,0,1
"Additional online Documentation: Syntax: public class StringValidator : ConfigurationValidatorBase Summary: Provides validation of a string. Remarks: The StringValidator class is used to ensure that a string meets specific criteria. The criteria for validation is established when an instance of the StringValidator class is created. There are three constructor overloads for the StringValidator class. The StringValidator.StringValidator(Int32) constructor with one parameter verifies the minimum acceptable length of the string being validated. The StringValidator.StringValidator(Int32, Int32) constructor with two parameters ensures that the string being verified adheres to both a minimum and a maximum length. The StringValidator.StringValidator(Int32, Int32, String) constructor with three parameters checks both the minimum and the maximum length values of the string being verified, as well as whether specific characters are present in the string being validated. The CanValidate method determines whether the object type being validated matches the expected type. The object being validated is passed as a parameter of the Validate method. Example: The following example demonstrates how to use the StringValidator type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0
"Additional online Documentation: Syntax: public sealed class TimeSpanSecondsOrInfiniteConverter : TimeSpanSecondsConverter Summary: Converts a TimeSpan expressed in seconds or as a standard infinite time span. Remarks: This type, like all the other configuration converter types, converts strings found in the configuration file to and from the related strongly typed properties. In particular, the TimeSpanSecondsOrInfiniteConverter converts String seconds, assigned to a configuration property, to TimeSpan seconds, and vice versa. If the configuration property has a String value of #infinite#, it converts this value to MaxValue and vice versa. The infinite TimeSpan value is represented by the MaxValue enumeration value. Example: Refer to the code examples in the InfiniteTimeSpanConverter and TimeSpanMinutesConverter classes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: public TimeSpanSecondsOrInfiniteConverter() Summary: Initializes a new instance of the TimeSpanSecondsOrInfiniteConverter class. Remarks: Normally, you use the converter types provided by the system. The only time you need to use the TimeSpanSecondsOrInfiniteConverter constructor is when you create your own conversion type.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public override ConfigurationValidatorBase ValidatorInstance { get; } Property Value Type: System.Configuration.ConfigurationValidatorBase The ConfigurationValidatorBase validator instance. Summary: Gets an instance of the TimeSpanValidator class. Remarks: You use the ValidatorInstance property to perform string validation by calling its Validate method.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public sealed class TypeNameConverter : ConfigurationConverterBase Summary: Converts between type and string values. This class cannot be inherited. Remarks: This type, like all the other configuration converter types, converts strings found in the configuration file to and from the related strongly typed properties. In particular, the TypeNameConverter class converts a String value, assigned to a configuration type, to a Type value and vice versa. The type referred to is the class responsible for processing the configuration it is associated with. Example: The following example shows how to obtain a type associated with a custom section. For the implementation of the custom section, refer to the code example in the ConfigurationConverterBase class reference.  The following example is a configuration excerpt used by the previous example. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0
"Additional online Documentation: Syntax: [ComVisibleAttribute(false)] public interface IInternalConfigConfigurationFactory Summary: Defines the interfaces used by the internal design time API to create a Configuration object.",1,0,0,0,0,0,0,0,0,0,0,0
"Additional online Documentation: Syntax: [ComVisibleAttribute(false)] public interface IInternalConfigHost Summary: Defines interfaces used by internal .NET structures to initialize application configuration properties.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: bool SupportsLocation { get; } Property Value Type: System.Boolean true if the configuration supports location tags; otherwise, false. Summary: Returns a value indicating whether the host configuration supports location tags.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: event InternalConfigEventHandler ConfigRemoved Summary: Represents the method that handles the ConfigRemoved event of a IInternalConfigRoot object.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: void RemoveConfig( string configPath ) Parameters configPathType: System.String The path of the configuration file. Summary: Finds and removes a configuration record and all its children for a given configuration path.",1,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: public delegate void InternalConfigEventHandler( Object sender, InternalConfigEventArgs e ) Parameters senderType: System.Object The source object of the event. eType: System.Configuration.Internal.InternalConfigEventArgs A configuration event argument. Summary: Defines a class used by the .NET Framework infrastructure to support configuration events.",0,0,0,0,0,0,0,0,0,0,0,1
"Additional online Documentation: Syntax: protected ProviderBase() Summary: Initializes a new instance of the ProviderBase class.",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the AudioClip object specified by the URL argument.  This method always returns immediately, whether or not the audio clip exists. When this applet attempts to play the audio clip, the data will be loaded.  Parameters: url - an absolute URL giving the location of the audio clip. Returns: the audio clip at the specified URL. See Also: AudioClip",1,0,0,0,0,0,0,0,0,0,0,1
"The AudioClip interface is a simple abstraction for playing a sound clip.  Multiple AudioClip items can be playing at the same time, and the resulting  sound is mixed together to produce a composite.  Since:     JDK1.0",1,0,0,0,0,0,0,0,0,0,0,0
" The event mask for selecting text events.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,1,1
"Handles the componentAdded container event by invoking the componentAdded methods on listener-a and listener-b.  Specified by: componentAdded in interface ContainerListener Parameters: e - the component event",0,1,0,0,0,0,0,0,0,0,0,0
"Removes the old container-listener from container-listener-l and returns the resulting multicast listener.  Parameters: l - container-listener-l oldl - the container-listener being removed",1,0,0,0,0,0,0,0,0,0,0,1
"This class is for AWT permissions. An AWTPermission contains a target name  but no actions list; you either have the named permission or you don't.  The target name is the name of the AWT permission (see below). The naming  convention follows the hierarchical property naming convention. Also, an  asterisk could be used to represent all AWT permissions.  The following table lists all the possible AWTPermission target names, and  for each provides a description of what the permission allows and a  discussion of the risks of granting code the permission.  Permission Target Name 	What the Permission Allows 	Risks of Allowing this  Permission accessClipboard 	Posting and retrieval of information to and from the AWT  clipboard 	This would allow malfeasant code to share potentially sensitive  or confidential information. accessEventQueue 	Access to the AWT event queue 	After retrieving the AWT  event queue, malicious code may peek at and even remove existing events  from its event queue, as well as post bogus events which may purposefully  cause the application or applet to misbehave in an insecure manner. accessSystemTray 	Access to the AWT SystemTray instance 	This would allow  malicious code to add tray icons to the system tray. First, such an icon  may look like the icon of some known application (such as a firewall or  anti-virus) and order a user to do something unsafe (with help of balloon  messages). Second, the system tray may be glutted with tray icons so that  no one could add a tray icon anymore. createRobot 	Create java.awt.Robot objects 	The java.awt.Robot object  allows code to generate native-level mouse and keyboard events as well as  read the screen. It could allow malicious code to control the system, run  other programs, read the display, and deny mouse and keyboard access to the  user. fullScreenExclusive 	Enter full-screen exclusive mode 	Entering full-screen  exclusive mode allows direct access to low-level graphics card memory. This  could be used to spoof the system, since the program is in direct control  of rendering. listenToAllAWTEvents 	Listen to all AWT events, system-wide 	After adding  an AWT event listener, malicious code may scan all AWT events dispatched in  the system, allowing it to read all user input (such as passwords). Each  AWT event listener is called from within the context of that event queue's  EventDispatchThread, so if the accessEventQueue permission is also enabled,  malicious code could modify the contents of AWT event queues system-wide,  causing the application or applet to misbehave in an insecure manner. readDisplayPixels 	Readback of pixels from the display screen 	Interfaces  such as the java.awt.Composite interface or the java.awt.Robot class allow  arbitrary code to examine pixels on the display enable malicious code to  snoop on the activities of the user. replaceKeyboardFocusManager 	Sets the KeyboardFocusManager for a particular  thread. 	When SecurityManager is installed, the invoking thread must be  granted this permission in order to replace the current  KeyboardFocusManager. If permission is not granted, a SecurityException  will be thrown. setAppletStub 	Setting the stub which implements Applet container services 	 Malicious code could set an applet's stub and result in unexpected behavior  or denial of service to an applet. setWindowAlwaysOnTop 	Setting always-on-top property of the window:  Window.setAlwaysOnTop(boolean) 	The malicious window might make itself look  and behave like a real full desktop, so that information entered by the  unsuspecting user is captured and subsequently misused showWindowWithoutWarningBanner 	Display of a window without also displaying  a banner warning that the window was created by an applet 	Without this  warning, an applet may pop up windows without the user knowing that they  belong to an applet. Since users may make security-sensitive decisions  based on whether or not the window belongs to an applet (entering a  username and password into a dialog box, for example), disabling this  warning banner may allow applets to trick the user into entering such  information. toolkitModality 	Creating TOOLKIT_MODAL dialogs and setting the  TOOLKIT_EXCLUDE window property. 	When a toolkit-modal dialog is shown from  an applet, it blocks all other applets in the browser. When launching  applications from Java Web Start, its windows (such as the security dialog)  may also be blocked by toolkit-modal dialogs, shown from these  applications. watchMousePointer 	Getting the information about the mouse pointer position  at any time 	Constantly watching the mouse pointer, an applet can make  guesses about what the user is doing, i.e. moving the mouse to the lower  left corner of the screen most likely means that the user is about to  launch an application. If a virtual keypad is used so that keyboard is  emulated using the mouse, an applet may guess what is being typed.  See Also:     BasicPermission, Permission, Permissions, PermissionCollection,      SecurityManager, Serialized Form",0,1,0,0,1,0,1,1,0,0,0,1
"Dispatch the event to its target, listeners of the events source, or do whatever it is this event is supposed to do.",1,0,0,0,0,0,0,0,0,0,0,0
"Gets the minimum value of the adjustable object.  Returns: the minimum value of the adjustable object",1,0,0,0,0,0,0,0,0,0,0,1
" Joins path segments by extending their outside edges until they meet.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Determines the minimum size of the target container using this layout manager.  This method is called when a container calls its getMinimumSize method. Most applications do not call this method directly.  Specified by: minimumLayoutSize in interface LayoutManager Parameters: target - the container in which to do the layout. Returns: the minimum dimensions needed to lay out the subcomponents of the specified container. See Also: Container, preferredLayoutSize(java.awt.Container), Container.getMinimumSize()",1,0,0,0,0,1,0,1,0,0,0,0
"Capabilities and properties of buffers.  Since:     1.4 See Also:     BufferStrategy.getCapabilities(),      GraphicsConfiguration.getBufferCapabilities()",0,0,0,0,0,0,0,0,0,0,0,1
"This class creates a labeled button. The application can cause some action  to happen when the button is pushed. This image depicts three views of a  Quit button as it appears under the Solaris operating system:  [The following context describes the graphic]  The first view shows the button as it appears normally. The second view  shows the button when it has input focus. Its outline is darkened to let  the user know that it is an active object. The third view shows the button  when the user clicks the mouse over the button, and thus requests that an  action be performed.  The gesture of clicking on a button with the mouse is associated with one  instance of ActionEvent, which is sent out when the mouse is both pressed  and released over the button. If an application is interested in knowing  when the button has been pressed but not released, as a separate gesture,  it can specialize processMouseEvent, or it can register itself as a  listener for mouse events by calling addMouseListener. Both of these  methods are defined by Component, the abstract superclass of all  components.  When a button is pressed and released, AWT sends an instance of  ActionEvent to the button, by calling processEvent on the button. The  button's processEvent method receives all events for the button; it passes  an action event along by calling its own processActionEvent method. The  latter method passes the action event on to any action listeners that have  registered an interest in action events generated by this button.  If an application wants to perform some action based on a button being  pressed and released, it should implement ActionListener and register the  new listener to receive events from this button, by calling the button's  addActionListener method. The application can make use of the button's  action command as a messaging protocol.  Since:     JDK1.0 See Also:     ActionEvent, ActionListener,      Component.processMouseEvent(java.awt.event.MouseEvent),      Component.addMouseListener(java.awt.event.MouseListener), Serialized     Form",1,0,1,0,0,1,1,1,0,0,0,0
"Flips to the component that was added to this layout with the specified name, using addLayoutComponent. If no such component exists, then nothing happens.  Parameters: parent - the parent container in which to do the layout name - the component name See Also: addLayoutComponent(java.awt.Component, java.lang.Object)",1,0,0,0,0,1,0,0,0,0,0,0
"Returns the number of Actions available in this object. If there is more than one, the first one is the default action.  Specified by: getAccessibleActionCount in interface AccessibleAction Overrides: getAccessibleActionCount in class MenuItem.AccessibleAWTMenuItem Returns: the number of Actions in this object",1,0,0,0,0,0,0,0,0,0,0,1
"This class implements accessibility support for the Choice class. It  provides an implementation of the Java Accessibility API appropriate to  choice user-interface elements.  Since:     1.3 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Obsolete as of Java 2 platform v1.1. Please use the add method instead.  Adds an item to this Choice menu.  Parameters: item - the item to be added Throws: NullPointerException - if the item's value is equal to null",1,0,1,0,0,0,0,0,0,0,0,1
"Removes the first occurrence of item from the Choice menu. If the item being removed is the currently selected item, then the first item in the choice becomes the selected item. Otherwise, the currently selected item remains selected (and the selected index is updated accordingly).  Parameters: item - the item to remove from this Choice menu Throws: IllegalArgumentException - if the item doesn't exist in the choice menu Since: JDK1.1",1,0,1,0,0,0,1,0,0,0,0,0
"The Color class is used to encapsulate colors in the default sRGB color  space or colors in arbitrary color spaces identified by a ColorSpace. Every  color has an implicit alpha value of 1.0 or an explicit one provided in the  constructor. The alpha value defines the transparency of a color and can be  represented by a float value in the range 0.0 - 1.0 or 0 - 255. An alpha  value of 1.0 or 255 means that the color is completely opaque and an alpha  value of 0 or 0.0 means that the color is completely transparent. When  constructing a Color with an explicit alpha or getting the color/alpha  components of a Color, the color components are never premultiplied by the  alpha component.  The default color space for the Java 2D(tm) API is sRGB, a proposed  standard RGB color space. For further information on sRGB, see  http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html .  See Also:     ColorSpace, AlphaComposite, Serialized Form",0,1,0,0,0,0,1,1,0,0,1,0
" The color red. In the default sRGB space. ",0,0,0,0,0,0,0,0,0,0,0,1
"Fire PropertyChange listener, if one is registered, when shown/hidden..  Since:     1.3",1,1,0,0,0,0,0,0,0,0,0,0
"Though the class is abstract, this should be called by all sub-classes.",0,0,1,0,0,0,0,0,0,0,0,0
"Returns the nth Accessible child of the object.  Specified by: getAccessibleChild in class AccessibleContext Parameters: i - zero-based index of child Returns: the nth Accessible child of the object See Also: AccessibleContext.getAccessibleChildrenCount()",1,0,0,0,0,0,0,0,0,0,0,0
"Determines if the object is enabled.  Specified by: isEnabled in interface AccessibleComponent Returns: true if object is enabled; otherwise, false See Also: AccessibleComponent.setEnabled(boolean), AccessibleContext.getAccessibleStateSet(), AccessibleState.ENABLED , AccessibleStateSet",0,0,0,0,0,0,0,0,0,0,0,1
"Destroys the buffers created through this object",1,0,0,0,0,0,0,0,0,0,0,1
"Restore the drawing buffer if it has been lost",1,0,0,0,0,0,0,0,0,0,0,0
"Sets the name of the component to the specified string.  Parameters: name - the string that is to be this component's name Since: JDK1.1 See Also: getName()",0,0,0,0,0,0,0,0,0,0,0,1
"Deprecated. As of JDK version 1.1, replaced by setEnabled(boolean).",0,0,0,0,0,0,0,0,0,0,0,0
"Checks whether this component contains the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.  Parameters: p - the point Since: JDK1.1 See Also: getComponentAt(Point)",0,0,0,0,0,0,0,0,0,0,0,1
"Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes. If listener l is null, no exception is thrown and no action is performed.  Refer to AWT Threading Issues for details on AWT's threading model.  Parameters: l - the hierarchy listener Since: 1.3 See Also: HierarchyEvent, HierarchyListener, removeHierarchyListener(java.awt.event.HierarchyListener), getHierarchyListeners()",1,0,0,0,0,0,0,0,0,0,1,1
"Returns an array of all the mouse listeners registered on this component.  Returns: all of this component's MouseListeners or an empty array if no mouse listeners are currently registered Since: 1.4 See Also: addMouseListener(java.awt.event.MouseListener), removeMouseListener(java.awt.event.MouseListener)",1,0,0,0,0,0,0,0,0,0,0,0
"Removes the specified input method listener so that it no longer receives input method events from this component. This method performs no function, nor does it throw an exception, if the listener specified by the argument was not previously added to this component. If listener l is null, no exception is thrown and no action is performed.  Refer to AWT Threading Issues for details on AWT's threading model.  Parameters: l - the input method listener Since: 1.2 See Also: InputMethodEvent, InputMethodListener, addInputMethodListener(java.awt.event.InputMethodListener), getInputMethodListeners()",1,0,0,0,0,0,0,0,0,0,0,0
"Deprecated. As of JDK version 1.1 replaced by processEvent(AWTEvent).",0,0,0,0,0,0,0,0,0,1,0,0
"Sets whether focus traversal keys are enabled for this Component. Components for which focus traversal keys are disabled receive key events for focus traversal keys. Components for which focus traversal keys are enabled do not see these events; instead, the events are automatically converted to traversal operations.  Parameters: focusTraversalKeysEnabled - whether focus traversal keys are enabled for this Component Since: 1.4 See Also: getFocusTraversalKeysEnabled(), setFocusTraversalKeys(int, java.util.Set<? extends java.awt.AWTKeyStroke>), getFocusTraversalKeys(int)",0,0,0,0,0,0,1,0,0,0,0,0
"Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window. This component must be displayable, focusable, visible and all of its ancestors (with the exception of the top-level Window) must be visible for the request to be granted. Every effort will be made to honor the request; however, in some cases it may be impossible to do so. Developers must never assume that this Component is the focus owner until this Component receives a FOCUS_GAINED event.  This method returns a boolean value. If false is returned, the request is guaranteed to fail. If true is returned, the request will succeed unless it is vetoed, or an extraordinary event, such as disposal of the Component's peer, occurs before the request can be granted by the native windowing system. Again, while a return value of true indicates that the request is likely to succeed, developers must never assume that this Component is the focus owner until this Component receives a FOCUS_GAINED event.  This method cannot be used to set the focus owner to no Component at all. Use KeyboardFocusManager.clearGlobalFocusOwner() instead.  The focus behavior of this method can be implemented uniformly across platforms, and thus developers are strongly encouraged to use this method over requestFocus when possible. Code which relies on requestFocus may exhibit different focus behavior on different platforms.  Note: Not all focus transfers result from invoking this method. As such, a component may receive focus without this or any of the other requestFocus methods of Component being invoked.  Returns: false if the focus change request is guaranteed to fail; true if it is likely to succeed Since: 1.4 See Also: requestFocus(), FocusEvent, addFocusListener(java.awt.event.FocusListener), isFocusable(), isDisplayable(), KeyboardFocusManager.clearGlobalFocusOwner()",1,0,1,0,1,0,0,0,0,0,0,0
"Returns an array of all the listeners which have been associated with the named property.  Returns: all of the PropertyChangeListeners associated with the named property; if no such listeners have been added or if propertyName is null, an empty array is returned Since: 1.4 See Also: addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener), removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener), getPropertyChangeListeners()",0,0,0,0,0,0,0,0,0,0,0,1
"Reports a bound property change.  Parameters: propertyName - the programmatic name of the property that was changed oldValue - the old value of the property (as a char) newValue - the new value of the property (as a char) Since: 1.5 See Also: firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)",0,0,0,0,0,0,0,0,0,0,0,1
"The Composite interface, along with CompositeContext, defines the methods  to compose a draw primitive with the underlying graphics area. After the  Composite is set in the Graphics2D context, it combines a shape, text, or  an image being rendered with the colors that have already been rendered  according to pre-defined rules. The classes implementing this interface  provide the rules and a method to create the context for a particular  operation. CompositeContext is an environment used by the compositing  operation, which is created by the Graphics2D prior to the start of the  operation. CompositeContext contains private information and resources  needed for a compositing operation. When the CompositeContext is no longer  needed, the Graphics2D object disposes of it in order to reclaim resources  allocated for the operation.  Instances of classes implementing Composite must be immutable because the  Graphics2D does not clone these objects when they are set as an attribute  with the setComposite method or when the Graphics2D object is cloned. This  is to avoid undefined rendering behavior of Graphics2D, resulting from the  modification of the Composite object after it has been set in the  Graphics2D context.  Since this interface must expose the contents of pixels on the target  device or image to potentially arbitrary code, the use of custom objects  which implement this interface when rendering directly to a screen device  is governed by the readDisplayPixels AWTPermission. The permission check  will occur when such a custom object is passed to the setComposite method  of a Graphics2D retrieved from a Component.  See Also:     AlphaComposite, CompositeContext,      Graphics2D.setComposite(java.awt.Composite)",1,0,1,0,0,1,1,1,0,0,0,0
"Returns the maximum size of this container. If the maximum size has not been set explicitly by Component.setMaximumSize(Dimension) and the LayoutManager installed on this Container is an instance of LayoutManager2, then LayoutManager2.maximumLayoutSize(Container) is used to calculate the maximum size.  Note: some implementations may cache the value returned from the LayoutManager2. Implementations that cache need not invoke maximumLayoutSize on the LayoutManager2 every time this method is invoked, rather the LayoutManager2 will only be queried after the Container becomes invalid.  Overrides: getMaximumSize in class Component Returns: an instance of Dimension that represents the maximum size of this container. See Also: getPreferredSize(), getMinimumSize(), getLayout(), LayoutManager2.maximumLayoutSize(Container), Component.getMaximumSize()",1,0,0,0,0,1,1,0,0,0,0,1
"Returns whether the focus traversal policy has been explicitly set for this Container. If this method returns false, this Container will inherit its focus traversal policy from an ancestor.  Returns: true if the focus traversal policy has been explicitly set for this Container; false otherwise. Since: 1.4",1,0,0,0,0,0,0,0,0,0,0,1
"Sets whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly. If true, during normal forward focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root's default Component to focus. If false, the next Component in the focus traversal cycle rooted at the specified focus cycle root will be traversed instead. The default value for this property is true.  Parameters: implicitDownCycleTraversal - whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly See Also: getImplicitDownCycleTraversal(), getFirstComponent(java.awt.Container)",1,0,0,0,0,0,0,0,0,0,0,1
"Creates a new custom cursor object with the specified name.  Note: this constructor should only be used by AWT implementations as part of their support for custom cursors. Applications should use Toolkit.createCustomCursor().  Parameters: name - the user-visible name of the cursor. See Also: Toolkit.createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String)",0,0,1,0,0,0,0,0,0,0,0,0
"A FocusTraversalPolicy that determines traversal order based on the order  of child Components in a Container. From a particular focus cycle root, the  policy makes a pre-order traversal of the Component hierarchy, and  traverses a Container's children according to the ordering of the array  returned by Container.getComponents(). Portions of the hierarchy that are  not visible and displayable will not be searched.  If client code has explicitly set the focusability of a Component by either  overriding Component.isFocusTraversable() or Component.isFocusable(), or by  calling Component.setFocusable(), then a DefaultFocusTraversalPolicy  behaves exactly like a ContainerOrderFocusTraversalPolicy. If, however, the  Component is relying on default focusability, then a  DefaultFocusTraversalPolicy will reject all Components with non-focusable  peers. This is the default FocusTraversalPolicy for all AWT Containers.  The focusability of a peer is implementation-dependent. Sun recommends that  all implementations for a particular native platform construct peers with  the same focusability. The recommendations for Windows and Unix are that  Canvases, Labels, Panels, Scrollbars, ScrollPanes, Windows, and lightweight  Components have non-focusable peers, and all other Components have  focusable peers. These recommendations are used in the Sun AWT  implementations. Note that the focusability of a Component's peer is  different from, and does not impact, the focusability of the Component  itself.  Please see How to Use the Focus Subsystem, a section in The Java Tutorial,  and the Focus Specification for more information.  Since:     1.4 See Also:     Container.getComponents(), Component.isFocusable(),      Component.setFocusable(boolean), Serialized Form",1,1,1,0,0,0,1,1,0,0,0,0
"The default KeyboardFocusManager for AWT applications. Focus traversal is  done in response to a Component's focus traversal keys, and using a  Container's FocusTraversalPolicy.  Please see How to Use the Focus Subsystem, a section in The Java Tutorial,  and the Focus Specification for more information.  Since:     1.4 See Also:     FocusTraversalPolicy, Component.setFocusTraversalKeys(int,     java.util.Set<? extends java.awt.AWTKeyStroke>),      Component.getFocusTraversalKeys(int)",1,0,0,0,0,1,0,0,0,0,1,0
"Represents an action type. Each platform supports a different set of  actions. You may use the Desktop.isSupported(java.awt.Desktop.Action)  method to determine if the given action is supported by the current  platform.  Since:     1.6 See Also:     Desktop.isSupported(java.awt.Desktop.Action)",0,0,0,0,0,0,1,1,0,1,0,1
" Represents a print action.  See Also: Desktop.print(java.io.File) ",0,0,0,0,0,0,0,0,0,0,0,0
"Modal dialogs block all input to some top-level windows. Whether a  particular window is blocked depends on dialog's type of modality; this is  called the scope of blocking. The ModalityType enum specifies modal types  and their associated scopes.  Since:     1.6 See Also:     Dialog.getModalityType(),      Dialog.setModalityType(java.awt.Dialog.ModalityType),      Toolkit.isModalityTypeSupported(java.awt.Dialog.ModalityType)",1,1,0,0,0,0,0,0,0,0,0,0
"Constructs an initially invisible Dialog with the specified owner Frame and modality and an empty title.  Parameters: owner - the owner of the dialog or null if this dialog has no owner modal - specifes whether dialog blocks user input to other top-level windows when shown. If false, the dialog is MODELESS; if true, the modality type property is set to DEFAULT_MODALITY_TYPE Throws: IllegalArgumentException - if the owner's GraphicsConfiguration is not from a screen device HeadlessException - when GraphicsEnvironment.isHeadless() returns true See Also: Dialog.ModalityType, Dialog.ModalityType.MODELESS, DEFAULT_MODALITY_TYPE, setModal(boolean), setModalityType(java.awt.Dialog.ModalityType), GraphicsEnvironment.isHeadless()",1,1,0,0,0,0,0,0,0,0,0,0
"Constructs an initially invisible, modeless Dialog with the specified owner Window and an empty title.  Parameters: owner - the owner of the dialog. The owner must be an instance of Dialog, Frame, any of their descendents or null Throws: IllegalArgumentException - if the owner is not an instance of Dialog or Frame IllegalArgumentException - if the owner's GraphicsConfiguration is not from a screen device HeadlessException - when GraphicsEnvironment.isHeadless() returns true Since: 1.6 See Also: GraphicsEnvironment.isHeadless()",1,0,1,0,0,0,0,0,0,0,0,0
" The width dimension; negative values can be used.  Since: 1.0 See Also: getSize(), setSize(double, double) ",0,0,1,0,0,0,0,0,0,0,0,1
"The DisplayMode class encapsulates the bit depth, height, width, and  refresh rate of a GraphicsDevice. The ability to change graphics device's  display mode is platform- and configuration-dependent and may not always be  available (see GraphicsDevice.isDisplayChangeSupported()).  For more information on full-screen exclusive mode API, see the  Full-Screen Exclusive Mode API Tutorial.  Since:     1.4 See Also:     GraphicsDevice, GraphicsDevice.isDisplayChangeSupported(),      GraphicsDevice.getDisplayModes(),      GraphicsDevice.setDisplayMode(java.awt.DisplayMode)",1,0,0,0,0,0,0,0,0,1,1,0
"NOTE: The Event class is obsolete and is available only for backwards  compatilibility. It has been replaced by the AWTEvent class and its  subclasses.  Event is a platform-independent class that encapsulates events from the  platform's Graphical User Interface in the Java 1.0 event model. In Java  1.1 and later versions, the Event class is maintained only for backwards  compatibilty. The information in this class description is provided to  assist programmers in converting Java 1.0 programs to the new event model.  In the Java 1.0 event model, an event contains an id field that indicates  what type of event it is and which other Event variables are relevant for  the event.  For keyboard events, key contains a value indicating which key was  activated, and modifiers contains the modifiers for that event. For the  KEY_PRESS and KEY_RELEASE event ids, the value of key is the unicode  character code for the key. For KEY_ACTION and KEY_ACTION_RELEASE, the  value of key is one of the defined action-key identifiers in the Event  class (PGUP, PGDN, F1, F2, etc).  Since:     JDK1.0 See Also:     Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
" This flag indicates that the Meta key was down when the event occurred. For mouse events, this flag indicates that the right button was pressed or released.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
" This constant value indicates that the purpose of the file dialog window is to locate a file to which to write.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the font face name of the Font, localized for the specified locale. For example, Helvetica Fett could be returned as the font face name. Use getFamily to get the family name of the font.  Parameters: l - a locale for which to get the font face name Returns: a String representing the font face name, localized for the specified locale. See Also: getFamily(), Locale",1,1,0,0,0,0,0,1,0,0,0,0
"Returns the total advance width for showing the specified array of characters in this Font. The advance is the distance from the leftmost point to the rightmost point on the string's baseline. The advance of a String is not necessarily the sum of the advances of its characters. This is equivalent to measuring a String of the characters in the specified range.  Parameters: data - the array of characters to be measured off - the start offset of the characters in the array len - the number of characters to be measured from the array Returns: the advance width of the subarray of the specified char array in the font described by this FontMetrics object. Throws: NullPointerException - if data is null. IndexOutOfBoundsException - if the off and len arguments index characters outside the bounds of the data array. See Also: charWidth(int), charWidth(char), bytesWidth(byte[], int, int), stringWidth(String)",1,1,0,0,0,0,0,0,0,0,0,0
"Returns the bounds of the specified String in the specified Graphics context. The bounds is used to layout the String.  Note: The returned bounds is in baseline-relative coordinates (see class notes).  Parameters: str - the specified String context - the specified Graphics context Returns: a Rectangle2D that is the bounding box of the specified String in the specified Graphics context. See Also: Font.getStringBounds(String, FontRenderContext)",1,1,0,1,0,0,0,0,0,0,0,1
" This state bit indicates that frame is maximized in the horizontal direction.  Since: 1.4 See Also: setExtendedState(int), getExtendedState(), Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Constructs a new Graphics object. This constructor is the default contructor for a graphics context.  Since Graphics is an abstract class, applications cannot call this constructor directly. Graphics contexts are obtained from other graphics contexts or are created by calling getGraphics on a component.  See Also: create(), Component.getGraphics()",0,0,0,0,0,0,0,1,0,0,0,1
"Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface. Transparent pixels do not affect whatever pixels are already there.  This method returns immediately in all cases, even if the image area to be drawn has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete then drawImage returns false. As more of the image becomes available, the process that loads the image notifies the specified image observer.  This method always uses the unscaled version of the image to render the scaled rectangle and performs the required scaling on the fly. It does not use a cached, scaled version of the image for this operation. Scaling of the image from source to destination is performed such that the first coordinate of the source rectangle is mapped to the first coordinate of the destination rectangle, and the second source coordinate is mapped to the second destination coordinate. The subimage is scaled and flipped as needed to preserve those mappings.  Parameters: img - the specified image to be drawn. This method does nothing if img is null. dx1 - the x coordinate of the first corner of the destination rectangle. dy1 - the y coordinate of the first corner of the destination rectangle. dx2 - the x coordinate of the second corner of the destination rectangle. dy2 - the y coordinate of the second corner of the destination rectangle. sx1 - the x coordinate of the first corner of the source rectangle. sy1 - the y coordinate of the first corner of the source rectangle. sx2 - the x coordinate of the second corner of the source rectangle. sy2 - the y coordinate of the second corner of the source rectangle. observer - object to be notified as more of the image is scaled and converted. Returns: false if the image pixels are still changing; true otherwise. Since: JDK1.1 See Also: Image, ImageObserver, ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)",1,0,0,0,0,0,0,0,0,0,0,0
"Fills the interior of a Shape using the settings of the Graphics2D context. The rendering attributes applied include the Clip, Transform, Paint, and Composite.  Parameters: s - the Shape to be filled See Also: setPaint(java.awt.Paint), Graphics.setColor(java.awt.Color), transform(java.awt.geom.AffineTransform), setTransform(java.awt.geom.AffineTransform), setComposite(java.awt.Composite), clip(java.awt.Shape), Graphics.setClip(int, int, int, int)",1,0,0,0,0,0,0,0,0,0,0,0
"The GraphicsConfigTemplate class is used to obtain a valid  GraphicsConfiguration. A user instantiates one of these objects and then  sets all non-default attributes as desired. The  GraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate)  method found in the GraphicsDevice class is then called with this  GraphicsConfigTemplate. A valid GraphicsConfiguration is returned that  meets or exceeds what was requested in the GraphicsConfigTemplate.  Since:     1.2 See Also:     GraphicsDevice, GraphicsConfiguration, Serialized Form",1,0,0,0,0,0,1,1,0,0,0,0
"Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration. The returned VolatileImage may have data that is stored optimally for the underlying graphics device and may therefore benefit from platform-specific rendering acceleration.  Parameters: width - the width of the returned VolatileImage height - the height of the returned VolatileImage transparency - the specified transparency mode Returns: a VolatileImage whose data layout and color model is compatible with this GraphicsConfiguration. Throws: IllegalArgumentException - if the transparency is not a valid value Since: 1.5 See Also: Transparency.OPAQUE, Transparency.BITMASK, Transparency.TRANSLUCENT, Component.createVolatileImage(int, int)",1,0,0,0,0,0,0,0,0,1,0,0
"Returns the Window object representing the full-screen window if the device is in full-screen mode.  Returns: the full-screen window, or null if the device is not in full-screen mode. Since: 1.4 See Also: setFullScreenWindow(Window)",1,0,0,0,0,0,0,0,0,0,0,1
" Place the component in the corner of its display area where the first line of text on a page would normally end for the current ComponentOrienation. Equal to NORTHEAST for horizontal, left-to-right orientations and NORTHWEST for horizontal, right-to-left orientations.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Determines the minimum size of the parent container using this grid bag layout.  Most applications do not call this method directly.  Specified by: minimumLayoutSize in interface LayoutManager Parameters: parent - the container in which to do the layout Returns: the minimum size of the parent container See Also: Container.doLayout()",1,0,1,0,0,0,0,0,0,0,0,0
"Returns the maximum dimensions for this layout given the components in the specified target container.  Specified by: maximumLayoutSize in interface LayoutManager2 Parameters: target - the container which needs to be laid out Returns: the maximum dimensions for this layout See Also: Container, minimumLayoutSize(Container), preferredLayoutSize(Container)",1,0,0,0,0,0,0,0,0,0,0,1
"The GridLayout class is a layout manager that lays out a container's  components in a rectangular grid. The container is divided into equal-sized  rectangles, and one component is placed in each rectangle. For example, the  following is an applet that lays out six buttons into three rows and two  columns:  ------------------------------------------------------------------------       import java.awt.*; import java.applet.Applet; public class ButtonGrid extends Applet { public void init() { setLayout(new GridLayout(3,2)); add(new Button(1)); add(new Button(2)); add(new Button(3)); add(new Button(4)); add(new Button(5)); add(new Button(6)); } }   ------------------------------------------------------------------------  If the container's ComponentOrientation property is horizontal and  left-to-right, the above example produces the output shown in Figure 1. If  the container's ComponentOrientation property is horizontal and  right-to-left, the example produces the output shown in Figure 2.  [Shows 6 buttons in rows of 2. Row 1 shows buttons 1 then 2. Row 2 shows  buttons 3 then 4. Row 3 shows buttons 5 then 6.] 	[Shows 6 buttons in rows  of 2. Row 1 shows buttons 2 then 1. Row 2 shows buttons 4 then 3. Row 3  shows buttons 6 then 5.] Figure 1: Horizontal, Left-to-Right 	Figure 2: Horizontal, Right-to-Left  When both the number of rows and the number of columns have been set to  non-zero values, either by a constructor or by the setRows and setColumns  methods, the number of columns specified is ignored. Instead, the number of  columns is determined from the specified number of rows and the total  number of components in the layout. So, for example, if three rows and two  columns have been specified and nine components are added to the layout,  they will be displayed as three rows of three columns. Specifying the  number of columns affects the layout only when the number of rows is set to  zero.  Since:     JDK1.0 See Also:     Serialized Form",1,0,0,0,0,0,0,1,1,0,0,0
"Set top, left, bottom, and right to the specified values  Parameters: top - the inset from the top. left - the inset from the left. bottom - the inset from the bottom. right - the inset from the right. Since: 1.5",0,0,0,0,0,0,0,0,0,0,0,1
" The DestinationType instance to use for specifying print to file. ",0,0,0,1,0,0,0,0,0,0,0,1
" The DialogType instance to use for specifying no print dialog. ",0,0,0,0,0,0,0,0,0,0,0,0
"A type-safe enumeration of possible multi-page impositions. These  impositions are in compliance with IPP 1.1.  Since:     1.3",0,0,0,0,0,0,0,0,0,0,1,0
"A set of attributes which control a print job.  Instances of this class control the number of copies, default selection,  destination, print dialog, file and printer names, page ranges, multiple  document handling (including collation), and multi-page imposition (such as  duplex) of every print job which uses the instance. Attribute names are  compliant with the Internet Printing Protocol (IPP) 1.1 where possible.  Attribute values are partially compliant where possible.  To use a method which takes an inner class type, pass a reference to one of  the constant fields of the inner class. Client code cannot create new  instances of the inner class types because none of those classes has a  public constructor. For example, to set the print dialog type to the  cross-platform, pure Java print dialog, use the following code:   import java.awt.JobAttributes;  public class PureJavaPrintDialogExample { public void setPureJavaPrintDialog(JobAttributes jobAttributes) { jobAttributes.setDialog(JobAttributes.DialogType.COMMON); } }   Every IPP attribute which supports an attributeName-default value has a  corresponding setattributeNameToDefault method. Default value fields are  not provided.  Since:     1.3",0,0,0,0,0,0,1,1,1,0,1,0
"Returns the active Window, even if the calling thread is in a different context than the active Window. Only a Frame or a Dialog can be the active Window. The native windowing system may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first Frame or Dialog that is an owner of the focused Window.  This method will throw a SecurityException if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread's context.  Returns: the active Window Throws: SecurityException - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread's context See Also: getActiveWindow(), setGlobalActiveWindow(java.awt.Window)",1,0,1,0,0,0,0,0,0,0,0,0
"Sets the current focus cycle root. If the focus owner is itself a focus cycle root, then it may be ambiguous as to which Components represent the next and previous Components to focus during normal focus traversal. In that case, the current focus cycle root is used to differentiate among the possibilities.  This method is intended to be used only by KeyboardFocusManagers and focus implementations. It is not for general client use.  Parameters: newFocusCycleRoot - the new focus cycle root See Also: getCurrentFocusCycleRoot(), getGlobalCurrentFocusCycleRoot()",0,0,0,1,0,0,0,0,0,0,0,1
"Adds a PropertyChangeListener to the listener list for a specific property. The specified property may be user-defined, or one of the following: * whether the KeyboardFocusManager is currently managing focus for this application or applet's browser context (managingFocus) * the focus owner (focusOwner) * the permanent focus owner (permanentFocusOwner) * the focused Window (focusedWindow) * the active Window (activeWindow) * the default focus traversal policy (defaultFocusTraversalPolicy) * the Set of default FORWARD_TRAVERSAL_KEYS (forwardDefaultFocusTraversalKeys) * the Set of default BACKWARD_TRAVERSAL_KEYS (backwardDefaultFocusTraversalKeys) * the Set of default UP_CYCLE_TRAVERSAL_KEYS (upCycleDefaultFocusTraversalKeys) * the Set of default DOWN_CYCLE_TRAVERSAL_KEYS (downCycleDefaultFocusTraversalKeys) * the current focus cycle root (currentFocusCycleRoot) If listener is null, no exception is thrown and no action is performed.  Parameters: propertyName - one of the property names listed above listener - the PropertyChangeListener to be added See Also: addPropertyChangeListener(java.beans.PropertyChangeListener), removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) , getPropertyChangeListeners(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,0
"Get the role of this object.  Overrides: getAccessibleRole in class Component.AccessibleAWTComponent Returns: an instance of AccessibleRole describing the role of the object See Also: AccessibleRole",1,0,0,0,0,0,0,0,0,0,0,1
" Indicates that the label should be centered.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"The LinearGradientPaint class provides a way to fill a Shape with a linear  color gradient pattern. The user may specify two or more gradient colors,  and this paint will provide an interpolation between each color. The user  also specifies start and end points which define where in user space the  color gradient should begin and end.  The user must provide an array of floats specifying how to distribute the  colors along the gradient. These values should range from 0.0 to 1.0 and  act like keyframes along the gradient (they mark where the gradient should  be exactly a particular color).  In the event that the user does not set the first keyframe value equal to 0  and/or the last keyframe value equal to 1, keyframes will be created at  these positions and the first and last colors will be replicated there. So,  if a user specifies the following arrays to construct a gradient:   {Color.BLUE, Color.RED}, {.3f, .7f}   this will be converted to a gradient with the following keyframes:   {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f}   The user may also select what action the LinearGradientPaint should take  when filling color outside the start and end points. If no cycle method is  specified, NO_CYCLE will be chosen by default, which means the endpoint  colors will be used to fill the remaining area.  The colorSpace parameter allows the user to specify in which colorspace the  interpolation should be performed, default sRGB or linearized RGB.  The following code demonstrates typical usage of LinearGradientPaint:   Point2D start = new Point2D.Float(0, 0); Point2D end = new Point2D.Float(50, 50); float[] dist = {0.0f, 0.2f, 1.0f}; Color[] colors = {Color.RED, Color.WHITE, Color.BLUE}; LinearGradientPaint p = new LinearGradientPaint(start, end, dist, colors);   This code will create a LinearGradientPaint which interpolates between red  and white for the first 20% of the gradient and between white and blue for  the remaining 80%.  This image demonstrates the example code above for each of the three cycle  methods:  Since:     1.6 See Also:     Paint, Graphics2D.setPaint(java.awt.Paint)",1,0,1,0,0,0,1,0,1,0,0,0
"This class implements accessibility support for List children. It provides  an implementation of the Java Accessibility API appropriate to list  children user-interface elements.  Since:     1.3 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"Get the background color of this object.  Specified by: getBackground in interface AccessibleComponent Overrides: getBackground in class Component.AccessibleAWTComponent Returns: the background color, if supported, of the object; otherwise, null See Also: setBackground(java.awt.Color)",0,0,0,0,0,0,0,0,0,0,0,1
"Return the nth Accessible child of the object.  Overrides: getAccessibleChild in class Component.AccessibleAWTComponent Parameters: i - zero-based index of child Returns: the nth Accessible child of the object See Also: AccessibleContext.getAccessibleChildrenCount()",0,0,0,0,0,0,0,0,0,0,0,1
"Gets the selected items on this scrolling list in an array of Objects.  Specified by: getSelectedObjects in interface ItemSelectable Returns: an array of Objects representing the selected items on this scrolling list; if no item is selected, a zero-length array is returned. See Also: getSelectedItems(), ItemSelectable",1,0,0,0,0,0,0,0,0,0,0,0
"Calculates and returns the bitwise inclusive OR of the status of all media with the specified identifier that are tracked by this media tracker.  Possible flags defined by the MediaTracker class are LOADING, ABORTED, ERRORED, and COMPLETE. An image that hasn't started loading has zero as its status.  If the value of load is true, then this method starts loading any images that are not yet being loaded.  Parameters: id - the identifier of the images to check load - if true, start loading any images that are not yet being loaded Returns: the bitwise inclusive OR of the status of all of the media with the specified identifier that are being tracked See Also: statusAll(boolean), LOADING, ABORTED, ERRORED, COMPLETE",1,0,0,0,0,0,1,0,0,0,0,1
"The MenuBar class encapsulates the platform's concept of a menu bar bound  to a frame. In order to associate the menu bar with a Frame object, call  the frame's setMenuBar method.  This is what a menu bar might look like:  <img src=doc-files/MenuBar-1.gif <alt=Diagram of MenuBar containing 2  menus: Examples and Options. Examples menu is expanded showing items:  Basic, Simple, Check, and More Examples. ALIGN=center HSPACE=10 VSPACE=7>  A menu bar handles keyboard shortcuts for menu items, passing them along to  its child menus. (Keyboard shortcuts, which are optional, provide the user  with an alternative to the mouse for invoking a menu item and the action  that is associated with it.) Each menu item can maintain an instance of  MenuShortcut. The MenuBar class defines several methods, shortcuts() and  getShortcutMenuItem(java.awt.MenuShortcut) that retrieve information about  the shortcuts a given menu bar is managing.  Since:     JDK1.0 See Also:     Frame, Frame.setMenuBar(java.awt.MenuBar), Menu, MenuItem,      MenuShortcut, Serialized Form",1,1,0,0,0,1,1,1,0,0,0,0
"Gets the index of this object in its accessible parent.  Specified by: getAccessibleIndexInParent in class AccessibleContext Returns: the index of this object in its parent; -1 if this object does not have an accessible parent See Also: getAccessibleParent()",0,0,0,0,0,0,0,0,0,0,0,1
"All items in a menu must belong to the class MenuItem, or one of its  subclasses.  The default MenuItem object embodies a simple labeled menu item.  This picture of a menu bar shows five menu items: [The following text  describes this graphic.] The first two items are simple menu items, labeled Basic and Simple.  Following these two items is a separator, which is itself a menu item,  created with the label -. Next is an instance of CheckboxMenuItem  labeled Check. The final menu item is a submenu labeled More Examples,  and this submenu is an instance of Menu.  When a menu item is selected, AWT sends an action event to the menu item.  Since the event is an instance of ActionEvent, the processEvent method  examines the event and passes it along to processActionEvent. The latter  method redirects the event to any ActionListener objects that have  registered an interest in action events generated by this menu item.  Note that the subclass Menu overrides this behavior and does not send any  event to the frame until one of its subitems is selected.  See Also:     Serialized Form",0,1,0,0,0,1,1,0,0,0,0,0
"MouseInfo provides methods for getting information about the mouse, such as  mouse pointer location and the number of mouse buttons.  Since:     1.5",1,0,0,0,0,0,0,0,0,0,0,0
"The color space in which to perform the gradient interpolation.  Since:     1.6",0,0,0,0,0,0,0,0,0,0,0,0
" The MediaType instance for North American 7 x 9 in. ",0,0,0,0,0,0,0,0,0,0,0,1
" Description copied from class: Object Returns a string representation of the object. In general, the toString method returns a string that textually represents this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method.  The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:  getClass().getName() + '@' + Integer.toHexString(hashCode())  Overrides: toString in class Object ",1,1,1,0,0,0,0,0,1,0,0,0
"Returns a Raster containing the colors generated for the graphics operation.  Parameters: x - the x coordinate of the area in device space for which colors are generated. y - the y coordinate of the area in device space for which colors are generated. w - the width of the area in device space h - the height of the area in device space Returns: a Raster representing the specified rectangular area and containing the colors generated for the graphics operation.",1,0,0,0,0,0,0,0,0,0,0,0
"This class implements accessibility support for the Panel class. It  provides an implementation of the Java Accessibility API appropriate to  panel user-interface elements.  Since:     1.3 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,1
"A class that implements a menu which can be dynamically popped up at a  specified position within a component.  As the inheritance hierarchy implies, a PopupMenu can be used anywhere a  Menu can be used. However, if you use a PopupMenu like a Menu (e.g., you  add it to a MenuBar), then you cannot call show on that PopupMenu.  See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"Constructs a RadialGradientPaint with a default SRGB color space.  Parameters: center - the center point, in user space, of the circle defining the gradient. The last color of the gradient is mapped to the perimeter of this circle. radius - the radius of the circle defining the extents of the color gradient focus - the point in user space to which the first color is mapped fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the circle. cycleMethod - either NO_CYCLE, REFLECT, or REPEAT Throws: NullPointerException - if one of the points is null, or fractions array is null, or colors array is null, or cycleMethod is null IllegalArgumentException - if radius is non-positive, or fractions.length != colors.length, or colors is less than 2 in size, or a fractions value is less than 0.0 or greater than 1.0, or the fractions are not provided in strictly increasing order",1,1,1,0,0,0,0,0,0,0,0,0
"Returns true if this RenderingHints contains no key-value mappings.  Specified by: isEmpty in interface Map<Object,Object> Returns: true if this RenderingHints contains no key-value mappings.",1,0,0,0,0,0,0,0,0,0,0,1
"This class implements accessibility support for the ScrollPane class. It  provides an implementation of the Java Accessibility API appropriate to  scroll pane user-interface elements.  Since:     1.3 See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"A container class which implements automatic horizontal and/or vertical  scrolling for a single child component. The display policy for the  scrollbars can be set to:     1. as needed: scrollbars created and shown only when needed by       scrollpane    2. always: scrollbars created and always shown by the scrollpane    3. never: scrollbars never created or shown by the scrollpane  The state of the horizontal and vertical scrollbars is represented by two  ScrollPaneAdjustable objects (one for each dimension) which implement the  Adjustable interface. The API provides methods to access those objects such  that the attributes on the Adjustable object (such as unitIncrement, value,  etc.) can be manipulated.  Certain adjustable properties (minimum, maximum, blockIncrement, and  visibleAmount) are set internally by the scrollpane in accordance with the  geometry of the scrollpane and its child and these should not be set by  programs using the scrollpane.  If the scrollbar display policy is defined as never, then the scrollpane  can still be programmatically scrolled using the setScrollPosition() method  and the scrollpane will move and clip the child's contents appropriately.  This policy is useful if the program needs to create and manage its own  adjustable controls.  The placement of the scrollbars is controlled by platform-specific  properties set by the user outside of the program.  The initial size of this container is set to 100x100, but can be reset  using setSize().  Scrolling with the wheel on a wheel-equipped mouse is enabled by default.  This can be disabled using setWheelScrollingEnabled. Wheel scrolling can be  customized by setting the block and unit increment of the horizontal and  vertical Adjustables. For information on how mouse wheel events are  dispatched, see the class description for MouseWheelEvent.  Insets are used to define any space used by scrollbars and any borders  created by the scroll pane. getInsets() can be used to get the current  value for the insets. If the value of scrollbarsAlwaysVisible is false,  then the value of the insets will change dynamically depending on whether  the scrollbars are currently visible or not.  See Also:     Serialized Form",1,1,1,1,0,0,1,1,0,0,0,0
"Returns the ScrollPaneAdjustable object which represents the state of the horizontal scrollbar. The declared return type of this method is Adjustable to maintain backward compatibility.  See Also: ScrollPaneAdjustable",1,0,0,1,0,0,0,0,0,0,0,0
"This class represents the state of a horizontal or vertical scrollbar of a  ScrollPane. Objects of this class are returned by ScrollPane methods.  Since:     1.4 See Also:     Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
"This class implements accessibility support for the Scrollbar class. It  provides an implementation of the Java Accessibility API appropriate to  scrollbar user-interface elements.  Since:     1.3 See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"A class to encapsulate symbolic colors representing the color of native GUI  objects on a system. For systems which support the dynamic update of the  system colors (when the user changes the colors) the actual RGB values of  these symbolic colors will also change dynamically. In order to compare the  current RGB value of a SystemColor object with a non-symbolic Color  object, getRGB should be used rather than equals.  Note that the way in which these system colors are applied to GUI objects  may vary slightly from platform to platform since GUI objects may be  rendered differently on each platform.  System color values may also be available through the getDesktopProperty  method on java.awt.Toolkit.  See Also:     Toolkit.getDesktopProperty(java.lang.String), Serialized Form",1,1,0,0,0,0,1,1,0,0,0,0
" The array index for the info system color.  See Also: info, Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" The color rendered for the window-title background of inactive windows. ",0,0,0,0,0,0,0,0,0,0,0,0
"Adds a TrayIcon to the SystemTray. The tray icon becomes visible in the system tray once it is added. The order in which icons are displayed in a tray is not specified - it is platform and implementation-dependent.  All icons added by the application are automatically removed from the SystemTray upon application exit and also when the desktop system tray becomes unavailable.  Parameters: trayIcon - the TrayIcon to be added Throws: NullPointerException - if trayIcon is null IllegalArgumentException - if the same instance of a TrayIcon is added more than once AWTException - if the desktop system tray is missing See Also: remove(TrayIcon), getSystemTray(), TrayIcon, Image",1,0,0,0,0,1,0,0,0,0,0,1
" Adds the specified text event listener to receive text events from this text component. If l is null, no exception is thrown and no action is performed.  Refer to AWT Threading Issues for details on AWT's threading model.  Parameters: l - the text event listener See Also: removeTextListener(java.awt.event.TextListener), getTextListeners(), TextListener ",1,0,0,0,0,0,0,0,0,0,1,1
"This class implements accessibility support for the TextField class. It  provides an implementation of the Java Accessibility API appropriate to  text field user-interface elements.  Since:     1.3 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"A TextField object is a text component that allows for the editing of a  single line of text.  For example, the following image depicts a frame with four text fields of  varying widths. Two of these text fields display the predefined text  Hello.  [The preceding text describes this image.]  Here is the code that produces these four text fields:  ------------------------------------------------------------------------       TextField tf1, tf2, tf3, tf4; // a blank text field tf1 = new TextField(); // blank field of 20 columns tf2 = new TextField(, 20); // predefined text displayed tf3 = new TextField(Hello!); // predefined text in 30 columns tf4 = new TextField(Hello, 30);   ------------------------------------------------------------------------  Every time the user types a key in the text field, one or more key events  are sent to the text field. A KeyEvent may be one of three types:  keyPressed, keyReleased, or keyTyped. The properties of a key event  indicate which of these types it is, as well as additional information  about the event, such as what modifiers are applied to the key event and  the time at which the event occurred.  The key event is passed to every KeyListener or KeyAdapter object which  registered to receive such events using the component's addKeyListener  method. (KeyAdapter objects implement the KeyListener interface.)  It is also possible to fire an ActionEvent. If action events are enabled  for the text field, they may be fired by pressing the Return key.  The TextField class's processEvent method examines the action event and  passes it along to processActionEvent. The latter method redirects the  event to any ActionListener objects that have registered to receive action  events generated by this text field.  Since:     JDK1.0 See Also:     KeyEvent, KeyAdapter, KeyListener, ActionEvent,      Component.addKeyListener(java.awt.event.KeyListener),      processEvent(java.awt.AWTEvent),      processActionEvent(java.awt.event.ActionEvent),      addActionListener(java.awt.event.ActionListener), Serialized Form",1,0,0,0,0,1,1,0,1,0,0,1
"Gets the preferred size of this text field.  Overrides: getPreferredSize in class Component Returns: the preferred dimensions for displaying this text field. Since: JDK1.1 See Also: Component.getMinimumSize(), LayoutManager",0,0,0,0,0,0,0,0,0,0,0,1
"Creates this toolkit's implementation of TextField using the specified peer interface.  Parameters: target - the text field to be implemented. Returns: this toolkit's implementation of TextField. Throws: HeadlessException - if GraphicsEnvironment.isHeadless() returns true See Also: GraphicsEnvironment.isHeadless(), TextField, TextFieldPeer",1,0,0,0,0,0,0,0,0,0,0,1
"Creates this toolkit's implementation of List using the specified peer interface.  Parameters: target - the list to be implemented. Returns: this toolkit's implementation of List. Throws: HeadlessException - if GraphicsEnvironment.isHeadless() returns true See Also: GraphicsEnvironment.isHeadless(), List, ListPeer",1,0,0,0,0,0,1,0,0,0,0,1
"Creates this toolkit's implementation of Panel using the specified peer interface.  Parameters: target - the panel to be implemented. Returns: this toolkit's implementation of Panel. See Also: Panel, PanelPeer",1,0,0,0,0,0,0,0,0,0,0,0
"Obtains this toolkit's implementation of helper class for MouseInfo operations.  Returns: this toolkit's implementation of helper for MouseInfo Throws: UnsupportedOperationException - if this operation is not implemented Since: 1.5 See Also: MouseInfoPeer, MouseInfo",1,0,0,0,0,0,0,0,0,0,0,1
"Gets a PrintJob object which is the result of initiating a print operation on the toolkit's platform.  Each actual implementation of this method should first check if there is a security manager installed. If there is, the method should call the security manager's checkPrintJobAccess method to ensure initiation of a print operation is allowed. If the default implementation of checkPrintJobAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a RuntimePermission(queuePrintJob) permission.  Parameters: frame - the parent of the print dialog. May not be null. jobtitle - the title of the PrintJob. A null title is equivalent to . props - a Properties object containing zero or more properties. Properties are not standardized and are not consistent across implementations. Because of this, PrintJobs which require job and page control should use the version of this function which takes JobAttributes and PageAttributes objects. This object may be updated to reflect the user's job choices on exit. May be null. Returns: a PrintJob object, or null if the user cancelled the print job. Throws: NullPointerException - if frame is null. This exception is always thrown when GraphicsEnvironment.isHeadless() returns true. SecurityException - if this thread is not allowed to initiate a print job request Since: JDK1.1 See Also: GraphicsEnvironment.isHeadless(), PrintJob, RuntimePermission",1,0,1,1,0,1,0,1,0,0,0,0
"Get the application's or applet's EventQueue instance. Depending on the Toolkit implementation, different EventQueues may be returned for different applets. Applets should therefore not assume that the EventQueue instance returned by this method will be shared by other applets or the system.  First, if there is a security manager, its checkAwtEventQueueAccess method is called. If the default implementation of checkAwtEventQueueAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with an AWTPermission(accessEventQueue) permission.  Returns: the EventQueue object Throws: SecurityException - if a security manager exists and its SecurityManager.checkAwtEventQueueAccess() method denies access to the EventQueue See Also: AWTPermission",0,0,1,0,0,1,1,0,0,0,0,1
"A TrayIcon object represents a tray icon that can be added to the system  tray. A TrayIcon can have a tooltip (text), an image, a popup menu, and a  set of listeners associated with it.  A TrayIcon can generate various MouseEvents and supports adding  corresponding listeners to receive notification of these events. TrayIcon  processes some of the events by itself. For example, by default, when the  right-mouse click is performed on the TrayIcon it displays the specified  popup menu. When the mouse hovers over the TrayIcon the tooltip is  displayed.  Note: When the MouseEvent is dispatched to its registered listeners its  component property will be set to null. (See ComponentEvent.getComponent() ) The source property will be set to this TrayIcon. (See  EventObject.getSource())  Note: A well-behaved TrayIcon implementation will assign different gestures  to showing a popup menu and selecting a tray icon.  A TrayIcon can generate an ActionEvent. On some platforms, this occurs when  the user selects the tray icon using either the mouse or keyboard.  If a SecurityManager is installed, the AWTPermission accessSystemTray must  be granted in order to create a TrayIcon. Otherwise the constructor will  throw a SecurityException.  See the SystemTray class overview for an example on how to use the  TrayIcon API.  Since:     1.6 See Also:     SystemTray.add(java.awt.TrayIcon), ComponentEvent.getComponent(),      EventObject.getSource()",1,1,1,0,0,1,1,1,0,0,0,0
"Creates a TrayIcon with the specified image and tooltip text.  Parameters: image - the Image to be used tooltip - the string to be used as tooltip text; if the value is null no tooltip is shown Throws: IllegalArgumentException - if image is null UnsupportedOperationException - if the system tray isn't supported by the current platform HeadlessException - if GraphicsEnvironment.isHeadless() returns true SecurityException - if accessSystemTray permission is not granted See Also: SystemTray.add(TrayIcon), TrayIcon(Image), TrayIcon(Image, String, PopupMenu), SecurityManager.checkPermission(java.security.Permission), AWTPermission",1,1,0,0,0,0,0,0,0,0,0,1
"Returns an array of all the objects currently registered as Foo Listeners upon this Window. FooListeners are registered using the add FooListener method.  You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a Window w for its window listeners with the following code:  WindowListener[] wls = (WindowListener[])(w.getListeners(WindowListener.class));  If no such listeners exist, this method returns an empty array.  Overrides: getListeners in class Container Parameters: listenerType - the type of listeners requested; this parameter should specify an interface that descends from java.util.EventListener Returns: an array of all objects registered as FooListeners on this window, or an empty array if no such listeners have been added Throws: ClassCastException - if listenerType doesn't specify a class or interface that implements java.util.EventListener Since: 1.3 See Also: getWindowListeners()",0,0,0,0,0,0,0,1,1,0,0,0
"Returns the child Component of this Window that has focus if this Window is focused; returns null otherwise.  Returns: the child Component with focus, or null if this Window is not focused See Also: getMostRecentFocusOwner(), isFocused()",1,0,0,0,0,0,0,0,0,0,0,1
"Checks if this Window is showing on screen.  Overrides: isShowing in class Component Returns: true if the component is showing, false otherwise See Also: Component.setVisible(boolean)",1,0,0,0,0,0,0,0,0,0,0,1
"Returns true if this Window will appear at the default location for the native windowing system the next time this Window is made visible. This method always returns false if the Window is showing on the screen.  Returns: whether this Window will appear at the default location Since: 1.5 See Also: setLocationByPlatform(boolean), isShowing()",1,0,0,0,0,0,0,0,0,0,1,1
"Constructs a CMMException with the specified detail message.  Parameters: s - the specified detail message",0,0,0,0,0,0,0,0,0,0,0,1
" Generic 12 component color spaces.  See Also: Constant Field Values ",0,1,0,0,0,0,0,0,0,0,0,0
"Returns the ICC_Profile for this ICC_ColorSpace.  Returns: the ICC_Profile for this ICC_ColorSpace.",0,0,0,0,0,0,0,0,0,0,0,1
"Returns profile major version.  Returns: The major version of the profile.",0,0,0,0,0,0,0,0,0,0,0,1
"Write this ICC_Profile to a file.  Parameters: fileName - The file to write the profile data to. Throws: IOException - If the file cannot be opened for writing or an I/O error occurs while writing to the file.",1,0,0,0,0,0,0,0,0,0,0,1
"Returns a byte array corresponding to the data of this ICC_Profile.  Returns: A byte array that contains the profile data. See Also: setData(int, byte[])",1,0,0,0,0,0,0,0,0,0,0,0
"A subclass of the ICC_Profile class which represents profiles which meet  the following criteria: the color space type of the profile is TYPE_GRAY  and the profile includes the grayTRCTag and mediaWhitePointTag tags.  Examples of this kind of profile are monochrome input profiles, monochrome  display profiles, and monochrome output profiles. The getInstance methods  in the ICC_Profile class will return an ICC_ProfileGray object when the  above conditions are met. The advantage of this class is that it provides a  lookup table that Java or native methods may be able to use directly to  optimize color conversion in some cases.  To transform from a GRAY device profile color space to the CIEXYZ Profile  Connection Space, the device gray component is transformed by a lookup  through the tone reproduction curve (TRC). The result is treated as the  achromatic component of the PCS.                    PCSY = grayTRC[deviceGray]    The inverse transform is done by converting the PCS Y components to device  Gray via the inverse of the grayTRC.  See Also:     Serialized Form",1,1,0,0,0,0,1,1,1,0,1,0
" To transfer a list of files to/from Java (and the underlying platform) a DataFlavor of this type/subtype and representation class of java.util.List is used. Each element of the list is required/guaranteed to be of type java.io.File. ",0,0,1,1,0,0,0,0,0,0,0,0
"Tests an arbitrary Object to this DataFlavor for equality. Two DataFlavors are considered equal if and only if their MIME primary type and subtype and representation class are equal. Additionally, if the primary type is text, the subtype denotes a text flavor which supports the charset parameter, and the representation class is not java.io.Reader, java.lang.String, java.nio.CharBuffer, or [C, the charset parameter must also be equal. If a charset is not explicitly specified for one or both DataFlavors, the platform default encoding is assumed. See selectBestTextFlavor for a list of text flavors which support the charset parameter.  Overrides: equals in class Object Parameters: o - the Object to compare with this Returns: true if that is equivalent to this DataFlavor; false otherwise See Also: selectBestTextFlavor(java.awt.datatransfer.DataFlavor[])",1,0,0,0,0,0,0,0,0,0,0,0
"FlavorEvent is used to notify interested parties that available DataFlavor s have changed in the Clipboard (the event source).  Since:     1.5 See Also:     FlavorListener, Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
"A two-way Map between natives (Strings), which correspond to platform-  specfic data formats, and flavors (DataFlavors), which corerspond to  platform-independent MIME types. FlavorMaps need not be symmetric, but  typically are.  Since:     1.2",1,0,0,0,0,0,0,0,0,0,0,0
"A FlavorMap which relaxes the traditional 1-to-1 restriction of a Map. A  flavor is permitted to map to any number of natives, and likewise a native  is permitted to map to any number of flavors. FlavorTables need not be  symmetric, but typically are.  Since:     1.4",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: ClipboardOwner Notifies this object that it is no longer the clipboard owner. This method will be called when another application or another object within this application asserts ownership of the clipboard.  Specified by: lostOwnership in interface ClipboardOwner Parameters: clipboard - the clipboard that is no longer owned contents - the contents which this owner had placed on the clipboard",1,0,0,0,0,1,0,0,0,0,0,0
"This interface is sourced from a DragGestureRecognizer and is invoked when  an object of that (sub)class detects a drag initiating gesture.  The implementor of this interface is responsible for starting the drag as a  result of receiving such notification.  See Also:     DragGestureRecognizer, DragGestureEvent, DragSource",1,0,0,0,0,0,1,0,0,0,0,0
"Creates a new DragGestureRecognizer that implements the specified abstract subclass of DragGestureRecognizer, and sets the specified Component and DragGestureListener on the newly created object.  Parameters: recognizerAbstractClass - the requested abstract type actions - the permitted source drag actions c - the Component target dgl - the DragGestureListener to notify  Returns: the new DragGestureRecognizer or null if the Toolkit.createDragGestureRecognizer method has no implementation available for the requested DragGestureRecognizer subclass and returns null",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the DragGestureEvent that initially triggered the drag.  Returns: the Event that triggered the drag",0,0,0,0,0,0,0,0,0,0,0,1
"A listener interface for receiving mouse motion events during a drag  operation.  The class that is interested in processing mouse motion events during a  drag operation either implements this interface or extends the abstract  DragSourceAdapter class (overriding only the methods of interest).  Create a listener object using that class and then register it with a  DragSource. Whenever the mouse moves during a drag operation initiated with  this DragSource, that object's dragMouseMoved method is invoked, and the  DragSourceDragEvent is passed to it.  Since:     1.4 See Also:     DragSourceDragEvent, DragSource, DragSourceListener, DragSourceAdapter",1,0,0,1,0,0,0,1,0,0,0,0
"An abstract adapter class for receiving drop target events. The methods in  this class are empty. This class exists only as a convenience for creating  listener objects.  Extend this class to create a DropTargetEvent listener and override the  methods for the events of interest. (If you implement the  DropTargetListener interface, you have to define all of the methods in it.  This abstract class defines a null implementation for every method except  drop(DropTargetDropEvent), so you only have to define methods for events  you care about.) You must provide an implementation for at least  drop(DropTargetDropEvent). This method cannot have a null implementation  because its specification requires that you either accept or reject the  drop, and, if accepted, indicate whether the drop was successful.  Create a listener object using the extended class and then register it with  a DropTarget. When the drag enters, moves over, or exits the operable part  of the drop site for that DropTarget, when the drop action changes, and  when the drop occurs, the relevant method in the listener object is  invoked, and the DropTargetEvent is passed to it.  The operable part of the drop site for the DropTarget is the part of the  associated Component's geometry that is not obscured by an overlapping  top-level window or by another Component higher in the Z-order that has an  associated active DropTarget.  During the drag, the data associated with the current drag operation can be  retrieved by calling getTransferable() on DropTargetDragEvent instances  passed to the listener's methods.  Note that getTransferable() on the DropTargetDragEvent instance should only  be called within the respective listener's method and all the necessary  data should be retrieved from the returned Transferable before that method  returns.  Since:     1.4 See Also:     DropTargetEvent, DropTargetListener",1,0,1,1,0,1,1,1,0,0,0,0
"Returns whether or not the specified data flavor is supported by the encapsulated transferable.  Specified by: isDataFlavorSupported in interface Transferable Parameters: flavor - the requested flavor for the data Returns: true if the data flavor is supported, false otherwise",0,0,0,0,0,0,0,0,0,0,0,1
"The DropTargetDragEvent is delivered to a DropTargetListener via its  dragEnter() and dragOver() methods.  The DropTargetDragEvent reports the source drop actions and the user drop  action that reflect the current state of the drag operation.  Source drop actions is a bitwise mask of DnDConstants that represents the  set of drop actions supported by the drag source for this drag operation.  User drop action depends on the drop actions supported by the drag source  and the drop action selected by the user. The user can select a drop action  by pressing modifier keys during the drag operation:   Ctrl + Shift -> ACTION_LINK Ctrl         -> ACTION_COPY Shift        -> ACTION_MOVE   If the user selects a drop action, the user drop action is one of  DnDConstants that represents the selected drop action if this drop action  is supported by the drag source or DnDConstants.ACTION_NONE if this drop  action is not supported by the drag source.  If the user doesn't select a drop action, the set of DnDConstants that  represents the set of drop actions supported by the drag source is searched  for DnDConstants.ACTION_MOVE, then for DnDConstants.ACTION_COPY, then for  DnDConstants.ACTION_LINK and the user drop action is the first constant  found. If no constant is found the user drop action is  DnDConstants.ACTION_NONE.  Since:     1.2 See Also:     Serialized Form",1,1,0,0,0,0,0,0,1,0,1,0
"This method returns the current DataFlavors.  Returns: current DataFlavors",0,0,0,0,0,0,0,0,0,0,0,0
"This method returns a boolean indicating if the specified DataFlavor is available from the source.  Parameters: df - the DataFlavor to test  Returns: if the DataFlavor specified is available from the source",1,0,0,0,0,0,0,0,0,0,0,1
"Construct a DropTargetEvent with a specified DropTargetContext.  Parameters: dtc - the DropTargetContext",0,0,0,0,0,0,0,0,0,0,0,1
"This exception is thrown by various methods in the java.awt.dnd package. It  is usually thrown to indicate that the target in question is unable to  undertake the requested operation that the present time, since the  undrelying DnD system is not in the appropriate state.  Since:     1.2 See Also:     Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
"A semantic event which indicates that a component-defined action occurred.  This high-level event is generated by a component (such as a Button) when  the component-specific action occurs (such as being pressed). The event is  passed to every every ActionListener object that registered to receive such  events using the component's addActionListener method.  Note: To invoke an ActionEvent on a Button using the keyboard, use the  Space bar.  The object that implements the ActionListener interface gets this  ActionEvent when the event occurs. The listener is therefore spared the  details of processing individual mouse movements and mouse clicks, and can  instead process a meaningful (semantic) event like button pressed.  Since:     1.1 See Also:     ActionListener, Tutorial: Java 1.1 Event Model, Serialized Form",0,0,0,0,0,1,0,0,0,0,0,0
" The block increment adjustment type.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
"An abstract adapter class for receiving component events. The methods in  this class are empty. This class exists as convenience for creating  listener objects.  Extend this class to create a ComponentEvent listener and override the  methods for the events of interest. (If you implement the  ComponentListener interface, you have to define all of the methods in it.  This abstract class defines null methods for them all, so you can only have  to define methods for events you care about.)  Create a listener object using your class and then register it with a  component using the component's addComponentListener method. When the  component's size, location, or visibility changes, the relevant method in  the listener object is invoked, and the ComponentEvent is passed to it.  Since:     1.1 See Also:     ComponentEvent, ComponentListener, Tutorial: Writing a Component     Listener",0,0,1,1,0,1,1,1,0,0,0,0
"A low-level event which indicates that a component moved, changed size, or  changed visibility (also, the root class for the other component-level  events).  Component events are provided for notification purposes ONLY; The AWT will  automatically handle component moves and resizes internally so that GUI  layout works properly regardless of whether a program is receiving these  events or not.  In addition to serving as the base class for other component-related events  (InputEvent, FocusEvent, WindowEvent, ContainerEvent), this class defines  the events that indicate changes in a component's size, position, or  visibility.  This low-level event is generated by a component object (such as a List)  when the component is moved, resized, rendered invisible, or made visible  again. The event is passed to every ComponentListener or ComponentAdapter  object which registered to receive such events using the component's  addComponentListener method. (ComponentAdapter objects implement the  ComponentListener interface.) Each such listener object gets this  ComponentEvent when the event occurs.  Since:     1.1 See Also:     ComponentAdapter, ComponentListener, Tutorial: Writing a Component     Listener, Serialized Form",1,0,0,1,0,1,1,0,0,0,0,0
"The listener interface for receiving component events. The class that is  interested in processing a component event either implements this interface  (and all the methods it contains) or extends the abstract ComponentAdapter  class (overriding only the methods of interest). The listener object  created from that class is then registered with a component using the  component's addComponentListener method. When the component's size,  location, or visibility changes, the relevant method in the listener object  is invoked, and the ComponentEvent is passed to it.  Component events are provided for notification purposes ONLY; The AWT will  automatically handle component moves and resizes internally so that GUI  layout works properly regardless of whether a program registers a  ComponentListener or not.  Since:     1.1 See Also:     ComponentAdapter, ComponentEvent, Tutorial: Writing a Component     Listener",1,0,0,1,0,0,0,0,0,0,0,0
"An event which indicates a change to the Component hierarchy to which a  Component belongs.      * Hierarchy Change Events (HierarchyListener)           o addition of an ancestor           o removal of an ancestor           o hierarchy made displayable           o hierarchy made undisplayable           o hierarchy shown on the screen (both visible and displayable)           o hierarchy hidden on the screen (either invisible or             undisplayable)     * Ancestor Reshape Events (HierarchyBoundsListener)           o an ancestor was resized           o an ancestor was moved  Hierarchy events are provided for notification purposes ONLY. The AWT will  automatically handle changes to the hierarchy internally so that GUI layout  and displayability works properly regardless of whether a program is  receiving these events or not.  This event is generated by a Container object (such as a Panel) when the  Container is added, removed, moved, or resized, and passed down the  hierarchy. It is also generated by a Component object when that object's  addNotify, removeNotify, show, or hide method is called. ANCESTOR_MOVED and  ANCESTOR_RESIZED events are dispatched to every HierarchyBoundsListener or  HierarchyBoundsAdapter object which registered to receive such events using  the Component's addHierarchyBoundsListener method. (HierarchyBoundsAdapter  objects implement the HierarchyBoundsListener interface.) HIERARCHY_CHANGED  events are dispatched to every HierarchyListener object which registered to  receive such events using the Component's addHierarchyListener method. Each  such listener object gets this HierarchyEvent when the event occurs.  Since:     1.3 See Also:     HierarchyListener, HierarchyBoundsAdapter, HierarchyBoundsListener,      Serialized Form",1,1,0,1,0,1,1,1,0,0,0,0
"Constructs an HierarchyEvent object to identify a change in the Component hierarchy.  Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null.  Parameters: source - the Component object that originated the event id - an integer indicating the type of event changed - the Component at the top of the hierarchy which was changed changedParent - the parent of changed; this may be the parent before or after the change, depending on the type of change changeFlags - a bitmask which indicates the type(s) of HIERARCHY_CHANGED events represented in this event object Throws: IllegalArgumentException - if source is null",1,0,0,0,0,0,0,0,0,0,0,0
" The Mouse Button1 extended modifier constant.  Since: 1.4 See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
"Returns a parameter string identifying this event. This method is useful for event-logging and for debugging. It contains the event ID in text form, the characters of the committed and composed text separated by +, the number of committed characters, the caret, and the visible position.  Overrides: paramString in class AWTEvent Returns: a string identifying the event and its attributes",1,0,0,1,0,0,0,0,0,0,0,0
"An event which executes the run() method on a Runnable when dispatched by  the AWT event dispatcher thread. This class can be used as a reference  implementation of ActiveEvent rather than declaring a new class and  defining dispatch().  Instances of this class are placed on the EventQueue by calls to  invokeLater and invokeAndWait. Client code can use this fact to write  replacement functions for invokeLater and invokeAndWait without writing  special-case code in any AWTEventListener objects.  Since:     1.2 See Also:     ActiveEvent, EventQueue.invokeLater(java.lang.Runnable),      EventQueue.invokeAndWait(java.lang.Runnable), AWTEventListener,      Serialized Form",1,0,0,1,0,1,0,0,0,0,0,0
"Returns the item affected by the event.  Returns: the item (object) that was affected by the event",0,0,0,0,0,0,0,0,0,0,0,0
"Returns a parameter string identifying this item event. This method is useful for event-logging and for debugging.  Overrides: paramString in class AWTEvent Returns: a string identifying the event and its attributes",1,0,0,1,0,0,0,0,0,0,0,1
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" Constant for the Code Input function key.  Since: 1.2 See Also: Constant Field Values ",0,1,0,0,0,0,0,0,0,0,0,0
" The first number in the range of ids used for mouse events.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,1
"An event which indicates that the mouse wheel was rotated in a component.  A wheel mouse is a mouse which has a wheel in place of the middle button.  This wheel can be rotated towards or away from the user. Mouse wheels are  most often used for scrolling, though other uses are possible.  A MouseWheelEvent object is passed to every MouseWheelListener object which  registered to receive the interesting mouse events using the component's  addMouseWheelListener method. Each such listener object gets a MouseEvent  containing the mouse event.  Due to the mouse wheel's special relationship to scrolling Components,  MouseWheelEvents are delivered somewhat differently than other MouseEvents.  This is because while other MouseEvents usually affect a change on the  Component directly under the mouse cursor (for instance, when clicking a  button), MouseWheelEvents often have an effect away from the mouse cursor  (moving the wheel while over a Component inside a ScrollPane should scroll  one of the Scrollbars on the ScrollPane).  MouseWheelEvents start delivery from the Component underneath the mouse  cursor. If MouseWheelEvents are not enabled on the Component, the event is  delivered to the first ancestor Container with MouseWheelEvents enabled.  This will usually be a ScrollPane with wheel scrolling enabled. The source  Component and x,y coordinates will be relative to the event's final  destination (the ScrollPane). This allows a complex GUI to be installed  without modification into a ScrollPane, and for all MouseWheelEvents to be  delivered to the ScrollPane for scrolling.  Some AWT Components are implemented using native widgets which display  their own scrollbars and handle their own scrolling. The particular  Components for which this is true will vary from platform to platform. When  the mouse wheel is moved over one of these Components, the event is  delivered straight to the native widget, and not propagated to ancestors.  Platforms offer customization of the amount of scrolling that should take  place when the mouse wheel is moved. The two most common settings are to  scroll a certain number of units (commonly lines of text in a text-based  component) or an entire block (similar to page-up/page-down). The  MouseWheelEvent offers methods for conforming to the underlying platform  settings. These platform settings can be changed at any time by the user.  MouseWheelEvents reflect the most recent settings.  Since:     1.4 See Also:     MouseWheelListener, ScrollPane,      ScrollPane.setWheelScrollingEnabled(boolean), JScrollPane,      JScrollPane.setWheelScrollingEnabled(boolean), Serialized Form",1,0,0,1,0,1,0,0,0,0,0,0
"The listener interface for receiving mouse wheel events on a component.  (For clicks and other mouse events, use the MouseListener. For mouse  movement and drags, use the MouseMotionListener.)  The class that is interested in processing a mouse wheel event implements  this interface (and all the methods it contains).  The listener object created from that class is then registered with a  component using the component's addMouseWheelListener method. A mouse wheel  event is generated when the mouse wheel is rotated. When a mouse wheel  event occurs, that object's mouseWheelMoved method is invoked.  For information on how mouse wheel events are dispatched, see the class  description for MouseWheelEvent.  Since:     1.4 See Also:     MouseWheelEvent",0,0,0,0,0,0,1,1,0,0,0,1
"The listener interface for receiving text events. The class that is  interested in processing a text event implements this interface. The object  created with that class is then registered with a component using the  component's addTextListener method. When the component's text changes, the  listener object's textValueChanged method is invoked.  Since:     1.1 See Also:     TextEvent, Tutorial: Writing a Text Listener",0,0,0,0,0,1,0,1,0,0,0,1
"Invoked when a window is de-activated.  Specified by: windowDeactivated in interface WindowListener",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the other Window involved in this focus or activation change. For a WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window that lost activation or focus. For a WINDOW_DEACTIVATED or WINDOW_LOST_FOCUS event, this is the Window that gained activation or focus. For any other type of WindowEvent, or if the focus or activation change occurs with a native application, with a Java application in a different VM or context, or with no other Window, null is returned.  Returns: the other Window involved in the focus or activation change, or null Since: 1.4",1,0,0,0,0,0,1,0,0,0,0,0
"Invoked when a window is changed from a minimized to a normal state.",1,0,0,0,0,1,0,0,0,0,0,0
"The FontRenderContext class is a container for the information needed to  correctly measure text. The measurement of text can vary because of rules  that map outlines to pixels, and rendering hints provided by an  application.  One such piece of information is a transform that scales typographical  points to pixels. (A point is defined to be exactly 1/72 of an inch, which  is slightly different than the traditional mechanical measurement of a  point.) A character that is rendered at 12pt on a 600dpi device might have  a different size than the same character rendered at 12pt on a 72dpi device  because of such factors as rounding to pixel boundaries and hints that the  font designer may have specified.  Anti-aliasing and Fractional-metrics specified by an application can also  affect the size of a character because of rounding to pixel boundaries.  Typically, instances of FontRenderContext are obtained from a Graphics2D  object. A FontRenderContext which is directly constructed will most likely  not represent any actual graphics device, and may lead to unexpected or  incorrect results.  See Also:     RenderingHints.KEY_TEXT_ANTIALIASING,      RenderingHints.KEY_FRACTIONALMETRICS,      Graphics2D.getFontRenderContext(), LineMetrics",1,1,0,1,0,0,1,0,0,0,0,0
"Returns a boolean which indicates whether or not some form of antialiasing is specified by this FontRenderContext. Call getAntiAliasingHint() for the specific rendering hint value.  Returns: true, if text is anti-aliased in this FontRenderContext; false otherwise. See Also: RenderingHints.KEY_TEXT_ANTIALIASING, FontRenderContext(AffineTransform,boolean,boolean), FontRenderContext(AffineTransform,Object,Object)",1,0,0,0,0,0,1,1,0,0,0,1
"Return a hashcode for this FontRenderContext.  Overrides: hashCode in class Object Returns: a hash code value for this object. See Also: Object.equals(java.lang.Object), Hashtable",1,0,0,0,0,0,0,0,0,0,0,1
" The priority level of this glyph as it is growing. ",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the advance of the glyph along the baseline (either horizontal or vertical).  Returns: the advance of the glyph",1,0,0,0,0,0,0,0,0,0,0,1
"The MultipleMaster interface represents Type 1 Multiple Master fonts. A  particular Font object can implement this interface.",0,0,0,0,0,0,0,0,0,0,0,0
"Creates a new instance of a multiple master font based on detailed metric information. In case of an error, null is returned.  Parameters: glyphWidths - an array of floats representing the desired width of each glyph in font space avgStemWidth - the average stem width for the overall font in font space typicalCapHeight - the height of a typical upper case char typicalXHeight - the height of a typical lower case char italicAngle - the angle at which the italics lean, in degrees counterclockwise from vertical Returns: a Font object that is an instance of MultipleMaster and is based on the specified metric information.",1,0,0,0,0,0,0,0,0,0,0,0
"The NumericShaper class is used to convert Latin-1 (European) digits to  other Unicode decimal digits. Users of this class will primarily be people  who wish to present data using national digit shapes, but find it more  convenient to represent the data internally using Latin-1 (European)  digits. This does not interpret the deprecated numeric shape selector  character (U+206E).  Instances of NumericShaper are typically applied as attributes to text with  the NUMERIC_SHAPING attribute of the TextAttribute class. For example, this  code snippet causes a TextLayout to shape European digits to Arabic in an  Arabic context:       Map map = new HashMap(); map.put(TextAttribute.NUMERIC_SHAPING, NumericShaper.getContextualShaper(NumericShaper.ARABIC)); FontRenderContext frc = ...; TextLayout layout = new TextLayout(text, map, frc); layout.draw(g2d, x, y);    It is also possible to perform numeric shaping explicitly using instances  of NumericShaper, as this code snippet demonstrates:       char[] text = ...; // shape all EUROPEAN digits (except zero) to ARABIC digits NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC); shaper.shape(text, start, count);  // shape European digits to ARABIC digits if preceding text is Arabic, or // shape European digits to TAMIL digits if preceding text is Tamil, or // leave European digits alone if there is no preceding text, or // preceding text is neither Arabic nor Tamil NumericShaper shaper = NumericShaper.getContextualShaper(NumericShaper.ARABIC | NumericShaper.TAMIL, NumericShaper.EUROPEAN); shaper.shape(text. start, count);   Since:     1.4 See Also:     Serialized Form",1,1,0,1,0,0,1,0,1,0,0,0
" Identifies the ORIYA range and decimal base.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"The OpenType interface represents OpenType and TrueType fonts. This  interface makes it possible to obtain sfnt tables from the font. A  particular Font object can implement this interface.  For more information on TrueType fonts, see the Apple TrueType Reference  Manual ( http://fonts.apple.com/TTRefMan/index.html ).",1,0,0,1,0,0,0,0,0,0,1,0
"Returns a Rectangle2D that encloses all of the bits drawn by this ShapeGraphicAttribute relative to the rendering position. A graphic can be rendered beyond its origin, ascent, descent, or advance; but if it does, this method's implementation should indicate where the graphic is rendered.  Overrides: getBounds in class GraphicAttribute Returns: a Rectangle2D that encloses all of the bits rendered by this ShapeGraphicAttribute.",1,1,1,0,0,0,1,0,0,0,0,1
" Single pixel dashed low underline.  Since: 1.3 See Also: INPUT_METHOD_UNDERLINE ",0,0,0,0,0,0,0,0,0,0,0,0
"Returns a String representing the hit for debugging use only.  Overrides: toString in class Object Returns: a String representing this TextHitInfo.",1,0,1,0,0,0,0,0,0,0,0,1
"Returns two paths corresponding to the strong and weak caret.  Parameters: offset - an offset in this TextLayout bounds - the bounds to which to extend the carets. The bounds is in baseline-relative coordinates. policy - the specified CaretPolicy Returns: an array of two paths. Element zero is the strong caret. If there are two carets, element one is the weak caret, otherwise it is null. The returned shapes are in standard coordinates.",1,0,0,0,0,0,1,0,0,0,0,1
"Wraps the specified transform. The transform is cloned and a reference to the clone is kept. The original transform is unchanged. If null is passed as the argument, this constructor behaves as though it were the identity transform. (Note that it is preferable to use IDENTITY in this case.)  Parameters: transform - the specified AffineTransform to be wrapped, or null.",1,0,0,0,0,0,1,0,0,0,0,0
"The AffineTransform class represents a 2D affine transform that performs a  linear mapping from 2D coordinates to other 2D coordinates that preserves  the straightness and parallelness of lines. Affine transformations can  be constructed using sequences of translations, scales, flips, rotations,  and shears.  Such a coordinate transformation can be represented by a 3 row by 3 column  matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source  coordinates (x,y) into destination coordinates (x',y') by considering them  to be a column vector and multiplying the coordinate vector by the matrix  according to the following process:   [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ] [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ] [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]    Handling 90-Degree Rotations  In some variations of the rotate methods in the AffineTransform class, a  double-precision argument specifies the angle of rotation in radians. These  methods have special handling for rotations of approximately 90 degrees  (including multiples such as 180, 270, and 360 degrees), so that the common  case of quadrant rotation is handled more efficiently. This special  handling can cause angles very close to multiples of 90 degrees to be  treated as if they were exact multiples of 90 degrees. For small multiples  of 90 degrees the range of angles treated as a quadrant rotation is  approximately 0.00000121 degrees wide. This section explains why such  special care is needed and how it is implemented.  Since 90 degrees is represented as PI/2 in radians, and since PI is a  transcendental (and therefore irrational) number, it is not possible to  exactly represent a multiple of 90 degrees as an exact double precision  value measured in radians. As a result it is theoretically impossible to  describe quadrant rotations (90, 180, 270 or 360 degrees) using these  values. Double precision floating point values can get very close to  non-zero multiples of PI/2 but never close enough for the sine or cosine to  be exactly 0.0, 1.0 or -1.0. The implementations of Math.sin() and  Math.cos() correspondingly never return 0.0 for any case other than  Math.sin(0.0). These same implementations do, however, return exactly 1.0  and -1.0 for some range of numbers around each multiple of 90 degrees since  the correct answer is so close to 1.0 or -1.0 that the double precision  significand cannot represent the difference as accurately as it can for  numbers that are near 0.0.  The net result of these issues is that if the Math.sin() and Math.cos()  methods are used to directly generate the values for the matrix  modifications during these radian-based rotation operations then the  resulting transform is never strictly classifiable as a quadrant rotation  even for a simple case like rotate(Math.PI/2.0), due to minor variations in  the matrix caused by the non-0.0 values obtained for the sine and cosine.  If these transforms are not classified as quadrant rotations then  subsequent code which attempts to optimize further operations based upon  the type of the transform will be relegated to its most general  implementation.  Because quadrant rotations are fairly common, this class should handle  these cases reasonably quickly, both in applying the rotations to the  transform and in applying the resulting transform to the coordinates. To  facilitate this optimal handling, the methods which take an angle of  rotation measured in radians attempt to detect angles that are intended to  be quadrant rotations and treat them as such. These methods therefore treat  an angle theta as a quadrant rotation if either Math.sin(theta) or  Math.cos(theta) returns exactly 1.0 or -1.0. As a rule of thumb, this  property holds true for a range of approximately 0.0000000211 radians (or  0.00000121 degrees) around small multiples of Math.PI/2.0.  Since:     1.2 See Also:     Serialized Form",1,1,0,0,1,0,0,1,0,0,0,0
"Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants. This is equivalent to calling:  rotate(numquadrants * Math.PI / 2.0);  Rotating by a positive number of quadrants rotates points on the positive X axis toward the positive Y axis.  Parameters: numquadrants - the number of 90 degree arcs to rotate by Since: 1.6",1,0,0,0,0,0,0,0,1,0,0,0
"Sets this transform to the matrix specified by the 6 double precision values.  Parameters: m00 - the X coordinate scaling element of the 3x3 matrix m10 - the Y coordinate shearing element of the 3x3 matrix m01 - the X coordinate shearing element of the 3x3 matrix m11 - the Y coordinate scaling element of the 3x3 matrix m02 - the X coordinate translation element of the 3x3 matrix m12 - the Y coordinate translation element of the 3x3 matrix Since: 1.2",1,1,0,0,0,0,0,0,0,0,0,0
"Concatenates an AffineTransform Tx to this AffineTransform Cx in a less commonly used way such that Tx modifies the coordinate transformation relative to the absolute pixel space rather than relative to the existing user space. Cx is updated to perform the combined transformation. Transforming a point p by the updated transform Cx' is equivalent to first transforming p by the original transform Cx and then transforming the result by Tx like this: Cx'(p) = Tx(Cx(p)) In matrix notation, if this transform Cx is represented by the matrix [this] and Tx is represented by the matrix [Tx] then this method does the following:  [this] = [Tx] x [this]  Parameters: Tx - the AffineTransform object to be concatenated with this AffineTransform object. Since: 1.2 See Also: concatenate(java.awt.geom.AffineTransform)",1,0,0,0,0,0,0,0,1,0,0,0
"Transforms the relative distance vector specified by ptSrc and stores the result in ptDst. A relative distance vector is transformed without applying the translation components of the affine transformation matrix using the following equations:  [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ] [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ] [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]  If ptDst is null, a new Point2D object is allocated and then the result of the transform is stored in this object. In either case, ptDst, which contains the transformed point, is returned for convenience. If ptSrc and ptDst are the same object, the input point is correctly overwritten with the transformed point.  Parameters: ptSrc - the distance vector to be delta transformed ptDst - the resulting transformed distance vector Returns: ptDst, which contains the result of the transformation. Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,0
" The closure type for an open arc with no path segments connecting the two ends of the arc segment.  Since: 1.2 See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the Y coordinate of the first control point in double precision.  Specified by: getCtrlY1 in class CubicCurve2D Returns: the Y coordinate of the first control point of the CubicCurve2D. Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,1
"This is an abstract class that cannot be instantiated directly. Type-specific implementation subclasses are available for instantiation and provide a number of formats for storing the information necessary to satisfy the various accessor methods below.  Since: 1.2 See Also: CubicCurve2D.Float, CubicCurve2D.Double",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the start point.  Returns: a Point2D that is the start point of the CubicCurve2D. Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index. The flatness is the maximum distance of a control point from the line connecting the end points.  Parameters: coords - an array containing coordinates offset - the index of coords from which to begin getting the end points and control points of the curve Returns: the flatness of the CubicCurve2D specified by the coordinates in coords at the specified offset. Since: 1.2",1,1,0,0,0,0,0,0,0,0,0,1
"Creates a new object of the same class as this object.  Overrides: clone in class Object Returns: a clone of this instance. Throws: OutOfMemoryError - if there is not enough memory. Since: 1.2 See Also: Cloneable",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.  Specified by: getX in class RectangularShape Returns: the X coordinate of the upper-left corner of the framing rectangle. Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,0
" The overall height of this Ellipse2D.  Since: 1.2 ",1,0,0,0,0,0,0,0,0,0,0,1
"A line segment specified with float coordinates.  Since:     1.2 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"This Line2D represents a line segment in (x,y) coordinate space. This  class, like all of the Java 2D API, uses a default coordinate system called  user space in which the y-axis values increase downward and x-axis values  increase to the right. For more information on the user space coordinate  system, see the Coordinate Systems section of the Java 2D Programmer's  Guide.  This class is only the abstract superclass for all objects that store a 2D  line segment. The actual storage representation of the coordinates is left  to the subclass.  Since:     1.2",0,1,0,0,0,0,1,0,0,0,1,0
"Returns the end Point2D of this Line2D.  Returns: the end Point2D of this Line2D. Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the distance from a Point2D to this line segment. The distance measured is the distance between the specified point and the closest point between the current line's end points. If the specified point intersects the line segment in between the end points, this method returns 0.0.  Parameters: pt - the specified Point2D being measured against this line segment Returns: a double value that is the distance from the specified Point2D to the current line segment. Since: 1.2 See Also: ptLineDist(Point2D)",1,0,0,0,0,0,0,0,0,0,0,0
"Returns a high precision and more accurate bounding box of the Shape than the getBounds method. Note that there is no guarantee that the returned Rectangle2D is the smallest bounding box that encloses the Shape, only that the Shape lies entirely within the indicated Rectangle2D. The bounding box returned by this method is usually tighter than that returned by the getBounds method and never fails due to overflow problems since the return value can be an instance of the Rectangle2D that uses double precision values to store the dimensions.  Specified by: getBounds2D in interface Shape Returns: an instance of Rectangle2D that is a high-precision bounding box of the Shape. Since: 1.6 See Also: Shape.getBounds()",1,0,0,0,0,0,0,0,0,0,0,0
"Tests if the interior of the Shape entirely contains the specified rectangular area. All coordinates that lie inside the rectangular area must lie within the Shape for the entire rectanglar area to be considered contained within the Shape.  The Shape.contains() method allows a Shape implementation to conservatively return false when:  * the intersect method returns true and * the calculations to determine whether or not the Shape entirely contains the rectangular area are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the rectangular area. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.  This method object may conservatively return false in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path. Such segments could lie entirely within the interior of the path if they are part of a path with a WIND_NON_ZERO winding rule or if the segments are retraced in the reverse direction such that the two sets of segments cancel each other out without any exterior area falling between them. To determine whether segments represent true boundaries of the interior of the path would require extensive calculations involving all of the segments of the path and the winding rule and are thus beyond the scope of this implementation.  Specified by: contains in interface Shape Parameters: x - the X coordinate of the upper-left corner of the specified rectangular area y - the Y coordinate of the upper-left corner of the specified rectangular area w - the width of the specified rectangular area h - the height of the specified rectangular area Returns: true if the interior of the Shape entirely contains the specified rectangular area; false otherwise or, if the Shape contains the rectangular area and the intersects method returns true and the containment calculations would be too expensive to perform. Since: 1.6 See Also: Area, Shape.intersects(double, double, double, double)",1,1,0,0,0,0,1,1,0,0,0,0
"The PathIterator interface provides the mechanism for objects that  implement the Shape interface to return the geometry of their boundary by  allowing a caller to retrieve the path of that boundary a segment at a  time. This interface allows these objects to retrieve the path of their  boundary a segment at a time by using 1st through 3rd order Bézier curves,  which are lines and quadratic or cubic Bézier splines.  Multiple subpaths can be expressed by using a MOVETO segment to create a  discontinuity in the geometry to move from the end of one subpath to the  beginning of the next.  Each subpath can be closed manually by ending the last segment in the  subpath on the same coordinate as the beginning MOVETO segment for that  subpath or by using a CLOSE segment to append a line segment from the  last point back to the first. Be aware that manually closing an outline as  opposed to using a CLOSE segment to close the path might result in  different line style decorations being used at the end points of the  subpath. For example, the BasicStroke object uses a line JOIN decoration  to connect the first and last points if a CLOSE segment is encountered,  whereas simply ending the path on the same coordinate as the beginning  coordinate results in line CAP decorations being used at the ends.  See Also:     Shape, BasicStroke",1,0,0,0,0,0,1,1,0,0,0,0
"The Double class defines a point specified in double precision.  Since:     1.2 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,1
"The Float class defines a point specified in float precision.  Since:     1.2 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,1
"Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots into the res array, returning the number of roots. The quadratic solved is represented by the equation:  eqn = {C, B, A}; ax^2 + bx + c = 0  A return value of -1 is used to distinguish a constant equation, which might be always 0 or never 0, from an equation that has no zeroes.  Parameters: eqn - the specified array of coefficients to use to solve the quadratic equation res - the array that contains the non-complex roots resulting from the solution of the quadratic equation Returns: the number of roots, or -1 if the equation is a constant. Since: 1.3",1,0,0,0,0,0,0,0,1,0,0,0
"The Double class defines a rectangle specified in double coordinates.  Since:     1.2 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the String representation of this Rectangle2D.  Overrides: toString in class Object Returns: a String representing this Rectangle2D. Since: 1.2",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.  Specified by: getX in class RectangularShape Returns: the X coordinate of the upper-left corner of the framing rectangle. Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,1
"The Rectangle2D class describes a rectangle defined by a location (x,y)  and dimension (w x h).  This class is only the abstract superclass for all objects that store a 2D  rectangle. The actual storage representation of the coordinates is left to  the subclass.  Since:     1.2",1,0,0,0,0,0,1,0,0,0,0,0
"Determines where the specified Point2D lies with respect to this Rectangle2D. This method computes a binary OR of the appropriate mask values indicating, for each side of this Rectangle2D, whether or not the specified Point2D is on the same side of the edge as the rest of this Rectangle2D.  Parameters: p - the specified Point2D Returns: the logical OR of all appropriate out codes. Since: 1.2 See Also: OUT_LEFT, OUT_TOP, OUT_RIGHT, OUT_BOTTOM",1,0,0,0,0,0,0,0,0,0,0,1
" The height of the arc that rounds off the corners.  Since: 1.2 ",0,1,0,0,0,0,0,0,0,0,0,0
"Provides methods to control text input facilities such as input methods and  keyboard layouts. Two methods handle both input methods and keyboard  layouts: selectInputMethod lets a client component select an input method  or keyboard layout by locale, getLocale lets a client component obtain the  locale of the current input method or keyboard layout. The other methods  more specifically support interaction with input methods: They let client  components control the behavior of input methods, and dispatch events from  the client component to the input method.  By default, one InputContext instance is created per Window instance, and  this input context is shared by all components within the window's  container hierarchy. However, this means that only one text input operation  is possible at any one time within a window, and that the text needs to be  committed when moving the focus from one text component to another. If this  is not desired, text components can create their own input context  instances.  The Java Platform supports input methods that have been developed in the  Java programming language, using the interfaces in the java.awt.im.spi  package, and installed into a Java SE Runtime Environment as extensions.  Implementations may also support using the native input methods of the  platforms they run on; however, not all platforms and locales provide input  methods. Keyboard layouts are provided by the host platform.  Input methods are unavailable if (a) no input method written in the Java  programming language has been installed and (b) the Java Platform  implementation or the underlying platform does not support native input  methods. In this case, input contexts can still be created and used; their  behavior is specified with the individual methods below.  Since:     1.2 See Also:     Component.getInputContext(), Component.enableInputMethods(boolean)",1,1,0,0,0,0,1,1,0,0,0,0
"Constructs an input method highlight record. The style is set to null.  Parameters: selected - Whether the text range is selected state - The conversion state for the text range - RAW_TEXT or CONVERTED_TEXT variation - The style variation for the text range Throws: IllegalArgumentException - if a state other than RAW_TEXT or CONVERTED_TEXT is given See Also: RAW_TEXT, CONVERTED_TEXT",1,0,0,0,0,0,0,0,0,0,0,0
"Activates the input method for immediate input processing.  If an input method provides its own windows, it should make sure at this point that all necessary windows are open and visible.  This method is called  * by InputContext.dispatchEvent when a client component receives a FOCUS_GAINED event, * when switching to this input method from a different one using the user interface or InputContext.selectInputMethod. The method is only called when the input method is inactive. A newly instantiated input method is assumed to be inactive.",1,0,1,0,0,0,0,0,0,0,1,0
"Defines methods that provide sufficient information about an input method  to enable selection and loading of that input method. The input method  itself is only loaded when it is actually used.  Since:     1.3",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs an AffineTransformOp given an affine transform. The interpolation type is determined from the RenderingHints object. If the interpolation hint is defined, it will be used. Otherwise, if the rendering quality hint is defined, the interpolation type is determined from its value. If no hints are specified (hints is null), the interpolation type is TYPE_NEAREST_NEIGHBOR.  Parameters: xform - The AffineTransform to use for the operation. hints - The RenderingHints object used to specify the interpolation type for the operation. Throws: ImagingOpException - if the transform is non-invertible. See Also: RenderingHints.KEY_INTERPOLATION, RenderingHints.KEY_RENDERING",1,1,0,0,0,0,0,0,0,0,0,1
"Returns the BufferCapabilities for this BufferStrategy.  Returns: the buffering capabilities of this strategy",1,0,0,0,0,0,0,1,0,0,0,1
"Returns the ColorModel.  Specified by: getColorModel in interface RenderedImage Returns: the ColorModel of this BufferedImage.",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the SampleModel associated with this BufferedImage.  Specified by: getSampleModel in interface RenderedImage Returns: the SampleModel of this BufferedImage.",0,0,0,0,0,0,0,0,0,0,0,1
"The BufferedImageFilter class subclasses an ImageFilter to provide a simple  means of using a single-source/single-destination image operator ( BufferedImageOp) to filter a BufferedImage in the Image  Producer/Consumer/Observer paradigm. Examples of these image operators are:  ConvolveOp, AffineTransformOp and LookupOp.  See Also:     ImageFilter, BufferedImage, BufferedImageOp",1,0,0,0,0,0,1,0,0,0,0,0
"This class defines a lookup table object. The output of a lookup operation  using an object of this class is interpreted as an unsigned byte quantity.  The lookup table contains byte data arrays for one or more bands (or  components) of an image, and it contains an offset which will be subtracted  from the input values before indexing the arrays. This allows an array  smaller than the native data size to be provided for a constrained input.  If there is only one array in the lookup table, it will be applied to all  bands.  See Also:     ShortLookupTable, LookupOp",1,1,0,1,1,0,0,0,0,0,0,0
"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds.  Overrides: setSample in class SampleModel Parameters: x - The X coordinate of the pixel location y - The Y coordinate of the pixel location b - The band to set s - The input sample as a float data - The DataBuffer containing the image data See Also: getSample(int, int, int, DataBuffer)",1,0,0,0,0,0,0,0,0,0,0,1
"This class implements a convolution from the source to the destination.  Convolution using a convolution kernel is a spatial operation that computes  the output pixel from an input pixel by multiplying the kernel with the  surround of the input pixel. This allows the output pixel to be affected by  the immediate neighborhood in a way that can be mathematically specified  with a kernel.  This class operates with BufferedImage data in which color components are  premultiplied with the alpha component. If the Source BufferedImage has an  alpha component, and the color components are not premultiplied with the  alpha component, then the data are premultiplied before being convolved. If  the Destination has color components which are not premultiplied, then  alpha is divided out before storing into the Destination (if alpha is 0,  the color components are set to 0). If the Destination has no alpha  component, then the resulting alpha is discarded after first dividing it  out of the color components.  Rasters are treated as having no alpha channel. If the above treatment of  the alpha channel in BufferedImages is not desired, it may be avoided by  getting the Raster of a source BufferedImage and using the filter method of  this class which works with Rasters.  If a RenderingHints object is specified in the constructor, the color  rendering hint and the dithering hint may be used when color conversion is  required.  Note that the Source and the Destination may not be the same object.  See Also:     Kernel, RenderingHints.KEY_COLOR_RENDERING,      RenderingHints.KEY_DITHERING",1,1,0,0,0,0,0,1,0,0,0,0
"Returns the requested data array element from the specified bank as a double. The implementation in this class is to cast getElem(bank, i) to a double. Subclasses may override this method if another implementation is needed.  Parameters: bank - the specified bank i - the specified index Returns: a double value representing the element from the specified bank at the specified index in the data array. See Also: setElemDouble(int, double), setElemDouble(int, int, double)",1,0,1,0,0,0,0,1,0,0,0,0
"This class extends DataBuffer and stores data internally as bytes. Values  stored in the byte array(s) of this DataBuffer are treated as unsigned  values.",1,0,0,0,1,0,1,0,0,0,0,0
"Returns the default (first) byte data array.  Returns: The first byte data array.",1,0,0,0,0,0,0,0,0,0,0,1
"Sets the requested data array element in the specified bank to the given float.  Overrides: setElemFloat in class DataBuffer Parameters: bank - The bank number. i - The desired data array element. val - The value to be set. See Also: getElemFloat(int), getElemFloat(int, int)",1,0,0,0,0,0,0,0,0,0,0,0
"This class extends DataBuffer and stores data internally as shorts.",1,0,0,0,0,0,0,0,0,0,0,0
"Filter the information provided in the setColorModel method of the ImageConsumer interface.  Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being filtered. Developers using this class to filter pixels from an image should avoid calling this method directly since that operation could interfere with the filtering operation.  Specified by: setColorModel in interface ImageConsumer Parameters: model - the specified ColorModel See Also: ImageConsumer.setColorModel(java.awt.image.ColorModel)",1,0,0,1,0,0,0,0,0,0,0,1
"This class implements a lookup operation from the source to the  destination. The LookupTable object may contain a single array or multiple  arrays, subject to the restrictions below.  For Rasters, the lookup operates on bands. The number of lookup arrays may  be one, in which case the same array is applied to all bands, or it must  equal the number of Source Raster bands.  For BufferedImages, the lookup operates on color and alpha components. The  number of lookup arrays may be one, in which case the same array is applied  to all color (but not alpha) components. Otherwise, the number of lookup  arrays may equal the number of Source color components, in which case no  lookup of the alpha component (if present) is performed. If neither of  these cases apply, the number of lookup arrays must equal the number of  Source color components plus alpha components, in which case lookup is  performed for all color and alpha components. This allows non-uniform  rescaling of multi-band BufferedImages.  BufferedImage sources with premultiplied alpha data are treated in the same  manner as non-premultiplied images for purposes of the lookup. That is, the  lookup is done per band on the raw data of the BufferedImage source without  regard to whether the data is premultiplied. If a color conversion is  required to the destination ColorModel, the premultiplied state of both  source and destination will be taken into account for this step.  Images with an IndexColorModel cannot be used.  If a RenderingHints object is specified in the constructor, the color  rendering hint and the dithering hint may be used when color conversion is  required.  This class allows the Source to be the same as the Destination.  See Also:     LookupTable, RenderingHints.KEY_COLOR_RENDERING,      RenderingHints.KEY_DITHERING",1,0,1,0,0,0,0,0,0,0,0,0
"This class is an implementation of the ImageProducer interface which uses  an array to produce pixel values for an Image. Here is an example which  calculates a 100x100 image representing a fade from black to blue along the  X axis and a fade from black to red along the Y axis:    int w = 100; int h = 100; int pix[] = new int[w * h]; int index = 0; for (int y = 0; y < h; y++) { int red = (y * 255) / (h - 1); for (int x = 0; x < w; x++) { int blue = (x * 255) / (w - 1); pix[index++] = (255 << 24) | (red << 16) | blue; } } Image img = createImage(new MemoryImageSource(w, h, pix, 0, w));    The MemoryImageSource is also capable of managing a memory image which  varies over time to allow animation or custom rendering. Here is an example  showing how to set up the animation source and signal changes in the data  (adapted from the MemoryAnimationSourceDemo by Garth Dickie):    int pixels[]; MemoryImageSource source;  public void init() { int width = 50; int height = 50; int size = width * height; pixels = new int[size];  int value = getBackground().getRGB(); for (int i = 0; i < size; i++) { pixels[i] = value; }  source = new MemoryImageSource(width, height, pixels, 0, width); source.setAnimated(true); image = createImage(source); }  public void run() { Thread me = Thread.currentThread( ); me.setPriority(Thread.MIN_PRIORITY);  while (true) { try { thread.sleep(10); } catch( InterruptedException e ) { return; }  // Modify the values in the pixels array at (x, y, w, h)  // Send the new data to the interested ImageConsumers source.newPixels(x, y, w, h); } }    See Also:     ImageProducer",1,0,0,0,0,0,1,1,1,0,0,0
"Adds an ImageConsumer to the list of consumers interested in data for this image and immediately starts delivery of the image data through the ImageConsumer interface.  Specified by: startProduction in interface ImageProducer Parameters: ic - the specified ImageConsumer image data through the ImageConsumer interface. See Also: ImageConsumer",1,0,0,0,0,1,0,0,0,0,0,1
"Changes this memory image into a multi-frame animation or a single-frame static image depending on the animated parameter.  This method should be called immediately after the MemoryImageSource is constructed and before an image is created with it to ensure that all ImageConsumers will receive the correct multi-frame data. If an ImageConsumer is added to this ImageProducer before this flag is set then that ImageConsumer will see only a snapshot of the pixel data that was available when it connected.  Parameters: animated - true if the image is a multi-frame animation",1,0,1,0,0,0,0,0,0,0,0,0
"The PixelGrabber class implements an ImageConsumer which can be attached to  an Image or ImageProducer object to retrieve a subset of the pixels in that  image. Here is an example:    public void handlesinglepixel(int x, int y, int pixel) { int alpha = (pixel >> 24) & 0xff; int red   = (pixel >> 16) & 0xff; int green = (pixel >>  8) & 0xff; int blue  = (pixel      ) & 0xff; // Deal with the pixel as necessary... }  public void handlepixels(Image img, int x, int y, int w, int h) { int[] pixels = new int[w * h]; PixelGrabber pg = new PixelGrabber(img, x, y, w, h, pixels, 0, w); try { pg.grabPixels(); } catch (InterruptedException e) { System.err.println(interrupted waiting for pixels!); return; } if ((pg.getStatus() & ImageObserver.ABORT) != 0) { System.err.println(image fetch aborted or errored); return; } for (int j = 0; j < h; j++) { for (int i = 0; i < w; i++) { handlesinglepixel(x+i, y+j, pixels[j * w + i]); } } }    See Also:     ColorModel.getRGBdefault()",1,0,0,0,0,0,0,0,1,0,0,0
"The imageComplete method is part of the ImageConsumer API which this class must implement to retrieve the pixels.  Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being grabbed. Developers using this class to retrieve pixels from an image should avoid calling this method directly since that operation could result in problems with retrieving the requested pixels.  Specified by: imageComplete in interface ImageConsumer Parameters: status - the status of image loading See Also: ImageProducer.removeConsumer(java.awt.image.ImageConsumer)",1,0,1,0,0,1,1,0,0,0,0,0
"This class represents image data which is stored in a pixel interleaved  fashion and for which each sample of a pixel occupies one data element of  the DataBuffer. It subclasses ComponentSampleModel but provides a more  efficent implementation for accessing pixel interleaved image data than is  provided by ComponentSampleModel. This class stores sample data for all  bands in a single bank of the DataBuffer. Accessor methods are provided so  that image data can be manipulated directly. Pixel stride is the number of  data array elements between two samples for the same band on the same  scanline. Scanline stride is the number of data array elements between a  given sample and the corresponding sample in the same column of the next  scanline. Band offsets denote the number of data array elements from the  first data array element of the bank of the DataBuffer holding each band to  the first sample of the band. The bands are numbered from 0 to N-1. Bank  indices denote the correspondence between a bank of the data buffer and a  band of image data. This class supports TYPE_BYTE, TYPE_USHORT, TYPE_SHORT , TYPE_INT, TYPE_FLOAT and TYPE_DOUBLE datatypes.",1,1,0,0,1,0,1,0,0,0,0,0
"A class representing a rectangular array of pixels. A Raster encapsulates a  DataBuffer that stores the sample values and a SampleModel that describes  how to locate a given sample value in a DataBuffer.  A Raster defines values for pixels occupying a particular rectangular area  of the plane, not necessarily including (0, 0). The rectangle, known as the  Raster's bounding rectangle and available by means of the getBounds method,  is defined by minX, minY, width, and height values. The minX and minY  values define the coordinate of the upper left corner of the Raster.  References to pixels outside of the bounding rectangle may result in an  exception being thrown, or may result in references to unintended elements  of the Raster's associated DataBuffer. It is the user's responsibility to  avoid accessing such pixels.  A SampleModel describes how samples of a Raster are stored in the primitive  array elements of a DataBuffer. Samples may be stored one per data element,  as in a PixelInterleavedSampleModel or BandedSampleModel, or packed several  to an element, as in a SinglePixelPackedSampleModel or  MultiPixelPackedSampleModel. The SampleModel is also controls whether  samples are sign extended, allowing unsigned data to be stored in signed  Java data types such as byte, short, and int.  Although a Raster may live anywhere in the plane, a SampleModel makes use  of a simple coordinate system that starts at (0, 0). A Raster therefore  contains a translation factor that allows pixel locations to be mapped  between the Raster's coordinate system and that of the SampleModel. The  translation from the SampleModel coordinate system to that of the Raster  may be obtained by the getSampleModelTranslateX and  getSampleModelTranslateY methods.  A Raster may share a DataBuffer with another Raster either by explicit  construction or by the use of the createChild and createTranslatedChild  methods. Rasters created by these methods can return a reference to the  Raster they were created from by means of the getParent method. For a  Raster that was not constructed by means of a call to createTranslatedChild  or createChild, getParent will return null.  The createTranslatedChild method returns a new Raster that shares all of  the data of the current Raster, but occupies a bounding rectangle of the  same width and height but with a different starting point. For example, if  the parent Raster occupied the region (10, 10) to (100, 100), and the  translated Raster was defined to start at (50, 50), then pixel (20, 20) of  the parent and pixel (60, 60) of the child occupy the same location in the  DataBuffer shared by the two Rasters. In the first case, (-10, -10) should  be added to a pixel coordinate to obtain the corresponding SampleModel  coordinate, and in the second case (-50, -50) should be added.  The translation between a parent and child Raster may be determined by  subtracting the child's sampleModelTranslateX and sampleModelTranslateY  values from those of the parent.  The createChild method may be used to create a new Raster occupying only a  subset of its parent's bounding rectangle (with the same or a translated  coordinate system) or with a subset of the bands of its parent.  All constructors are protected. The correct way to create a Raster is to  use one of the static create methods defined in this class. These methods  create instances of Raster that use the standard Interleaved, Banded, and  Packed SampleModels and that may be processed more efficiently than a  Raster created by combining an externally generated SampleModel and  DataBuffer.  See Also:     DataBuffer, SampleModel, PixelInterleavedSampleModel,      BandedSampleModel, SinglePixelPackedSampleModel,      MultiPixelPackedSampleModel",1,0,0,0,0,0,1,1,0,0,0,0
" The height of this Raster. ",0,0,0,0,0,0,0,0,0,0,0,1
"Creates a Raster based on a PixelInterleavedSampleModel with the specified DataBuffer, width, height, scanline stride, pixel stride, and band offsets. The number of bands is inferred from bandOffsets.length. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used.  Note that interleaved DataBuffer.TYPE_INT Rasters are not supported. To create a 1-band Raster of type DataBuffer.TYPE_INT, use Raster.createPackedRaster().  Parameters: dataBuffer - the DataBuffer that contains the image data w - the width in pixels of the image data h - the height in pixels of the image data scanlineStride - the line stride of the image data pixelStride - the pixel stride of the image data bandOffsets - the offsets of all bands location - the upper-left corner of the Raster Returns: a WritableRaster object with the specified DataBuffer, width, height, scanline stride, pixel stride and band offsets. Throws: RasterFormatException - if w or h is less than or equal to zero, or computing either location.x + w or location.y + h results in integer overflow IllegalArgumentException - if dataType is not one of the supported data types, which are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT RasterFormatException - if dataBuffer has more than one bank. NullPointerException - if dataBuffer is null",1,0,1,0,0,0,0,1,0,0,0,1
"Returns the height in pixels of the Raster.  Returns: the height of this Raster.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the number of bands (samples per pixel) in this Raster.  Returns: the number of bands of this Raster.",1,0,0,0,0,0,0,0,0,0,0,0
" The target height to scale the image. ",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the bounding box of the rescaled destination image. Since this is not a geometric operation, the bounding box does not change.  Specified by: getBounds2D in interface BufferedImageOp Parameters: src - The BufferedImage to be filtered Returns: The Rectangle2D representing the destination image's bounding box.",1,1,0,0,0,0,0,0,0,0,0,1
" Width in pixels of the region of image data that this SampleModel describes. ",1,0,0,0,0,0,0,0,0,0,0,0
"This class represents pixel data packed such that the N samples which make  up a single pixel are stored in a single data array element, and each data  data array element holds samples for only one pixel. This class supports  TYPE_BYTE, TYPE_USHORT, TYPE_INT data types. All data array elements reside  in the first bank of a DataBuffer. Accessor methods are provided so that  the image data can be manipulated directly. Scanline stride is the number  of data array elements between a given sample and the corresponding sample  in the same column of the next scanline. Bit masks are the masks required  to extract the samples representing the bands of the pixel. Bit offsets are  the offsets in bits into the data array element of the samples representing  the bands of the pixel.  The following code illustrates extracting the bits of the sample  representing band b for pixel x,y from DataBuffer data:   int sample = data.getElem(y * scanlineStride + x); sample = (sample & bitMasks[b]) >>> bitOffsets[b];",0,1,0,0,0,0,0,0,1,0,0,0
"Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods. For a SinglePixelPackedSampleModel, this is one.  Specified by: getNumDataElements in class SampleModel Returns: the number of data elements. See Also: SampleModel.getDataElements(int, int, Object, DataBuffer), SampleModel.getDataElements(int, int, int, int, Object, DataBuffer) , SampleModel.setDataElements(int, int, Object, DataBuffer), SampleModel.setDataElements(int, int, int, int, Object, DataBuffer) , SampleModel.getTransferType()",1,0,0,0,0,0,1,0,0,0,0,1
"Sets all samples for a rectangle of pixels from an int array containing one sample per array element. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds.  Overrides: setPixels in class SampleModel Parameters: x - The X coordinate of the upper left pixel location. y - The Y coordinate of the upper left pixel location. w - The width of the pixel rectangle. h - The height of the pixel rectangle. iArray - The input samples in an int array. data - The DataBuffer containing the image data. See Also: getPixels(int, int, int, int, int[], DataBuffer)",1,0,0,0,0,0,0,0,0,0,0,0
"Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds.  Overrides: setSamples in class SampleModel Parameters: x - The X coordinate of the upper left pixel location. y - The Y coordinate of the upper left pixel location. w - The width of the pixel rectangle. h - The height of the pixel rectangle. b - The band to set. iArray - The input samples in an int array. data - The DataBuffer containing the image data. See Also: getSamples(int, int, int, int, int, int[], DataBuffer)",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the height of the VolatileImage.  Returns: the height of this VolatileImage.",0,0,0,0,0,0,0,0,0,0,0,1
"Sets a pixel in the DataBuffer using a float array of samples for input. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.  Parameters: x - The X coordinate of the pixel location. y - The Y coordinate of the pixel location. fArray - The input samples in a float array. Throws: NullPointerException - if fArray is null. ArrayIndexOutOfBoundsException - if the coordinates are not in bounds, or if fArray is too small to hold the input.",1,0,0,0,0,0,0,0,0,0,0,1
"Clears the list of source images.",0,0,0,0,0,0,0,0,0,0,0,0
"A RenderContext encapsulates the information needed to produce a specific  rendering from a RenderableImage. It contains the area to be rendered  specified in rendering-independent terms, the resolution at which the  rendering is to be performed, and hints used to control the rendering  process.  Users create RenderContexts and pass them to the RenderableImage via the  createRendering method. Most of the methods of RenderContexts are not meant  to be used directly by applications, but by the RenderableImage and  operator classes to which it is passed.  The AffineTransform parameter passed into and out of this class are cloned.  The RenderingHints and Shape parameters are not necessarily cloneable and  are therefore only reference copied. Altering RenderingHints or Shape  instances that are in use by instances of RenderContext may have undesired  side effects.",0,1,0,0,0,0,1,1,0,0,0,0
"Constructs a RenderContext with a given transform and rendering hints. The area of interest is taken to be the entire renderable area.  Parameters: usr2dev - an AffineTransform. hints - a RenderingHints object containing rendering hints.",0,0,0,0,0,0,0,0,0,0,0,1
"Gets a RenderedImage instance of this image with a default width and height in pixels. The RenderContext is built automatically with an appropriate usr2dev transform and an area of interest of the full image. All the rendering hints come from hints passed in. Implementors of this interface must be sure that there is a defined default width and height.  Specified by: createDefaultRendering in interface RenderableImage Returns: a RenderedImage containing the rendered data.",1,1,1,0,0,0,0,0,0,0,0,0
"Creates a new, empty Book.",1,0,0,0,0,0,0,0,0,0,0,0
" The origin is at the top right of the paper with x running top to bottom and y running right to left. Note that this is the Macintosh landscape.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"The PrinterException class and its subclasses are used to indicate that an  exceptional condition has occurred in the print system.  See Also:     Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
"The PrinterGraphics interface is implemented by Graphics objects that are  passed to Printable objects to render a page. It allows an application to  find the PrinterJob object that is controlling the printing.",1,0,0,0,0,0,1,0,0,0,0,0
"A bean implementor who wishes to provide explicit information about their  bean may provide a BeanInfo class that implements this BeanInfo interface  and provides explicit information about the methods, properties, events,  etc, of their bean.  A bean implementor doesn't need to provide a complete set of explicit  information. You can pick and choose which information you want to provide  and the rest will be obtained by automatic analysis using low-level  reflection of the bean classes' methods and applying standard design  patterns.  You get the opportunity to provide lots and lots of different information  as part of the various XyZDescriptor classes. But don't panic, you only  really need to provide the minimal core information required by the various  constructors.  See also the SimpleBeanInfo class which provides a convenient noop base  class for BeanInfo classes, which you can override for those specific  places where you want to return explicit info.  To learn about all the behaviour of a bean see the Introspector class.",0,0,0,0,0,0,0,0,0,0,0,0
"Gets the beans PropertyDescriptors.  Returns: An array of PropertyDescriptors describing the editable properties supported by this bean. May return null if the information should be obtained by automatic analysis.  If a property is indexed, then its entry in the result array will belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor. A client of getPropertyDescriptors can use instanceof to check if a given PropertyDescriptor is an IndexedPropertyDescriptor.",0,1,1,0,0,0,0,0,0,0,0,0
"Register a listener for the PropertyChange event. The customizer should fire a PropertyChange event whenever it changes the target bean in a way that might require the displayed properties to be refreshed.  Parameters: listener - An object to be invoked when a PropertyChange event is fired.",1,0,1,0,0,1,0,0,0,0,0,1
"The DefaultPersistenceDelegate is a concrete implementation of the abstract  PersistenceDelegate class and is the delegate used by default for classes  about which no information is available. The DefaultPersistenceDelegate  provides, version resilient, public API-based persistence for classes that  follow the JavaBeans conventions without any class specific configuration.  The key assumptions are that the class has a nullary constructor and that  its state is accurately represented by matching pairs of setter and  getter methods in the order they are returned by the Introspector. In  addition to providing code-free persistence for JavaBeans, the  DefaultPersistenceDelegate provides a convenient means to effect persistent  storage for classes that have a constructor that, while not nullary, simply  requires some property values as arguments.  Since:     1.4 See Also:     DefaultPersistenceDelegate(String[]), Introspector",1,0,1,1,0,0,1,0,0,0,0,0
"This interface is intended to be implemented by, or delegated from,  instances of java.beans.beancontext.BeanContext, in order to propagate to  its nested hierarchy of java.beans.beancontext.BeanContextChild instances,  the current designTime property.  The JavaBeans specification defines the notion of design time as is a mode  in which JavaBeans instances should function during their composition and  customization in a interactive design, composition or construction tool, as  opposed to runtime when the JavaBean is part of an applet, application, or  other live Java executable abstraction.  Since:     1.2 See Also:     BeanContext, BeanContextChild, BeanContextMembershipListener,      PropertyChangeEvent",0,1,0,1,0,0,1,0,0,0,0,0
"An EventSetDescriptor describes a group of events that a given Java bean  fires.  The given group of events are all delivered as method calls on a single  event listener interface, and an event listener object can be registered  via a call on a registration method supplied by the event source.",1,1,0,0,0,0,0,1,0,0,0,0
"Creates an EventSetDescriptor from scratch using java.lang.reflect.MethodDescriptor and java.lang.Class objects.  Parameters: eventSetName - The programmatic name of the event set. listenerType - The Class for the listener interface. listenerMethodDescriptors - An array of MethodDescriptor objects describing each of the event handling methods in the target listener. addListenerMethod - The method on the event source that can be used to register an event listener object. removeListenerMethod - The method on the event source that can be used to de-register an event listener object. Throws: IntrospectionException - if an exception occurs during introspection.",0,0,0,0,0,0,1,0,0,0,1,0
"Thrown when an exception happens during Introspection.  Typical causes include not being able to map a string class name to a Class  object, not being able to resolve a string method name, or specifying a  method name that has the wrong type signature for its intended use.  See Also:     Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
"Constructs an IntrospectionException with a detailed message.  Parameters: mess - Descriptive message",1,0,0,0,0,0,0,0,0,0,0,1
"A MethodDescriptor describes a particular method that a Java Bean supports  for external access from other components.",1,0,0,0,0,0,0,0,0,0,0,0
"Gets the old value for the property, expressed as an Object.  Returns: The old value for the property, expressed as an Object. May be null if multiple properties have changed.",0,0,0,0,0,0,0,0,0,0,0,1
"This is a utility class that can be used by beans that support constrained  properties. You can use an instance of this class as a member field of your  bean and delegate various work to it. This class is serializable. When it  is serialized it will save (and restore) any listeners that are themselves  serializable. Any non-serializable listeners will be skipped during  serialization.  See Also:     Serialized Form",1,0,0,1,0,0,0,0,0,0,0,0
"Check if there are any listeners for a specific property, including those registered on all properties. If propertyName is null, only check for listeners registered on all properties.  Parameters: propertyName - the property name. Returns: true if there are one or more listeners for the given property",1,0,0,0,0,0,0,0,0,0,0,1
"Under some circumstances a bean may be run on servers where a GUI is not  available. This interface can be used to query a bean to determine whether  it absolutely needs a gui, and to advise the bean whether a GUI is  available.  This interface is for expert developers, and is not needed for normal  simple beans. To avoid confusing end-users we avoid using getXXX setXXX  design patterns for these methods.",1,0,0,0,0,0,0,0,0,0,0,0
"Determines whether this bean is avoiding using a GUI.  Returns: true if the bean is currently avoiding use of the Gui. e.g. due to a call on dontUseGui().",1,0,0,0,0,0,0,0,0,0,0,0
"Removes a VetoableChangeListener. If pcl was added more than once to the same event source for the specified property, it will be notified one less time after being removed. If name is null, no exception is thrown and no action is taken. If vcl is null, or was never added for the specified property, no exception is thrown and no action is taken.  Specified by: removeVetoableChangeListener in interface BeanContextChild Parameters: name - The name of the property that was listened on vcl - The VetoableChangeListener to be removed",1,0,0,0,0,0,0,0,0,0,0,1
"This interface is implemented by BeanContexts' that have an AWT Container  associated with them.  Since:     1.2 See Also:     BeanContext, BeanContextSupport",0,0,0,0,0,0,0,0,0,0,0,1
"BeanContextEvent is the abstract root event class for all events emitted  from, and pertaining to the semantics of, a BeanContext. This class  introduces a mechanism to allow the propagation of BeanContextEvent  subclasses through a hierarchy of BeanContexts. The setPropagatedFrom()  and getPropagatedFrom() methods allow a BeanContext to identify itself as  the source of a propagated event.  Since:     1.2 See Also:     BeanContext, Serialized Form",1,0,0,1,0,0,1,0,0,0,1,0
"Gets the BeanContext from which this event was propagated.  Returns: the BeanContext from which this event was propagated",1,0,0,0,0,0,0,0,0,0,0,1
"One of the primary functions of a BeanContext is to act a as rendezvous  between JavaBeans, and BeanContextServiceProviders.  A JavaBean nested within a BeanContext, may ask that BeanContext to provide  an instance of a service, based upon a reference to a Java Class object  that represents that service.  If such a service has been registered with the context, or one of its  nesting context's, in the case where a context delegate to its context to  satisfy a service request, then the BeanContextServiceProvider associated  with the service is asked to provide an instance of that service.  The ServcieProvider may always return the same instance, or it may  construct a new instance for each request.",1,0,0,1,0,0,0,0,0,0,0,0
"Releases a BeanContextChild's (or any arbitrary object associated with a BeanContextChild) reference to the specified service by calling releaseService() on the underlying BeanContextServiceProvider.  Parameters: child - the BeanContextChild requestor - the requestor service - the service",0,0,0,0,0,0,0,0,0,0,0,1
"The listener interface for receiving BeanContextServiceAvailableEvent  objects. A class that is interested in processing a  BeanContextServiceAvailableEvent implements this interface.",1,0,0,0,0,0,1,0,0,0,0,0
"See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Reports whether or not this BeanContext is empty. A BeanContext is considered empty when it contains zero nested children.  Specified by: isEmpty in interface Collection Returns: if there are not children",1,1,0,0,0,0,0,0,0,0,0,0
"remove all specified children (Unsupported) implementations must synchronized on the hierarchy lock and children protected field  Specified by: removeAll in interface Collection Parameters: c - collection containing elements to be removed from this collection Returns: true if this collection changed as a result of the call Throws: UnsupportedOperationException See Also: Collection.remove(Object), Collection.contains(Object)",1,0,0,0,0,0,1,0,0,0,0,0
"A BufferedInputStream adds functionality to another input stream-namely,  the ability to buffer the input and to support the mark and reset methods.  When the BufferedInputStream is created, an internal buffer array is  created. As bytes from the stream are read or skipped, the internal buffer  is refilled as necessary from the contained input stream, many bytes at a  time. The mark operation remembers a point in the input stream and the  reset operation causes all the bytes read since the most recent mark  operation to be reread before new bytes are taken from the contained input  stream.  Since:     JDK1.0",1,0,0,0,1,1,0,0,0,0,0,0
"Description copied from class: Reader Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.  Specified by: close in interface Closeable Specified by: close in class Reader Throws: IOException - If an I/O error occurs",1,0,0,0,0,0,1,0,0,0,0,1
" The buffer where data is stored. ",0,0,0,0,0,0,0,0,0,0,0,1
"Writes the specified byte to this byte array output stream.  Specified by: write in class OutputStream Parameters: b - the byte to be written.",0,0,0,0,0,0,0,0,0,0,0,1
"Resets the count field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded. The output stream can be used again, reusing the already allocated buffer space.  See Also: ByteArrayInputStream.count",1,0,0,1,0,0,0,0,0,0,0,0
"Provides a formatted prompt, then reads a single line of text from the console.  Parameters: fmt - A format string as described in Format string syntax. args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by the Java Virtual Machine Specification. Returns: A string containing the line read from the console, not including any line-termination characters, or null if an end of stream has been reached. Throws: IllegalFormatException - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification. IOError - If an I/O error occurs.",1,0,1,0,0,0,0,0,0,0,1,1
"Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.  Parameters: fmt - A format string as described in Format string syntax for the prompt text. args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by the Java Virtual Machine Specification. Returns: A character array containing the password or passphrase read from the console, not including any line-termination characters, or null if an end of stream has been reached. Throws: IllegalFormatException - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification. IOError - If an I/O error occurs.",1,0,0,0,0,0,0,0,0,0,1,0
"Reads one input byte, zero-extends it to type int, and returns the result, which is therefore in the range 0 through 255. This method is suitable for reading the byte written by the writeByte method of interface DataOutput if the argument to writeByte was intended to be a value in the range 0 through 255.  Returns: the unsigned 8-bit value read. Throws: EOFException - if this stream reaches the end before reading all the bytes. IOException - if an I/O error occurs.",1,0,1,1,0,0,0,1,0,0,0,0
"A data input stream lets an application read primitive Java data types from  an underlying input stream in a machine-independent way. An application  uses a data output stream to write data that can later be read by a data  input stream.  DataInputStream is not necessarily safe for multithreaded access. Thread  safety is optional and is the responsibility of users of methods in this  class.  Since:     JDK1.0 See Also:     DataOutputStream",0,0,0,0,1,0,0,1,0,0,0,0
"Writes a float value, which is comprised of four bytes, to the output stream. It does this as if it first converts this float value to an int in exactly the manner of the Float.floatToIntBits method and then writes the int value in exactly the manner of the writeInt method. The bytes written by this method may be read by the readFloat method of interface DataInput, which will then return a float equal to v.  Parameters: v - the float value to be written. Throws: IOException - if an I/O error occurs.",1,0,0,0,0,0,1,0,0,0,0,1
"Writes a short to the underlying output stream as two bytes, high byte first. If no exception is thrown, the counter written is incremented by 2.  Specified by: writeShort in interface DataOutput Parameters: v - a short to be written. Throws: IOException - if an I/O error occurs. See Also: FilterOutputStream.out",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the current value of the counter written, the number of bytes written to this data output stream so far. If the counter overflows, it will be wrapped to Integer.MAX_VALUE.  Returns: the value of the written field. See Also: written",0,0,0,0,0,0,0,0,0,0,0,1
"Only the identity of the class of an Externalizable instance is written in  the serialization stream and it is the responsibility of the class to save  and restore the contents of its instances. The writeExternal and  readExternal methods of the Externalizable interface are implemented by a  class to give the class complete control over the format and contents of  the stream for an object and its supertypes. These methods must explicitly  coordinate with the supertype to save its state. These methods supersede  customized implementations of writeObject and readObject methods. Object Serialization uses the Serializable and Externalizable interfaces.  Object persistence mechanisms can use them as well. Each object to be  stored is tested for the Externalizable interface. If the object supports  Externalizable, the writeExternal method is called. If the object does not  support Externalizable and does implement Serializable, the object is saved  using ObjectOutputStream. When an Externalizable object is reconstructed, an instance is created  using the public no-arg constructor, then the readExternal method called.  Serializable objects are restored by reading them from an  ObjectInputStream. An Externalizable instance can designate a substitution object via the  writeReplace and readResolve methods documented in the Serializable  interface.  Since:     JDK1.1 See Also:     ObjectOutputStream, ObjectInputStream, ObjectOutput, ObjectInput,      Serializable",1,0,1,1,0,1,1,1,0,0,0,0
" The system-dependent path-separator character. This field is initialized to contain the first character of the value of the system property path.separator. This character is used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is ':'; on Microsoft Windows systems it is ';'.  See Also: System.getProperty(java.lang.String) ",1,0,0,1,0,0,1,0,0,1,0,1
"Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname.  If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of File objects is returned, one for each file or directory in the directory. Pathnames denoting the directory itself and the directory's parent directory are not included in the result. Each resulting abstract pathname is constructed from this abstract pathname using the File(File, String) constructor. Therefore if this pathname is absolute then each resulting pathname is absolute; if this pathname is relative then each resulting pathname will be relative to the same directory.  There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order.  Returns: An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs. Throws: SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the directory Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,0
"A filter for abstract pathnames.  Instances of this interface may be passed to the listFiles(FileFilter)  method of the File class.  Since:     1.2",0,1,0,0,0,0,1,0,0,0,0,1
"Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream.  Returns: the file descriptor object associated with this stream. Throws: IOException - if an I/O error occurs. See Also: FileDescriptor",1,0,0,0,0,0,0,0,0,0,0,0
"Signals that an attempt to open the file denoted by a specified pathname  has failed.  This exception will be thrown by the FileInputStream, FileOutputStream, and  RandomAccessFile constructors when a file with the specified pathname does  not exist. It will also be thrown by these constructors if the file does  exist but for some reason is inaccessible, for example when an attempt is  made to open a read-only file for writing.  Since:     JDK1.0 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Abstract class for reading filtered character streams. The abstract class  FilterReader itself provides default methods that pass all requests to the  contained stream. Subclasses of FilterReader should override some of these  methods and may also provide additional methods and fields.  Since:     JDK1.1",1,0,1,0,0,0,0,0,0,0,0,0
"Reads characters into a portion of an array.  Specified by: read in class Reader Parameters: cbuf - Destination buffer off - Offset at which to start storing characters len - Maximum number of characters to read Returns: The number of characters read, or -1 if the end of the stream has been reached Throws: IOException - If an I/O error occurs",1,0,0,0,0,0,0,0,0,0,0,1
"A Flushable is a destination of data that can be flushed. The flush method  is invoked to write any buffered output to the underlying stream.  Since:     1.5",1,1,0,0,0,0,0,0,0,0,0,0
"This abstract class is the superclass of all classes representing an input  stream of bytes.  Applications that need to define a subclass of InputStream must always  provide a method that returns the next byte of input.  Since:     JDK1.0 See Also:     BufferedInputStream, ByteArrayInputStream, DataInputStream,      FilterInputStream, read(), OutputStream, PushbackInputStream",1,0,1,0,0,0,0,0,0,0,0,0
"Description copied from class: Reader Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.  Specified by: close in interface Closeable Specified by: close in class Reader Throws: IOException - If an I/O error occurs",1,0,0,0,0,0,0,0,0,0,0,1
"Indicates that one or more deserialized objects failed validation tests.  The argument should provide the reason for the failure.  Since:     JDK1.1, JDK1.1 See Also:     ObjectInputValidation, Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
"Thrown when an instance is required to have a Serializable interface. The  serialization runtime or the class of the instance can throw this  exception. The argument should be the name of the class.  Since:     JDK1.1 See Also:     Serialized Form",1,0,1,0,0,0,0,0,0,0,0,0
"Reads bytes, blocking until all bytes are read.  Specified by: readFully in interface DataInput Parameters: buf - the buffer into which the data is read Throws: EOFException - If end of file is reached. IOException - If other I/O error has occurred.",1,0,0,0,0,0,0,0,0,0,0,1
" new Class Descriptor.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
" Long string.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
" First wire handle to be assigned.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"A description of a Serializable field from a Serializable class. An array  of ObjectStreamFields is used to declare the Serializable fields of a  class.  Since:     1.2 See Also:     ObjectStreamClass",0,0,0,1,0,0,0,0,0,0,0,1
"Offset within instance data.  Parameters: offset - the offset of the field See Also: getOffset()",0,0,0,0,0,0,0,0,0,0,0,1
"Closes this piped stream and releases any system resources associated with the stream.  Specified by: close in interface Closeable Specified by: close in class Reader Throws: IOException - if an I/O error occurs.",1,0,0,0,0,0,0,0,0,0,0,0
"A PrintStream adds functionality to another output stream, namely the  ability to print representations of various data values conveniently. Two  other features are provided as well. Unlike other output streams, a  PrintStream never throws an IOException; instead, exceptional situations  merely set an internal flag that can be tested via the checkError method.  Optionally, a PrintStream can be created so as to flush automatically; this  means that the flush method is automatically invoked after a byte array is  written, one of the println methods is invoked, or a newline character or  byte (' n') is written.  All characters printed by a PrintStream are converted into bytes using the  platform's default character encoding. The PrintWriter class should be used  in situations that require writing characters rather than bytes.  Since:     JDK1.0",1,1,0,0,0,1,1,1,0,0,0,0
"Prints a double-precision floating-point number and then terminates the line. This method behaves as though it invokes print(double) and then println().  Parameters: x - the double value to be printed",1,0,0,0,0,0,1,0,0,0,0,0
"A character-stream reader that allows characters to be pushed back into the  stream.  Since:     JDK1.1",0,1,0,0,0,0,0,0,0,0,0,0
"Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs. The offset may be set beyond the end of the file. Setting the offset beyond the end of the file does not change the file length. The file length will change only by writing after the offset has been set beyond the end of the file.  Parameters: pos - the offset position, measured in bytes from the beginning of the file, at which to set the file pointer. Throws: IOException - if pos is less than 0 or if an I/O error occurs.",1,0,0,0,0,0,0,0,0,0,0,0
"Serializability of a class is enabled by the class implementing the  java.io.Serializable interface. Classes that do not implement this  interface will not have any of their state serialized or deserialized. All  subtypes of a serializable class are themselves serializable. The  serialization interface has no methods or fields and serves only to  identify the semantics of being serializable.  To allow subtypes of non-serializable classes to be serialized, the subtype  may assume responsibility for saving and restoring the state of the  supertype's public, protected, and (if accessible) package fields. The  subtype may assume this responsibility only if the class it extends has an  accessible no-arg constructor to initialize the class's state. It is an  error to declare a class Serializable if this is not the case. The error  will be detected at runtime.  During deserialization, the fields of non-serializable classes will be  initialized using the public or protected no-arg constructor of the class.  A no-arg constructor must be accessible to the subclass that is  serializable. The fields of serializable subclasses will be restored from  the stream.  When traversing a graph, an object may be encountered that does not support  the Serializable interface. In this case the NotSerializableException will  be thrown and will identify the class of the non-serializable object.  Classes that require special handling during the serialization and  deserialization process must implement special methods with these exact  signatures:   private void writeObject(java.io.ObjectOutputStream out) throws IOException private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException; private void readObjectNoData() throws ObjectStreamException;   The writeObject method is responsible for writing the state of the object  for its particular class so that the corresponding readObject method can  restore it. The default mechanism for saving the Object's fields can be  invoked by calling out.defaultWriteObject. The method does not need to  concern itself with the state belonging to its superclasses or subclasses.  State is saved by writing the individual fields to the ObjectOutputStream  using the writeObject method or by using the methods for primitive data  types supported by DataOutput.  The readObject method is responsible for reading from the stream and  restoring the classes fields. It may call in.defaultReadObject to invoke  the default mechanism for restoring the object's non-static and  non-transient fields. The defaultReadObject method uses information in the  stream to assign the fields of the object saved in the stream with the  correspondingly named fields in the current object. This handles the case  when the class has evolved to add new fields. The method does not need to  concern itself with the state belonging to its superclasses or subclasses.  State is saved by writing the individual fields to the ObjectOutputStream  using the writeObject method or by using the methods for primitive data  types supported by DataOutput.  The readObjectNoData method is responsible for initializing the state of  the object for its particular class in the event that the serialization  stream does not list the given class as a superclass of the object being  deserialized. This may occur in cases where the receiving party uses a  different version of the deserialized instance's class than the sending  party, and the receiver's version extends classes that are not extended by  the sender's version. This may also occur if the serialization stream has  been tampered; hence, readObjectNoData is useful for initializing  deserialized objects properly despite a hostile or incomplete source  stream.  Serializable classes that need to designate an alternative object to be  used when writing an object to the stream should implement this special  method with the exact signature:   ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;   This writeReplace method is invoked by serialization if the method exists  and it would be accessible from a method defined within the class of the  object being serialized. Thus, the method can have private, protected and  package-private access. Subclass access to this method follows java  accessibility rules.  Classes that need to designate a replacement when an instance of it is read  from the stream should implement this special method with the exact  signature.   ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;   This readResolve method follows the same invocation rules and accessibility  rules as writeReplace.  The serialization runtime associates with each serializable class a version  number, called a serialVersionUID, which is used during deserialization to  verify that the sender and receiver of a serialized object have loaded  classes for that object that are compatible with respect to serialization.  If the receiver has loaded a class for the object that has a different  serialVersionUID than that of the corresponding sender's class, then  deserialization will result in an InvalidClassException. A serializable  class can declare its own serialVersionUID explicitly by declaring a field  named serialVersionUID that must be static, final, and of type long:   ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;   If a serializable class does not explicitly declare a serialVersionUID,  then the serialization runtime will calculate a default serialVersionUID  value for that class based on various aspects of the class, as described in  the Java(TM) Object Serialization Specification. However, it is strongly  recommended that all serializable classes explicitly declare  serialVersionUID values, since the default serialVersionUID computation is  highly sensitive to class details that may vary depending on compiler  implementations, and can thus result in unexpected InvalidClassExceptions  during deserialization. Therefore, to guarantee a consistent  serialVersionUID value across different java compiler implementations, a  serializable class must declare an explicit serialVersionUID value. It is  also strongly advised that explicit serialVersionUID declarations use the  private modifier where possible, since such declarations apply only to the  immediately declaring class--serialVersionUID fields are not useful as  inherited members. Array classes cannot declare an explicit  serialVersionUID, so they always have the default computed value, but the  requirement for matching serialVersionUID values is waived for array  classes.  Since:     JDK1.1 See Also:     ObjectOutputStream, ObjectInputStream, ObjectOutput, ObjectInput,      Externalizable  Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,1,0,0,1,0,1,0,0,0
"This class is for Serializable permissions. A SerializablePermission  contains a name (also referred to as a target name) but no actions list;  you either have the named permission or you don't.  The target name is the name of the Serializable permission (see below).  The following table lists all the possible SerializablePermission target  names, and for each provides a description of what the permission allows  and a discussion of the risks of granting code the permission.  Permission Target Name 	What the Permission Allows 	Risks of Allowing this  Permission enableSubclassImplementation 	Subclass implementation of ObjectOutputStream  or ObjectInputStream to override the default serialization or  deserialization, respectively, of objects 	Code can use this to serialize  or deserialize classes in a purposefully malfeasant manner. For example,  during serialization, malicious code can use this to purposefully store  confidential private field data in a way easily accessible to attackers.  Or, during deserialization it could, for example, deserialize a class with  all its private fields zeroed out. enableSubstitution 	Substitution of one object for another during  serialization or deserialization 	This is dangerous because malicious code  can replace the actual object with one which has incorrect or malignant  data.  Since:     1.2 See Also:     BasicPermission, Permission, Permissions, PermissionCollection,      SecurityManager, Serialized Form",1,0,0,0,0,0,0,1,0,0,0,1
"Parses the next token from the input stream of this tokenizer. The type of the next token is returned in the ttype field. Additional information about the token may be in the nval field or the sval field of this tokenizer.  Typical clients of this class first set up the syntax tables and then sit in a loop calling nextToken to parse successive tokens until TT_EOF is returned.  Returns: the value of the ttype field. Throws: IOException - if an I/O error occurs. See Also: nval, sval, ttype",1,0,0,0,0,1,0,0,0,0,0,0
"Signals that a malformed string in modified UTF-8 format has been read in a  data input stream or by any class that implements the data input interface.  See the DataInput class description for the format in which modified UTF-8  strings are read and written.  Since:     JDK1.0 See Also:     DataInput, DataInputStream.readUTF(java.io.DataInput), IOException,      Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"The Character Encoding is not supported.  Since:     JDK1.1 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,1
"Appends a subsequence of the specified character sequence to this Appendable.  An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation  out.append(csq.subSequence(start, end))  Parameters: csq - The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters null. start - The index of the first character in the subsequence end - The index of the character following the last character in the subsequence Returns: A reference to this Appendable Throws: IndexOutOfBoundsException - If start or end are negative, start is greater than end, or end is greater than csq.length() IOException - If an I/O error occurs",1,0,0,0,0,0,0,0,1,0,0,1
" Constant for the Devanagari Unicode character block.  Since: 1.2 ",0,0,0,0,0,0,0,0,0,0,0,1
" Constant for the Enclosed Alphanumerics Unicode character block.  Since: 1.2 ",1,0,0,0,0,0,0,0,0,0,0,1
"Determines if the specified character is a titlecase character.  A character is a titlecase character if its general category type, provided by Character.getType(ch), is TITLECASE_LETTER.  Some characters look like pairs of Latin letters. For example, there is an uppercase letter that looks like LJ and has a corresponding lowercase letter that looks like lj. A third form, which looks like Lj, is the appropriate form to use when rendering a word in lowercase with initial capitals, as for a book title.  These are some of the Unicode characters for which this method returns true:  * LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON * LATIN CAPITAL LETTER L WITH SMALL LETTER J * LATIN CAPITAL LETTER N WITH SMALL LETTER J * LATIN CAPITAL LETTER D WITH SMALL LETTER Z  Many other Unicode characters are titlecase too.  Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isTitleCase(int) method.  Parameters: ch - the character to be tested. Returns: true if the character is titlecase; false otherwise. Since: 1.0.2 See Also: isLowerCase(char), isUpperCase(char), toTitleCase(char), getType(char)",1,0,0,0,0,0,1,0,0,0,0,0
"Deprecated. Replaced by isJavaIdentifierStart(char).  Determines if the specified character is permissible as the first character in a Java identifier.  A character may start a Java identifier if and only if one of the following is true:  * isLetter(ch) returns true * getType(ch) returns LETTER_NUMBER * ch is a currency symbol (such as $) * ch is a connecting punctuation character (such as _).  Parameters: ch - the character to be tested. Returns: true if the character may start a Java identifier; false otherwise. Since: 1.02 See Also: isJavaLetterOrDigit(char), isJavaIdentifierStart(char), isJavaIdentifierPart(char), isLetter(char), isLetterOrDigit(char), isUnicodeIdentifierStart(char)",0,0,1,0,0,0,0,0,0,0,0,1
"Returns the numeric value of the character ch in the specified radix.  If the radix is not in the range MIN_RADIX <= radix <= MAX_RADIX or if the value of ch is not a valid digit in the specified radix, -1 is returned. A character is a valid digit if at least one of the following is true:  * The method isDigit is true of the character and the Unicode decimal digit value of the character (or its single-character decomposition) is less than the specified radix. In this case the decimal digit value is returned. * The character is one of the uppercase Latin letters 'A' through 'Z' and its code is less than radix + 'A' - 10. In this case, ch - 'A' + 10 is returned. * The character is one of the lowercase Latin letters 'a' through 'z' and its code is less than radix + 'a' - 10. In this case, ch - 'a' + 10 is returned.  Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the digit(int, int) method.  Parameters: ch - the character to be converted. radix - the radix. Returns: the numeric value represented by the character in the specified radix. See Also: forDigit(int, int), isDigit(char)",1,0,1,0,0,0,0,0,0,0,0,1
"Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object. The parameterTypes parameter is an array of Class objects that identify the constructor's formal parameter types, in declared order. If this Class object represents an inner class declared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter.  The constructor to reflect is the public constructor of the class represented by this Class object whose formal parameter types match those specified by parameterTypes.  Parameters: parameterTypes - the parameter array Returns: the Constructor object of the public constructor that matches the specified parameterTypes Throws: NoSuchMethodException - if a matching method is not found. SecurityException - If a security manager, s, is present and any of the following conditions is met: * invocation of s.checkMemberAccess(this, Member.PUBLIC) denies access to the constructor * the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of s.checkPackageAccess() denies access to the package of this class Since: JDK1.1",1,0,0,0,0,0,1,0,0,0,0,1
"Thrown to indicate that the code has attempted to cast an object to a  subclass of which it is not an instance. For example, the following code  generates a ClassCastException:       Object x = new Integer(0); System.out.println((String)x);   Since:     JDK1.0 See Also:     Serialized Form",0,0,0,0,0,0,0,0,1,0,0,0
"Thrown when the Java Virtual Machine attempts to read a class file and  determines that the file is malformed or otherwise cannot be interpreted as  a class file.  Since:     JDK1.0 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs a ClassNotFoundException with the specified detail message and optional exception that was raised while loading the class.  Parameters: s - the detail message ex - the exception that was raised while loading the class Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,0
"Thrown to indicate that the clone method in class Object has been called to  clone an object, but that the object's class does not implement the  Cloneable interface.  Applications that override the clone method can also throw this exception  to indicate that an object could not or should not be cloned.  Since:     JDK1.0 See Also:     Cloneable, Object.clone(), Serialized Form",1,0,0,1,0,0,0,0,0,0,0,0
"Returns a string representation of the double argument. All characters mentioned below are ASCII characters. * If the argument is NaN, the result is the string NaN. * Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '-' (' u002D'); if the sign is positive, no sign character appears in the result. As for the magnitude m: o If m is infinity, it is represented by the characters Infinity; thus, positive infinity produces the result Infinity and negative infinity produces the result -Infinity. o If m is zero, it is represented by the characters 0.0; thus, negative zero produces the result -0.0 and positive zero produces the result 0.0. o If m is greater than or equal to 10-3 but less than 107, then it is represented as the integer part of m, in decimal form with no leading zeroes, followed by '.' (' u002E'), followed by one or more decimal digits representing the fractional part of m. o If m is less than 10-3 or greater than or equal to 107, then it is represented in so-called computerized scientific notation. Let n be the unique integer such that 10n <= m < 10n+1; then let a be the mathematically exact quotient of m and 10n so that 1 <= a < 10. The magnitude is then represented as the integer part of a, as a single decimal digit, followed by '.' (' u002E'), followed by decimal digits representing the fractional part of a, followed by the letter 'E' (' u0045'), followed by a representation of n as a decimal integer, as produced by the method Integer.toString(int). How many digits must be printed for the fractional part of m or a? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type double. That is, suppose that x is the exact mathematical value represented by the decimal representation produced by this method for a finite nonzero argument d. Then d must be the double value nearest to x; or if two double values are equally close to x, then d must be one of them and the least significant bit of the significand of d must be 0.  To create localized string representations of a floating-point value, use subclasses of NumberFormat.  Parameters: d - the double to be converted. Returns: a string representation of the argument.",1,1,1,0,0,0,0,1,0,0,0,0
"Returns the value of this Double as a long (by casting to type long).  Specified by: longValue in class Number Returns: the double value represented by this object converted to type long",1,0,0,0,0,0,0,0,0,0,0,1
"This is the common base class of all Java language enumeration types.  Since:     1.5 See Also:     Serialized Form  Constructor Summary protected 	Enum(String name, int ordinal)           Sole constructor.   Method Summary protected  Object 	clone()           Throws CloneNotSupportedException.  int 	compareTo(E o)           Compares this enum with the specified object for order.  boolean 	equals(Object other)           Returns true if the specified object is equal to this enum  constant. protected  void 	finalize()           enum classes cannot have finalize methods.  Class<E> 	getDeclaringClass()           Returns the Class object corresponding to this enum constant's  enum type.  int 	hashCode()           Returns a hash code for this enum constant.  String 	name()           Returns the name of this enum constant, exactly as declared in  its enum declaration.  int 	ordinal()           Returns the ordinal of this enumeration constant (its position in  its enum declaration, where the initial constant is assigned an ordinal of  zero).  String 	toString()           Returns the name of this enum constant, as contained in the  declaration. static <T extends Enum<T>> T valueOf(Class<T> enumType, String name)           Returns the enum constant of the specified enum type with the  specified name.   Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait    Constructor Detail   Enum   protected Enum(String name, int ordinal)      Sole constructor. Programmers cannot invoke this constructor. It is for     use by code emitted by the compiler in response to enum type     declarations.      Parameters:         name - - The name of this enum constant, which is the identifier         used to declare it.         ordinal - - The ordinal of this enumeration constant (its position         in the enum declaration, where the initial constant is assigned an         ordinal of zero). Method Detail   name   public final String name()      Returns the name of this enum constant, exactly as declared in its enum     declaration. Most programmers should use the toString() method in     preference to this one, as the toString method may return a more     user-friendly name. This method is designed primarily for use in     specialized situations where correctness depends on getting the exact     name, which will not vary from release to release.      Returns:         the name of this enum constant   ordinal   public final int ordinal()      Returns the ordinal of this enumeration constant (its position in its     enum declaration, where the initial constant is assigned an ordinal of     zero). Most programmers will have no use for this method. It is     designed for use by sophisticated enum-based data structures, such as      EnumSet and EnumMap.      Returns:         the ordinal of this enumeration constant   toString   public String toString()      Returns the name of this enum constant, as contained in the     declaration. This method may be overridden, though it typically isn't     necessary or desirable. An enum type should override this method when a     more programmer-friendly string form exists.      Overrides:         toString in class Object     Returns:         the name of this enum constant   equals   public final boolean equals(Object other)      Returns true if the specified object is equal to this enum constant.      Overrides:         equals in class Object     Parameters:         other - the object to be compared for equality with this object.     Returns:         true if the specified object is equal to this enum constant.     See Also:         Object.hashCode(), Hashtable   hashCode   public final int hashCode()      Returns a hash code for this enum constant.      Overrides:         hashCode in class Object     Returns:         a hash code for this enum constant.     See Also:         Object.equals(java.lang.Object), Hashtable   clone   protected final Object clone() throws CloneNotSupportedException      Throws CloneNotSupportedException. This guarantees that enums are never     cloned, which is necessary to preserve their singleton status.      Overrides:         clone in class Object     Returns:         (never returns)     Throws:         CloneNotSupportedException - if the object's class does not support         the Cloneable interface. Subclasses that override the clone method         can also throw this exception to indicate that an instance cannot         be cloned.     See Also:         Cloneable   compareTo   public final int compareTo(E o)      Compares this enum with the specified object for order. Returns a     negative integer, zero, or a positive integer as this object is less     than, equal to, or greater than the specified object. Enum constants     are only comparable to other enum constants of the same enum type. The     natural order implemented by this method is the order in which the     constants are declared.      Specified by:         compareTo in interface Comparable<E extends Enum<E>>     Parameters:         o - the object to be compared.     Returns:         a negative integer, zero, or a positive integer as this object is         less than, equal to, or greater than the specified object.   getDeclaringClass   public final Class<E> getDeclaringClass()      Returns the Class object corresponding to this enum constant's enum     type. Two enum constants e1 and e2 are of the same enum type if and     only if e1.getDeclaringClass() == e2.getDeclaringClass(). (The value     returned by this method may differ from the one returned by the      Object.getClass() method for enum constants with constant-specific     class bodies.)      Returns:         the Class object corresponding to this enum constant's enum type   valueOf   public static <T extends Enum<T>> T valueOf(Class<T> enumType, String name)      Returns the enum constant of the specified enum type with the specified     name. The name must match exactly an identifier used to declare an enum     constant in this type. (Extraneous whitespace characters are not     permitted.)      Parameters:         enumType - the Class object of the enum type from which to return a         constant         name - the name of the constant to return     Returns:         the enum constant of the specified enum type with the specified         name     Throws:         IllegalArgumentException - if the specified enum type has no         constant with the specified name, or the specified class object         does not represent an enum type         NullPointerException - if enumType or name is null     Since:         1.5   finalize   protected final void finalize()      enum classes cannot have finalize methods.      Overrides:         finalize in class Object Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR |  METHOD Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,0,0,0,0,0,0,0,0,0
"Throws CloneNotSupportedException. This guarantees that enums are never cloned, which is necessary to preserve their singleton status.  Overrides: clone in class Object Returns: (never returns) Throws: CloneNotSupportedException - if the object's class does not support the Cloneable interface. Subclasses that override the clone method can also throw this exception to indicate that an instance cannot be cloned. See Also: Cloneable",1,0,1,1,0,0,0,0,0,0,0,1
"The class Exception and its subclasses are a form of Throwable that  indicates conditions that a reasonable application might want to catch.  Since:     JDK1.0 See Also:     Error, Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
" A constant holding the smallest positive nonzero value of type float, 2 -149. It is equal to the hexadecimal floating-point literal 0x0.000002P-126f and also equal to Float.intBitsToFloat(0x1).  See Also: Constant Field Values ",1,0,0,0,0,0,1,0,0,0,0,0
"Constructs a newly allocated Float object that represents the floating-point value of type float represented by the string. The string is converted to a float value as if by the valueOf method.  Parameters: s - a string to be converted to a Float. Throws: NumberFormatException - if the string does not contain a parsable number. See Also: valueOf(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,0
"Signals that a method has been invoked at an illegal or inappropriate time.  In other words, the Java environment or Java application is not in an  appropriate state for the requested operation.  Since:     JDK1.1 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,1,0
"Thrown to indicate that a thread is not in an appropriate state for the  requested operation. See, for example, the suspend and resume methods in  class Thread.  Since:     JDK1.0 See Also:     Thread.resume(), Thread.suspend(), Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Thrown when an incompatible class change has occurred to some class  definition. The definition of some class, on which the currently executing  method depends, has since changed.  Since:     JDK1.0 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
" The Class instance representing the primitive type int.  Since: JDK1.1 ",0,1,0,0,0,0,0,0,0,0,0,0
"Returns an Integer object holding the value of the specified String. The argument is interpreted as representing a signed decimal integer, exactly as if the argument were given to the parseInt(java.lang.String) method. The result is an Integer object that represents the integer value specified by the string.  In other words, this method returns an Integer object equal to the value of:  new Integer(Integer.parseInt(s))  Parameters: s - the string to be parsed. Returns: an Integer object holding the value represented by the string argument. Throws: NumberFormatException - if the string cannot be parsed as an integer.",1,0,0,0,0,0,0,0,1,0,0,1
"Subclasses of LinkageError indicate that a class has some dependency on  another class; however, the latter class has incompatibly changed after the  compilation of the former class.  Since:     JDK1.0 See Also:     Serialized Form",0,0,0,1,0,0,1,0,0,0,0,0
" Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range.  When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression  new java.util.Random  This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else.  This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.  Returns: a pseudorandom double greater than or equal to 0.0 and less than 1.0. See Also: Random.nextDouble() ",1,0,0,0,1,1,1,0,0,0,1,0
"Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact.  Parameters: angdeg - an angle, in degrees Returns: the measurement of the angle angdeg in radians. Since: 1.2",1,0,0,0,1,0,0,0,0,0,0,1
"Returns the absolute value of a float value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: * If the argument is positive zero or negative zero, the result is positive zero. * If the argument is infinite, the result is positive infinity. * If the argument is NaN, the result is NaN. In other words, the result is the same as the value of the expression:  Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a))  Parameters: a - the argument whose absolute value is to be determined Returns: the absolute value of the argument.",1,0,0,0,0,0,0,0,1,0,0,1
"Returns the first floating-point argument with the sign of the second floating-point argument. Note that unlike the StrictMath.copySign method, this method does not require NaN sign arguments to be treated as positive values; implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance.  Parameters: magnitude - the parameter providing the magnitude of the result sign - the parameter providing the sign of the result Returns: a value with the magnitude of magnitude and the sign of sign. Since: 1.6",1,0,0,0,0,0,1,0,0,0,0,0
"Thrown when the Java Virtual Machine cannot allocate an object because it  is out of memory, and no more memory could be made available by the garbage  collector.  Since:     JDK1.0 See Also:     Serialized Form",0,1,0,0,0,0,0,0,0,0,0,0
"Find a package by name in the callers ClassLoader instance. The callers ClassLoader instance is used to find the package instance corresponding to the named class. If the callers ClassLoader instance is null then the set of packages loaded by the system ClassLoader instance is searched to find the named package.  Packages have attributes for versions and specifications only if the class loader created the package instance with the appropriate attributes. Typically, those attributes are defined in the manifests that accompany the classes.  Parameters: name - a package name, for example, java.lang. Returns: the package of the requested name. It may be null if no package information is available from the archive or codebase.",1,1,0,0,0,0,0,0,0,0,0,0
"This class is used to create operating system processes.  Each ProcessBuilder instance manages a collection of process attributes.  The start() method creates a new Process instance with those attributes.  The start() method can be invoked repeatedly from the same instance to  create new subprocesses with identical or related attributes.  Each process builder manages these process attributes:      * a command, a list of strings which signifies the external program       file to be invoked and its arguments, if any. Which string lists       represent a valid operating system command is system-dependent. For       example, it is common for each conceptual argument to be an element       in this list, but there are operating systems where programs are       expected to tokenize command line strings themselves - on such a       system a Java implementation might require commands to contain       exactly two elements.     * an environment, which is a system-dependent mapping from variables        to values. The initial value is a copy of the environment of the       current process (see System.getenv()).     * a working directory. The default value is the current working       directory of the current process, usually the directory named by the       system property user.dir.     * a redirectErrorStream property. Initially, this property is false,       meaning that the standard output and error output of a subprocess are       sent to two separate streams, which can be accessed using the        Process.getInputStream() and Process.getErrorStream() methods. If the       value is set to true, the standard error is merged with the standard       output. This makes it easier to correlate error messages with the       corresponding output. In this case, the merged data can be read from       the stream returned by Process.getInputStream(), while reading from       the stream returned by Process.getErrorStream() will get an immediate       end of file.  Modifying a process builder's attributes will affect processes subsequently  started by that object's start() method, but will never affect previously  started processes or the Java process itself.  Most error checking is performed by the start() method. It is possible to  modify the state of an object so that start() will fail. For example,  setting the command attribute to an empty list will not throw an exception  unless start() is invoked.  Note that this class is not synchronized. If multiple threads access a  ProcessBuilder instance concurrently, and at least one of the threads  modifies one of the attributes structurally, it must be synchronized  externally.  Starting a new process which uses the default working directory and  environment is easy:       Process p = new ProcessBuilder(myCommand, myArg).start();   Here is an example that starts a process with a modified working directory  and environment:       ProcessBuilder pb = new ProcessBuilder(myCommand, myArg1, myArg2); Map<String, String> env = pb.environment(); env.put(VAR1, myValue); env.remove(OTHERVAR); env.put(VAR2, env.get(VAR1) + suffix); pb.directory(new File(myDir)); Process p = pb.start();   To start a process with an explicit set of environment variables, first  call Map.clear() before adding environment variables.  Since:     1.5",1,0,1,1,0,1,1,1,1,0,0,0
"Registers a new virtual-machine shutdown hook.  The Java virtual machine shuts down in response to two kinds of events:  * The program exits normally, when the last non-daemon thread exits or when the exit (equivalently, System.exit) method is invoked, or  * The virtual machine is terminated in response to a user interrupt, such as typing ^C, or a system-wide event, such as user logoff or system shutdown.  A shutdown hook is simply an initialized but unstarted thread. When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently. When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt. Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the exit method.  Once the shutdown sequence has begun it can be stopped only by invoking the halt method, which forcibly terminates the virtual machine.  Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an IllegalStateException to be thrown.  Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively. They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible. They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down. Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks.  Shutdown hooks should also finish their work quickly. When a program invokes exit the expectation is that the virtual machine will promptly shut down and exit. When the virtual machine is terminated due to user logoff or system shutdown the underlying operating system may only allow a fixed amount of time in which to shut down and exit. It is therefore inadvisable to attempt any user interaction or to perform a long-running computation in a shutdown hook.  Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the uncaughtException method of the thread's ThreadGroup object. The default implementation of this method prints the exception's stack trace to System.err and terminates the thread; it does not cause the virtual machine to exit or halt.  In rare circumstances the virtual machine may abort, that is, stop running without shutting down cleanly. This occurs when the virtual machine is terminated externally, for example with the SIGKILL signal on Unix or the TerminateProcess call on Microsoft Windows. The virtual machine may also abort if a native method goes awry by, for example, corrupting internal data structures or attempting to access nonexistent memory. If the virtual machine aborts then no guarantee can be made about whether or not any shutdown hooks will be run.  Parameters: hook - An initialized but unstarted Thread object Throws: IllegalArgumentException - If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run IllegalStateException - If the virtual machine is already in the process of shutting down SecurityException - If a security manager is present and it denies RuntimePermission(shutdownHooks) Since: 1.3 See Also: removeShutdownHook(java.lang.Thread), halt(int), exit(int)",1,1,1,1,1,1,0,0,1,0,0,1
"This class is for runtime permissions. A RuntimePermission contains a name  (also referred to as a target name) but no actions list; you either have  the named permission or you don't.  The target name is the name of the runtime permission (see below). The  naming convention follows the hierarchical property naming convention.  Also, an asterisk may appear at the end of the name, following a ., or by  itself, to signify a wildcard match. For example: loadLibrary.* or * is  valid, *loadLibrary or a*b is not valid.  The following table lists all the possible RuntimePermission target names,  and for each provides a description of what the permission allows and a  discussion of the risks of granting code the permission.  Permission Target Name 	What the Permission Allows 	Risks of Allowing this  Permission createClassLoader 	Creation of a class loader 	This is an extremely  dangerous permission to grant. Malicious applications that can instantiate  their own class loaders could then load their own rogue classes into the  system. These newly loaded classes could be placed into any protection  domain by the class loader, thereby automatically granting the classes the  permissions for that domain. getClassLoader 	Retrieval of a class loader (e.g., the class loader for the  calling class) 	This would grant an attacker permission to get the class  loader for a particular class. This is dangerous because having access to a  class's class loader allows the attacker to load other classes available to  that class loader. The attacker would typically otherwise not have access  to those classes. setContextClassLoader 	Setting of the context class loader used by a thread 	 The context class loader is used by system code and extensions when they  need to lookup resources that might not exist in the system class loader.  Granting setContextClassLoader permission would allow code to change which  context class loader is used for a particular thread, including system  threads. enableContextClassLoaderOverride 	Subclass implementation of the thread  context class loader methods 	The context class loader is used by system  code and extensions when they need to lookup resources that might not exist  in the system class loader. Granting enableContextClassLoaderOverride  permission would allow a subclass of Thread to override the methods that  are used to get or set the context class loader for a particular thread. setSecurityManager 	Setting of the security manager (possibly replacing an  existing one) 	The security manager is a class that allows applications to  implement a security policy. Granting the setSecurityManager permission  would allow code to change which security manager is used by installing a  different, possibly less restrictive security manager, thereby bypassing  checks that would have been enforced by the original security manager. createSecurityManager 	Creation of a new security manager 	This gives code  access to protected, sensitive methods that may disclose information about  other classes or the execution stack. getenv.{variable name} 	Reading of the value of the specified environment  variable 	This would allow code to read the value, or determine the  existence, of a particular environment variable. This is dangerous if the  variable contains confidential data. exitVM.{exit status} 	Halting of the Java Virtual Machine with the  specified exit status 	This allows an attacker to mount a denial-of-service  attack by automatically forcing the virtual machine to halt. Note: The  exitVM.* permission is automatically granted to all code loaded from the  application class path, thus enabling applications to terminate themselves.  Also, the exitVM permission is equivalent to exitVM.*. shutdownHooks 	Registration and cancellation of virtual-machine shutdown  hooks 	This allows an attacker to register a malicious shutdown hook that  interferes with the clean shutdown of the virtual machine. setFactory 	Setting of the socket factory used by ServerSocket or Socket,  or of the stream handler factory used by URL 	This allows code to set the  actual implementation for the socket, server socket, stream handler, or RMI  socket factory. An attacker may set a faulty implementation which mangles  the data stream. setIO 	Setting of System.out, System.in, and System.err 	This allows  changing the value of the standard system streams. An attacker may change  System.in to monitor and steal user input, or may set System.err to a  null OutputStream, which would hide any error messages sent to  System.err. modifyThread 	Modification of threads, e.g., via calls to Thread interrupt , stop, suspend, resume, setDaemon, setPriority, setName and  setUncaughtExceptionHandler methods 	This allows an attacker to modify the  behaviour of any thread in the system. stopThread 	Stopping of threads via calls to the Thread stop method 	This  allows code to stop any thread in the system provided that it is already  granted permission to access that thread. This poses as a threat, because  that code may corrupt the system by killing existing threads. modifyThreadGroup 	modification of thread groups, e.g., via calls to  ThreadGroup destroy, getParent, resume, setDaemon, setMaxPriority, stop,  and suspend methods 	This allows an attacker to create thread groups and  set their run priority. getProtectionDomain 	Retrieval of the ProtectionDomain for a class 	This  allows code to obtain policy information for a particular code source.  While obtaining policy information does not compromise the security of the  system, it does give attackers additional information, such as local file  names for example, to better aim an attack. getFileSystemAttributes 	Retrieval of file system attributes 	This allows  code to obtain file system information such as disk usage or disk space  available to the caller. This is potentially dangerous because it discloses  information about the system hardware configuration and some information  about the caller's privilege to write files. readFileDescriptor 	Reading of file descriptors 	This would allow code to  read the particular file associated with the file descriptor read. This is  dangerous if the file contains confidential data. writeFileDescriptor 	Writing to file descriptors 	This allows code to write  to a particular file associated with the descriptor. This is dangerous  because it may allow malicious code to plant viruses or at the very least,  fill up your entire disk. loadLibrary.{library name} 	Dynamic linking of the specified library 	It is  dangerous to allow an applet permission to load native code libraries,  because the Java security architecture is not designed to and does not  prevent malicious behavior at the level of native code. accessClassInPackage.{package name} 	Access to the specified package via a  class loader's loadClass method when that class loader calls the  SecurityManager checkPackageAccess method 	This gives code access to  classes in packages to which it normally does not have access. Malicious  code may use these classes to help in its attempt to compromise security in  the system. defineClassInPackage.{package name} 	Definition of classes in the specified  package, via a class loader's defineClass method when that class loader  calls the SecurityManager checkPackageDefinition method. 	This grants code  permission to define a class in a particular package. This is dangerous  because malicious code with this permission may define rogue classes in  trusted packages like java.security or java.lang, for example. accessDeclaredMembers 	Access to the declared members of a class 	This  grants code permission to query a class for its public, protected, default  (package) access, and private fields and/or methods. Although the code  would have access to the private and protected field and method names, it  would not have access to the private/protected field data and would not be  able to invoke any private methods. Nevertheless, malicious code may use  this information to better aim an attack. Additionally, it may invoke any  public methods and/or access public fields in the class. This could be  dangerous if the code would normally not be able to invoke those methods  and/or access the fields because it can't cast the object to the  class/interface with those methods and fields. queuePrintJob 	Initiation of a print job request 	This could print  sensitive information to a printer, or simply waste paper. getStackTrace 	Retrieval of the stack trace information of another thread. 	 This allows retrieval of the stack trace information of another thread.  This might allow malicious code to monitor the execution of threads and  discover vulnerabilities in applications. setDefaultUncaughtExceptionHandler 	Setting the default handler to be used  when a thread terminates abruptly due to an uncaught exception 	This allows  an attacker to register a malicious uncaught exception handler that could  interfere with termination of a thread preferences 	Represents the permission required to get access to the  java.util.prefs.Preferences implementations user or system root which in  turn allows retrieval or update operations within the Preferences  persistent backing store.) 	This permission allows the user to read from or  write to the preferences backing store if the user running the code has  sufficient OS privileges to read/write to that backing store. The actual  backing store may reside within a traditional filesystem directory or  within a registry depending on the platform OS  See Also:     BasicPermission, Permission, Permissions, PermissionCollection,      SecurityManager, Serialized Form",1,1,1,0,0,0,1,1,1,0,0,1
"Creates a SecurityException with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause).  Parameters: cause - the cause (which is saved for later retrieval by the Throwable.getCause() method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) Since: 1.5",1,0,0,0,0,0,1,0,0,0,0,0
"The security manager is a class that allows applications to implement a  security policy. It allows an application to determine, before performing a  possibly unsafe or sensitive operation, what the operation is and whether  it is being attempted in a security context that allows the operation to be  performed. The application can allow or disallow the operation.  The SecurityManager class contains many methods with names that begin with  the word check. These methods are called by various methods in the Java  libraries before those methods perform certain potentially sensitive  operations. The invocation of such a check method typically looks like  this:       SecurityManager security = System.getSecurityManager(); if (security != null) { security.checkXXX(argument,  . . . ); }   The security manager is thereby given an opportunity to prevent completion  of the operation by throwing an exception. A security manager routine  simply returns if the operation is permitted, but throws a  SecurityException if the operation is not permitted. The only exception to  this convention is checkTopLevelWindow, which returns a boolean value.  The current security manager is set by the setSecurityManager method in  class System. The current security manager is obtained by the  getSecurityManager method.  The special method checkPermission(java.security.Permission) determines  whether an access request indicated by a specified permission should be  granted or denied. The default implementation calls   AccessController 258954,262646,Additional online Documentation: Syntax: public class AnovaResult Summary: Represents the results of an ANOVA statistical test. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe. to determine if the calling thread has permission to  perform the requested operation.  Note that the checkPermission method with just a single permission argument  always performs security checks within the context of the currently  executing thread. Sometimes a security check that should be made within a  given context will actually need to be done from within a different  context (for example",1,1,1,1,1,1,1,0,1,0,0,0
"Throws a SecurityException if the calling thread is not allowed to modify the thread argument.  This method is invoked for the current security manager by the stop, suspend, resume, setPriority, setName, and setDaemon methods of class Thread.  If the thread argument is a system thread (belongs to the thread group with a null parent) then this method calls checkPermission with the RuntimePermission(modifyThread) permission. If the thread argument is not a system thread, this method just returns silently.  Applications that want a stricter policy should override this method. If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the RuntimePermission(modifyThread) permission, and if so, return silently. This is to ensure that code granted that permission (such as the JDK itself) is allowed to manipulate any thread.  If this method is overridden, then super.checkAccess should be called by the first statement in the overridden method, or the equivalent security check should be placed in the overridden method.  Parameters: t - the thread to be checked. Throws: SecurityException - if the calling thread does not have permission to modify the thread. NullPointerException - if the thread argument is null. See Also: resume, setDaemon, setName, setPriority, stop, suspend, checkPermission",1,0,1,1,0,1,1,0,0,0,0,0
"Throws a SecurityException if the calling thread is not allowed to initiate a print job request.  This method calls checkPermission with the RuntimePermission(queuePrintJob) permission.  If you override this method, then you should make a call to super.checkPrintJobAccess at the point the overridden method would normally throw an exception.  Throws: SecurityException - if the calling thread does not have permission to initiate a print job request. Since: JDK1.1 See Also: checkPermission",1,0,1,0,0,1,1,0,0,0,0,1
"The Short class wraps a value of primitive type short in an object. An  object of type Short contains a single field whose type is short.  In addition, this class provides several methods for converting a short to  a String and a String to a short, as well as other constants and methods  useful when dealing with a short.  Since:     JDK1.1 See Also:     Number, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Compares this object to the specified object. The result is true if and only if the argument is not null and is a Short object that contains the same short value as this object.  Overrides: equals in class Object Parameters: obj - the object to compare with Returns: true if the objects are the same; false otherwise. See Also: Object.hashCode(), Hashtable",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the size of an ulp of the argument. An ulp of a double value is the positive distance between this floating-point value and the double value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x).  Special Cases:  * If the argument is NaN, then the result is NaN. * If the argument is positive or negative infinity, then the result is positive infinity. * If the argument is positive or negative zero, then the result is Double.MIN_VALUE. * If the argument is ±Double.MAX_VALUE, then the result is equal to 2971.  Parameters: d - the floating-point value whose ulp is to be returned Returns: the size of an ulp of the argument Since: 1.5",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the first floating-point argument with the sign of the second floating-point argument. For this method, a NaN sign argument is always treated as if it were positive.  Parameters: magnitude - the parameter providing the magnitude of the result sign - the parameter providing the sign of the result Returns: a value with the magnitude of magnitude and the sign of sign. Since: 1.6",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal the second argument is returned.  Special cases:  * If either argument is a NaN, then NaN is returned. * If both arguments are signed zeros, direction is returned unchanged (as implied by the requirement of returning the second argument if the arguments compare as equal). * If start is ±Double.MIN_VALUE and direction has a value such that the result should have a smaller magnitude, then a zero with the same sign as start is returned. * If start is infinite and direction has a value such that the result should have a smaller magnitude, Double.MAX_VALUE with the same sign as start is returned. * If start is equal to ± Double.MAX_VALUE and direction has a value such that the result should have a larger magnitude, an infinity with same sign as start is returned.  Parameters: start - starting floating-point value direction - value indicating which of start's neighbors or start should be returned Returns: The floating-point number adjacent to start in the direction of direction. Since: 1.6",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal a value equivalent to the second argument is returned.  Special cases:  * If either argument is a NaN, then NaN is returned. * If both arguments are signed zeros, a value equivalent to direction is returned. * If start is ±Float.MIN_VALUE and direction has a value such that the result should have a smaller magnitude, then a zero with the same sign as start is returned. * If start is infinite and direction has a value such that the result should have a smaller magnitude, Float.MAX_VALUE with the same sign as start is returned. * If start is equal to ± Float.MAX_VALUE and direction has a value such that the result should have a larger magnitude, an infinity with same sign as start is returned.  Parameters: start - starting floating-point value direction - value indicating which of start's neighbors or start should be returned Returns: The floating-point number adjacent to start in the direction of direction. Since: 1.6",1,0,0,0,0,0,1,0,0,0,0,1
"The String class represents character strings. All string literals in Java  programs, such as abc, are implemented as instances of this class.  Strings are constant; their values cannot be changed after they are  created. String buffers support mutable strings. Because String objects are  immutable they can be shared. For example:       String str = abc;   is equivalent to:       char data[] = {'a', 'b', 'c'}; String str = new String(data);   Here are some more examples of how strings can be used:       System.out.println(abc); String cde = cde; System.out.println(abc + cde); String c = abc.substring(2,3); String d = cde.substring(1, 2);   The class String includes methods for examining individual characters of  the sequence, for comparing strings, for searching strings, for extracting  substrings, and for creating a copy of a string with all characters  translated to uppercase or to lowercase. Case mapping is based on the  Unicode Standard version specified by the Character class.  The Java language provides special support for the string concatenation  operator ( + ), and for conversion of other objects to strings. String  concatenation is implemented through the StringBuilder(or StringBuffer)  class and its append method. String conversions are implemented through the  method toString, defined by Object and inherited by all classes in Java.  For additional information on string concatenation and conversion, see  Gosling, Joy, and Steele, The Java Language Specification.  Unless otherwise noted, passing a null argument to a constructor or method  in this class will cause a NullPointerException to be thrown.  A String represents a string in the UTF-16 format in which supplementary  characters are represented by surrogate pairs (see the section Unicode  Character Representations in the Character class for more information).  Index values refer to char code units, so a supplementary character uses  two positions in a String.  The String class provides methods for dealing with Unicode code points  (i.e., characters), in addition to those for dealing with Unicode code  units (i.e., char values).  Since:     JDK1.0 See Also:     Object.toString(), StringBuffer, StringBuilder, Charset, Serialized     Form",1,1,0,0,0,0,1,1,1,0,1,0
"Deprecated. This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a Charset, charset name, or that use the platform's default charset.  Allocates a new String constructed from a subarray of an array of 8-bit integer values.  The offset argument is the index of the first byte of the subarray, and the count argument specifies the length of the subarray.  Each byte in the subarray is converted to a char as specified in the method above.  Parameters: ascii - The bytes to be converted to characters hibyte - The top 8 bits of each 16-bit Unicode code unit offset - The initial offset count - The length Throws: IndexOutOfBoundsException - If the offset or count argument is invalid See Also: String(byte[], int), String(byte[], int, int, java.lang.String), String(byte[], int, int, java.nio.charset.Charset), String(byte[], int, int), String(byte[], java.lang.String), String(byte[], java.nio.charset.Charset), String(byte[])",1,0,0,0,0,0,0,1,0,1,0,0
"Compares this string to the specified StringBuffer. The result is true if and only if this String represents the same sequence of characters as the specified StringBuffer.  Parameters: sb - The StringBuffer to compare this String against Returns: true if this String represents the same sequence of characters as the specified StringBuffer, false otherwise Since: 1.4",1,0,0,0,0,0,0,0,0,0,0,0
"Returns a String that represents the character sequence in the array specified.  Parameters: data - the character array. offset - initial offset of the subarray. count - length of the subarray. Returns: a String that contains the characters of the specified subarray of the character array.",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the string representation of the char argument.  Parameters: c - a char. Returns: a string of length 1 containing as its single character the argument c.",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the current capacity. The capacity is the amount of storage available for newly inserted characters, beyond which an allocation will occur.  Returns: the current capacity",1,1,0,0,0,0,0,0,0,0,0,0
"Appends the string representation of the Object argument.  The argument is converted to a string as if by the method String.valueOf, and the characters of that string are then appended to this sequence.  Parameters: obj - an Object. Returns: a reference to this object. See Also: String.valueOf(java.lang.Object), append(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,1
"Appends the string representation of the Object argument.  The argument is converted to a string as if by the method String.valueOf, and the characters of that string are then appended to this sequence.  Parameters: obj - an Object. Returns: a reference to this object. See Also: String.valueOf(java.lang.Object), append(java.lang.String)",1,0,0,0,0,0,0,0,0,0,1,0
"Inserts the string representation of the double argument into this sequence.  The second argument is converted to a string as if by the method String.valueOf, and the characters of that string are then inserted into this sequence at the indicated offset.  The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.  Parameters: offset - the offset. d - a double. Returns: a reference to this object. Throws: StringIndexOutOfBoundsException - if the offset is invalid. See Also: String.valueOf(double), insert(int, java.lang.String), length()",1,0,1,0,0,0,0,0,0,0,0,1
"Thrown by String methods to indicate that an index is either negative or  greater than the size of the string. For some methods such as the charAt  method, this exception also is thrown when the index is equal to the size  of the string.  Since:     JDK1.0 See Also:     String.charAt(int), Serialized Form",1,0,0,0,0,0,0,0,0,0,1,0
"Gets the system property indicated by the specified key.  First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. This may result in a SecurityException.  If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method.  Parameters: key - the name of the system property. Returns: the string value of the system property, or null if there is no property with that key. Throws: SecurityException - if a security manager exists and its checkPropertyAccess method doesn't allow access to the specified system property. NullPointerException - if key is null. IllegalArgumentException - if key is empty. See Also: setProperty(java.lang.String, java.lang.String), SecurityException , SecurityManager.checkPropertyAccess(java.lang.String), getProperties()",1,0,0,0,0,1,0,0,0,0,0,1
"Gets the value of the specified environment variable. An environment variable is a system-dependent external named value.  If a security manager exists, its checkPermission method is called with a RuntimePermission(getenv.+name) permission. This may result in a SecurityException being thrown. If no exception is thrown the value of the variable name is returned.  System properties and environment variables are both conceptually mappings between names and values. Both mechanisms can be used to pass user-defined information to a Java process. Environment variables have a more global effect, because they are visible to all descendants of the process which defines them, not just the immediate Java subprocess. They can have subtly different semantics, such as case insensitivity, on different operating systems. For these reasons, environment variables are more likely to have unintended side effects. It is best to use system properties where possible. Environment variables should be used when a global effect is desired, or when an external system interface requires an environment variable (such as PATH).  On UNIX systems the alphabetic case of name is typically significant, while on Microsoft Windows systems it is typically not. For example, the expression System.getenv(FOO).equals(System.getenv(foo)) is likely to be true on Microsoft Windows.  Parameters: name - the name of the environment variable Returns: the string value of the variable, or null if the variable is not defined in the system environment Throws: NullPointerException - if name is null SecurityException - if a security manager exists and its checkPermission method doesn't allow access to the environment variable name See Also: getenv(), ProcessBuilder.environment()",0,1,1,0,0,1,1,0,1,0,0,0
"Allocates a new Thread object. This constructor has the same effect as Thread(group, target, gname), where gname is a newly generated name. Automatically generated names are of the form Thread-+n, where n is an integer.  Parameters: group - the thread group. target - the object whose run method is called. Throws: SecurityException - if the current thread cannot create a thread in the specified thread group. See Also: Thread(ThreadGroup, Runnable, String)",1,0,0,0,0,0,0,0,0,0,0,1
"Deprecated. The definition of this call depends on suspend(), which is deprecated. Further, the behavior of this call was never specified.  Used by VM to control lowmem implicit suspension.  Parameters: b - boolean to allow or disallow suspension Returns: true on success Since: JDK1.1",1,0,0,1,0,0,1,0,0,0,0,0
"This class provides thread-local variables. These variables differ from  their normal counterparts in that each thread that accesses one (via its  get or set method) has its own, independently initialized copy of the  variable. ThreadLocal instances are typically private static fields in  classes that wish to associate state with a thread (e.g., a user ID or  Transaction ID).  For example, the class below generates unique identifiers local to each  thread. A thread's id is assigned the first time it invokes  UniqueThreadIdGenerator.getCurrentThreadId() and remains unchanged on  subsequent calls.   import java.util.concurrent.atomic.AtomicInteger;  public class UniqueThreadIdGenerator {  private static final AtomicInteger uniqueId = new AtomicInteger(0);  private static final ThreadLocal < Integer > uniqueNum = new ThreadLocal < Integer > () { @Override protected Integer initialValue() { return uniqueId.getAndIncrement(); } };  public static int getCurrentThreadId() { return uniqueId.get(); } } // UniqueThreadIdGenerator   Each thread holds an implicit reference to its copy of a thread-local  variable as long as the thread is alive and the ThreadLocal instance is  accessible; after a thread goes away, all of its copies of thread-local  instances are subject to garbage collection (unless other references to  these copies exist).  Since:     1.2",1,1,0,0,0,0,0,1,1,0,0,0
"The Throwable class is the superclass of all errors and exceptions in the  Java language. Only objects that are instances of this class (or one of its  subclasses) are thrown by the Java Virtual Machine or can be thrown by the  Java throw statement. Similarly, only this class or one of its subclasses  can be the argument type in a catch clause.  Instances of two subclasses, Error and Exception, are conventionally used  to indicate that exceptional situations have occurred. Typically, these  instances are freshly created in the context of the exceptional situation  so as to include relevant information (such as stack trace data).  A throwable contains a snapshot of the execution stack of its thread at the  time it was created. It can also contain a message string that gives more  information about the error. Finally, it can contain a cause: another  throwable that caused this throwable to get thrown. The cause facility is  new in release 1.4. It is also known as the chained exception facility, as  the cause can, itself, have a cause, and so on, leading to a chain of  exceptions, each caused by another.  One reason that a throwable may have a cause is that the class that throws  it is built atop a lower layered abstraction, and an operation on the upper  layer fails due to a failure in the lower layer. It would be bad design to  let the throwable thrown by the lower layer propagate outward, as it is  generally unrelated to the abstraction provided by the upper layer.  Further, doing so would tie the API of the upper layer to the details of  its implementation, assuming the lower layer's exception was a checked  exception. Throwing a wrapped exception (i.e., an exception containing a  cause) allows the upper layer to communicate the details of the failure to  its caller without incurring either of these shortcomings. It preserves the  flexibility to change the implementation of the upper layer without  changing its API (in particular, the set of exceptions thrown by its  methods).  A second reason that a throwable may have a cause is that the method that  throws it must conform to a general-purpose interface that does not permit  the method to throw the cause directly. For example, suppose a persistent  collection conforms to the Collection interface, and that its persistence  is implemented atop java.io. Suppose the internals of the add method can  throw an IOException. The implementation can communicate the details of the  IOException to its caller while conforming to the Collection interface by  wrapping the IOException in an appropriate unchecked exception. (The  specification for the persistent collection should indicate that it is  capable of throwing such exceptions.)  A cause can be associated with a throwable in two ways: via a constructor  that takes the cause as an argument, or via the initCause(Throwable)  method. New throwable classes that wish to allow causes to be associated  with them should provide constructors that take a cause and delegate  (perhaps indirectly) to one of the Throwable constructors that takes a  cause. For example:   try { lowLevelOp(); } catch (LowLevelException le) { throw new HighLevelException(le);  // Chaining-aware constructor }   Because the initCause method is public, it allows a cause to be associated  with any throwable, even a legacy throwable whose implementation predates  the addition of the exception chaining mechanism to Throwable. For example:   try { lowLevelOp(); } catch (LowLevelException le) { throw (HighLevelException) new HighLevelException().initCause(le);  // Legacy constructor }   Prior to release 1.4, there were many throwables that had their own  non-standard exception chaining mechanisms ( ExceptionInInitializerError,  ClassNotFoundException, UndeclaredThrowableException,  InvocationTargetException, WriteAbortedException,  PrivilegedActionException, PrinterIOException, RemoteException and  NamingException). All of these throwables have been retrofitted to use the  standard exception chaining mechanism, while continuing to implement their  legacy chaining mechanisms for compatibility.  Further, as of release 1.4, many general purpose Throwable classes (for  example Exception, RuntimeException, Error) have been retrofitted with  constructors that take a cause. This was not strictly necessary, due to the  existence of the initCause method, but it is more convenient and expressive  to delegate to a constructor that takes a cause.  By convention, class Throwable and its subclasses have two constructors,  one that takes no arguments and one that takes a String argument that can  be used to produce a detail message. Further, those subclasses that might  likely have a cause associated with them should have two more constructors,  one that takes a Throwable (the cause), and one that takes a String (the  detail message) and a Throwable (the cause).  Also introduced in release 1.4 is the getStackTrace() method, which allows  programmatic access to the stack trace information that was previously  available only in text form, via the various forms of the  printStackTrace() method. This information has been added to the  serialized representation of this class so getStackTrace and  printStackTrace will operate properly on a throwable that was obtained by  deserialization.  Since:     JDK1.0 See Also:     Serialized Form",1,1,0,1,0,0,1,1,1,0,0,0
"Thrown when an application tries to access a type using a string  representing the type's name, but no definition for the type with the  specified name can be found. This exception differs from  ClassNotFoundException in that ClassNotFoundException is a checked  exception, whereas this exception is unchecked.  Note that this exception may be used when undefined type variables are  accessed as well as when types (e.g., classes, interfaces or annotation  types) are loaded.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Thrown to indicate that the Java Virtual Machine is broken or has run out  of resources necessary for it to continue operating.  Since:     JDK1.0 See Also:     Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"A program element type. The constants of this enumerated type provide a  simple classification of the declared elements in a Java program.  These constants are used with the Target meta-annotation type to specify  where it is legal to use an annotation type.  Since:     1.5",0,0,0,0,0,0,0,0,0,0,0,1
"Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows:  for (ElementType c : ElementType.values())     System.out.println(c);  Returns: an array containing the constants of this enum type, in the order they are declared",1,0,0,0,0,0,0,0,1,0,0,1
"Indicates that an annotation type is automatically inherited. If an  Inherited meta-annotation is present on an annotation type declaration, and  the user queries the annotation type on a class declaration, and the class  declaration has no annotation for this type, then the class's superclass  will automatically be queried for the annotation type. This process will be  repeated until an annotation for this type is found, or the top of the  class hierarchy (Object) is reached. If no superclass has an annotation for  this type, then the query will indicate that the class in question has no  such annotation.  Note that this meta-annotation type has no effect if the annotated type is  used to annotate anything other than a class. Note also that this  meta-annotation only causes annotations to be inherited from superclasses;  annotations on implemented interfaces have no effect.  Since:     1.5  Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,0,0,1,1,0,0,0,0,0
"Returns the array of bytes that contains the new class file.  Returns: the class file bytes.",0,0,0,0,0,0,0,0,0,0,0,1
"Thrown by an implementation of ClassFileTransformer.transform when its  input parameters are invalid. This may occur either because the initial  class file bytes were invalid or a previously applied transform corrupted  the bytes.  Since:     1.5 See Also:     ClassFileTransformer.transform(java.lang.ClassLoader, java.lang.String,     java.lang.Class<?>, java.security.ProtectionDomain, byte[]),      Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"The management interface for the class loading system of the Java virtual  machine.  A Java virtual machine has a single instance of the implementation class of  this interface. This instance implementing this interface is an MXBean  that can be obtained by calling the  ManagementFactory.getClassLoadingMXBean() method or from the platform  MBeanServer method.  The ObjectName for uniquely identifying the MXBean for the class loading  system within an MBeanServer is:      java.lang:type=ClassLoading  Since:     1.5 See Also:     JMX Specification., Ways to Access MXBeans",0,1,0,0,0,0,0,1,0,0,0,0
"The management interface for the compilation system of the Java virtual  machine.  A Java virtual machine has a single instance of the implementation class of  this interface. This instance implementing this interface is an MXBean  that can be obtained by calling the  ManagementFactory.getCompilationMXBean() method or from the platform  MBeanServer method.  The ObjectName for uniquely identifying the MXBean for the compilation  system within an MBeanServer is:      java.lang:type=Compilation  Since:     1.5 See Also:     JMX Specification., Ways to Access MXBeans",1,0,0,0,0,0,1,0,1,0,0,0
"Returns a string representation of a lock. The returned string representation consists of the name of the class of the lock object, the at-sign character `@', and the unsigned hexadecimal representation of the identity hash code of the object. This method returns a string equals to the value of:  lock.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(lock))  where lock is the lock object.  Overrides: toString in class Object Returns: the string representation of a lock.",1,0,0,0,0,0,1,0,1,0,0,1
"The information about a memory notification.  A memory notification is emitted by MemoryMXBean when the Java virtual  machine detects that the memory usage of a memory pool is exceeding a  threshold value. The notification emitted will contain the memory  notification information about the detected condition:      * The name of the memory pool.     * The memory usage of the memory pool when the notification was       constructed.     * The number of times that the memory usage has crossed a threshold       when the notification was constructed. For usage threshold       notifications, this count will be the usage threshold count. For       collection threshold notifications, this count will be the        collection usage threshold count.  A CompositeData representing the MemoryNotificationInfo object is stored in  the user data of a notification. The from method is provided to convert  from a CompositeData to a MemoryNotificationInfo object. For example:       Notification notif;  // receive the notification emitted by MemoryMXBean and set to notif ...  String notifType = notif.getType(); if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED) || notifType.equals(MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED)) { // retrieve the memory notification information CompositeData cd = (CompositeData) notif.getUserData(); MemoryNotificationInfo info = MemoryNotificationInfo.from(cd); .... }   The types of notifications emitted by MemoryMXBean are:      * A usage threshold exceeded notification.       This notification will be emitted when the memory usage of a memory       pool is increased and has reached or exceeded its usage threshold        value. Subsequent crossing of the usage threshold value does not       cause further notification until the memory usage has returned to       become less than the usage threshold value.      * A collection usage threshold exceeded notification.       This notification will be emitted when the memory usage of a memory       pool is greater than or equal to its collection usage threshold        after the Java virtual machine has expended effort in recycling       unused objects in that memory pool.  Since:     1.5",1,1,0,0,1,1,1,0,1,0,0,1
"Tests if the memory usage of this memory pool reaches or exceeds its usage threshold value.  Returns: true if the memory usage of this memory pool reaches or exceeds the threshold value; false otherwise. Throws: UnsupportedOperationException - if this memory pool does not support a usage threshold.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the number of times that the Java virtual machine has detected that the memory usage has reached or exceeded the collection usage threshold.  Returns: the number of times that the memory usage has reached or exceeded the collection usage threshold. Throws: UnsupportedOperationException - if this memory pool does not support a collection usage threshold. See Also: isCollectionUsageThresholdSupported()",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the name of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting. This method will return null if this thread is not blocked waiting for any object or if the object is not owned by any thread.  Returns: the name of the thread that owns the object this thread is blocked on; null if this thread is not blocked or if the object is not owned by any thread. See Also: getLockInfo()",0,0,0,0,0,0,0,0,0,0,0,1
"The management interface for the thread system of the Java virtual machine.  A Java virtual machine has a single instance of the implementation class of  this interface. This instance implementing this interface is an MXBean  that can be obtained by calling the ManagementFactory.getThreadMXBean()  method or from the platform MBeanServer method.  The ObjectName for uniquely identifying the MXBean for the thread system  within an MBeanServer is:      java.lang:type=Threading   Thread ID  Thread ID is a positive long value returned by calling the Thread.getId()  method for a thread. The thread ID is unique during its lifetime. When a  thread is terminated, this thread ID may be reused.  Some methods in this interface take a thread ID or an array of thread IDs  as the input parameter and return per-thread information.   Thread CPU time  A Java virtual machine implementation may support measuring the CPU time  for the current thread, for any thread, or for no threads.  The isThreadCpuTimeSupported() method can be used to determine if a Java  virtual machine supports measuring of the CPU time for any thread. The  isCurrentThreadCpuTimeSupported() method can be used to determine if a Java  virtual machine supports measuring of the CPU time for the current thread.  A Java virtual machine implementation that supports CPU time measurement  for any thread will also support that for the current thread.  The CPU time provided by this interface has nanosecond precision but not  necessarily nanosecond accuracy.  A Java virtual machine may disable CPU time measurement by default. The  isThreadCpuTimeEnabled() and setThreadCpuTimeEnabled(boolean) methods can  be used to test if CPU time measurement is enabled and to enable/disable  this support respectively. Enabling thread CPU measurement could be  expensive in some Java virtual machine implementations.   Thread Contention Monitoring  Some Java virtual machines may support thread contention monitoring. When  thread contention monitoring is enabled, the accumulated elapsed time that  the thread has blocked for synchronization or waited for notification will  be collected and returned in the ThreadInfo object.  The isThreadContentionMonitoringSupported() method can be used to determine  if a Java virtual machine supports thread contention monitoring. The thread  contention monitoring is disabled by default. The  setThreadContentionMonitoringEnabled(boolean) method can be used to enable  thread contention monitoring.   Synchronization Information and Deadlock Detection  Some Java virtual machines may support monitoring of object monitor usage  and ownable synchronizer usage. The getThreadInfo(long[], boolean, boolean)  and dumpAllThreads(boolean, boolean) methods can be used to obtain the  thread stack trace and synchronization information including which lock a  thread is blocked to acquire or waiting on and which locks the thread  currently owns.  The ThreadMXBean interface provides the findMonitorDeadlockedThreads() and  findDeadlockedThreads() methods to find deadlocks in the running  application.  Since:     1.5 See Also:     JMX Specification., Ways to Access MXBeans",1,1,0,0,1,0,1,1,1,0,0,0
"Finds cycles of threads that are in deadlock waiting to acquire object monitors or ownable synchronizers. Threads are deadlocked in a cycle waiting for a lock of these two types if each thread owns one lock while trying to acquire another lock already held by another thread in the cycle.  This method is designed for troubleshooting use, but not for synchronization control. It might be an expensive operation.  Returns: an array of IDs of the threads that are deadlocked waiting for object monitors or ownable synchronizers, if any; null otherwise. Throws: SecurityException - if a security manager exists and the caller does not have ManagementPermission(monitor). UnsupportedOperationException - if the Java virtual machine does not support monitoriing of ownable synchronizer usage. Since: 1.6 See Also: isSynchronizerUsageSupported(), findMonitorDeadlockedThreads()",1,1,0,1,0,0,1,0,0,0,0,0
"Phantom reference objects, which are enqueued after the collector  determines that their referents may otherwise be reclaimed. Phantom  references are most often used for scheduling pre-mortem cleanup actions in  a more flexible way than is possible with the Java finalization mechanism.  If the garbage collector determines at a certain point in time that the  referent of a phantom reference is phantom reachable, then at that time or  at some later time it will enqueue the reference.  In order to ensure that a reclaimable object remains so, the referent of a  phantom reference may not be retrieved: The get method of a phantom  reference always returns null.  Unlike soft and weak references, phantom references are not automatically  cleared by the garbage collector as they are enqueued. An object that is  reachable via phantom references will remain so until all such references  are cleared or themselves become unreachable.  Since:     1.2",1,1,0,1,0,0,0,0,0,0,0,0
"Returns this reference object's referent. If this reference object has been cleared, either by the program or by the garbage collector, then this method returns null.  Overrides: get in class Reference<T> Returns: The object to which this reference refers, or null if this reference object has been cleared",0,0,0,0,0,0,0,0,0,0,0,1
"The AccessibleObject class is the base class for Field, Method and  Constructor objects. It provides the ability to flag a reflected object as  suppressing default Java language access control checks when it is used.  The access checks--for public, default (package) access, protected, and  private members--are performed when Fields, Methods or Constructors are  used to set or get fields, to invoke methods, or to create and initialize  new instances of classes, respectively.  Setting the accessible flag in a reflected object permits sophisticated  applications with sufficient privilege, such as Java Object Serialization  or other persistence mechanisms, to manipulate objects in a manner that  would normally be prohibited.  Since:     1.2 See Also:     Field, Method, Constructor, ReflectPermission",1,0,0,1,0,0,0,0,0,0,0,0
"Returns all annotations that are directly present on this element. Unlike the other methods in this interface, this method ignores inherited annotations. (Returns an array of length zero if no annotations are directly present on this element.) The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.  Returns: All annotations directly present on this element Since: 1.5",1,0,0,1,0,0,0,0,0,0,0,1
"Returns the value of the indexed component in the specified array object, as a short.  Parameters: array - the array index - the index Returns: the value of the indexed component in the specified array Throws: NullPointerException - If the specified object is null IllegalArgumentException - If the specified object is not an array, or if the indexed element cannot be converted to the return type by an identity or widening conversion ArrayIndexOutOfBoundsException - If the specified index argument is negative, or if it is greater than or equal to the length of the specified array See Also: get(java.lang.Object, int)",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the value of the indexed component in the specified array object, as a double.  Parameters: array - the array index - the index Returns: the value of the indexed component in the specified array Throws: NullPointerException - If the specified object is null IllegalArgumentException - If the specified object is not an array, or if the indexed element cannot be converted to the return type by an identity or widening conversion ArrayIndexOutOfBoundsException - If the specified index argument is negative, or if it is greater than or equal to the length of the specified array See Also: get(java.lang.Object, int)",1,0,0,0,0,0,0,0,0,0,0,1
"A Field provides information about, and dynamic access to, a single field  of a class or an interface. The reflected field may be a class (static)  field or an instance field.  A Field permits widening conversions to occur during a get or set access  operation, but throws an IllegalArgumentException if a narrowing conversion  would occur.  See Also:     Member, Class, Class.getFields(), Class.getField(String),      Class.getDeclaredFields(), Class.getDeclaredField(String)",1,0,0,0,0,0,1,0,0,0,0,0
"Thrown when a syntactically malformed signature attribute is encountered by  a reflective method that needs to interpret the generic signature  information for a type, method or constructor.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"InvocationTargetException is a checked exception that wraps an exception  thrown by an invoked method or constructor.  As of release 1.4, this exception has been retrofitted to conform to the  general purpose exception-chaining mechanism. The target exception that  is provided at construction time and accessed via the getTargetException()  method is now known as the cause, and may be accessed via the  Throwable.getCause() method, as well as the aforementioned legacy method.  See Also:     Method, Constructor, Serialized Form",1,0,0,0,0,0,0,1,0,1,1,0
" The int value representing the final modifier.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces. The proxy class will be defined by the specified class loader and will implement all of the supplied interfaces. If a proxy class for the same permutation of interfaces has already been defined by the class loader, then the existing proxy class will be returned; otherwise, a proxy class for those interfaces will be generated dynamically and defined by the class loader.  There are several restrictions on the parameters that may be passed to Proxy.getProxyClass:  * All of the Class objects in the interfaces array must represent interfaces, not classes or primitive types. * No two elements in the interfaces array may refer to identical Class objects. * All of the interface types must be visible by name through the specified class loader. In other words, for class loader cl and every interface i, the following expression must be true:  Class.forName(i.getName(), false, cl) == i  * All non-public interfaces must be in the same package; otherwise, it would not be possible for the proxy class to implement all of the interfaces, regardless of what package it is defined in. * For any set of member methods of the specified interfaces that have the same signature: o If the return type of any of the methods is a primitive type or void, then all of the methods must have that same return type. o Otherwise, one of the methods must have a return type that is assignable to all of the return types of the rest of the methods. * The resulting proxy class must not exceed any limits imposed on classes by the virtual machine. For example, the VM may limit the number of interfaces that a class may implement to 65535; in that case, the size of the interfaces array must not exceed 65535.  If any of these restrictions are violated, Proxy.getProxyClass will throw an IllegalArgumentException. If the interfaces array argument or any of its elements are null, a NullPointerException will be thrown.  Note that the order of the specified proxy interfaces is significant: two requests for a proxy class with the same combination of interfaces but in a different order will result in two distinct proxy classes.  Parameters: loader - the class loader to define the proxy class interfaces - the list of interfaces for the proxy class to implement Returns: a proxy class that is defined in the specified class loader and that implements the specified interfaces Throws: IllegalArgumentException - if any of the restrictions on the parameters that may be passed to getProxyClass are violated NullPointerException - if the interfaces array argument or any of its elements are null",1,0,0,0,0,0,0,0,1,0,0,0
"Translates a byte array containing the two's-complement binary representation of a BigInteger into a BigInteger. The input array is assumed to be in big-endian byte-order: the most significant byte is in the zeroth element.  Parameters: val - big-endian two's-complement binary representation of BigInteger. Throws: NumberFormatException - val is zero bytes long.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns a BigInteger whose value is (this | val). (This method returns a negative BigInteger if and only if either this or val is negative.)  Parameters: val - value to be OR'ed with this BigInteger. Returns: this | val",1,0,0,0,0,0,0,0,0,0,0,0
"Immutable objects which encapsulate the context settings which describe  certain rules for numerical operators, such as those implemented by the  BigDecimal class.  The base-independent settings are:     1. precision: the number of digits to be used for an operation; results       are rounded to this precision    2. roundingMode: a RoundingMode object which specifies the algorithm to       be used for rounding.  Since:     1.5 See Also:     BigDecimal, RoundingMode, Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
" A MathContext object whose settings have the values required for unlimited precision arithmetic. The values of the settings are: precision=0 roundingMode=HALF_UP ",0,1,0,0,0,0,0,0,0,0,0,0
"Constructs a new MathContext with the specified precision and the HALF_UP rounding mode.  Parameters: setPrecision - The non-negative int precision setting. Throws: IllegalArgumentException - if the setPrecision parameter is less than zero.",1,0,0,0,0,0,1,0,0,0,0,0
"Constructs a new MathContext with a specified precision and rounding mode.  Parameters: setPrecision - The non-negative int precision setting. setRoundingMode - The rounding mode to use. Throws: IllegalArgumentException - if the setPrecision parameter is less than zero. NullPointerException - if the rounding mode argument is null",1,0,0,0,0,0,0,0,0,0,0,1
"The abstract class ContentHandler is the superclass of all classes that  read an Object from a URLConnection.  An application does not generally call the getContent method in this class  directly. Instead, an application calls the getContent method in class URL  or in URLConnection. The application's content handler factory (an instance  of a class that implements the interface ContentHandlerFactory set up by a  call to setContentHandler) is called with a String giving the MIME type of  the object being received on the socket. The factory returns an instance of  a subclass of ContentHandler, and its getContent method is called to create  the object.  If no content handler could be found, URLConnection will look for a content  handler in a user-defineable set of places. By default it looks in  sun.net.www.content, but users can define a vertical-bar delimited set of  class prefixes to search through in addition by defining the  java.content.handler.pkgs property. The class name must be of the form:   {package-prefix}.{major}.{minor} e.g. YoyoDyne.experimental.text.plain   If the loading of the content handler class would be performed by a  classloader that is outside of the delegation chain of the caller, the JVM  will need the RuntimePermission getClassLoader.  Since:     JDK1.0 See Also:     getContent(java.net.URLConnection), ContentHandlerFactory,      URL.getContent(), URLConnection, URLConnection.getContent(),      URLConnection.setContentHandlerFactory(java.net.ContentHandlerFactory)",1,0,0,0,0,0,1,1,1,0,0,0
"CookiePolicy implementations decide which cookies should be accepted and  which should be rejected. Three pre-defined policy implementations are  provided, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER.  See RFC 2965 sec. 3.3 & 7 for more detail.  Since:     1.6",1,0,0,0,0,0,1,0,0,0,1,0
"A CookieStore object represents a storage for cookie. Can store and  retrieve cookies.  CookieManager will call CookieStore.add to save cookies for every incoming  HTTP response, and call CookieStore.get to retrieve cookie for every  outgoing HTTP request. A CookieStore is responsible for removing HttpCookie  instances which have expired.  Since:     1.6",1,0,0,0,0,0,1,0,0,0,0,0
"This class represents a datagram packet.  Datagram packets are used to implement a connectionless packet delivery  service. Each message is routed from one machine to another based solely on  information contained within that packet. Multiple packets sent from one  machine to another might be routed differently, and might arrive in any  order. Packet delivery is not guaranteed.  Since:     JDK1.0",0,1,0,0,0,0,0,0,0,0,0,1
"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance.  An exception will be thrown if the application attempts to write more data than the indicated content-length, or if the application closes the OutputStream before writing the indicated amount.  When output streaming is enabled, authentication and redirection cannot be handled automatically. A HttpRetryException will be thrown when reading the response if authentication or redirection are required. This exception can be queried for the details of the error.  This method must be called before the URLConnection is connected.  Parameters: contentLength - The number of bytes which will be written to the OutputStream. Throws: IllegalStateException - if URLConnection is already connected or if a different streaming mode is already enabled. IllegalArgumentException - if a content length less than zero is specified. Since: 1.5 See Also: setChunkedStreamingMode(int)",0,0,1,1,0,1,0,0,0,0,1,0
"Utility routine to check if the multicast address has node scope.  Overrides: isMCNodeLocal in class InetAddress Returns: a boolean indicating if the address has is a multicast address of node-local scope, false if it is not of node-local scope or it is not a multicast address Since: 1.4",1,0,0,0,0,0,0,0,0,0,0,0
"Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is set to the given numeric value. The scope_id is not checked to determine if it corresponds to any interface on the system. See here for a description of IPv6 scoped addresses.  Parameters: host - the specified host addr - the raw IP address in network byte order scope_id - the numeric scope_id for the address. Returns: an Inet6Address object created from the raw IP address. Throws: UnknownHostException - if IP address is of illegal length. Since: 1.5",1,0,0,0,0,0,0,0,0,0,1,0
"Utility routine to check if the InetAddress is an IP multicast address.  Returns: a boolean indicating if the InetAddress is an IP multicast address Since: JDK1.1",1,0,0,0,0,0,0,0,0,0,0,1
"Creates a socket address from an IP address and a port number.  A valid port value is between 0 and 65535. A port number of zero will let the system pick up an ephemeral port in a bind operation.  A null address will assign the wildcard address.  Parameters: addr - The IP address port - The port number Throws: IllegalArgumentException - if the port parameter is outside the specified range of valid port values.",1,0,0,0,0,1,1,0,0,0,0,1
"Returns the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses. Typical IPv4 values would be 8 (255.0.0.0), 16 (255.255.0.0) or 24 (255.255.255.0).  Typical IPv6 values would be 128 (::1/128) or 10 (fe80::203:baff:fe27:1243/10)  Returns: a short representing the prefix length for the subnet of that address.",1,1,0,0,0,0,0,0,0,0,0,0
"Converts this Interface address to a String. The string returned is of the form: InetAddress / prefix length [ broadcast address ].  Overrides: toString in class Object Returns: a string representation of this Interface address.",1,0,0,0,0,0,0,0,0,0,0,0
"This class represents a Network Interface made up of a name, and a list of  IP addresses assigned to this interface. It is used to identify the local  interface on which a multicast group is joined. Interfaces are normally  known by names such as le0.  Since:     1.4",1,1,0,1,0,0,1,0,1,0,0,0
"Returns the parent NetworkInterface of this interface if this is a subinterface, or null if it is a physical (non virtual) interface or has no parent.  Returns: The NetworkInterface this interface is attached to. Since: 1.6",1,0,0,0,0,0,0,0,0,0,0,0
"Signals that an error occurred while attempting to connect a socket to a  remote address and port. Typically, the remote host cannot be reached  because of an intervening firewall, or if an intermediate router is down.  Since:     JDK1.1 See Also:     Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"Thrown to indicate that there is an error in the underlying protocol, such  as a TCP error.  Since:     JDK1.0 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"Represents a cache response originally retrieved through secure means, such  as TLS.  Since:     1.5",0,1,0,0,0,0,0,0,0,0,1,0
"This class implements client sockets (also called just sockets). A socket  is an endpoint for communication between two machines.  The actual work of the socket is performed by an instance of the  SocketImpl class. An application, by changing the socket factory that  creates the socket implementation, can configure itself to create sockets  appropriate to the local firewall.  Since:     JDK1.0 See Also:     setSocketImplFactory(java.net.SocketImplFactory), SocketImpl,      SocketChannel",1,1,0,0,0,0,0,1,0,0,0,0
"Returns the address to which the socket is connected.  Returns: the remote IP address to which this socket is connected, or null if the socket is not connected.",1,0,0,0,0,0,0,0,0,0,0,0
"Enable/disable OOBINLINE (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded. If the user wishes to receive urgent data, then this option must be enabled. When enabled, urgent data is received inline with normal data.  Note, only limited support is provided for handling incoming urgent data. In particular, no notification of incoming urgent data is provided and there is no capability to distinguish between normal data and urgent data unless provided by a higher level protocol.  Parameters: on - true to enable OOBINLINE, false to disable. Throws: SocketException - if there is an error in the underlying protocol, such as a TCP error. Since: 1.4 See Also: getOOBInline()",1,0,1,0,0,0,0,0,0,0,0,0
"Gets traffic class or type-of-service in the IP header for packets sent from this Socket  As the underlying network implementation may ignore the traffic class or type-of-service set using setTrafficClass(int) this method may return a different value than was previously set using the setTrafficClass(int) method on this Socket.  Returns: the traffic class or type-of-service already set Throws: SocketException - if there is an error obtaining the traffic class or type-of-service value. Since: 1.4 See Also: setTrafficClass(int)",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the binding state of the socket.  Returns: true if the socket successfuly bound to an address Since: 1.4 See Also: bind(java.net.SocketAddress)",1,0,0,0,0,0,0,0,0,0,0,0
"Disables the output stream for this socket. For a TCP socket, any previously written data will be sent followed by TCP's normal connection termination sequence. If you write to a socket output stream after invoking shutdownOutput() on the socket, the stream will throw an IOException.  Throws: IOException - if an I/O error occurs when shutting down this socket. Since: 1.3 See Also: Socket.shutdownInput(), Socket.close(), Socket.setSoLinger(boolean, int)",1,0,1,0,0,0,0,0,0,0,0,1
"Represents a Uniform Resource Identifier (URI) reference.  Aside from some minor deviations noted below, an instance of this class  represents a URI reference as defined by RFC 2396: Uniform Resource  Identifiers (URI): Generic Syntax, amended by RFC 2732: Format for Literal  IPv6 Addresses in URLs. The Literal IPv6 address format also supports  scope_ids. The syntax and usage of scope_ids is described here. This class  provides constructors for creating URI instances from their components or  by parsing their string forms, methods for accessing the various components  of an instance, and methods for normalizing, resolving, and relativizing  URI instances. Instances of this class are immutable.   URI syntax and components  At the highest level a URI reference (hereinafter simply URI) in string  form has the syntax      [scheme:]scheme-specific-part[\#fragment]  where square brackets [...] delineate optional components and the  characters : and \# stand for themselves.  An absolute URI specifies a scheme; a URI that is not absolute is said to  be relative. URIs are also classified according to whether they are opaque  or hierarchical.  An opaque URI is an absolute URI whose scheme-specific part does not begin  with a slash character ('/'). Opaque URIs are not subject to further  parsing. Some examples of opaque URIs are:      mailto:java-net@java.sun.com 	     news:comp.lang.java 	     urn:isbn:096139210x  A hierarchical URI is either an absolute URI whose scheme-specific part  begins with a slash character, or a relative URI, that is, a URI that does  not specify a scheme. Some examples of hierarchical URIs are:      http://java.sun.com/j2se/1.3/     docs/guide/collections/designfaq.html\#28     ../../../demo/jfc/SwingSet2/src/SwingSet2.java     file:///~/calendar  A hierarchical URI is subject to further parsing according to the syntax      [scheme:][//authority][path][?query][\#fragment]  where the characters :, /, ?, and \# stand for themselves. The  scheme-specific part of a hierarchical URI consists of the characters  between the scheme and fragment components.  The authority component of a hierarchical URI is, if specified, either  server-based or registry-based. A server-based authority parses according  to the familiar syntax      [user-info@]host[:port]  where the characters @ and : stand for themselves. Nearly all URI schemes  currently in use are server-based. An authority component that does not  parse in this way is considered to be registry-based.  The path component of a hierarchical URI is itself said to be absolute if  it begins with a slash character ('/'); otherwise it is relative. The path  of a hierarchical URI that is either absolute or specifies an authority is  always absolute.  All told, then, a URI instance has the following nine components:      Component 	Type     scheme 	String     scheme-specific-part     	String     authority 	String     user-info 	String     host 	String     port 	int     path 	String     query 	String     fragment 	String  In a given instance any particular component is either undefined or  defined with a distinct value. Undefined string components are represented  by null, while undefined integer components are represented by -1. A string  component may be defined to have the empty string as its value; this is not  equivalent to that component being undefined.  Whether a particular component is or is not defined in an instance depends  upon the type of the URI being represented. An absolute URI has a scheme  component. An opaque URI has a scheme, a scheme-specific part, and possibly  a fragment, but has no other components. A hierarchical URI always has a  path (though it may be empty) and a scheme-specific-part (which at least  contains the path), and may have any of the other components. If the  authority component is present and is server-based then the host component  will be defined and the user-information and port components may be  defined.   Operations on URI instances  The key operations supported by this class are those of normalization,  resolution, and relativization.  Normalization is the process of removing unnecessary . and .. segments  from the path component of a hierarchical URI. Each . segment is simply  removed. A .. segment is removed only if it is preceded by a non-..  segment. Normalization has no effect upon opaque URIs.  Resolution is the process of resolving one URI against another, base URI.  The resulting URI is constructed from components of both URIs in the manner  specified by RFC 2396, taking components from the base URI for those not  specified in the original. For hierarchical URIs, the path of the original  is resolved against the path of the base and then normalized. The result,  for example, of resolving      docs/guide/collections/designfaq.html\#28          (1)  against the base URI http://java.sun.com/j2se/1.3/ is the result URI      http://java.sun.com/j2se/1.3/docs/guide/collections/designfaq.html\#28  Resolving the relative URI      ../../../demo/jfc/SwingSet2/src/SwingSet2.java    (2)  against this result yields, in turn,      http://java.sun.com/j2se/1.3/demo/jfc/SwingSet2/src/SwingSet2.java  Resolution of both absolute and relative URIs, and of both absolute and  relative paths in the case of hierarchical URIs, is supported. Resolving  the URI file:///~calendar against any other URI simply yields the original  URI, since it is absolute. Resolving the relative URI (2) above against the  relative base URI (1) yields the normalized, but still relative, URI      demo/jfc/SwingSet2/src/SwingSet2.java  Relativization, finally, is the inverse of resolution: For any two  normalized URIs u and v,      u.relativize(u.resolve(v)).equals(v)  and     u.resolve(u.relativize(v)).equals(v)  .  This operation is often useful when constructing a document containing URIs  that must be made relative to the base URI of the document wherever  possible. For example, relativizing the URI      http://java.sun.com/j2se/1.3/docs/guide/index.html  against the base URI      http://java.sun.com/j2se/1.3  yields the relative URI docs/guide/index.html.   Character categories  RFC 2396 specifies precisely which characters are permitted in the various  components of a URI reference. The following categories, most of which are  taken from that specification, are used below to describe these  constraints:      alpha 	The US-ASCII alphabetic characters, 'A' through 'Z' and 'a'     through 'z'     digit 	The US-ASCII decimal digit characters, '0' through '9'     alphanum 	All alpha and digit characters     unreserved     	All alphanum characters together with those in the     string _-!.~'()*     punct 	The characters in the string ,;:$&+=     reserved 	All punct characters together with those in the string      ?/[]@     escaped 	Escaped octets, that is, triplets consisting of the percent     character ('%') followed by two hexadecimal digits ('0'-'9', 'A'-'F',     and 'a'-'f')     other 	The Unicode characters that are not in the US-ASCII character     set, are not control characters (according to the      Character.isISOControl method), and are not space characters (according     to the Character.isSpaceChar method)  (Deviation from RFC 2396, which     is limited to US-ASCII)  The set of all legal URI characters consists of the unreserved, reserved,  escaped, and other characters.   Escaped octets, quotation, encoding, and decoding  RFC 2396 allows escaped octets to appear in the user-info, path, query, and  fragment components. Escaping serves two purposes in URIs:     * To encode non-US-ASCII characters when a URI is required to conform       strictly to RFC 2396 by not containing any other characters.      * To quote characters that are otherwise illegal in a component. The       user-info, path, query, and fragment components differ slightly in       terms of which characters are considered legal and illegal.  These purposes are served in this class by three related operations:     * A character is encoded by replacing it with the sequence of escaped       octets that represent that character in the UTF-8 character set. The       Euro currency symbol (' u20AC'), for example, is encoded as        %E2%82%AC. (Deviation from RFC 2396, which does not specify any       particular character set.)      * An illegal character is quoted simply by encoding it. The space       character, for example, is quoted by replacing it with %20. UTF-8       contains US-ASCII, hence for US-ASCII characters this transformation       has exactly the effect required by RFC 2396.      * A sequence of escaped octets is decoded by replacing it with the       sequence of characters that it represents in the UTF-8 character set.       UTF-8 contains US-ASCII, hence decoding has the effect of de-quoting       any quoted US-ASCII characters as well as that of decoding any       encoded non-US-ASCII characters. If a decoding error occurs when       decoding the escaped octets then the erroneous octets are replaced by        ' uFFFD', the Unicode replacement character.  These operations are exposed in the constructors and methods of this class  as follows:     * The single-argument constructor requires any illegal characters in       its argument to be quoted and preserves any escaped octets and other        characters that are present.      * The multi-argument constructors quote illegal characters as required       by the components in which they appear. The percent character ('%')       is always quoted by these constructors. Any other characters are       preserved.      * The getRawUserInfo, getRawPath, getRawQuery, getRawFragment,        getRawAuthority, and getRawSchemeSpecificPart methods return the       values of their corresponding components in raw form, without       interpreting any escaped octets. The strings returned by these       methods may contain both escaped octets and other characters, and       will not contain any illegal characters.      * The getUserInfo, getPath, getQuery, getFragment, getAuthority, and        getSchemeSpecificPart methods decode any escaped octets in their       corresponding components. The strings returned by these methods may       contain both other characters and illegal characters, and will not       contain any escaped octets.      * The toString method returns a URI string with all necessary quotation       but which may contain other characters.      * The toASCIIString method returns a fully quoted and encoded URI       string that does not contain any other characters.   Identities  For any URI u, it is always the case that      new URI(u.toString()).equals(u) .  For any URI u that does not contain redundant syntax such as two slashes  before an empty authority (as in file:///tmp/ ) or a colon following a host  name but no port (as in http://java.sun.com: ), and that does not encode  characters except those that must be quoted, the following identities also  hold:      new URI(u.getScheme(),             u.getSchemeSpecificPart(),             u.getFragment())     .equals(u)  in all cases,      new URI(u.getScheme(),             u.getUserInfo(), u.getAuthority(),             u.getPath(), u.getQuery(),             u.getFragment())     .equals(u)  if u is hierarchical, and      new URI(u.getScheme(),             u.getUserInfo(), u.getHost(), u.getPort(),             u.getPath(), u.getQuery(),             u.getFragment())     .equals(u)  if u is hierarchical and has either no authority or a server-based  authority.   URIs, URLs, and URNs  A URI is a uniform resource identifier while a URL is a uniform resource  locator. Hence every URL is a URI, abstractly speaking, but not every URI  is a URL. This is because there is another subcategory of URIs, uniform  resource names (URNs), which name resources but do not specify how to  locate them. The mailto, news, and isbn URIs shown above are examples of  URNs.  The conceptual distinction between URIs and URLs is reflected in the  differences between this class and the URL class.  An instance of this class represents a URI reference in the syntactic sense  defined by RFC 2396. A URI may be either absolute or relative. A URI string  is parsed according to the generic syntax without regard to the scheme, if  any, that it specifies. No lookup of the host, if any, is performed, and no  scheme-dependent stream handler is constructed. Equality, hashing, and  comparison are defined strictly in terms of the character content of the  instance. In other words, a URI instance is little more than a structured  string that supports the syntactic, scheme-independent operations of  comparison, normalization, resolution, and relativization.  An instance of the URL class, by contrast, represents the syntactic  components of a URL together with some of the information required to  access the resource that it describes. A URL must be absolute, that is, it  must always specify a scheme. A URL string is parsed according to its  scheme. A stream handler is always established for a URL, and in fact it is  impossible to create a URL instance for a scheme for which no handler is  available. Equality and hashing depend upon both the scheme and the  Internet address of the host, if any; comparison is not defined. In other  words, a URL is a structured string that supports the syntactic operation  of resolution as well as the network I/O operations of looking up the host  and opening a connection to the specified resource.  Since:     1.4 See Also:     RFC 2279: UTF-8, a transformation format of ISO 10646,     RFC 2373: IPv6 Addressing Architecture,     RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax,     RFC 2732: Format for Literal IPv6 Addresses in URLs,     URISyntaxException, Serialized Form",1,1,1,1,0,0,1,1,1,0,1,0
"Constructs a hierarchical URI from the given components.  If a scheme is given then the path, if also given, must either be empty or begin with a slash character ('/'). Otherwise a component of the new URI may be left undefined by passing null for the corresponding parameter.  This constructor first builds a URI string from the given components according to the rules specified in RFC 2396, section 5.2, step 7:  1. Initially, the result string is empty.  2. If a scheme is given then it is appended to the result, followed by a colon character (':').  3. If an authority is given then the string // is appended, followed by the authority. If the authority contains a literal IPv6 address then the address must be enclosed in square brackets ('[' and ']'). Any character not in the unreserved, punct, escaped, or other categories, and not equal to the commercial-at character ('@'), is quoted.  4. If a path is given then it is appended. Any character not in the unreserved, punct, escaped, or other categories, and not equal to the slash character ('/') or the commercial-at character ('@'), is quoted.  5. If a query is given then a question-mark character ('?') is appended, followed by the query. Any character that is not a legal URI character is quoted.  6. Finally, if a fragment is given then a hash character ('\#') is appended, followed by the fragment. Any character that is not a legal URI character is quoted.  The resulting URI string is then parsed as if by invoking the URI(String) constructor and then invoking the parseServerAuthority() method upon the result; this may cause a URISyntaxException to be thrown.  Parameters: scheme - Scheme name authority - Authority path - Path query - Query fragment - Fragment Throws: URISyntaxException - If both a scheme and a path are given but the path is relative, if the URI string constructed from the given components violates RFC 2396, or if the authority component of the string is present but cannot be parsed as a server-based authority",1,0,1,0,0,0,0,0,0,0,1,1
"Returns the scheme component of this URI.  The scheme component of a URI, if defined, only contains characters in the alphanum category and in the string -.+. A scheme always starts with an alpha character.  The scheme component of a URI cannot contain escaped octets, hence this method does not perform any decoding.  Returns: The scheme component of this URI, or null if the scheme is undefined",1,1,0,1,0,0,0,0,0,0,0,0
"Class URL represents a Uniform Resource Locator, a pointer to a resource  on the World Wide Web. A resource can be something as simple as a file or a  directory, or it can be a reference to a more complicated object, such as a  query to a database or to a search engine. More information on the types of  URLs and their formats can be found at:      http://www.socs.uts.edu.au/MosaicDocs-old/url-primer.html  In general, a URL can be broken into several parts. The previous example of  a URL indicates that the protocol to use is http (HyperText Transfer  Protocol) and that the information resides on a host machine named  www.socs.uts.edu.au. The information on that host machine is named  /MosaicDocs-old/url-primer.html. The exact meaning of this name on the host  machine is both protocol dependent and host dependent. The information  normally resides in a file, but it could be generated on the fly. This  component of the URL is called the path component.  A URL can optionally specify a port, which is the port number to which  the TCP connection is made on the remote host machine. If the port is not  specified, the default port for the protocol is used instead. For example,  the default port for http is 80. An alternative port could be specified as:       http://www.socs.uts.edu.au:80/MosaicDocs-old/url-primer.html   The syntax of URL is defined by RFC 2396: Uniform Resource Identifiers  (URI): Generic Syntax, amended by RFC 2732: Format for Literal IPv6  Addresses in URLs. The Literal IPv6 address format also supports scope_ids.  The syntax and usage of scope_ids is described here.  A URL may have appended to it a fragment, also known as a ref or a  reference. The fragment is indicated by the sharp sign character \#  followed by more characters. For example,       http://java.sun.com/index.html\#chapter1   This fragment is not technically part of the URL. Rather, it indicates that  after the specified resource is retrieved, the application is specifically  interested in that part of the document that has the tag chapter1 attached  to it. The meaning of a tag is resource specific.  An application can also specify a relative URL, which contains only  enough information to reach the resource relative to another URL. Relative  URLs are frequently used within HTML pages. For example, if the contents of  the URL:       http://java.sun.com/index.html   contained within it the relative URL:       FAQ.html   it would be a shorthand for:       http://java.sun.com/FAQ.html   The relative URL need not specify all the components of a URL. If the  protocol, host name, or port number is missing, the value is inherited from  the fully specified URL. The file component must be specified. The optional  fragment is not inherited.  The URL class does not itself encode or decode any URL components according  to the escaping mechanism defined in RFC2396. It is the responsibility of  the caller to encode any fields, which need to be escaped prior to calling  URL, and also to decode any escaped fields, that are returned from URL.  Furthermore, because URL has no knowledge of URL escaping, it does not  recognise equivalence between the encoded or decoded form of the same URL.  For example, the two URLs:      http://foo.com/hello world/ and http://foo.com/hello%20world  would be considered not equal to each other.  Note, the URI class does perform escaping of its component fields in  certain circumstances. The recommended way to manage the encoding and  decoding of URLs is to use URI, and to convert between these two classes  using toURI() and URI.toURL().  The URLEncoder and URLDecoder classes can also be used, but only for HTML  form encoding, which is not the same as the encoding scheme defined in  RFC2396.  Since:     JDK1.0 See Also:     Serialized Form",1,1,1,0,0,0,1,1,1,0,1,0
"Gets the host name of this URL, if applicable. The format of the host conforms to RFC 2732, i.e. for a literal IPv6 address, this method will return the IPv6 address enclosed in square brackets ('[' and ']').  Returns: the host name of this URL.",1,0,0,0,0,0,0,0,0,0,0,1
"The abstract class URLConnection is the superclass of all classes that  represent a communications link between the application and a URL.  Instances of this class can be used both to read from and to write to the  resource referenced by the URL. In general, creating a connection to a URL  is a multistep process:  openConnection() 	connect() Manipulate parameters that affect the connection to the remote resource. 	 Interact with the resource; query header fields and contents. ----------------------------> time     1. The connection object is created by invoking the openConnection        method on a URL.    2. The setup parameters and general request properties are manipulated.    3. The actual connection to the remote object is made, using the        connect method.    4. The remote object becomes available. The header fields and the       contents of the remote object can be accessed.  The setup parameters are modified using the following methods:      * setAllowUserInteraction     * setDoInput     * setDoOutput     * setIfModifiedSince     * setUseCaches  and the general request properties are modified using the method:      * setRequestProperty  Default values for the AllowUserInteraction and UseCaches parameters can be  set using the methods setDefaultAllowUserInteraction and  setDefaultUseCaches.  Each of the above set methods has a corresponding get method to retrieve  the value of the parameter or general request property. The specific  parameters and general request properties that are applicable are protocol  specific.  The following methods are used to access the header fields and the contents  after the connection is made to the remote object:      * getContent     * getHeaderField     * getInputStream     * getOutputStream  Certain header fields are accessed frequently. The methods:      * getContentEncoding     * getContentLength     * getContentType     * getDate     * getExpiration     * getLastModifed  provide convenient access to these fields. The getContentType method is  used by the getContent method to determine the type of the remote object;  subclasses may find it convenient to override the getContentType method.  In the common case, all of the pre-connection parameters and general  request properties can be ignored: the pre-connection parameters and  request properties default to sensible values. For most clients of this  interface, there are only two interesting methods: getInputStream and  getContent, which are mirrored in the URL class by convenience methods.  More information on the request properties and header fields of an http  connection can be found at:       http://www.ietf.org/rfc/rfc2068.txt   Note about fileNameMap: In versions prior to JDK 1.1.6, field fileNameMap  of URLConnection was public. In JDK 1.1.6 and later, fileNameMap is  private; accessor and mutator methods getFileNameMap and setFileNameMap  are added to access it. This change is also described on the Compatibility  page. Invoking the close() methods on the InputStream or OutputStream of an  URLConnection after a request may free network resources associated with  this instance, unless particular protocol specifications specify different  behaviours for it.  Since:     JDK1.0 See Also:     URL.openConnection(), connect(), getContent(), getContentEncoding(),      getContentLength(), getContentType(), getDate(), getExpiration(),      getHeaderField(int), getHeaderField(java.lang.String),      getInputStream(), getLastModified(), getOutputStream(),      setAllowUserInteraction(boolean), setDefaultUseCaches(boolean),      setDoInput(boolean), setDoOutput(boolean), setIfModifiedSince(long),      setRequestProperty(java.lang.String, java.lang.String),      setUseCaches(boolean)",1,0,0,1,0,1,1,1,1,1,1,0
"Returns the value of the expires header field.  Returns: the expiration date of the resource that this URL references, or 0 if not known. The value is the number of milliseconds since January 1, 1970 GMT. See Also: getHeaderField(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,0
"Returns an unmodifiable Map of the header fields. The Map keys are Strings that represent the response-header field names. Each Map value is an unmodifiable List of Strings that represents the corresponding field values.  Returns: a Map of header fields Since: 1.4",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the value of the allowUserInteraction field for this object.  Returns: the value of the allowUserInteraction field for this object. See Also: setAllowUserInteraction(boolean)",0,0,0,0,0,0,0,0,0,0,0,1
"Utility class for HTML form decoding. This class contains static methods  for decoding a String from the application/x-www-form-urlencoded MIME  format.  To conversion process is the reverse of that used by the URLEncoder class.  It is assumed that all characters in the encoded string are one of the  following: a through z, A through Z, 0 through 9, and -, _ , ., and *. The character % is allowed but is interpreted as the  start of a special escaped sequence.  The following rules are applied in the conversion:      * The alphanumeric characters a through z, A through Z and 0       through 9 remain the same.     * The special characters ., -, *, and _ remain the same.     * The plus sign + is converted into a space character   .     * A sequence of the form %xy will be treated as representing a byte       where xy is the two-digit hexadecimal representation of the 8 bits.       Then, all substrings that contain one or more of these byte sequences       consecutively will be replaced by the character(s) whose encoding       would result in those consecutive bytes. The encoding scheme used to       decode these characters may be specified, or if unspecified, the       default encoding of the platform will be used.  There are two possible ways in which this decoder could deal with illegal  strings. It could either leave illegal characters alone or it could throw  an IllegalArgumentException. Which approach the decoder takes is left to  the implementation.  Since:     1.2",1,0,1,1,0,0,0,0,0,0,0,0
"Constructs an instance of this class.",0,0,0,0,0,0,0,0,0,0,0,1
"Absolute get method for reading a char value.  Reads two bytes at the given index, composing them into a char value according to the current byte order.  Parameters: index - The index from which the bytes will be read Returns: The char value at the given index Throws: IndexOutOfBoundsException - If index is negative or not smaller than the buffer's limit, minus one",1,0,0,0,0,0,0,0,0,0,0,0
"Absolute put method for writing a long value  (optional operation).  Writes eight bytes containing the given long value, in the current byte order, into this buffer at the given index.  Parameters: index - The index at which the bytes will be written value - The long value to be written Returns: This buffer Throws: IndexOutOfBoundsException - If index is negative or not smaller than the buffer's limit, minus seven ReadOnlyBufferException - If this buffer is read-only",1,0,0,0,0,0,0,0,0,0,0,1
"A character buffer.  This class defines four categories of operations upon character buffers:      * Absolute and relative get and put methods that read and write single       characters;      * Relative bulk get methods that transfer contiguous sequences of       characters from this buffer into an array; and      * Relative bulk put methods that transfer contiguous sequences of       characters from a character array, a string, or some other character       buffer into this buffer; and      * Methods for compacting, duplicating, and slicing a character buffer.  Character buffers can be created either by allocation, which allocates  space for the buffer's content, by wrapping an existing character array or  string into a buffer, or by creating a view of an existing byte buffer.  Like a byte buffer, a character buffer is either direct or non-direct. A  character buffer created via the wrap methods of this class will be  non-direct. A character buffer created as a view of a byte buffer will be  direct if, and only if, the byte buffer itself is direct. Whether or not a  character buffer is direct may be determined by invoking the isDirect  method.  This class implements the CharSequence interface so that character buffers  may be used wherever character sequences are accepted, for example in the  regular-expression package java.util.regex.  Methods in this class that do not otherwise have a value to return are  specified to return the buffer upon which they are invoked. This allows  method invocations to be chained. The sequence of statements       cb.put(text/); cb.put(subtype); cb.put(; charset=); cb.put(enc);  can, for example, be replaced by the single statement       cb.put(text/).put(subtype).put(; charset=).put(enc);  Since:     1.4",1,0,0,0,0,0,0,1,1,0,0,1
"Compacts this buffer  (optional operation).  The characters between the buffer's current position and its limit, if any, are copied to the beginning of the buffer. That is, the character at index p = position() is copied to index zero, the character at index p + 1 is copied to index one, and so forth until the character at index limit() - 1 is copied to index n = limit() - 1 - p. The buffer's position is then set to n+1 and its limit is set to its capacity. The mark, if defined, is discarded.  The buffer's position is set to the number of characters copied, rather than to zero, so that an invocation of this method can be followed immediately by an invocation of another relative put method.  Returns: This buffer Throws: ReadOnlyBufferException - If this buffer is read-only",1,0,0,0,0,0,0,0,0,0,0,1
"Creates a new double buffer that shares this buffer's content.  The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent.  The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.  Returns: The new double buffer",1,0,0,0,0,0,0,0,0,0,0,0
"Absolute put method  (optional operation).  Writes the given float into this buffer at the given index.  Parameters: index - The index at which the float will be written f - The float value to be written Returns: This buffer Throws: IndexOutOfBoundsException - If index is negative or not smaller than the buffer's limit ReadOnlyBufferException - If this buffer is read-only",1,0,0,0,0,0,0,0,0,0,0,1
"Unchecked exception thrown when an attempt is made to reset a buffer when  its mark is not defined.  Since:     1.4 See Also:     Serialized Form",0,1,0,0,0,0,0,0,0,0,0,0
"Creates a new long buffer whose content is a shared subsequence of this buffer's content.  The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent.  The new buffer's position will be zero, its capacity and its limit will be the number of longs remaining in this buffer, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.  Returns: The new long buffer",1,0,0,0,0,0,1,0,0,0,0,0
"Unchecked exception thrown when a content-mutation method such as put or  compact is invoked upon a read-only buffer.  Since:     1.4 See Also:     Serialized Form",0,0,0,0,0,1,0,0,0,0,0,0
"A nexus for I/O operations.  A channel represents an open connection to an entity such as a hardware  device, a file, a network socket, or a program component that is capable of  performing one or more distinct I/O operations, for example reading or  writing.  A channel is either open or closed. A channel is open upon creation, and  once closed it remains closed. Once a channel is closed, any attempt to  invoke an I/O operation upon it will cause a ClosedChannelException to be  thrown. Whether or not a channel is open may be tested by invoking its  isOpen method.  Channels are, in general, intended to be safe for multithreaded access as  described in the specifications of the interfaces and classes that extend  and implement this interface.  Since:     1.4",1,0,0,1,0,1,1,0,0,0,0,0
"Constructs a reader that decodes bytes from the given channel using the given decoder.  The resulting stream will contain an internal input buffer of at least minBufferCap bytes. The stream's read methods will, as needed, fill the buffer by reading bytes from the underlying channel; if the channel is in non-blocking mode when bytes are to be read then an IllegalBlockingModeException will be thrown. The resulting stream will not otherwise be buffered, and it will not support the mark or reset methods. Closing the stream will in turn cause the channel to be closed.  Parameters: ch - The channel from which bytes will be read dec - The charset decoder to be used minBufferCap - The minimum capacity of the internal byte buffer, or -1 if an implementation-dependent default capacity is to be used Returns: A new reader",1,0,0,0,0,0,1,0,0,0,0,1
"Returns the size of the locked region in bytes.  A locked region need not be contained within, or even overlap, the actual underlying file, so the value returned by this method may exceed the file's current size.  Returns: The size of the locked region",1,1,0,0,0,0,0,0,0,0,0,1
"A channel that can write bytes from a sequence of buffers.  A gathering write operation writes, in a single invocation, a sequence of  bytes from one or more of a given sequence of buffers. Gathering writes are  often useful when implementing network protocols or file formats that, for  example, group data into segments consisting of one or more fixed-length  headers followed by a variable-length body. Similar scattering read  operations are defined in the ScatteringByteChannel interface.  Since:     1.4",1,1,0,1,0,0,0,0,0,0,0,0
"A channel that can be asynchronously closed and interrupted.  A channel that implements this interface is asynchronously closeable: If a  thread is blocked in an I/O operation on an interruptible channel then  another thread may invoke the channel's close method. This will cause the  blocked thread to receive an AsynchronousCloseException.  A channel that implements this interface is also interruptible: If a thread  is blocked in an I/O operation on an interruptible channel then another  thread may invoke the blocked thread's interrupt method. This will cause  the channel to be closed, the blocked thread to receive a  ClosedByInterruptException, and the blocked thread's interrupt status to be  set.  If a thread's interrupt status is already set and it invokes a blocking I/O  operation upon a channel then the channel will be closed and the thread  will immediately receive a ClosedByInterruptException; its interrupt status  will remain set.  A channel supports asynchronous closing and interruption if, and only if,  it implements this interface. This can be tested at runtime, if necessary,  via the instanceof operator.  Since:     1.4",1,0,0,0,1,1,1,0,0,0,0,0
"Unchecked exception thrown when an attempt is made to write to a channel  that was not originally opened for writing.  Since:     1.4 See Also:     Serialized Form",0,0,0,0,0,1,0,0,0,0,0,0
"Unchecked exception thrown when an attempt is made to invoke an I/O  operation upon a server socket channel that is not yet bound.  Since:     1.4 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"A channel that can read bytes.  Only one read operation upon a readable channel may be in progress at any  given time. If one thread initiates a read operation upon a channel then  any other thread that attempts to initiate another read operation will  block until the first operation is complete. Whether or not other kinds of  I/O operations may proceed concurrently with a read operation depends upon  the type of the channel.  Since:     1.4",1,0,0,0,0,0,0,0,0,0,0,0
"Selects a set of keys whose corresponding channels are ready for I/O operations.  This method performs a blocking selection operation. It returns only after at least one channel is selected, this selector's wakeup method is invoked, the current thread is interrupted, or the given timeout period expires, whichever comes first.  This method does not offer real-time guarantees: It schedules the timeout as if by invoking the Object.wait(long) method.  Parameters: timeout - If positive, block for up to timeout milliseconds, more or less, while waiting for a channel to become ready; if zero, block indefinitely; must not be negative Returns: The number of keys, possibly zero, whose ready-operation sets were updated Throws: IOException - If an I/O error occurs ClosedSelectorException - If this selector is closed IllegalArgumentException - If the value of the timeout argument is negative",1,0,0,0,1,1,0,0,0,0,0,0
"Tells whether or not this channel's network socket is connected.  Returns: true if, and only if, this channel's network socket is connected",1,0,0,0,0,0,0,0,0,0,0,0
"Unchecked exception thrown when an attempt is made to bind or connect to a  socket address of a type that is not supported.  Since:     1.4 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"A channel that can write bytes.  Only one write operation upon a writable channel may be in progress at any  given time. If one thread initiates a write operation upon a channel then  any other thread that attempts to initiate another write operation will  block until the first operation is complete. Whether or not other kinds of  I/O operations may proceed concurrently with a write operation depends upon  the type of the channel.  Since:     1.4",1,0,0,0,0,1,0,0,0,0,0,1
"Marks the beginning of an I/O operation that might block indefinitely.  This method should be invoked in tandem with the end method, using a try ... finally block as shown above, in order to implement interruption for this selector.  Invoking this method arranges for the selector's wakeup method to be invoked if a thread's interrupt method is invoked while the thread is blocked in an I/O operation upon the selector.",1,0,1,0,0,1,1,0,0,0,0,0
"Service-provider class for selectors and selectable channels.  A selector provider is a concrete subclass of this class that has a  zero-argument constructor and implements the abstract methods specified  below. A given invocation of the Java virtual machine maintains a single  system-wide default provider instance, which is returned by the provider  method. The first invocation of that method will locate the default  provider as specified below.  The system-wide default provider is used by the static open methods of the  DatagramChannel, Pipe, Selector, ServerSocketChannel, and SocketChannel  classes. It is also used by the System.inheritedChannel() method. A program  may make use of a provider other than the default provider by instantiating  that provider and then directly invoking the open methods defined in this  class.  All of the methods in this class are safe for use by multiple concurrent  threads.  Since:     1.4",1,0,0,0,0,1,0,1,0,0,0,1
"Returns this decoder's current action for malformed-input errors.  Returns: The current malformed-input action, which is never null",1,0,1,0,0,0,0,0,0,0,0,0
"Returns the maximum number of bytes that will be produced for each character of input. This value may be used to compute the worst-case size of the output buffer required for a given input sequence.  Returns: The maximum number of bytes that will be produced per character of input",1,0,1,1,0,0,0,0,0,0,0,0
"A description of the result state of a coder.  A charset coder, that is, either a decoder or an encoder, consumes bytes  (or characters) from an input buffer, translates them, and writes the  resulting characters (or bytes) to an output buffer. A coding process  terminates for one of four categories of reasons, which are described by  instances of this class:      * Underflow is reported when there is no more input to be processed, or       there is insufficient input and additional input is required. This       condition is represented by the unique result object UNDERFLOW, whose        isUnderflow method returns true.      * Overflow is reported when there is insufficient room remaining in the       output buffer. This condition is represented by the unique result       object OVERFLOW, whose isOverflow method returns true.      * A malformed-input error is reported when a sequence of input units is       not well-formed. Such errors are described by instances of this class       whose isMalformed method returns true and whose length method returns       the length of the malformed sequence. There is one unique instance of       this class for all malformed-input errors of a given length.      * An unmappable-character error is reported when a sequence of input       units denotes a character that cannot be represented in the output       charset. Such errors are described by instances of this class whose        isUnmappable method returns true and whose length method returns the       length of the input sequence denoting the unmappable character. There       is one unique instance of this class for all unmappable-character       errors of a given length.  For convenience, the isError method returns true for result objects that  describe malformed-input and unmappable-character errors but false for  those that describe underflow or overflow conditions.  Since:     1.4",0,1,0,0,0,0,0,0,0,0,0,1
" Action indicating that a coding error is to be handled by dropping the erroneous input, appending the coder's replacement value to the output buffer, and resuming the coding operation. ",1,0,0,0,0,0,0,0,0,0,0,0
"Checked exception thrown when an input byte sequence is not legal for given  charset, or an input character sequence is not a legal sixteen-bit Unicode  sequence.  Since:     1.4 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Charset service-provider class.  A charset provider is a concrete subclass of this class that has a  zero-argument constructor and some number of associated charset  implementation classes. Charset providers may be installed in an instance  of the Java platform as extensions, that is, jar files placed into any of  the usual extension directories. Providers may also be made available by  adding them to the applet or application class path or by some other  platform-specific means. Charset providers are looked up via the current  thread's context class loader.  A charset provider identifies itself with a provider-configuration file  named java.nio.charset.spi.CharsetProvider in the resource directory  META-INF/services. The file should contain a list of fully-qualified  concrete charset-provider class names, one per line. A line is terminated  by any one of a line feed (' n'), a carriage return (' r'), or a carriage  return followed immediately by a line feed. Space and tab characters  surrounding each name, as well as blank lines, are ignored. The comment  character is '\#' (' u0023'); on each line all characters following the  first comment character are ignored. The file must be encoded in UTF-8.  If a particular concrete charset provider class is named in more than one  configuration file, or is named in the same configuration file more than  once, then the duplicates will be ignored. The configuration file naming a  particular provider need not be in the same jar file or other distribution  unit as the provider itself. The provider must be accessible from the same  class loader that was initially queried to locate the configuration file;  this is not necessarily the class loader that loaded the file.  Since:     1.4 See Also:     Charset",0,0,1,0,0,0,1,1,0,0,0,1
"Initializes a new charset provider.  Throws: SecurityException - If a security manager has been installed and it denies RuntimePermission(charsetProvider)",1,0,0,0,0,0,0,0,0,0,0,1
"A NoSuchObjectException is thrown if an attempt is made to invoke a method  on an object that no longer exists in the remote virtual machine. If a  NoSuchObjectException occurs attempting to invoke a method on a remote  object, the call may be retransmitted and still preserve RMI's at most  once call semantics. A NoSuchObjectException is also thrown by the method  java.rmi.server.RemoteObject.toStub and by the unexportObject methods of  java.rmi.server.UnicastRemoteObject and java.rmi.activation.Activatable  and  Since:     JDK1.1 See Also:     RemoteObject.toStub(Remote),      UnicastRemoteObject.unexportObject(Remote,boolean),      Activatable.unexportObject(Remote,boolean), Serialized Form",0,1,0,0,0,0,0,0,0,0,0,0
"@Deprecated public class ServerRuntimeException      extends RemoteException   From a server executing on JDK 1.1, a ServerRuntimeException is thrown as a  result of a remote method invocation when a RuntimeException is thrown  while processing the invoca",1,0,0,0,0,1,1,0,0,1,0,0
"Constructs a StubNotFoundException with the specified detail message and nested exception.  Parameters: s - the detail message ex - the nested exception Since: JDK1.1",0,0,0,0,0,0,0,0,0,0,0,1
"An UnexpectedException is thrown if the client of a remote method call  receives, as a result of the call, a checked exception that is not among  the checked exception types declared in the throws clause of the method in  the remote interface.  Since:     JDK1.1 See Also:     Serialized Form",1,0,0,1,0,0,0,0,0,0,0,0
"An UnmarshalException can be thrown while unmarshalling the parameters or  results of a remote method call if any of the following conditions occur:      * if an exception occurs while unmarshalling the call header     * if the protocol for the return value is invalid     * if a java.io.IOException occurs unmarshalling parameters (on the       server side) or the return value (on the client side).     * if a java.lang.ClassNotFoundException occurs during unmarshalling       parameters or return values     * if no skeleton can be loaded on the server-side; note that skeletons       are required in the 1.1 stub protocol, but not in the 1.2 stub       protocol.     * if the method hash is invalid (i.e., missing method).     * if there is a failure to create a remote reference object for a       remote object's stub when it is unmarshalled.  Since:     JDK1.1 See Also:     Serialized Form",1,1,0,1,0,0,0,0,0,0,0,0
"Informs the system that the object with the corresponding activation id is currently inactive. If the object is currently active, the object is unexported from the RMI runtime (only if there are no pending or in-progress calls) so the that it can no longer receive incoming calls. This call informs this VM's ActivationGroup that the object is inactive, that, in turn, informs its ActivationMonitor. If this call completes successfully, a subsequent activate request to the activator will cause the object to reactivate. The operation may still succeed if the object is considered active but has already unexported itself.  Parameters: id - the object's activation identifier Returns: true if the operation succeeds (the operation will succeed if the object in currently known to be active and is either already unexported or is currently exported and has no pending/executing calls); false is returned if the object has pending/executing calls in which case it cannot be deactivated Throws: UnknownObjectException - if object is not known (it may already be inactive) ActivationException - if group is not active RemoteException - if call informing monitor fails Since: 1.2",1,0,0,0,0,1,1,0,0,0,0,0
"This exception is thrown by the RMI runtime when activation fails during a  remote call to an activatable object.  Since:     1.2 See Also:     Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"Constructs an ActivationException with the specified detail message.  Parameters: s - the detail message",1,0,0,0,0,0,0,0,0,0,0,1
"An ActivationMonitor is specific to an ActivationGroup and is obtained when  a group is reported active via a call to ActivationSystem.activeGroup  (this is done internally). An activation group is responsible for informing  its ActivationMonitor when either: its objects become active or inactive,  or the group as a whole becomes inactive.  Since:     1.2 See Also:     Activator, ActivationSystem, ActivationGroup",0,0,0,0,0,0,1,0,0,0,0,0
"The Activator facilitates remote object activation. A faulting remote  reference calls the activator's activate method to obtain a live  reference to a activatable remote object. Upon receiving a request for  activation, the activator looks up the activation descriptor for the  activation identifier, id, determines the group in which the object should  be activated initiates object re-creation via the group's  ActivationInstantiator (via a call to the newInstance method). The  activator initiates the execution of activation groups as necessary. For  example, if an activation group for a specific group identifier is not  already executing, the activator initiates the execution of a VM for the  group.  The Activator works closely with ActivationSystem, which provides a means  for registering groups and objects within those groups, and  ActivationMonitor, which recives information about active and inactive  objects and inactive groups.  The activator is responsible for monitoring and detecting when activation  groups fail so that it can remove stale remote references to groups and  active object's within those groups.  Since:     1.2 See Also:     ActivationInstantiator, ActivationGroupDesc, ActivationGroupID",1,1,0,1,0,1,0,0,0,0,0,0
"The DGC abstraction is used for the server side of the distributed garbage  collection algorithm. This interface contains the two methods: dirty and  clean. A dirty call is made when a remote reference is unmarshaled in a  client (the client is indicated by its VMID). A corresponding clean call is  made when no more references to the remote reference exist in the client. A  failed dirty call must schedule a strong clean call so that the call's  sequence number can be retained in order to detect future calls received  out of order by the distributed garbage collector. A reference to a remote  object is leased for a period of time by the client holding the reference.  The lease period starts when the dirty call is received. It is the client's  responsibility to renew the leases, by making additional dirty calls, on  the remote references it holds before such leases expire. If the client  does not renew the lease before it expires, the distributed garbage  collector assumes that the remote object is no longer referenced by that  client.",1,0,0,0,0,1,0,0,0,0,0,0
"Create a new VMID. Each new VMID returned from this constructor is unique for all Java virtual machines under the following conditions: a) the conditions for uniqueness for objects of the class java.rmi.server.UID are satisfied, and b) an address can be obtained for this host that is unique and constant for the lifetime of this object.",0,0,0,0,0,0,0,0,0,0,0,1
"Returns a reference to the the remote object Registry for the local host on the specified port.  Parameters: port - port on which the registry accepts requests Returns: reference (a stub) to the remote object registry Throws: RemoteException - if the reference could not be created Since: JDK1.1",0,0,0,0,0,0,0,0,0,0,0,0
"Registry is a remote interface to a simple remote object registry that  provides methods for storing and retrieving remote object references bound  with arbitrary string names. The bind, unbind, and rebind methods are used  to alter the name bindings in the registry, and the lookup and list  methods are used to query the current name bindings.  In its typical usage, a Registry enables RMI client bootstrapping: it  provides a simple means for a client to obtain an initial reference to a  remote object. Therefore, a registry's remote object implementation is  typically exported with a well-known address, such as with a well-known  ObjID and TCP port number (default is 1099).  The LocateRegistry class provides a programmatic API for constructing a  bootstrap reference to a Registry at a remote address (see the static  getRegistry methods) and for creating and exporting a Registry in the  current VM on a particular local address (see the static createRegistry  methods).  A Registry implementation may choose to restrict access to some or all of  its methods (for example, methods that mutate the registry's bindings may  be restricted to calls originating from the local host). If a Registry  method chooses to deny access for a given invocation, its implementation  may throw AccessException, which (because it extends RemoteException) will  be wrapped in a ServerException when caught by a remote client.  The names used for bindings in a Registry are pure strings, not parsed. A  service which stores its remote reference in a Registry may wish to use a  package name as a prefix in the name binding to reduce the likelihood of  name collisions in the registry.  Since:     JDK1.1 See Also:     LocateRegistry",1,0,0,0,0,0,0,0,0,0,0,0
"An ExportException is a RemoteException thrown if an attempt to export a  remote object fails. A remote object is exported via the constructors and  exportObject methods of java.rmi.server.UnicastRemoteObject and  java.rmi.activation.Activatable.  Since:     JDK1.1 See Also:     UnicastRemoteObject, Activatable, Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Deprecated. no replacement  Write a subarray of bytes. Pass each through write byte method.  Overrides: write in class PrintStream Parameters: b - A byte array off - Offset from which to start taking bytes len - Number of bytes to write Since: JDK1.1 See Also: FilterOutputStream.write(int)",1,0,0,0,0,0,0,0,0,0,0,1
"@Deprecated public class Operation      extends Object   An Operation contains a description of a Java method. Operation objects  were used in JDK1.1 version stubs and skeletons. The Operation class is not  needed for 1.2 style stubs (stubs generated with",1,0,0,0,0,0,0,0,0,1,0,0
"Loads a dynamic proxy class (see Proxy) that implements a set of interfaces with the given names from a codebase URL path.  The interfaces will be resolved similar to classes loaded via the loadClass(String,String) method using the given codebase.  This method delegates to the RMIClassLoaderSpi.loadProxyClass(String,String[],ClassLoader) method of the provider instance, passing codebase as the first argument, interfaces as the second argument, and defaultLoader as the third argument.  Parameters: codebase - the list of URLs (space-separated) to load classes from, or null interfaces - the names of the interfaces for the proxy class to implement defaultLoader - additional contextual class loader to use, or null Returns: a dynamic proxy class that implements the named interfaces Throws: MalformedURLException - if codebase is non-null and contains an invalid URL, or if codebase is null and a provider-specific URL used to load classes is invalid ClassNotFoundException - if a definition for one of the named interfaces could not be found at the specified location, or if creation of the dynamic proxy class failed (such as if Proxy.getProxyClass(ClassLoader,Class[]) would throw an IllegalArgumentException for the given interface list) Since: 1.4",1,0,0,0,0,1,1,0,0,0,0,1
"@Deprecated public interface RemoteCall   RemoteCall is an abstraction used solely by the RMI runtime (in conjunction  with stubs and skeletons of remote objects) to carry out a call to a remote  object. The RemoteCall interface is deprecated because it i",0,0,0,1,0,0,1,0,0,0,1,0
"Returns the remote reference for the remote object.  Note: The object returned from this method may be an instance of an implementation-specific class. The RemoteObject class ensures serialization portability of its instances' remote references through the behavior of its custom writeObject and readObject methods. An instance of RemoteRef should not be serialized outside of its RemoteObject wrapper instance or the result may be unportable.  Returns: remote reference for the remote object Since: 1.2",0,0,0,0,1,0,0,0,0,0,0,1
"Invoke a method. This form of delegating method invocation to the reference allows the reference to take care of setting up the connection to the remote host, marshaling some representation for the method and parameters, then communicating the method invocation to the remote host. This method either returns the result of a method invocation on the remote object which resides on the remote host or throws a RemoteException if the call failed or an application-level exception if the remote invocation throws an exception.  Parameters: obj - the object that contains the RemoteRef (e.g., the RemoteStub for the object. method - the method to be invoked params - the parameter list opnum - a hash that may be used to represent the method Returns: result of remote method invocation Throws: Exception - if any exception occurs during remote method invocation Since: 1.2",0,1,0,1,0,0,0,0,0,0,0,1
"The RemoteStub class is the common superclass to client stubs and provides  the framework to support a wide range of remote reference semantics. Stub  objects are surrogates that support exactly the same set of remote  interfaces defined by the actual implementation of the remote object.  Since:     JDK1.1 See Also:     Serialized Form",1,1,0,0,0,0,0,1,0,0,0,0
"@Deprecated public interface Skeleton   The Skeleton interface is used solely by the RMI implementation.  Every version 1.1 (and version 1.1 compatible skeletons generated in 1.2  using rmic -vcompat) skeleton class generated by the rmic stub compiler  im",0,1,0,0,0,0,0,0,0,1,0,0
"An obsolete subclass of ExportException.  Since:     JDK1.1 See Also:     Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
"The AccessController class is used for access control operations and  decisions.  More specifically, the AccessController class is used for three purposes:      * to decide whether an access to a critical system resource is to be       allowed or denied, based on the security policy currently in effect,      * to mark code as being privileged, thus affecting subsequent access       determinations, and      * to obtain a snapshot of the current calling context so       access-control decisions from a different context can be made with       respect to the saved context.  The checkPermission method determines whether the access request indicated  by a specified permission should be granted or denied. A sample call  appears below. In this example, checkPermission will determine whether or  not to grant read access to the file named testFile in the /temp  directory.    FilePermission perm = new FilePermission(/temp/testFile, read); AccessController.checkPermission(perm);    If a requested access is allowed, checkPermission returns quietly. If  denied, an AccessControlException is thrown. AccessControlException can  also be thrown if the requested permission is of an incorrect type or  contains an invalid value. Such information is given whenever possible.  Suppose the current thread traversed m callers, in the order of caller 1 to  caller 2 to caller m. Then caller m invoked the checkPermission method. The  checkPermission method determines whether access is granted or denied based  on the following algorithm:   i = m;  while (i > 0) {  if (caller i's domain does not have the permission) throw AccessControlException  else if (caller i is marked as privileged) { if (a context was specified in the call to doPrivileged) context.checkPermission(permission) return; } i = i - 1; };  // Next, check the context inherited when // the thread was created. Whenever a new thread is created, the // AccessControlContext at that time is // stored and associated with the new thread, as the inherited // context.  inheritedContext.checkPermission(permission);   A caller can be marked as being privileged (see doPrivileged and below).  When making access control decisions, the checkPermission method stops  checking if it reaches a caller that was marked as privileged via a  doPrivileged call without a context argument (see below for information  about a context argument). If that caller's domain has the specified  permission, no further checking is done and checkPermission returns  quietly, indicating that the requested access is allowed. If that domain  does not have the specified permission, an exception is thrown, as usual.  The normal use of the privileged feature is as follows. If you don't need  to return a value from within the privileged block, do the following:   somemethod() { ...normal code here... AccessController.doPrivileged(new PrivilegedAction() { public Object run() { // privileged code goes here, for example: System.loadLibrary(awt); return null; // nothing to return } }); ...normal code here... }   PrivilegedAction is an interface with a single method, named run, that  returns an Object. The above example shows creation of an implementation of  that interface; a concrete implementation of the run method is supplied.  When the call to doPrivileged is made, an instance of the PrivilegedAction  implementation is passed to it. The doPrivileged method calls the run  method from the PrivilegedAction implementation after enabling privileges,  and returns the run method's return value as the doPrivileged return value  (which is ignored in this example).  If you need to return a value, you can do something like the following:   somemethod() { ...normal code here... String user = (String) AccessController.doPrivileged( new PrivilegedAction() { public Object run() { return System.getProperty(user.name); } } ); ...normal code here... }   If the action performed in your run method could throw a checked  exception (those listed in the throws clause of a method), then you need to  use the PrivilegedExceptionAction interface instead of the  PrivilegedAction interface:   somemethod() throws FileNotFoundException { ...normal code here... try { FileInputStream fis = (FileInputStream) AccessController.doPrivileged( new PrivilegedExceptionAction() { public Object run() throws FileNotFoundException { return new FileInputStream(someFile); } } ); } catch (PrivilegedActionException e) { // e.getException() should be an instance of FileNotFoundException, // as only checked exceptions will be wrapped in a // PrivilegedActionException. throw (FileNotFoundException) e.getException(); } ...normal code here... }   Be *very* careful in your use of the privileged construct, and always  remember to make the privileged code section as small as possible.  Note that checkPermission always performs security checks within the  context of the currently executing thread. Sometimes a security check that  should be made within a given context will actually need to be done from  within a different context (for example, from within a worker thread). The  getContext method and AccessControlContext class are provided for this  situation. The getContext method takes a snapshot of the current calling  context, and places it in an AccessControlContext object, which it returns.  A sample call is the following:    AccessControlContext acc = AccessController.getContext()    AccessControlContext itself has a checkPermission method that makes access  decisions based on the context it encapsulates, rather than that of the  current execution thread. Code within a different context can thus call  that method on the previously-saved AccessControlContext object. A sample  call is the following:    acc.checkPermission(permission)    There are also times where you don't know a priori which permissions to  check the context against. In these cases you can use the doPrivileged  method that takes a context:   somemethod() { AccessController.doPrivileged(new PrivilegedAction() { public Object run() { // Code goes here. Any permission checks within this // run method will require that the intersection of the // callers protection domain and the snapshot's // context have the desired permission. } }, acc); ...normal code here... }   See Also:     AccessControlContext",1,1,1,1,1,1,1,1,1,0,0,0
"The AlgorithmParameterGenerator class is used to generate a set of  parameters to be used with a certain algorithm. Parameter generators are  constructed using the getInstance factory methods (static methods that  return instances of a given class).  The object that will generate the parameters can be initialized in two  different ways: in an algorithm-independent manner, or in an  algorithm-specific manner:      * The algorithm-independent approach uses the fact that all parameter       generators share the concept of a size and a source of randomness.       The measure of size is universally shared by all algorithm       parameters, though it is interpreted differently for different       algorithms. For example, in the case of parameters for the DSA        algorithm, size corresponds to the size of the prime modulus (in       bits). When using this approach, algorithm-specific parameter       generation values - if any - default to some standard values, unless       they can be derived from the specified size.      * The other approach initializes a parameter generator object using       algorithm-specific semantics, which are represented by a set of       algorithm-specific parameter generation values. To generate       Diffie-Hellman system parameters, for example, the parameter       generation values usually consist of the size of the prime modulus       and the size of the random exponent, both specified in number of       bits.  In case the client does not explicitly initialize the  AlgorithmParameterGenerator (via a call to an init method), each provider  must supply (and document) a default initialization. For example, the Sun  provider uses a default modulus prime size of 1024 bits for the generation  of DSA parameters.  Since:     1.2 See Also:     AlgorithmParameters, AlgorithmParameterSpec",1,1,1,0,0,0,0,1,0,0,0,0
"This class defines the Service Provider Interface (SPI) for the  AlgorithmParameters class, which is used to manage algorithm parameters.  All the abstract methods in this class must be implemented by each  cryptographic service provider who wishes to supply parameter management  for a particular algorithm.  Since:     1.2 See Also:     AlgorithmParameters, AlgorithmParameterSpec, DSAParameterSpec",1,0,1,0,0,0,0,0,0,0,0,0
"The AllPermission is a permission that implies all other permissions.  Note: Granting AllPermission should be done with extreme care, as it  implies all other permissions. Thus, it grants code the ability to run with  security disabled. Extreme caution should be taken before granting such a  permission to code. This permission should be used only during testing, or  in extremely rare cases where an application or applet is completely  trusted and adding the necessary permissions to the policy is prohibitively  cumbersome.  See Also:     Permission, AccessController, Permissions, PermissionCollection,      SecurityManager",0,1,0,1,0,0,0,0,0,0,0,0
"This class defines login and logout methods for a provider.  While callers may invoke login directly, the provider may also invoke  login on behalf of callers if it determines that a login must be performed  prior to certain operations.  Since:     1.5 See Also:     Serialized Form",1,0,0,1,0,0,0,0,0,0,0,0
"Creates a DigestException with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause).  Parameters: cause - the cause (which is saved for later retrieval by the Throwable.getCause() method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) Since: 1.5",1,0,0,1,0,0,0,0,1,0,0,0
"Associates the specified message digest with this stream.  Parameters: digest - the message digest to be associated with this stream. See Also: getMessageDigest()",0,0,0,0,0,0,0,0,0,0,0,1
"Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream. That is, if the digest function is on (see on), this method calls update on the message digest associated with this stream, passing it the byte b. This method then writes the byte to the output stream, blocking until the byte is actually written.  Overrides: write in class FilterOutputStream Parameters: b - the byte to be used for updating and writing to the output stream. Throws: IOException - if an I/O error occurs. See Also: MessageDigest.update(byte)",1,0,0,0,1,1,1,0,0,0,0,1
"Turns the digest function on or off. The default is on. When it is on, a call to one of the write methods results in an update on the message digest. But when it is off, the message digest is not updated.  Parameters: on - true to turn the digest function on, false to turn it off.",1,0,0,1,0,0,0,0,0,0,0,1
"A DomainCombiner provides a means to dynamically update the  ProtectionDomains associated with the current AccessControlContext.  A DomainCombiner is passed as a parameter to the appropriate constructor  for AccessControlContext. The newly constructed context is then passed to  the AccessController.doPrivileged(..., context) method to bind the provided  context (and associated DomainCombiner) with the current execution Thread.  Subsequent calls to AccessController.getContext or  AccessController.checkPermission cause the DomainCombiner.combine to get  invoked.  The combine method takes two arguments. The first argument represents an  array of ProtectionDomains from the current execution Thread, since the  most recent call to AccessController.doPrivileged. If no call to  doPrivileged was made, then the first argument will contain all the  ProtectionDomains from the current execution Thread. The second argument  represents an array of inherited ProtectionDomains, which may be null.  ProtectionDomains may be inherited from a parent Thread, or from a  privileged context. If no call to doPrivileged was made, then the second  argument will contain the ProtectionDomains inherited from the parent  Thread. If one or more calls to doPrivileged were made, and the most recent  call was to doPrivileged(action, context), then the second argument will  contain the ProtectionDomains from the privileged context. If the most  recent call was to doPrivileged(action), then there is no privileged  context, and the second argument will be null.  The combine method investigates the two input arrays of ProtectionDomains  and returns a single array containing the updated ProtectionDomains. In the  simplest case, the combine method merges the two stacks into one. In more  complex cases, the combine method returns a modified stack of  ProtectionDomains. The modification may have added new ProtectionDomains,  removed certain ProtectionDomains, or simply updated existing  ProtectionDomains. Re-ordering and other optimizations to the  ProtectionDomains are also permitted. Typically the combine method bases  its updates on the information encapsulated in the DomainCombiner.  After the AccessController.getContext method receives the combined stack of  ProtectionDomains back from the DomainCombiner, it returns a new  AccessControlContext that has both the combined ProtectionDomains as well  as the DomainCombiner.  Since:     1.3 See Also:     AccessController, AccessControlContext",1,0,0,0,0,1,1,1,0,0,0,0
"@Deprecated public abstract class Identity      extends Object implements Principal, Serializable   This class represents identities: real-world objects such as people,  companies or organizations whose identities can be authenticated using  their public ",1,1,0,0,0,0,1,1,0,0,0,0
"Deprecated. Returns this identity's public key.  Returns: the public key for this identity. See Also: setPublicKey(java.security.PublicKey)",1,0,0,0,0,0,0,0,0,0,0,1
"Deprecated. Removes an identity from this identity scope.  Parameters: identity - the identity to be removed. Throws: KeyManagementException - if the identity is missing, or another exception occurs.",1,0,0,0,0,0,1,0,0,0,0,1
"This exception, designed for use by the JCA/JCE engine classes, is thrown  when an invalid parameter is passed to a method.  See Also:     Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
"This is the basic key exception.  See Also:     Key, InvalidKeyException, KeyManagementException, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,1
"Key factories are used to convert keys (opaque cryptographic keys of type  Key) into key specifications (transparent representations of the underlying  key material), and vice versa.  Key factories are bi-directional. That is, they allow you to build an  opaque key object from a given key specification (key material), or to  retrieve the underlying key material of a key object in a suitable format.  Multiple compatible key specifications may exist for the same key. For  example, a DSA public key may be specified using DSAPublicKeySpec or  X509EncodedKeySpec. A key factory can be used to translate between  compatible key specifications.  The following is an example of how to use a key factory in order to  instantiate a DSA public key from its encoding. Assume Alice has received a  digital signature from Bob. Bob also sent her his public key (in encoded  format) to verify his signature. Alice then performs the following actions:   X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey); KeyFactory keyFactory = KeyFactory.getInstance(DSA); PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec); Signature sig = Signature.getInstance(DSA); sig.initVerify(bobPubKey); sig.update(data); sig.verify(signature);   Since:     1.2 See Also:     Key, PublicKey, PrivateKey, KeySpec, DSAPublicKeySpec,      X509EncodedKeySpec",1,1,0,0,0,0,0,1,1,0,0,0
"Returns a KeyFactory object that converts public/private keys of the specified algorithm.  A new KeyFactory object encapsulating the KeyFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list.  Note that the list of registered providers may be retrieved via the Security.getProviders() method.  Parameters: algorithm - the name of the requested key algorithm. See Appendix A in the Java Cryptography Architecture API Specification & Reference for information about standard algorithm names. provider - the name of the provider. Returns: the new KeyFactory object. Throws: NoSuchAlgorithmException - if a KeyFactorySpi implementation for the specified algorithm is not available from the specified provider. NoSuchProviderException - if the specified provider is not registered in the security provider list. IllegalArgumentException - if the provider name is null or empty. See Also: Provider",1,0,0,0,0,0,1,1,0,0,1,1
"Returns the provider of this key pair generator object.  Returns: the provider of this key pair generator object",0,0,0,0,0,0,0,0,0,0,0,1
"Assigns the given key to the given alias, protecting it with the given password.  If the given key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key.  If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).  Parameters: alias - the alias name key - the key to be associated with the alias password - the password to protect the key chain - the certificate chain for the corresponding public key (only required if the given key is of type java.security.PrivateKey). Throws: KeyStoreException - if the keystore has not been initialized (loaded), the given key cannot be protected, or this operation fails for some other reason",1,0,1,0,0,0,0,0,0,0,0,0
"Assigns the given key to the given alias, protecting it with the given password.  If the given key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key.  If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).  Parameters: alias - the alias name key - the key to be associated with the alias password - the password to protect the key chain - the certificate chain for the corresponding public key (only required if the given key is of type java.security.PrivateKey). Throws: KeyStoreException - if the given key cannot be protected, or this operation fails for some other reason",1,0,0,0,0,0,0,0,0,0,0,1
"Stores this keystore to the given output stream, and protects its integrity with the given password.  Parameters: stream - the output stream to which this keystore is written. password - the password to generate the keystore integrity check Throws: IOException - if there was an I/O problem with data NoSuchAlgorithmException - if the appropriate data integrity algorithm could not be found CertificateException - if any of the certificates included in the keystore data could not be stored",1,0,0,0,0,0,0,0,0,0,0,0
"Abstract class representing a collection of Permission objects.  With a PermissionCollection, you can:      * add a permission to the collection using the add method.     * check to see if a particular permission is implied in the collection,       using the implies method.     * enumerate all the permissions, using the elements method.  When it is desirable to group together a number of Permission objects of  the same type, the newPermissionCollection method on that particular type  of Permission object should first be called. The default behavior (from the  Permission class) is to simply return null. Subclasses of class Permission  override the method if they need to store their permissions in a particular  PermissionCollection object in order to provide the correct semantics when  the PermissionCollection.implies method is called. If a non-null value is  returned, that PermissionCollection must be used. If null is returned, then  the caller of newPermissionCollection is free to store permissions of the  given type in any PermissionCollection they choose (one that uses a  Hashtable, one that uses a Vector, etc).  The PermissionCollection returned by the  Permission.newPermissionCollection method is a homogeneous collection,  which stores only Permission objects for a given Permission type. A  PermissionCollection may also be heterogeneous. For example, Permissions is  a PermissionCollection subclass that represents a collection of  PermissionCollections. That is, its members are each a homogeneous  PermissionCollection. For example, a Permissions object might have a  FilePermissionCollection for all the FilePermission objects, a  SocketPermissionCollection for all the SocketPermission objects, and so on.  Its add method adds a permission to the appropriate collection.  Whenever a permission is added to a heterogeneous PermissionCollection such  as Permissions, and the PermissionCollection doesn't yet contain a  PermissionCollection of the specified permission's type, the  PermissionCollection should call the newPermissionCollection method on the  permission's class to see if it requires a special PermissionCollection. If  newPermissionCollection returns null, the PermissionCollection is free to  store the permission in any type of PermissionCollection it desires (one  using a Hashtable, one using a Vector, etc.). For example, the Permissions  object uses a default PermissionCollection implementation that stores the  permission objects in a Hashtable.  Subclass implementations of PermissionCollection should assume that they  may be called simultaneously from multiple threads, and therefore should be  synchronized properly. Furthermore, Enumerations returned via the elements  method are not fail-fast. Modifications to a collection should not be  performed while enumerating over that collection.  See Also:     Permission, Permissions, Serialized Form",1,1,0,1,1,0,1,1,0,0,0,1
"A private key. This interface contains no methods or constants. It merely  serves to group (and provide type safety for) all private key interfaces.  Note: The specialized private key interfaces extend this interface. See,  for example, the DSAPrivateKey interface in java.security.interfaces.  See Also:     Key, PublicKey, Certificate,      Signature.initVerify(java.security.PublicKey), DSAPrivateKey,      RSAPrivateKey, RSAPrivateCrtKey",1,0,0,1,0,0,1,0,0,0,0,0
"This exception is thrown by doPrivileged(PrivilegedExceptionAction) and  doPrivileged(PrivilegedExceptionAction, AccessControlContext context) to  indicate that the action being performed threw a checked exception. The  exception thrown by the action can be obtained by calling the getException  method. In effect, an PrivilegedActionException is a wrapper for an  exception thrown by a privileged action.  As of release 1.4, this exception has been retrofitted to conform to the  general purpose exception-chaining mechanism. The exception thrown by the  privileged computation that is provided at construction time and accessed  via the getException() method is now known as the cause, and may be  accessed via the Throwable.getCause() method, as well as the aforementioned  legacy method.  See Also:     PrivilegedExceptionAction,      AccessController.doPrivileged(PrivilegedExceptionAction),      AccessController.doPrivileged(PrivilegedExceptionAction,AccessControlContext)     , Serialized Form",1,1,0,0,0,1,0,1,0,1,0,0
"Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider.  First, if there is a security manager, its checkSecurityAccess method is called with the string clearProviderProperties.+name (where name is the provider name) to see if it's ok to clear this provider. If the default implementation of checkSecurityAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a SecurityPermission(clearProviderProperties.+name) permission.  Specified by: clear in interface Map<Object,Object> Overrides: clear in class Hashtable<Object,Object> Throws: SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method denies access to clear this provider Since: 1.2",1,0,1,1,0,0,0,0,0,0,0,0
"A public key. This interface contains no methods or constants. It merely  serves to group (and provide type safety for) all public key interfaces.  Note: The specialized public key interfaces extend this interface. See, for  example, the DSAPublicKey interface in java.security.interfaces.  See Also:     Key, PrivateKey, Certificate,      Signature.initVerify(java.security.PublicKey), DSAPublicKey,      RSAPublicKey",0,0,0,0,0,0,1,0,0,0,0,1
"This class provides a cryptographically strong random number generator  (RNG).  A cryptographically strong random number minimally complies with the  statistical random number generator tests specified in FIPS 140-2, Security  Requirements for Cryptographic Modules, section 4.9.1. Additionally,  SecureRandom must produce non-deterministic output. Therefore any seed  material passed to a SecureRandom object must be unpredictable, and all  SecureRandom output sequences must be cryptographically strong, as  described in RFC 1750: Randomness Recommendations for Security.  A caller obtains a SecureRandom instance via the no-argument constructor or  one of the getInstance methods:   SecureRandom random = new SecureRandom();   Many SecureRandom implementations are in the form of a pseudo-random number  generator (PRNG), which means they use a deterministic algorithm to produce  a pseudo-random sequence from a true random seed. Other implementations may  produce true random numbers, and yet others may use a combination of both  techniques.  Typical callers of SecureRandom invoke the following methods to retrieve  random bytes:   SecureRandom random = new SecureRandom(); byte bytes[] = new byte[20]; random.nextBytes(bytes);   Callers may also invoke the generateSeed method to generate a given number  of seed bytes (to seed other random number generators, for example):   byte seed[] = random.generateSeed(20);   See Also:     SecureRandomSpi, Random, Serialized Form",1,1,1,0,0,0,0,0,1,0,1,0
"Returns the provider of this SecureRandom object.  Returns: the provider of this SecureRandom object.",0,0,0,0,0,0,0,0,0,0,0,1
"Deprecated. Replaced by engineSetParameter.  Sets the specified algorithm parameter to the specified value. This method supplies a general-purpose mechanism through which it is possible to set the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time.  Parameters: param - the string identifier of the parameter. value - the parameter value. Throws: InvalidParameterException - if param is an invalid parameter for this signature algorithm engine, the parameter is already set and cannot be set again, a security exception occurs, and so on.",1,0,0,0,0,0,1,0,0,0,0,1
"SignedObject is a class for the purpose of creating authentic runtime  objects whose integrity cannot be compromised without being detected.  More specifically, a SignedObject contains another Serializable object, the  (to-be-)signed object and its signature.  The signed object is a deep copy (in serialized form) of an original  object. Once the copy is made, further manipulation of the original object  has no side effect on the copy.  The underlying signing algorithm is designated by the Signature object  passed to the constructor and the verify method. A typical usage for  signing is the following:   Signature signingEngine = Signature.getInstance(algorithm, provider); SignedObject so = new SignedObject(myobject, signingKey, signingEngine);   A typical usage for verification is the following (having received  SignedObject so):   Signature verificationEngine = Signature.getInstance(algorithm, provider); if (so.verify(publickey, verificationEngine)) try { Object myobj = so.getObject(); } catch (java.lang.ClassNotFoundException e) {};   Several points are worth noting. First, there is no need to initialize the  signing or verification engine, as it will be re-initialized inside the  constructor and the verify method. Secondly, for verification to succeed,  the specified public key must be the public key corresponding to the  private key used to generate the SignedObject.  More importantly, for flexibility reasons, the constructor and verify  method allow for customized signature engines, which can implement  signature algorithms that are not installed formally as part of a crypto  provider. However, it is crucial that the programmer writing the verifier  code be aware what Signature engine is being used, as its own  implementation of the verify method is invoked to verify a signature. In  other words, a malicious Signature may choose to always return true on  verification in an attempt to bypass a security check.  The signature algorithm can be, among others, the NIST standard DSA, using  DSA and SHA-1. The algorithm is specified using the same convention as that  for signatures. The DSA algorithm using the SHA-1 message digest algorithm  can be specified, for example, as SHA/DSA or SHA-1/DSA (they are  equivalent). In the case of RSA, there are multiple choices for the message  digest algorithm, so the signing algorithm could be specified as, for  example, MD2/RSA, MD5/RSA or SHA-1/RSA. The algorithm name must be  specified, as there is no default.  The name of the Cryptography Package Provider is designated also by the  Signature parameter to the constructor and the verify method. If the  provider is not specified, the default provider is used. Each installation  can be configured to use a particular provider as default.  Potential applications of SignedObject include:      * It can be used internally to any Java runtime as an unforgeable       authorization token -- one that can be passed around without the fear       that the token can be maliciously modified without being detected.     * It can be used to sign and serialize data/object for storage outside       the Java runtime (e.g., storing critical access control data on       disk).     * Nested SignedObjects can be used to construct a logical sequence of       signatures, resembling a chain of authorization and delegation.  See Also:     Signature, Serialized Form",1,1,1,1,0,0,1,1,1,0,0,1
"Deprecated. Creates a signer with the specified identity name.  Parameters: name - the identity name.",1,0,0,0,0,0,0,0,0,0,0,1
"A parameter that contains a URI pointing to data intended for a PolicySpi  or ConfigurationSpi implementation.  Since:     1.6",0,1,0,0,0,0,1,0,0,0,0,0
"This exception is thrown if an entry in the keystore cannot be recovered.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"This is the interface used for representing one entry in an Access Control  List (ACL).  An ACL can be thought of as a data structure with multiple ACL entry  objects. Each ACL entry object contains a set of permissions associated  with a particular principal. (A principal represents an entity such as an  individual user or a group). Additionally, each ACL entry is specified as  being either positive or negative. If positive, the permissions are to be  granted to the associated principal. If negative, the permissions are to be  denied. Each principal can have at most one positive ACL entry and one  negative entry; that is, multiple positive or negative ACL entries are not  allowed for any principal. Note: ACL entries are by default positive. An  entry becomes a negative entry only if the setNegativePermissions method is  called on it.  See Also:     Acl",1,1,1,0,0,0,1,0,0,0,0,0
"This is an exception that is thrown whenever a reference is made to a  non-existent ACL (Access Control List).  See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Adds an owner. Only owners can modify ACL contents. The caller principal must be an owner of the ACL in order to invoke this method. That is, only an owner can add another owner. The initial owner is configured at ACL construction time.  Parameters: caller - the principal invoking this method. It must be an owner of the ACL. owner - the owner that should be added to the list of owners. Returns: true if successful, false if owner is already an owner. Throws: NotOwnerException - if the caller principal is not an owner of the ACL.",0,0,0,0,0,0,1,0,0,0,0,1
"Creates a CRL of the specified type.  Parameters: type - the standard name of the CRL type. See Appendix A in the Java Cryptography Architecture API Specification & Reference for information about standard CRL types.",1,0,0,0,0,0,0,0,0,0,0,0
"Attempts to build a certification path using the specified algorithm parameter set.  Parameters: params - the algorithm parameters Returns: the result of the build algorithm Throws: CertPathBuilderException - if the builder is unable to construct a certification path that satisfies the specified parameters InvalidAlgorithmParameterException - if the specified parameters are inappropriate for this CertPathBuilder",1,0,0,0,0,0,0,0,0,0,0,1
"An exception indicating one of a variety of problems encountered when  validating a certification path.  A CertPathValidatorException provides support for wrapping exceptions. The  getCause method returns the throwable, if any, that caused this exception  to be thrown.  A CertPathValidatorException may also include the certification path that  was being validated when the exception was thrown and the index of the  certificate in the certification path that caused the exception to be  thrown. Use the getCertPath and getIndex methods to retrieve this  information.  Concurrent Access  Unless otherwise specified, the methods defined in this class are not  thread-safe. Multiple threads that need to access a single object  concurrently should synchronize amongst themselves and provide the  necessary locking. Multiple threads each manipulating separate objects need  not synchronize.  Since:     1.4 See Also:     CertPathValidator, Serialized Form",1,0,0,0,1,0,0,0,0,0,0,0
"The Service Provider Interface (SPI) for the CertPathValidator class. All  CertPathValidator implementations must include a class (the SPI class) that  extends this class (CertPathValidatorSpi) and implements all of its  methods. In general, instances of this class should only be accessed  through the CertPathValidator class. For details, see the Java Cryptography  Architecture.  Concurrent Access  Instances of this class need not be protected against concurrent access  from multiple threads. Threads that need to access a single  CertPathValidatorSpi instance concurrently should synchronize amongst  themselves and provide the necessary locking before calling the wrapping  CertPathValidator object.  However, implementations of CertPathValidatorSpi may still encounter  concurrency issues, since multiple threads each manipulating a different  CertPathValidatorSpi instance need not synchronize.  Since:     1.4",0,0,1,1,0,0,0,0,0,0,1,1
"The Service Provider Interface (SPI) for the CertStore class. All  CertStore implementations must include a class (the SPI class) that extends  this class (CertStoreSpi), provides a constructor with a single argument of  type CertStoreParameters, and implements all of its methods. In general,  instances of this class should only be accessed through the CertStore  class. For details, see the Java Cryptography Architecture.  Concurrent Access  The public methods of all CertStoreSpi objects must be thread-safe. That  is, multiple threads may concurrently invoke these methods on a single  CertStoreSpi object (or more than one) with no ill effects. This allows a  CertPathBuilder to search for a CRL while simultaneously searching for  further certificates, for instance.  Simple CertStoreSpi implementations will probably ensure thread safety by  adding a synchronized keyword to their engineGetCertificates and  engineGetCRLs methods. More sophisticated ones may allow truly concurrent  access.  Since:     1.4",1,0,0,0,0,0,0,0,0,0,0,0
"Abstract class for managing a variety of identity certificates. An identity  certificate is a binding of a principal to a public key which is vouched  for by another principal. (A principal represents an entity such as an  individual user, a group, or a corporation.)  This class is an abstraction for certificates that have different formats  but important common uses. For example, different types of certificates,  such as X.509 and PGP, share general certificate functionality (like  encoding and verifying) and some types of information (like a public key).  X.509, PGP, and SDSI certificates can all be implemented by subclassing the  Certificate class, even though they contain different sets of information,  and they store and retrieve the information in different ways.  See Also:     X509Certificate, CertificateFactory, Serialized Form",1,1,0,1,0,0,1,0,0,0,0,0
"Certificate Expired Exception. This is thrown whenever the current Date or  the specified Date is after the notAfter date/time specified in the  validity period of the certificate.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"This class defines the Service Provider Interface (SPI) for the  CertificateFactory class. All the abstract methods in this class must be  implemented by each cryptographic service provider who wishes to supply the  implementation of a certificate factory for a particular certificate type,  e.g., X.509.  Certificate factories are used to generate certificate, certification path  (CertPath) and certificate revocation list (CRL) objects from their  encodings.  A certificate factory for X.509 must return certificates that are an  instance of java.security.cert.X509Certificate, and CRLs that are an  instance of java.security.cert.X509CRL.  Since:     1.2 See Also:     CertificateFactory, Certificate, X509Certificate, CertPath, CRL,      X509CRL",1,0,1,0,0,0,1,0,0,0,0,0
"Generates a certificate object and initializes it with the data read from the input stream inStream.  In order to take advantage of the specialized certificate format supported by this certificate factory, the returned certificate object can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the returned certificate object can be typecast to the X509Certificate class.  In the case of a certificate factory for X.509 certificates, the certificate provided in inStream must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----.  Note that if the given input stream does not support mark and reset, this method will consume the entire input stream. Otherwise, each call to this method consumes one certificate and the read position of the input stream is positioned to the next available byte after the the inherent end-of-certificate marker. If the data in the input stream does not contain an inherent end-of-certificate marker (other than EOF) and there is trailing data after the certificate is parsed, a CertificateException is thrown.  Parameters: inStream - an input stream with the certificate data. Returns: a certificate object initialized with the data from the input stream. Throws: CertificateException - on parsing errors.",1,0,1,1,0,0,0,1,0,0,0,0
"Returns a copy of this object. Note that only a reference to the Collection is copied, and not the contents.  Specified by: clone in interface CertStoreParameters Overrides: clone in class Object Returns: the copy See Also: Cloneable",1,0,0,0,0,0,0,0,0,0,0,0
"Parameters used as input for the PKIX CertPathBuilder algorithm.  A PKIX CertPathBuilder uses these parameters to build a CertPath which has  been validated according to the PKIX certification path validation  algorithm.  To instantiate a PKIXBuilderParameters object, an application must specify  one or more most-trusted CAs as defined by the PKIX certification path  validation algorithm. The most-trusted CA can be specified using one of two  constructors. An application can call PKIXBuilderParameters(Set,  CertSelector), specifying a Set of TrustAnchor objects, each of which  identifies a most-trusted CA. Alternatively, an application can call  PKIXBuilderParameters(KeyStore, CertSelector), specifying a KeyStore  instance containing trusted certificate entries, each of which will be  considered as a most-trusted CA.  In addition, an application must specify constraints on the target  certificate that the CertPathBuilder will attempt to build a path to. The  constraints are specified as a CertSelector object. These constraints  should provide the CertPathBuilder with enough search criteria to find the  target certificate. Minimal criteria for an X509Certificate usually include  the subject name and/or one or more subject alternative names. If enough  criteria is not specified, the CertPathBuilder may throw a  CertPathBuilderException.  Concurrent Access  Unless otherwise specified, the methods defined in this class are not  thread-safe. Multiple threads that need to access a single object  concurrently should synchronize amongst themselves and provide the  necessary locking. Multiple threads each manipulating separate objects need  not synchronize.  Since:     1.4 See Also:     CertPathBuilder",1,0,0,0,1,1,1,0,0,0,0,0
"An abstract class that performs one or more checks on an X509Certificate.  A concrete implementation of the PKIXCertPathChecker class can be created  to extend the PKIX certification path validation algorithm. For example, an  implementation may check for and process a critical private extension of  each certificate in a certification path.  Instances of PKIXCertPathChecker are passed as parameters using the  setCertPathCheckers or addCertPathChecker methods of the PKIXParameters  and PKIXBuilderParameters class. Each of the PKIXCertPathCheckers check  methods will be called, in turn, for each certificate processed by a PKIX  CertPathValidator or CertPathBuilder implementation.  A PKIXCertPathChecker may be called multiple times on successive  certificates in a certification path. Concrete subclasses are expected to  maintain any internal state that may be necessary to check successive  certificates. The init method is used to initialize the internal state of  the checker so that the certificates of a new certification path may be  checked. A stateful implementation must override the clone method if  necessary in order to allow a PKIX CertPathBuilder to efficiently backtrack  and try other paths. In these situations, the CertPathBuilder is able to  restore prior path validation states by restoring the cloned  PKIXCertPathCheckers.  The order in which the certificates are presented to the  PKIXCertPathChecker may be either in the forward direction (from target to  most-trusted CA) or in the reverse direction (from most-trusted CA to  target). A PKIXCertPathChecker implementation must support reverse checking  (the ability to perform its checks when it is presented with certificates  in the reverse direction) and may support forward checking (the ability to  perform its checks when it is presented with certificates in the forward  direction). The isForwardCheckingSupported method indicates whether forward  checking is supported.  Additional input parameters required for executing the check may be  specified through constructors of concrete implementations of this class.  Concurrent Access  Unless otherwise specified, the methods defined in this class are not  thread-safe. Multiple threads that need to access a single object  concurrently should synchronize amongst themselves and provide the  necessary locking. Multiple threads each manipulating separate objects need  not synchronize.  Since:     1.4 See Also:     PKIXParameters, PKIXBuilderParameters",1,0,0,0,1,0,0,1,0,0,0,0
"Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing. By default, any policy is acceptable (i.e. all policies), so a user that wants to allow any policy as acceptable does not need to call this method, or can call it with an empty Set (or null).  Note that the Set is copied to protect against subsequent modifications.  Parameters: initialPolicies - a Set of initial policy OIDs in String format (or null) Throws: ClassCastException - if any of the elements in the set are not of type String See Also: getInitialPolicies()",1,0,0,0,0,0,0,1,0,0,0,0
"Creates an instance of TrustAnchor with the specified X509Certificate and optional name constraints, which are intended to be used as additional constraints when validating an X.509 certification path.  The name constraints are specified as a byte array. This byte array should contain the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 2459 and X.509. The ASN.1 definition of this structure appears below.  NameConstraints ::= SEQUENCE { permittedSubtrees       [0]     GeneralSubtrees OPTIONAL, excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }  GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree  GeneralSubtree ::= SEQUENCE { base                    GeneralName, minimum         [0]     BaseDistance DEFAULT 0, maximum         [1]     BaseDistance OPTIONAL }  BaseDistance ::= INTEGER (0..MAX)  GeneralName ::= CHOICE { otherName                       [0]     OtherName, rfc822Name                      [1]     IA5String, dNSName                         [2]     IA5String, x400Address                     [3]     ORAddress, directoryName                   [4]     Name, ediPartyName                    [5]     EDIPartyName, uniformResourceIdentifier       [6]     IA5String, iPAddress                       [7]     OCTET STRING, registeredID                    [8]     OBJECT IDENTIFIER}  Note that the name constraints byte array supplied is cloned to protect against subsequent modifications.  Parameters: trustedCert - a trusted X509Certificate nameConstraints - a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or criticality flag. Specify null to omit the parameter. Throws: IllegalArgumentException - if the name constraints cannot be decoded NullPointerException - if the specified X509Certificate is null",1,0,0,1,0,0,1,0,1,0,0,0
"Returns the issuer (issuer distinguished name) value from the CRL as an X500Principal.  It is recommended that subclasses override this method.  Returns: an X500Principal representing the issuer distinguished name Since: 1.4",1,0,1,0,0,0,0,0,0,0,0,0
"Abstract class for X.509 certificates. This provides a standard way to  access all the attributes of an X.509 certificate.  In June of 1996, the basic X.509 v3 format was completed by ISO/IEC and  ANSI X9, which is described below in ASN.1:   Certificate  ::=  SEQUENCE  { tbsCertificate       TBSCertificate, signatureAlgorithm   AlgorithmIdentifier, signature            BIT STRING  }   These certificates are widely used to support authentication and other  functionality in Internet security systems. Common applications include  Privacy Enhanced Mail (PEM), Transport Layer Security (SSL), code signing  for trusted software distribution, and Secure Electronic Transactions  (SET).  These certificates are managed and vouched for by Certificate Authorities  (CAs). CAs are services which create certificates by placing data in the  X.509 standard format and then digitally signing that data. CAs act as  trusted third parties, making introductions between principals who have no  direct knowledge of each other. CA certificates are either signed by  themselves, or by some other CA such as a root CA.  More information can be found in RFC 2459, Internet X.509 Public Key  Infrastructure Certificate and CRL Profile at  http://www.ietf.org/rfc/rfc2459.txt .  The ASN.1 definition of tbsCertificate is:   TBSCertificate  ::=  SEQUENCE  { version         [0]  EXPLICIT Version DEFAULT v1, serialNumber         CertificateSerialNumber, signature            AlgorithmIdentifier, issuer               Name, validity             Validity, subject              Name, subjectPublicKeyInfo SubjectPublicKeyInfo, issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version must be v2 or v3 subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version must be v2 or v3 extensions      [3]  EXPLICIT Extensions OPTIONAL -- If present, version must be v3 }   Certificates are instantiated using a certificate factory. The following is  an example of how to instantiate an X.509 certificate:   InputStream inStream = new FileInputStream(fileName-of-cert); CertificateFactory cf = CertificateFactory.getInstance(X.509); X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream); inStream.close();   See Also:     Certificate, CertificateFactory, X509Extension, Serialized Form",1,1,0,1,0,0,0,0,1,0,1,1
"Constructor for X.509 certificates.",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the subject (subject distinguished name) value from the certificate as an X500Principal. If the subject value is empty, then the getName() method of the returned X500Principal object returns an empty string ().  It is recommended that subclasses override this method.  Returns: an X500Principal representing the subject distinguished name Since: 1.4",1,0,1,0,0,0,0,0,0,0,0,1
"The standard interface to a DSA private key. DSA (Digital Signature  Algorithm) is defined in NIST's FIPS-186.  See Also:     Key, Signature, DSAKey, DSAPublicKey",0,0,0,0,0,0,0,0,0,0,1,1
"The interface to a DSA public key. DSA (Digital Signature Algorithm) is  defined in NIST's FIPS-186.  See Also:     Key, Signature, DSAKey, DSAPrivateKey",0,0,0,0,0,0,0,0,0,0,1,1
"The interface to an elliptic curve (EC) private key.  Since:     1.5 See Also:     PrivateKey, ECKey",0,0,0,0,0,0,0,0,0,0,0,1
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
"Compares this finite field for equality with the specified object.  Overrides: equals in class Object Parameters: obj - the object to be compared. Returns: true if obj is an instance of ECFieldF2m and both m and the reduction polynomial match, false otherwise. See Also: Object.hashCode(), Hashtable",0,0,0,0,0,0,0,0,0,0,0,0
"This immutable class defines an elliptic curve (EC) prime finite field.  Since:     1.5 See Also:     ECField",0,0,0,0,0,0,0,0,0,0,0,0
"This immutable class specifies the set of domain parameters used with  elliptic curve cryptography (ECC).  Since:     1.5 See Also:     AlgorithmParameterSpec",1,0,0,0,0,0,1,0,0,0,0,0
"This immutable class specifies an elliptic curve private key with its  associated parameters.  Since:     1.5 See Also:     KeySpec, ECParameterSpec",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the associated elliptic curve domain parameters.  Returns: the EC domain parameters.",1,0,0,0,0,0,0,0,0,0,0,1
"Compares this elliptic curve for equality with the specified object.  Overrides: equals in class Object Parameters: obj - the object to be compared. Returns: true if obj is an instance of EllipticCurve and the field, A, B, and seeding bytes match, false otherwise. See Also: Object.hashCode(), Hashtable",0,0,0,0,0,0,0,0,0,0,0,0
"This is the exception for invalid parameter specifications.  Since:     1.2 See Also:     AlgorithmParameters, AlgorithmParameterSpec, DSAParameterSpec,      Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"This class specifies a parameter spec for RSA-PSS signature scheme, as  defined in the PKCS\#1 v2.1 standard.  Its ASN.1 definition in PKCS\#1 standard is described below:   RSASSA-PSS-params ::= SEQUENCE { hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1, maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1, saltLength         [2] INTEGER  DEFAULT 20, trailerField       [3] INTEGER  DEFAULT 1 }   where   OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= { { OID id-sha1 PARAMETERS NULL   }| { OID id-sha256 PARAMETERS NULL }| { OID id-sha384 PARAMETERS NULL }| { OID id-sha512 PARAMETERS NULL }, ...  -- Allows for future expansion -- }  PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= { { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms }, ...  -- Allows for future expansion -- }   Note: the PSSParameterSpec.DEFAULT uses the following: message digest --  SHA-1 mask generation function (mgf) -- MGF1 parameters for mgf --  MGF1ParameterSpec.SHA1 SaltLength -- 20 TrailerField -- 1  Since:     1.4 See Also:     MGF1ParameterSpec, AlgorithmParameterSpec, Signature",1,1,0,0,0,0,0,0,1,0,1,0
"This class specifies an RSA private key.  See Also:     Key, KeyFactory, KeySpec, PKCS8EncodedKeySpec, RSAPublicKeySpec,      RSAPrivateCrtKeySpec",0,0,0,0,0,0,0,0,0,0,0,0
"Constructs a BatchUpdateException object. The reason, SQLState and updateCounts are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the Throwable.initCause(java.lang.Throwable) method.  Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the number of bytes in the BLOB value designated by this Blob object.  Returns: length of the BLOB in bytes Throws: SQLException - if there is an error accessing the length of the BLOB SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,1
"Retrieves the value of the designated parameter as an Object in the Java programming language. If the value is an SQL NULL, the driver returns a Java null.  This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.  Parameters: parameterIndex - the first parameter is 1, the second is 2, and so on Returns: A java.lang.Object holding the OUT parameter value Throws: SQLException - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement See Also: Types, setObject(java.lang.String, java.lang.Object, int, int)",1,0,0,0,0,0,1,0,0,0,0,0
"A connection (session) with a specific database. SQL statements are  executed and results are returned within the context of a connection.  A Connection object's database is able to provide information describing  its tables, its supported SQL grammar, its stored procedures, the  capabilities of this connection, and so on. This information is obtained  with the getMetaData method.  Note: When configuring a Connection, JDBC applications should use the  appropritate Connection method such as setAutoCommit or  setTransactionIsolation. Applications should not invoke SQL commands  directly to change the connection's configuration when there is a JDBC  method available. By default a Connection object is in auto-commit mode,  which means that it automatically commits changes after executing each  statement. If auto-commit mode has been disabled, the method commit must be  called explicitly in order to commit changes; otherwise, database changes  will not be saved.  A new Connection object created using the JDBC 2.1 core API has an  initially empty type map associated with it. A user may enter a custom  mapping for a UDT in this type map. When a UDT is retrieved from a data  source with the method ResultSet.getObject, the getObject method will check  the connection's type map to see if there is an entry for that UDT. If so,  the getObject method will map the UDT to the class indicated. If there is  no entry, the UDT will be mapped using the standard mapping.  A user may create a new type map, which is a java.util.Map object, make an  entry in it, and pass it to the java.sql methods that can perform custom  mapping. In this case, the method will use the given type map instead of  the one associated with the connection.  For example, the following code fragment specifies that the SQL type  ATHLETES will be mapped to the class Athletes in the Java programming  language. The code fragment retrieves the type map for the Connection  object con, inserts the entry into it, and then sets the type map with the  new entry as the connection's type map.   java.util.Map map = con.getTypeMap(); map.put(mySchemaName.ATHLETES, Class.forName(Athletes)); con.setTypeMap(map);   See Also:     DriverManager.getConnection(java.lang.String, java.util.Properties),      Statement, ResultSet, DatabaseMetaData",1,1,1,1,0,1,1,0,1,1,0,0
"Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a connection. The metadata includes information about the database's tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on.  Returns: a DatabaseMetaData object for this Connection object Throws: SQLException - if a database access error occurs or this method is called on a closed connection",1,1,0,0,0,0,0,0,0,0,0,0
" Indicates that the best row identifier may or may not be a pseudo column.  A possible value for the column PSEUDO_COLUMN in the ResultSet object returned by the method getBestRowIdentifier.  See Also: Constant Field Values ",1,0,0,0,0,0,1,0,0,0,0,0
" Indicates that the function does not return a table.  A possible value for column FUNCTION_TYPE in the ResultSet object returned by the method getFunctions.  Since: 1.6 See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,1
"Retrieves the name of this database product.  Returns: database product name Throws: SQLException - if a database access error occurs",0,0,0,0,0,0,0,0,0,0,0,1
"Retrieves the string used to quote SQL identifiers. This method returns a space   if identifier quoting is not supported.  Returns: the quoting string or a space if quoting is not supported Throws: SQLException - if a database access error occurs",1,0,0,0,0,0,0,0,0,0,0,1
"Retrieves whether this database supports subqueries in IN expressions.  Returns: true if so; false otherwise Throws: SQLException - if a database access error occurs",1,0,0,0,0,0,0,0,0,0,0,0
"Retrieves whether this database supports SQL UNION ALL.  Returns: true if so; false otherwise Throws: SQLException - if a database access error occurs",0,0,0,0,0,0,0,0,0,0,0,1
"Retrieves the table types available in this database. The results are ordered by table type.  The table type is:  1. TABLE_TYPE String => table type. Typical types are TABLE, VIEW, SYSTEM TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, SYNONYM.  Returns: a ResultSet object in which each row has a single String column that is a table type Throws: SQLException - if a database access error occurs",1,0,0,1,0,0,1,0,0,0,0,0
"Indicates whether updates made to a LOB are made on a copy or directly to the LOB.  Returns: true if updates are made to a copy of the LOB; false if updates are made directly to the LOB Throws: SQLException - if a database access error occurs Since: 1.4",1,0,0,0,0,0,1,0,0,0,0,0
"The basic service for managing a set of JDBC drivers. NOTE: The DataSource interface, new in the JDBC 2.0 API, provides another  way to connect to a data source. The use of a DataSource object is the  preferred means of connecting to a data source.  As part of its initialization, the DriverManager class will attempt to load  the driver classes referenced in the jdbc.drivers system property. This  allows a user to customize the JDBC Drivers used by their applications. For  example in your ~/.hotjava/properties file you might specify:   jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver   The DriverManager methods getConnection and getDrivers have been enhanced  to support the Java Standard Edition Service Provider mechanism. JDBC 4.0  Drivers must include the file META-INF/services/java.sql.Driver. This file  contains the name of the JDBC drivers implementation of java.sql.Driver.  For example, to load the my.sql.Driver class, the  META-INF/services/java.sql.Driver file would contain the entry:   my.sql.Driver   Applications no longer need to explictly load JDBC drivers using  Class.forName(). Existing programs which currently load JDBC drivers using  Class.forName() will continue to work without modification.  When the method getConnection is called, the DriverManager will attempt to  locate a suitable driver from amongst those loaded at initialization and  those loaded explicitly using the same classloader as the current applet or  application.  Starting with the Java 2 SDK, Standard Edition, version 1.3, a logging  stream can be set only if the proper permission has been granted. Normally  this will be done with the tool PolicyTool, which can be used to grant  permission java.sql.SQLPermission setLog.  See Also:     Driver, Connection",1,0,0,0,1,0,0,0,1,0,0,0
"Constructs a DriverPropertyInfo object with a given name and value. The description and choices are intialized to null and required is initialized to false.  Parameters: name - the name of the property value - the current value, which may be null",0,0,0,0,0,0,0,0,0,0,0,1
"The mapping in the JavaTM programming language for the SQL NCLOB type. An  SQL NCLOB is a built-in type that stores a Character Large Object using the  National Character Set as a column value in a row of a database table.  The NClob interface extends the Clob interface which provides provides  methods for getting the length of an SQL NCLOB value, for materializing a  NCLOB value on the client, and for searching for a substring or NCLOB  object within a NCLOB value. A NClob object, just like a Clob object, is  valid for the duration of the transaction in which it was created. Methods  in the interfaces ResultSet, CallableStatement, and PreparedStatement, such  as getNClob and setNClob allow a programmer to access an SQL NCLOB value.  In addition, this interface has methods for updating a NCLOB value.  All methods on the NClob interface must be fully implemented if the JDBC  driver supports the data type.  Since:     1.6",0,1,1,1,1,0,0,0,0,0,0,0
"Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.  Parameters: parameterIndex - the first parameter is 1, the second is 2, ... x - the parameter value Throws: SQLException - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement",1,0,0,0,0,0,0,0,0,0,0,1
"Clears the current parameter values immediately.  In general, parameter values remain in force for repeated use of a statement. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values; this can be done by calling the method clearParameters.  Throws: SQLException - if a database access error occurs or this method is called on a closed PreparedStatement",1,0,0,0,0,0,1,0,0,0,0,0
"A table of data representing a database result set, which is usually  generated by executing a statement that queries the database.  A ResultSet object maintains a cursor pointing to its current row of data.  Initially the cursor is positioned before the first row. The next method  moves the cursor to the next row, and because it returns false when there  are no more rows in the ResultSet object, it can be used in a while loop to  iterate through the result set.  A default ResultSet object is not updatable and has a cursor that moves  forward only. Thus, you can iterate through it only once and only from the  first row to the last row. It is possible to produce ResultSet objects that  are scrollable and/or updatable. The following code fragment, in which con  is a valid Connection object, illustrates how to make a result set that is  scrollable and insensitive to updates by others, and that is updatable. See  ResultSet fields for other options.    Statement stmt = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); ResultSet rs = stmt.executeQuery(SELECT a, b FROM TABLE2); // rs will be scrollable, will not show changes made by others, // and will be updatable    The ResultSet interface provides getter methods (getBoolean, getLong, and  so on) for retrieving column values from the current row. Values can be  retrieved using either the index number of the column or the name of the  column. In general, using the column index will be more efficient. Columns  are numbered from 1. For maximum portability, result set columns within  each row should be read in left-to-right order, and each column should be  read only once.  For the getter methods, a JDBC driver attempts to convert the underlying  data to the Java type specified in the getter method and returns a suitable  Java value. The JDBC specification has a table showing the allowable  mappings from SQL types to Java types that can be used by the ResultSet  getter methods.  Column names used as input to getter methods are case insensitive. When a  getter method is called with a column name and several columns have the  same name, the value of the first matching column will be returned. The  column name option is designed to be used when column names are used in the  SQL query that generated the result set. For columns that are NOT  explicitly named in the query, it is best to use column numbers. If column  names are used, the programmer should take care to guarantee that they  uniquely refer to the intended columns, which can be assured with the SQL  AS clause.  A set of updater methods were added to this interface in the JDBC 2.0 API  (JavaTM 2 SDK, Standard Edition, version 1.2). The comments regarding  parameters to the getter methods also apply to parameters to the updater  methods.  The updater methods may be used in two ways:     1. to update a column value in the current row. In a scrollable        ResultSet object, the cursor can be moved backwards and forwards, to       an absolute position, or to a position relative to the current row.       The following code fragment updates the NAME column in the fifth row       of the ResultSet object rs and then uses the method updateRow to       update the data source table from which rs was derived.          rs.absolute(5); // moves the cursor to the fifth row of rs rs.updateString(NAME, AINSWORTH); // updates the // NAME column of row 5 to be AINSWORTH rs.updateRow(); // updates the row in the data source       2. to insert column values into the insert row. An updatable ResultSet        object has a special row associated with it that serves as a staging       area for building a row to be inserted. The following code fragment       moves the cursor to the insert row, builds a three-column row, and       inserts it into rs and into the data source table using the method        insertRow.          rs.moveToInsertRow(); // moves cursor to the insert row rs.updateString(1, AINSWORTH); // updates the // first column of the insert row to be AINSWORTH rs.updateInt(2,35); // updates the second column to be 35 rs.updateBoolean(3, true); // updates the third column to true rs.insertRow(); rs.moveToCurrentRow();    A ResultSet object is automatically closed when the Statement object that  generated it is closed, re-executed, or used to retrieve the next result  from a sequence of multiple results.  The number, types and properties of a ResultSet object's columns are  provided by the ResulSetMetaData object returned by the  ResultSet.getMetaData method.  See Also:     Statement.executeQuery(java.lang.String), Statement.getResultSet(),      ResultSetMetaData",1,0,1,0,1,1,1,1,1,1,0,0
" The constant indicating that the rows in a result set will be processed in a reverse direction; last-to-first. This constant is used by the method setFetchDirection as a hint to the driver, which the driver may ignore.  Since: 1.2 See Also: Constant Field Values ",1,0,0,1,0,1,1,0,0,0,0,0
"Moves the cursor to the given row number in this ResultSet object.  If the row number is positive, the cursor moves to the given row number with respect to the beginning of the result set. The first row is row 1, the second is row 2, and so on.  If the given row number is negative, the cursor moves to an absolute row position with respect to the end of the result set. For example, calling the method absolute(-1) positions the cursor on the last row; calling the method absolute(-2) moves the cursor to the next-to-last row, and so on.  An attempt to position the cursor beyond the first/last row in the result set leaves the cursor before the first row or after the last row.  Note: Calling absolute(1) is the same as calling first(). Calling absolute(-1) is the same as calling last().  Parameters: row - the number of the row to which the cursor should move. A positive number indicates the row number counting from the beginning of the result set; a negative number indicates the row number counting from the end of the result set Returns: true if the cursor is moved to a position in this ResultSet object; false if the cursor is before the first row or after the last row Throws: SQLException - if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.2",1,1,0,0,0,0,1,0,0,0,0,1
"Updates the designated column with a byte value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.  Parameters: columnIndex - the first column is 1, the second is 2, ... x - the new column value Throws: SQLException - if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,1
"An object that can be used to get information about the types and  properties of the columns in a ResultSet object. The following code  fragment creates the ResultSet object rs, creates the ResultSetMetaData  object rsmd, and uses rsmd to find out how many columns rs has and whether  the first column in rs can be used in a WHERE clause.    ResultSet rs = stmt.executeQuery(SELECT a, b, c FROM TABLE2); ResultSetMetaData rsmd = rs.getMetaData(); int numberOfColumns = rsmd.getColumnCount(); boolean b = rsmd.isSearchable(1);",1,0,0,1,0,0,0,0,1,0,0,0
"Constructs a SQLClientInfoException object initialized with a given failedProperties. The reason and SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the Throwable.initCause(java.lang.Throwable) method.  Parameters: failedProperties - A Map containing the property values that could not be set. The keys in the Map contain the names of the client info properties that could not be set and the values contain one of the reason codes defined in ClientInfoStatus  Since: 1.6",1,0,0,0,0,0,1,1,0,0,0,1
"Constructs a SQLClientInfoException object initialized with a given reason and failedProperties. The SQLState is initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the Throwable.initCause(java.lang.Throwable) method.  Parameters: reason - a description of the exception failedProperties - A Map containing the property values that could not be set. The keys in the Map contain the names of the client info properties that could not be set and the values contain one of the reason codes defined in ClientInfoStatus  Since: 1.6",1,1,0,0,0,0,1,1,0,0,0,1
"The interface used for the custom mapping of an SQL user-defined type (UDT)  to a class in the Java programming language. The class object for a class  implementing the SQLData interface will be entered in the appropriate  Connection object's type map along with the SQL name of the UDT for which  it is a custom mapping.  Typically, a SQLData implementation will define a field for each attribute  of an SQL structured type or a single field for an SQL DISTINCT type. When  the UDT is retrieved from a data source with the ResultSet.getObject  method, it will be mapped as an instance of this class. A programmer can  operate on this class instance just as on any other object in the Java  programming language and then store any changes made to it by calling the  PreparedStatement.setObject method, which will map it back to the SQL type.  It is expected that the implementation of the class for a custom mapping  will be done by a tool. In a typical implementation, the programmer would  simply supply the name of the SQL UDT, the name of the class to which it is  being mapped, and the names of the fields to which each of the attributes  of the UDT is to be mapped. The tool will use this information to implement  the SQLData.readSQL and SQLData.writeSQL methods. The readSQL method calls  the appropriate SQLInput methods to read each attribute from an SQLInput  object, and the writeSQL method calls SQLOutput methods to write each  attribute back to the data source via an SQLOutput object.  An application programmer will not normally call SQLData methods directly,  and the SQLInput and SQLOutput methods are called internally by SQLData  methods, not by application code.  Since:     1.2",0,1,0,0,0,0,0,1,1,0,0,0
"Constructs a SQLException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the Throwable.initCause(java.lang.Throwable) method.  Parameters: reason - a description of the exception SQLState - an XOPEN or SQL:2003 code identifying the exception vendorCode - a database vendor-specific exception code",1,0,0,0,0,0,0,1,0,0,0,1
"Reads the next attribute in the stream and returns it as a java.sql.Timestamp object.  Returns: the attribute; if the value is SQL NULL, returns null Throws: SQLException - if a database access error occurs SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.2",0,0,0,0,0,0,0,0,0,0,0,0
"Writes the next attribute to the stream as a Java int. Writes the next attribute to the stream as a String in the Java programming language.  Parameters: x - the value to pass to the database Throws: SQLException - if a database access error occurs SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,0
"The subclass of SQLException thrown in situations where a previously failed  operation might be able to succeed if the application performs some  recovery steps and retries the entire transaction or in the case of a  distributed transaction, the transaction branch. At a minimum, the recovery  operation must include closing the current connection and getting a new  connection.  Since:     1.6 See Also:     Serialized Form",1,1,1,0,0,0,0,0,0,0,0,0
"The subclass of SQLException for the SQLState class value '08',  representing that the connection operation that failed might be able to  succeed when the operation is retried without any application-level  changes.  Since:     1.6 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,1,0
"Constructs a SQLTransientConnectionException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the Throwable.initCause(java.lang.Throwable) method.  Since: 1.6",1,0,0,0,0,0,1,1,0,0,0,1
"Constructs a SQLTransientException object with a given cause. The SQLState is initialized to null and the vendor code is initialized to 0. The reason is initialized to null if cause==null or to cause.toString() if cause!=null.  Parameters: cause - the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. Since: 1.6",1,0,1,0,0,1,1,0,1,0,0,0
"Constructs a SQLTransientException object with a given reason and cause. The SQLState is initialized to null and the vendor code is initialized to 0.  Parameters: reason - a description of the exception. cause - the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. Since: 1.6",1,0,0,0,0,0,0,0,0,0,0,1
"Constructs a SQLWarning object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the Throwable.initCause(java.lang.Throwable) method.  Parameters: reason - a description of the warning",1,0,0,0,0,0,1,0,0,0,0,0
"Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object. The default value is ResultSet.FETCH_FORWARD.  Note that this method sets the default fetch direction for result sets generated by this Statement object. Each result set has its own methods for getting and setting its own fetch direction.  Parameters: direction - the initial direction for processing rows Throws: SQLException - if a database access error occurs, this method is called on a closed Statement or the given direction is not one of ResultSet.FETCH_FORWARD, ResultSet.FETCH_REVERSE, or ResultSet.FETCH_UNKNOWN Since: 1.2 See Also: getFetchDirection()",1,0,0,0,0,0,1,0,0,0,0,0
"Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific).  Parameters: sql - an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement. columnIndexes - an array of column indexes indicating the columns that should be returned from the inserted row Returns: either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing Throws: SQLException - if a database access error occurs, this method is called on a closed Statement, the SQL statement returns a ResultSet object, or the second argument supplied to this method is not an int array whose elements are valid column indexes SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.4",1,0,0,0,0,1,1,0,0,0,0,0
"Produces the ordered values of the attributes of the SQL structured type that this Struct object represents. As individual attrbutes are proccessed, this method uses the given type map for customizations of the type mappings. If there is no entry in the given type map that matches the structured type that an attribute represents, the driver uses the standard mapping. This method never uses the type map associated with the connection.  Conceptually, this method calls the method getObject on each attribute of the structured type and returns a Java array containing the result.  Parameters: map - a mapping of SQL type names to Java classes Returns: an array containing the ordered attribute values Throws: SQLException - if a database access error occurs SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.2",1,0,0,0,0,1,0,0,0,0,0,0
"The class that defines the constants that are used to identify generic SQL  types, called JDBC types.  This class is never instantiated.",0,0,0,0,0,0,1,0,0,0,0,0
" The constant in the Java programming language, sometimes referred to as a type code, that identifies the generic SQL type VARBINARY.  See Also: Constant Field Values ",0,1,0,0,0,0,0,0,0,0,0,0
"Interface for JDBC classes which provide the ability to retrieve the  delegate instance when the instance in question is in fact a proxy class.  The wrapper pattern is employed by many JDBC driver implementations to  provide extensions beyond the traditional JDBC API that are specific to a  data source. Developers may wish to gain access to these resources that are  wrapped (the delegates) as proxy class instances representing the the  actual resources. This interface describes a standard mechanism to access  these wrapped resources represented by their proxy, to permit direct access  to the resource delegates.  Since:     1.6",1,0,0,1,0,0,0,1,0,0,0,0
"An Annotation object is used as a wrapper for a text attribute value if the  attribute has annotation characteristics. These characteristics are:      * The text range that the attribute is applied to is critical to the       semantics of the range. That means, the attribute cannot be applied       to subranges of the text range that it applies to, and, if two       adjacent text ranges have the same value for this attribute, the       attribute still cannot be applied to the combined range as a whole       with this value.     * The attribute or its value usually do no longer apply if the       underlying text is changed. An example is grammatical information attached to a sentence: For the  previous sentence, you can say that an example is the subject, but you  cannot say the same about an, example, or exam. When the text is  changed, the grammatical information typically becomes invalid. Another  example is Japanese reading information (yomi).  Wrapping the attribute value into an Annotation object guarantees that  adjacent text runs don't get merged even if the attribute values are equal,  and indicates to text containers that the attribute should be discarded if  the underlying text is modified.  Since:     1.2 See Also:     AttributedCharacterIterator",1,1,0,0,0,1,1,0,1,0,0,0
"Returns the index of the first character following the run with respect to the given attributes containing the current character.",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs an AttributedString instance with the given attributed text represented by AttributedCharacterIterator.  Parameters: text - The text for this attributed string. Throws: NullPointerException - if text is null.",1,0,0,0,0,0,0,0,0,0,0,1
"This interface defines a protocol for bidirectional iteration over text.  The iterator iterates over a bounded sequence of characters. Characters are  indexed with values beginning with the value returned by getBeginIndex()  and continuing through the value returned by getEndIndex()-1.  Iterators maintain a current character index, whose valid range is from  getBeginIndex() to getEndIndex(); the value getEndIndex() is included to  allow handling of zero-length text ranges and for historical reasons. The  current index can be retrieved by calling getIndex() and set directly by  calling setIndex(), first(), and last().  The methods previous() and next() are used for iteration. They return DONE  if they would move outside the range from getBeginIndex() to getEndIndex()  -1, signaling that the iterator has reached the end of the sequence. DONE  is also returned by other methods to indicate that the current index is  outside this range.  Examples:  Traverse the text from start to finish   public void traverseForward(CharacterIterator iter) { for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) { processChar(c); } }   Traverse the text backwards, from end to start   public void traverseBackward(CharacterIterator iter) { for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) { processChar(c); } }   Traverse both forward and backward from a given position in the text. Calls  to notBoundary() in this example represents some additional stopping  criteria.   public void traverseOut(CharacterIterator iter, int pos) { for (char c = iter.setIndex(pos); c != CharacterIterator.DONE && notBoundary(c); c = iter.next()) { } int end = iter.getIndex(); for (char c = iter.setIndex(pos); c != CharacterIterator.DONE && notBoundary(c); c = iter.previous()) { } int start = iter.getIndex(); processSection(start, end); }   See Also:     StringCharacterIterator, AttributedCharacterIterator",1,0,0,1,0,0,1,1,1,0,0,0
"Sets the position to the specified position in the text and returns that character.  Parameters: position - the position within the text. Valid values range from getBeginIndex() to getEndIndex(). An IllegalArgumentException is thrown if an invalid value is supplied. Returns: the character at the specified position or DONE if the specified position is equal to getEndIndex()",1,0,0,0,0,0,0,0,0,0,0,0
"A ChoiceFormat allows you to attach a format to a range of numbers. It is  generally used in a MessageFormat for handling plurals. The choice is  specified with an ascending list of doubles, where each item specifies a  half-open interval up to the next item:       X matches j if and only if limit[j] <= X < limit[j+1]   If there is no match, then either the first or last index is used,  depending on whether the number (X) is too low or too high. If the limit  array is not in ascending order, the results of formatting will be  incorrect. ChoiceFormat also accepts  u221E as equivalent to infinity(INF).  Note: ChoiceFormat differs from the other Format classes in that you create  a ChoiceFormat object with a constructor (not with a getInstance style  factory method). The factory methods aren't necessary because ChoiceFormat  doesn't require any complex setup for a given locale. In fact,  ChoiceFormat doesn't implement any locale specific behavior.  When creating a ChoiceFormat, you must specify an array of formats and an  array of limits. The length of these arrays must be the same. For example,      * limits = {1,2,3,4,5,6,7}       formats = {Sun,Mon,Tue,Wed,Thur,Fri,Sat}     * limits = {0, 1, ChoiceFormat.nextDouble(1)}       formats = {no files, one file, many files}       (nextDouble can be used to get the next higher double, to make the       half-open interval.)  Here is a simple example that shows formatting and parsing:       double[] limits = {1,2,3,4,5,6,7}; String[] dayOfWeekNames = {Sun,Mon,Tue,Wed,Thur,Fri,Sat}; ChoiceFormat form = new ChoiceFormat(limits, dayOfWeekNames); ParsePosition status = new ParsePosition(0); for (double i = 0.0; i <= 8.0; ++i) { status.setIndex(0); System.out.println(i +  ->  + form.format(i) +  ->  + form.parse(form.format(i),status)); }   Here is a more complex example, with a pattern format:       double[] filelimits = {0,1,2}; String[] filepart = {are no files,is one file,are {2} files}; ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart); Format[] testFormats = {fileform, null, NumberFormat.getInstance()}; MessageFormat pattform = new MessageFormat(There {0} on {1}); pattform.setFormats(testFormats); Object[] testArgs = {null, ADisk, null}; for (int i = 0; i < 4; ++i) { testArgs[0] = new Integer(i); testArgs[2] = testArgs[0]; System.out.println(pattform.format(testArgs)); }   Specifying a pattern for ChoiceFormat objects is fairly straightforward.  For example:       ChoiceFormat fmt = new ChoiceFormat( -1\#is negative| 0\#is zero or fraction | 1\#is one |1.0<is 1+ |2\#is two |2<is more than 2.); System.out.println(Formatter Pattern :  + fmt.toPattern());  System.out.println(Format with -INF :  + fmt.format(Double.NEGATIVE_INFINITY)); System.out.println(Format with -1.0 :  + fmt.format(-1.0)); System.out.println(Format with 0 :  + fmt.format(0)); System.out.println(Format with 0.9 :  + fmt.format(0.9)); System.out.println(Format with 1.0 :  + fmt.format(1)); System.out.println(Format with 1.5 :  + fmt.format(1.5)); System.out.println(Format with 2 :  + fmt.format(2)); System.out.println(Format with 2.1 :  + fmt.format(2.1)); System.out.println(Format with NaN :  + fmt.format(Double.NaN)); System.out.println(Format with +INF :  + fmt.format(Double.POSITIVE_INFINITY));   And the output result would be like the following:          Format with -INF : is negative Format with -1.0 : is negative Format with 0 : is zero or fraction Format with 0.9 : is zero or fraction Format with 1.0 : is one Format with 1.5 : is 1+ Format with 2 : is two Format with 2.1 : is more than 2. Format with NaN : is negative Format with +INF : is more than 2.    Synchronization  Choice formats are not synchronized. It is recommended to create separate  format instances for each thread. If multiple threads access a format  concurrently, it must be synchronized externally.  See Also:     DecimalFormat, MessageFormat, Serialized Form",1,0,1,1,1,0,1,1,1,0,0,0
"Constructs with limits and corresponding formats based on the pattern.  See Also: applyPattern(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,0
"Gets the Collator for the desired locale.  Parameters: desiredLocale - the desired locale. Returns: the Collator for the desired locale. See Also: Locale, ResourceBundle",1,0,0,0,0,0,0,0,0,0,0,1
"Defines constants that are used as attribute keys in the  AttributedCharacterIterator returned from  DateFormat.formatToCharacterIterator and as field identifiers in  FieldPosition.  The class also provides two methods to map between its constants and the  corresponding Calendar constants.  Since:     1.4 See Also:     Calendar, Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
" Constant identifying the second field. ",0,0,0,0,0,0,0,0,0,0,0,1
" Constant identifying the time of day indicator (e.g. a.m. or p.m.) field. ",1,0,0,0,0,0,0,0,0,0,0,0
"DateFormat is an abstract class for date/time formatting subclasses which  formats and parses dates or time in a language-independent manner. The  date/time formatting subclass, such as SimpleDateFormat, allows for  formatting (i.e., date -> text), parsing (text -> date), and normalization.  The date is represented as a Date object or as the milliseconds since  January 1, 1970, 00:00:00 GMT.  DateFormat provides many class methods for obtaining default date/time  formatters based on the default or a given locale and a number of  formatting styles. The formatting styles include FULL, LONG, MEDIUM, and  SHORT. More detail and examples of using these styles are provided in the  method descriptions.  DateFormat helps you to format and parse dates for any locale. Your code  can be completely independent of the locale conventions for months, days of  the week, or even the calendar format: lunar vs. solar.  To format a date for the current Locale, use one of the static factory  methods:   myString = DateFormat.getDateInstance().format(myDate);   If you are formatting multiple dates, it is more efficient to get the  format and use it multiple times so that the system doesn't have to fetch  the information about the local language and country conventions multiple  times.   DateFormat df = DateFormat.getDateInstance(); for (int i = 0; i < myDate.length; ++i) { output.println(df.format(myDate[i]) + ; ); }   To format a date for a different Locale, specify it in the call to  getDateInstance().   DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);   You can use a DateFormat to parse also.   myDate = df.parse(myString);   Use getDateInstance to get the normal date format for that country. There  are other static factory methods available. Use getTimeInstance to get the  time format for that country. Use getDateTimeInstance to get a date and  time format. You can pass in different options to these factory methods to  control the length of the result; from SHORT to MEDIUM to LONG to FULL. The  exact result depends on the locale, but generally:      * SHORT is completely numeric, such as 12.13.52 or 3:30pm     * MEDIUM is longer, such as Jan 12, 1952     * LONG is longer, such as January 12, 1952 or 3:30:32pm     * FULL is pretty completely specified, such as Tuesday, April 12, 1952       AD or 3:30:42pm PST.  You can also set the time zone on the format if you wish. If you want even  more control over the format or parsing, (or want to give your users more  control), you can try casting the DateFormat you get from the factory  methods to a SimpleDateFormat. This will work for the majority of  countries; just remember to put it in a try block in case you encounter an  unusual one.  You can also use forms of the parse and format methods with ParsePosition  and FieldPosition to allow you to      * progressively parse through pieces of a string.     * align any particular field, or find out where it is for selection on       the screen.   Synchronization  Date formats are not synchronized. It is recommended to create separate  format instances for each thread. If multiple threads access a format  concurrently, it must be synchronized externally.  See Also:     Format, NumberFormat, SimpleDateFormat, Calendar, GregorianCalendar,      TimeZone, Serialized Form",1,1,0,1,1,0,1,1,1,0,0,0
"Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.  Returns: a copy of the desired DecimalFormatSymbols See Also: DecimalFormatSymbols",1,0,0,0,0,0,0,0,0,0,0,1
"Sets the multiplier for use in percent, per mille, and similar formats. For a percent format, set the multiplier to 100 and the suffixes to have '%' (for Arabic, use the Arabic percent sign). For a per mille format, set the multiplier to 1000 and the suffixes to have ' u2030'.  Example: with multiplier 100, 1.23 is formatted as 123, and 123 is parsed into 1.23.  See Also: getMultiplier()",1,0,0,0,0,0,0,1,1,0,0,0
"Sets the character used for zero. Different for Arabic, etc.",1,0,0,0,0,0,0,0,0,0,0,0
"Sets the format to use for the format element with the given format element index within the previously set pattern string. The format element index is the zero-based number of the format element counting from the start of the pattern string.  Since the order of format elements in a pattern string often changes during localization, it is generally better to use the setFormatByArgumentIndex method, which accesses format elements based on the argument index they specify.  Parameters: formatElementIndex - the index of a format element within the pattern newFormat - the format to use for the specified format element Throws: ArrayIndexOutOfBoundsException - if formatElementIndex is equal to or larger than the number of format elements in the pattern string",0,0,0,0,0,0,1,0,0,0,0,0
"Specialization of format.  Throws: ArithmeticException - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY See Also: Format.format(java.lang.Object)",1,0,0,0,0,0,1,0,0,0,0,1
"Returns an integer number format for the specified locale. The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see RoundingMode.HALF_EVEN) for formatting, and to parse only the integer part of an input string (see isParseIntegerOnly).  Returns: a number format for integer values Since: 1.4 See Also: getRoundingMode()",1,0,0,0,0,0,1,1,0,0,0,1
"StringCharacterIterator implements the CharacterIterater protocol for a  String. The StringCharacterIterator class iterates over the entire String.  See Also:     CharacterIterator",1,0,0,0,0,0,0,0,0,0,0,1
"Implements CharacterIterator.current() for String.  Specified by: current in interface CharacterIterator Returns: the character at the current position or DONE if the current position is off the end of the text. See Also: CharacterIterator.current()",1,0,0,0,0,0,1,0,0,0,0,0
"An abstract class for service providers that provide concrete  implementations of the BreakIterator class.  Since:     1.6",0,0,0,0,0,0,0,0,0,0,0,0
"Returns a new general-purpose NumberFormat instance for the specified locale.  Parameters: locale - the desired locale Returns: a general-purpose number formatter Throws: NullPointerException - if locale is null IllegalArgumentException - if locale isn't one of the locales returned from getAvailableLocales(). See Also: NumberFormat.getNumberInstance(java.util.Locale)",1,0,0,0,0,0,0,0,0,0,0,1
"This class provides skeletal implementations of some Queue operations. The  implementations in this class are appropriate when the base implementation  does not allow null elements. Methods add, remove, and element are based on  offer, poll, and peek, respectively but throw exceptions instead of  indicating failure via false or null returns.  A Queue implementation that extends this class must minimally define a  method Queue.offer(E) which does not permit insertion of null elements,  along with methods Queue.peek(), Queue.poll(), Collection.size(), and a  Collection.iterator() supporting Iterator.remove(). Typically, additional  methods will be overridden as well. If these requirements cannot be met,  consider instead subclassing AbstractCollection.  This class is a member of the Java Collections Framework.  Since:     1.5",1,0,0,1,0,0,1,1,0,0,1,0
"Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).  Specified by: removeLastOccurrence in interface Deque<E> Parameters: o - element to be removed from this deque, if present Returns: true if the deque contained the specified element",1,0,0,0,0,0,0,0,0,0,0,0
"Appends the specified element to the end of this list.  Specified by: add in interface Collection<E> Specified by: add in interface List<E> Overrides: add in class AbstractList<E> Parameters: e - element to be appended to this list Returns: true (as specified by Collection.add(E))",1,0,0,0,0,0,1,0,0,0,0,0
"Returns true if the two specified arrays of chars are equal to one another. Two arrays are considered equal if both arrays contain the same number of elements, and all corresponding pairs of elements in the two arrays are equal. In other words, two arrays are equal if they contain the same elements in the same order. Also, two array references are considered equal if both are null.  Parameters: a - one array to be tested for equality a2 - the other array to be tested for equality Returns: true if the two arrays are equal",1,0,0,0,0,0,0,0,0,0,0,0
"Assigns the specified Object reference to each element of the specified array of Objects.  Parameters: a - the array to be filled val - the value to be stored in all elements of the array Throws: ArrayStoreException - if the specified value is not of a runtime type that can be stored in the specified array",1,0,0,0,0,0,0,0,0,0,0,0
"Copies the specified range of the specified array into a new array. The initial index of the range (from) must lie between zero and original.length, inclusive. The value at original[from] is placed into the initial element of the copy (unless from == original.length or from == to). Values from subsequent elements in the original array are placed into subsequent elements in the copy. The final index of the range (to), which must be greater than or equal to from, may be greater than original.length, in which case null is placed in all elements of the copy whose index is greater than or equal to original.length - from . The length of the returned array will be to - from. The resulting array is of the class newType.  Parameters: original - the array from which a range is to be copied from - the initial index of the range to be copied, inclusive to - the final index of the range to be copied, exclusive. (This index may lie outside the array.) newType - the class of the copy to be returned Returns: a new array containing the specified range from the original array, truncated or padded with nulls to obtain the required length Throws: ArrayIndexOutOfBoundsException - if from < 0 or from > original.length() IllegalArgumentException - if from > to NullPointerException - if original is null ArrayStoreException - if an element copied from original is not of a runtime type that can be stored in an array of class newType. Since: 1.6",1,0,1,0,0,0,0,0,0,0,0,0
"Copies the specified range of the specified array into a new array. The initial index of the range (from) must lie between zero and original.length, inclusive. The value at original[from] is placed into the initial element of the copy (unless from == original.length or from == to). Values from subsequent elements in the original array are placed into subsequent elements in the copy. The final index of the range (to), which must be greater than or equal to from, may be greater than original.length, in which case 0f is placed in all elements of the copy whose index is greater than or equal to original.length - from. The length of the returned array will be to - from.  Parameters: original - the array from which a range is to be copied from - the initial index of the range to be copied, inclusive to - the final index of the range to be copied, exclusive. (This index may lie outside the array.) Returns: a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length Throws: ArrayIndexOutOfBoundsException - if from < 0 or from > original.length() IllegalArgumentException - if from > to NullPointerException - if original is null Since: 1.6",1,1,1,0,0,0,0,0,0,0,0,0
"Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets ([]). Adjacent elements are separated by the characters ,  (a comma followed by a space). Elements are converted to strings as by String.valueOf(float). Returns null if a is null.  Parameters: a - the array whose string representation to return Returns: a string representation of a Since: 1.5",1,0,0,0,0,0,0,0,0,0,0,1
" Value of the MONTH field indicating the fifth month of the year in the Gregorian and Julian calendars.  See Also: Constant Field Values ",0,1,0,0,0,0,0,0,0,0,0,0
"Returns the maximum value that the specified calendar field could have, given the time value of this Calendar. For example, the actual maximum value of the MONTH field is 12 in some years, and 13 in other years in the Hebrew calendar system.  The default implementation of this method uses an iterative algorithm to determine the actual maximum value for the calendar field. Subclasses should, if possible, override this with a more efficient implementation.  Parameters: field - the calendar field Returns: the maximum of the given calendar field for the time value of this Calendar Since: 1.2 See Also: getMinimum(int), getMaximum(int), getGreatestMinimum(int), getLeastMaximum(int), getActualMinimum(int)",1,0,0,0,1,0,0,0,0,0,0,0
"The root interface in the collection hierarchy. A collection represents a  group of objects, known as its elements. Some collections allow duplicate  elements and others do not. Some are ordered and others unordered. The JDK  does not provide any direct implementations of this interface: it provides  implementations of more specific subinterfaces like Set and List. This  interface is typically used to pass collections around and manipulate them  where maximum generality is desired.  Bags or multisets (unordered collections that may contain duplicate  elements) should implement this interface directly.  All general-purpose Collection implementation classes (which typically  implement Collection indirectly through one of its subinterfaces) should  provide two standard constructors: a void (no arguments) constructor,  which creates an empty collection, and a constructor with a single argument  of type Collection, which creates a new collection with the same elements  as its argument. In effect, the latter constructor allows the user to copy  any collection, producing an equivalent collection of the desired  implementation type. There is no way to enforce this convention (as  interfaces cannot contain constructors) but all of the general-purpose  Collection implementations in the Java platform libraries comply.  The destructive methods contained in this interface, that is, the methods  that modify the collection on which they operate, are specified to throw  UnsupportedOperationException if this collection does not support the  operation. If this is the case, these methods may, but are not required to,  throw an UnsupportedOperationException if the invocation would have no  effect on the collection. For example, invoking the addAll(Collection)  method on an unmodifiable collection may, but is not required to, throw the  exception if the collection to be added is empty.  Some collection implementations have restrictions on the elements that they  may contain. For example, some implementations prohibit null elements, and  some have restrictions on the types of their elements. Attempting to add an  ineligible element throws an unchecked exception, typically  NullPointerException or ClassCastException. Attempting to query the  presence of an ineligible element may throw an exception, or it may simply  return false; some implementations will exhibit the former behavior and  some will exhibit the latter. More generally, attempting an operation on an  ineligible element whose completion would not result in the insertion of an  ineligible element into the collection may throw an exception or it may  succeed, at the option of the implementation. Such exceptions are marked as  optional in the specification for this interface.  It is up to each collection to determine its own synchronization policy. In  the absence of a stronger guarantee by the implementation, undefined  behavior may result from the invocation of any method on a collection that  is being mutated by another thread; this includes direct invocations,  passing the collection to a method that might perform invocations, and  using an existing iterator to examine the collection.  Many methods in Collections Framework interfaces are defined in terms of  the equals method. For example, the specification for the contains(Object  o) method says: returns true if and only if this collection contains at  least one element e such that (o==null ? e==null : o.equals(e)). This  specification should not be construed to imply that invoking  Collection.contains with a non-null argument o will cause o.equals(e) to be  invoked for any element e. Implementations are free to implement  optimizations whereby the equals invocation is avoided, for example, by  first comparing the hash codes of the two elements. (The Object.hashCode()  specification guarantees that two objects with unequal hash codes cannot be  equal.) More generally, implementations of the various Collections  Framework interfaces are free to take advantage of the specified behavior  of underlying Object methods wherever the implementor deems it appropriate.  This interface is a member of the Java Collections Framework.  Since:     1.2 See Also:     Set, List, Map, SortedSet, SortedMap, HashSet, TreeSet, ArrayList,      LinkedList, Vector, Collections, Arrays, AbstractCollection",1,1,1,1,0,0,1,0,1,0,0,1
"Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element e such that (o==null ? e==null : o.equals(e)), if this collection contains one or more such elements. Returns true if this collection contained the specified element (or equivalently, if this collection changed as a result of the call).  Parameters: o - element to be removed from this collection, if present Returns: true if an element was removed as a result of this call Throws: ClassCastException - if the type of the specified element is incompatible with this collection (optional) NullPointerException - if the specified element is null and this collection does not permit null elements (optional) UnsupportedOperationException - if the remove operation is not supported by this collection",1,0,0,0,0,0,0,0,1,0,0,0
" Sorts the specified list according to the order induced by the specified comparator. All elements in the list must be mutually comparable using the specified comparator (that is, c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list).  This sort is guaranteed to be stable: equal elements will not be reordered as a result of the sort.  The sorting algorithm is a modified mergesort (in which the merge is omitted if the highest element in the low sublist is less than the lowest element in the high sublist). This algorithm offers guaranteed n log(n) performance. The specified list must be modifiable, but need not be resizable. This implementation dumps the specified list into an array, sorts the array, and iterates over the list resetting each element from the corresponding position in the array. This avoids the n 2 log(n) performance that would result from attempting to sort a linked list in place.  Parameters: list - the list to be sorted. c - the comparator to determine the order of the list. A null value indicates that the elements' natural ordering should be used. Throws: ClassCastException - if the list contains elements that are not mutually comparable using the specified comparator. UnsupportedOperationException - if the specified list's list-iterator does not support the set operation. See Also: Comparator ",1,1,1,0,1,0,0,0,1,0,0,1
"Returns an immutable map, mapping only the specified key to the specified value. The returned map is serializable.  Parameters: key - the sole key to be stored in the returned map. value - the value to which the returned map maps key. Returns: an immutable map containing only the specified key-value mapping. Since: 1.3",1,0,0,0,0,0,0,0,0,0,0,0
"Deprecated. As of JDK version 1.1, replaced by Calendar.get(Calendar.HOUR_OF_DAY).  Returns the hour represented by this Date object. The returned value is a number (0 through 23) representing the hour within the day that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.  Returns: the hour represented by this date. See Also: Calendar",1,0,0,0,0,0,0,0,0,0,0,1
"Deprecated. As of JDK version 1.1, replaced by Calendar.set(Calendar.MINUTE, int minutes).  Sets the minutes of this Date object to the specified value. This Date object is modified so that it represents a point in time within the specified minute of the hour, with the year, month, date, hour, and second the same as before, as interpreted in the local time zone.  Parameters: minutes - the value of the minutes. See Also: Calendar",0,0,0,0,0,0,0,0,0,0,0,0
"The Dictionary class is the abstract parent of any class, such as  Hashtable, which maps keys to values. Every key and every value is an  object. In any one Dictionary object, every key is associated with at most  one value. Given a Dictionary and a key, the associated element can be  looked up. Any non-null object can be used as a key and as a value.  As a rule, the equals method should be used by implementations of this  class to decide if two keys are the same.  NOTE: This class is obsolete. New implementations should implement the Map  interface, rather than extending this class.  Since:     JDK1.0 See Also:     Map, Object.equals(java.lang.Object), Object.hashCode(), Hashtable",1,1,1,1,0,0,1,1,0,0,0,0
"Unchecked exception thrown when duplicate flags are provided in the format  specifier.  Unless otherwise specified, passing a null argument to any method or  constructor in this class will cause a NullPointerException to be thrown.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,1,0,0,0,0,0,0
"A specialized Set implementation for use with enum types. All of the  elements in an enum set must come from a single enum type that is  specified, explicitly or implicitly, when the set is created. Enum sets are  represented internally as bit vectors. This representation is extremely  compact and efficient. The space and time performance of this class should  be good enough to allow its use as a high-quality, typesafe alternative to  traditional int-based bit flags. Even bulk operations (such as  containsAll and retainAll) should run very quickly if their argument is  also an enum set.  The iterator returned by the iterator method traverses the elements in  their natural order (the order in which the enum constants are declared).  The returned iterator is weakly consistent: it will never throw  ConcurrentModificationException and it may or may not show the effects of  any modifications to the set that occur while the iteration is in progress.  Null elements are not permitted. Attempts to insert a null element will  throw NullPointerException. Attempts to test for the presence of a null  element or to remove one will, however, function properly.  Like most collection implementations, EnumSet is not synchronized. If  multiple threads access an enum set concurrently, and at least one of the  threads modifies the set, it should be synchronized externally. This is  typically accomplished by synchronizing on some object that naturally  encapsulates the enum set. If no such object exists, the set should be  wrapped using the Collections.synchronizedSet(java.util.Set ) method.  This is best done at creation time, to prevent accidental unsynchronized  access:   Set<MyEnum> s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));   Implementation note: All basic operations execute in constant time. They  are likely (though not guaranteed) to be much faster than their HashSet  counterparts. Even bulk operations execute in constant time if their  argument is also an enum set.  This class is a member of the Java Collections Framework.  Since:     1.5 See Also:     EnumMap  Method Summary static <E extends Enum<E>> EnumSet<E> allOf(Class<E> elementType)           Creates an enum set containing all of the elements in the  specified element type.  EnumSet<E> 	clone()           Returns a copy of this set. static <E extends Enum<E>> EnumSet<E> complementOf(EnumSet<E> s)           Creates an enum set with the same element type as the specified  enum set, initially containing all the elements of this type that are not  contained in the specified set. static <E extends Enum<E>> EnumSet<E> copyOf(Collection<E> c)           Creates an enum set initialized from the specified collection. static <E extends Enum<E>> EnumSet<E> copyOf(EnumSet<E> s)           Creates an enum set with the same element type as the specified  enum set, initially containing the same elements (if any). static <E extends Enum<E>> EnumSet<E> noneOf(Class<E> elementType)           Creates an empty enum set with the specified element type. static <E extends Enum<E>> EnumSet<E> of(E e)           Creates an enum set initially containing the specified element. static <E extends Enum<E>> EnumSet<E> of(E first, E... rest)           Creates an enum set initially containing the specified elements. static <E extends Enum<E>> EnumSet<E> of(E e1, E e2)           Creates an enum set initially containing the specified elements. static <E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3)           Creates an enum set initially containing the specified elements. static <E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3, E e4)           Creates an enum set initially containing the specified elements. static <E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3, E e4, E e5)           Creates an enum set initially containing the specified elements. static <E extends Enum<E>> EnumSet<E> range(E from, E to)           Creates an enum set initially containing all of the elements in  the range defined by the two specified endpoints.   Methods inherited from class java.util.AbstractSet equals, hashCode, removeAll   Methods inherited from class java.util.AbstractCollection add, addAll, clear, contains, containsAll, isEmpty, iterator, remove,  retainAll, size, toArray, toArray, toString   Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, wait   Methods inherited from interface java.util.Set add, addAll, clear, contains, containsAll, isEmpty, iterator, remove,  retainAll, size, toArray, toArray    Method Detail   noneOf   public static <E extends Enum<E>> EnumSet<E> noneOf(Class<E> elementType)      Creates an empty enum set with the specified element type.      Parameters:         elementType - the class object of the element type for this enum         set     Throws:         NullPointerException - if elementType is null   allOf   public static <E extends Enum<E>> EnumSet<E> allOf(Class<E> elementType)      Creates an enum set containing all of the elements in the specified     element type.      Parameters:         elementType - the class object of the element type for this enum         set     Throws:         NullPointerException - if elementType is null   copyOf   public static <E extends Enum<E>> EnumSet<E> copyOf(EnumSet<E> s)      Creates an enum set with the same element type as the specified enum     set, initially containing the same elements (if any).      Parameters:         s - the enum set from which to initialize this enum set     Throws:         NullPointerException - if s is null   copyOf   public static <E extends Enum<E>> EnumSet<E> copyOf(Collection<E> c)      Creates an enum set initialized from the specified collection. If the     specified collection is an EnumSet instance, this static factory method     behaves identically to copyOf(EnumSet). Otherwise, the specified     collection must contain at least one element (in order to determine the     new enum set's element type).      Parameters:         c - the collection from which to initialize this enum set     Throws:         IllegalArgumentException - if c is not an EnumSet instance and         contains no elements         NullPointerException - if c is null   complementOf   public static <E extends Enum<E>> EnumSet<E> complementOf(EnumSet<E> s)      Creates an enum set with the same element type as the specified enum     set, initially containing all the elements of this type that are not      contained in the specified set.      Parameters:         s - the enum set from whose complement to initialize this enum set     Throws:         NullPointerException - if s is null   of   public static <E extends Enum<E>> EnumSet<E> of(E e)      Creates an enum set initially containing the specified element.     Overloadings of this method exist to initialize an enum set with one     through five elements. A sixth overloading is provided that uses the     varargs feature. This overloading may be used to create an enum set     initially containing an arbitrary number of elements, but is likely to     run slower than the overloadings that do not use varargs.      Parameters:         e - the element that this set is to contain initially     Returns:         an enum set initially containing the specified element     Throws:         NullPointerException - if e is null   of   public static <E extends Enum<E>> EnumSet<E> of(E e1, E e2)      Creates an enum set initially containing the specified elements.     Overloadings of this method exist to initialize an enum set with one     through five elements. A sixth overloading is provided that uses the     varargs feature. This overloading may be used to create an enum set     initially containing an arbitrary number of elements, but is likely to     run slower than the overloadings that do not use varargs.      Parameters:         e1 - an element that this set is to contain initially         e2 - another element that this set is to contain initially     Returns:         an enum set initially containing the specified elements     Throws:         NullPointerException - if any parameters are null   of   public static <E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3)      Creates an enum set initially containing the specified elements.     Overloadings of this method exist to initialize an enum set with one     through five elements. A sixth overloading is provided that uses the     varargs feature. This overloading may be used to create an enum set     initially containing an arbitrary number of elements, but is likely to     run slower than the overloadings that do not use varargs.      Parameters:         e1 - an element that this set is to contain initially         e2 - another element that this set is to contain initially         e3 - another element that this set is to contain initially     Returns:         an enum set initially containing the specified elements     Throws:         NullPointerException - if any parameters are null   of   public static <E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3, E e4)      Creates an enum set initially containing the specified elements.     Overloadings of this method exist to initialize an enum set with one     through five elements. A sixth overloading is provided that uses the     varargs feature. This overloading may be used to create an enum set     initially containing an arbitrary number of elements, but is likely to     run slower than the overloadings that do not use varargs.      Parameters:         e1 - an element that this set is to contain initially         e2 - another element that this set is to contain initially         e3 - another element that this set is to contain initially         e4 - another element that this set is to contain initially     Returns:         an enum set initially containing the specified elements     Throws:         NullPointerException - if any parameters are null   of   public static <E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3, E e4, E e5)      Creates an enum set initially containing the specified elements.     Overloadings of this method exist to initialize an enum set with one     through five elements. A sixth overloading is provided that uses the     varargs feature. This overloading may be used to create an enum set     initially containing an arbitrary number of elements, but is likely to     run slower than the overloadings that do not use varargs.      Parameters:         e1 - an element that this set is to contain initially         e2 - another element that this set is to contain initially         e3 - another element that this set is to contain initially         e4 - another element that this set is to contain initially         e5 - another element that this set is to contain initially     Returns:         an enum set initially containing the specified elements     Throws:         NullPointerException - if any parameters are null   of   public static <E extends Enum<E>> EnumSet<E> of(E first, E... rest)      Creates an enum set initially containing the specified elements. This     factory, whose parameter list uses the varargs feature, may be used to     create an enum set initially containing an arbitrary number of     elements, but it is likely to run slower than the overloadings that do     not use varargs.      Parameters:         first - an element that the set is to contain initially         rest - the remaining elements the set is to contain initially     Returns:         an enum set initially containing the specified elements     Throws:         NullPointerException - if any of the specified elements are null,         or if rest is null   range   public static <E extends Enum<E>> EnumSet<E> range(E from, E to)      Creates an enum set initially containing all of the elements in the     range defined by the two specified endpoints. The returned set will     contain the endpoints themselves, which may be identical but must not     be out of order.      Parameters:         from - the first element in the range         to - the last element in the range     Returns:         an enum set initially containing all of the elements in the range         defined by the two specified endpoints     Throws:         NullPointerException - if first or last are null         IllegalArgumentException - if first.compareTo(last) > 0   clone   public EnumSet<E> clone()      Returns a copy of this set.      Overrides:         clone in class Object     Returns:         a copy of this set     See Also:         Cloneable Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR |  METHOD Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,1,1,1,0,1,0,1,0,0,0
"Unchecked exception thrown when the formatter has been closed.  Unless otherwise specified, passing a null argument to any method or  constructor in this class will cause a NullPointerException to be thrown.  Since:     1.5 See Also:     Serialized Form",0,1,0,0,0,0,0,0,0,0,0,1
"Generates the hash code for this GregorianCalendar object.  Overrides: hashCode in class Calendar Returns: a hash code value for this object. See Also: Object.equals(java.lang.Object), Hashtable",0,0,0,0,0,0,0,0,0,0,0,1
"Returns an enumeration of the keys in this hashtable.  Specified by: keys in class Dictionary<K,V> Returns: an enumeration of the keys in this hashtable. See Also: Enumeration, elements(), keySet(), Map",0,0,0,0,0,0,0,0,0,0,0,1
"Unchecked exception thrown when the argument corresponding to the format  specifier is of an incompatible type.  Unless otherwise specified, passing a null argument to any method or  constructor in this class will cause a NullPointerException to be thrown.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,1,1,0,0,0,0,0
"Thrown to indicate that an operation could not complete because the input  did not conform to the appropriate XML document type for a collection of  properties, as per the Properties specification.  Note, that although InvalidPropertiesFormatException inherits Serializable  interface from Exception, it is not intended to be Serializable.  Appropriate serialization methods are implemented to throw  NotSerializableException.  Since:     1.5 See Also:     Properties",0,0,0,0,0,0,1,0,0,0,0,0
"Constructs an InvalidPropertiesFormatException with the specified detail message.  Parameters: message - the detail message. The detail message is saved for later retrieval by the Throwable.getMessage() method.",0,0,0,0,0,0,1,0,0,0,0,1
"Retrieves and removes the head (first element) of this list  Specified by: poll in interface Deque<E> Specified by: poll in interface Queue<E> Returns: the head of this list, or null if this list is empty Since: 1.5",1,0,0,0,0,0,0,0,0,0,0,0
"Removes the first occurrence of the specified element from this list, if it is present (optional operation). If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null ? get(i)==null : o.equals(get(i))) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call).  Specified by: remove in interface Collection<E> Parameters: o - element to be removed from this list, if present Returns: true if this list contained the specified element Throws: ClassCastException - if the type of the specified element is incompatible with this list (optional) NullPointerException - if the specified element is null and this list does not permit null elements (optional) UnsupportedOperationException - if the remove operation is not supported by this list",1,0,0,0,0,0,0,0,0,0,0,0
"ListResourceBundle is an abstract subclass of ResourceBundle that manages  resources for a locale in a convenient and easy to use list. See  ResourceBundle for more information about resource bundles in general.  Subclasses must override getContents and provide an array, where each item  in the array is a pair of objects. The first element of each pair is the  key, which must be a String, and the second element is the value associated  with that key.  The following example shows two members of a resource bundle family with  the base name MyResources. MyResources is the default member of the  bundle family, and MyResources_fr is the French member. These members are  based on ListResourceBundle (a related example shows how you can add a  bundle to this family that's based on a properties file). The keys in this  example are of the form s1 etc. The actual keys are entirely up to your  choice, so long as they are the same as the keys you use in your program to  retrieve the objects from the bundle. Keys are case-sensitive.        public class MyResources extends ListResourceBundle { protected Object[][] getContents() { return new Object[][] = { // LOCALIZE THIS {s1, The disk  {1}  contains {0}.},  // MessageFormat pattern {s2, 1},                               // location of {0} in pattern {s3, My Disk},                         // sample disk name {s4, no files},                        // first ChoiceFormat choice {s5, one file},                        // second ChoiceFormat choice {s6, {0,number} files},                // third ChoiceFormat choice {s7, 3 Mar 96},                        // sample date {s8, new Dimension(1,5)}                 // real object, not just string // END OF MATERIAL TO LOCALIZE }; } }  public class MyResources_fr extends ListResourceBundle { protected Object[][] getContents() { return new Object[][] = { // LOCALIZE THIS {s1, Le disque  {1}  {0}.},          // MessageFormat pattern {s2, 1},                               // location of {0} in pattern {s3, Mon disque},                      // sample disk name {s4, ne contient pas de fichiers},     // first ChoiceFormat choice {s5, contient un fichier},             // second ChoiceFormat choice {s6, contient {0,number} fichiers},    // third ChoiceFormat choice {s7, 3 mars 1996},                     // sample date {s8, new Dimension(1,3)}                 // real object, not just string // END OF MATERIAL TO LOCALIZE }; } }   Since:     JDK1.1 See Also:     ResourceBundle, PropertyResourceBundle",1,0,1,0,0,0,1,0,1,0,0,0
"A Locale object represents a specific geographical, political, or cultural  region. An operation that requires a Locale to perform its task is called  locale-sensitive and uses the Locale to tailor information for the user.  For example, displaying a number is a locale-sensitive operation--the  number should be formatted according to the customs/conventions of the  user's native country, region, or culture.  Create a Locale object using the constructors in this class:       Locale(String language) Locale(String language, String country) Locale(String language, String country, String variant)   The language argument is a valid ISO Language Code. These codes are the  lower-case, two-letter codes as defined by ISO-639. You can find a full  list of these codes at a number of sites, such as: http://www.loc.gov/standards/iso639-2/englangn.html  The country argument is a valid ISO Country Code. These codes are the  upper-case, two-letter codes as defined by ISO-3166. You can find a full  list of these codes at a number of sites, such as: http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html  The variant argument is a vendor or browser-specific code. For example, use  WIN for Windows, MAC for Macintosh, and POSIX for POSIX. Where there are  two variants, separate them with an underscore, and put the most important  one first. For example, a Traditional Spanish collation might construct a  locale with parameters for language, country and variant as: es, ES,  Traditional_WIN.  Because a Locale object is just an identifier for a region, no validity  check is performed when you construct a Locale. If you want to see whether  particular resources are available for the Locale you construct, you must  query those resources. For example, ask the NumberFormat for the locales it  supports using its getAvailableLocales method. Note: When you ask for a resource for a particular locale, you get back the  best available match, not necessarily precisely what you asked for. For  more information, look at ResourceBundle.  The Locale class provides a number of convenient constants that you can use  to create Locale objects for commonly used locales. For example, the  following creates a Locale object for the United States:       Locale.US   Once you've created a Locale you can query it for information about itself.  Use getCountry to get the ISO Country Code and getLanguage to get the ISO  Language Code. You can use getDisplayCountry to get the name of the country  suitable for displaying to the user. Similarly, you can use  getDisplayLanguage to get the name of the language suitable for displaying  to the user. Interestingly, the getDisplayXXX methods are themselves  locale-sensitive and have two versions: one that uses the default locale  and one that uses the locale specified as an argument.  The Java Platform provides a number of classes that perform  locale-sensitive operations. For example, the NumberFormat class formats  numbers, currency, or percentages in a locale-sensitive manner. Classes  such as NumberFormat have a number of convenience methods for creating a  default object of that type. For example, the NumberFormat class provides  these three convenience methods for creating a default NumberFormat  object:       NumberFormat.getInstance() NumberFormat.getCurrencyInstance() NumberFormat.getPercentInstance()   These methods have two variants; one with an explicit locale and one  without; the latter using the default locale.       NumberFormat.getInstance(myLocale) NumberFormat.getCurrencyInstance(myLocale) NumberFormat.getPercentInstance(myLocale)   A Locale is the mechanism for identifying the kind of object (NumberFormat ) that you would like to get. The locale is just a mechanism for  identifying objects, not a container for the objects themselves.  Since:     1.1 See Also:     ResourceBundle, Format, NumberFormat, Collator, Serialized Form",1,1,0,0,0,0,0,0,1,0,1,0
"Returns the country/region code for this locale, which will either be the empty string or an uppercase ISO 3166 2-letter code.  See Also: getDisplayCountry()",1,0,0,0,0,0,0,0,0,0,0,0
"Unchecked exception thrown when the format width is required.  Unless otherwise specified, passing a null argument to anyg method or  constructor in this class will cause a NullPointerException to be thrown.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the greatest key strictly less than the given key, or null if there is no such key.  Parameters: key - the key Returns: the greatest key less than key, or null if there is no such key Throws: ClassCastException - if the specified key cannot be compared with the keys currently in the map NullPointerException - if the specified key is null and this map does not permit null keys",1,0,0,0,0,0,0,0,0,0,0,1
"Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. If either set is modified while an iteration over either set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined.  The returned set has an ordering equivalent to Collections.reverseOrder(comparator()). The expression s.descendingSet().descendingSet() returns a view of s essentially equivalent to s.  Returns: a reverse order view of this set",1,0,0,0,0,0,1,0,1,0,0,0
"If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed.  Each observer has its update method called with two arguments: this observable object and null. In other words, this method is equivalent to:  notifyObservers(null)  See Also: clearChanged(), hasChanged(), Observer.update(java.util.Observable, java.lang.Object)",1,0,0,0,0,1,1,0,0,0,0,0
"This class is for property permissions.  The name is the name of the property (java.home, os.name, etc). The  naming convention follows the hierarchical property naming convention.  Also, an asterisk may appear at the end of the name, following a ., or by  itself, to signify a wildcard match. For example: java.* or * is valid,  *java or a*b is not valid.  The actions to be granted are passed to the constructor in a string  containing a list of zero or more comma-separated keywords. The possible  keywords are read and write. Their meaning is defined as follows:  read     read permission. Allows System.getProperty to be called. write     write permission. Allows System.setProperty to be called.  The actions string is converted to lowercase before processing.  Care should be taken before granting code permission to access certain  system properties. For example, granting permission to access the  java.home system property gives potentially malevolent code sensitive  information about the system environment (the Java installation directory).  Also, granting permission to access the user.name and user.home system  properties gives potentially malevolent code sensitive information about  the user environment (the user's account name and home directory).  Since:     1.2 See Also:     BasicPermission, Permission, Permissions, PermissionCollection,      SecurityManager",1,1,1,0,0,0,0,0,0,0,0,1
"Returns the hash code value for this object. The hash code used is the hash code of this permissions name, that is, getName().hashCode(), where getName is from the Permission superclass.  Overrides: hashCode in class BasicPermission Returns: a hash code value for this object. See Also: Object.equals(java.lang.Object), Hashtable",0,0,0,1,0,0,0,0,0,0,0,1
"Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence. The general contract of nextLong is that one long value is pseudorandomly generated and returned.  The method nextLong is implemented by class Random as if by:  public long nextLong() { return ((long)next(32) << 32) + next(32); }  Because class Random uses a seed with only 48 bits, this algorithm will not return all possible long values.  Returns: the next pseudorandom, uniformly distributed long value from this random number generator's sequence",1,0,0,0,0,0,0,0,1,0,0,0
"Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence. The general contract of nextBoolean is that one boolean value is pseudorandomly generated and returned. The values true and false are produced with (approximately) equal probability.  The method nextBoolean is implemented by class Random as if by:  public boolean nextBoolean() { return next(1) != 0; }  Returns: the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence Since: 1.2",1,0,0,0,0,0,0,0,1,0,0,1
"Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria. The method returns true if reloading is required; false otherwise. loadTime is a millisecond offset since the Calendar Epoch. The calling ResourceBundle.getBundle factory method calls this method on the ResourceBundle.Control instance used for its current invocation, not on the instance used in the invocation that originally loaded the resource bundle.  The default implementation compares loadTime and the last modified time of the source data of the resource bundle. If it's determined that the source data has been modified since loadTime, true is returned. Otherwise, false is returned. This implementation assumes that the given format is the same string as its file suffix if it's not one of the default formats, java.class or java.properties.  Parameters: baseName - the base bundle name of the resource bundle, a fully qualified class name locale - the locale for which the resource bundle should be instantiated format - the resource bundle format to be loaded loader - the ClassLoader to use to load the bundle bundle - the resource bundle instance that has been expired in the cache loadTime - the time when bundle was loaded and put in the cache Returns: true if the expired bundle needs to be reloaded; false otherwise. Throws: NullPointerException - if baseName, locale, format, loader, or bundle is null",1,0,0,0,0,1,0,0,0,0,0,0
"Constructs a new Scanner that produces values scanned from the specified input stream. Bytes from the stream are converted into characters using the specified charset.  Parameters: source - An input stream to be scanned charsetName - The encoding type used to convert bytes from the stream into characters to be scanned Throws: IllegalArgumentException - if the specified character set does not exist",1,0,0,0,0,0,0,0,0,0,0,1
"Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the underlying platform's default charset.  Parameters: source - A file to be scanned Throws: FileNotFoundException - if source is not found",0,0,0,0,0,0,0,0,0,0,0,1
"Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.  Parameters: source - A file to be scanned charsetName - The encoding type used to convert bytes from the file into characters to be scanned Throws: FileNotFoundException - if source is not found IllegalArgumentException - if the specified encoding is not found",1,0,0,0,0,0,0,0,0,0,0,1
"Constructs a new Scanner that produces values scanned from the specified string.  Parameters: source - A string to scan",1,0,0,0,0,0,0,0,0,0,0,0
"Scans the next token of the input as a BigInteger.  If the next token matches the Integer regular expression defined above then the token is converted into a BigInteger value as if by removing all group separators, mapping non-ASCII digits into ASCII digits via the Character.digit, and passing the resulting string to the BigInteger(String, int) constructor with the specified radix.  Parameters: radix - the radix used to interpret the token Returns: the BigInteger scanned from the input Throws: InputMismatchException - if the next token does not match the Integer regular expression, or is out of range NoSuchElementException - if the input is exhausted IllegalStateException - if this scanner is closed",1,0,0,0,0,1,0,0,0,0,0,0
"Error thrown when something goes wrong while loading a service provider.  This error will be thrown in the following situations:      * The format of a provider-configuration file violates the        specification;     * An IOException occurs while reading a provider-configuration file;     * A concrete provider class named in a provider-configuration file       cannot be found;     * A concrete provider class is not a subclass of the service class;     * A concrete provider class cannot be instantiated; or     * Some other kind of error occurs.  Since:     1.6 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"A simple service-provider loading facility.  A service is a well-known set of interfaces and (usually abstract) classes.  A service provider is a specific implementation of a service. The classes  in a provider typically implement the interfaces and subclass the classes  defined in the service itself. Service providers can be installed in an  implementation of the Java platform in the form of extensions, that is, jar  files placed into any of the usual extension directories. Providers can  also be made available by adding them to the application's class path or by  some other platform-specific means.  For the purpose of loading, a service is represented by a single type, that  is, a single interface or abstract class. (A concrete class can be used,  but this is not recommended.) A provider of a given service contains one or  more concrete classes that extend this service type with data and code  specific to the provider. The provider class is typically not the entire  provider itself but rather a proxy which contains enough information to  decide whether the provider is able to satisfy a particular request  together with code that can create the actual provider on demand. The  details of provider classes tend to be highly service-specific; no single  class or interface could possibly unify them, so no such type is defined  here. The only requirement enforced by this facility is that provider  classes must have a zero-argument constructor so that they can be  instantiated during loading.  A service provider is identified by placing a provider-configuration file  in the resource directory META-INF/services. The file's name is the  fully-qualified binary name of the service's type. The file contains a list  of fully-qualified binary names of concrete provider classes, one per line.  Space and tab characters surrounding each name, as well as blank lines, are  ignored. The comment character is '\#' (' u0023', NUMBER SIGN); on each line  all characters following the first comment character are ignored. The file  must be encoded in UTF-8.  If a particular concrete provider class is named in more than one  configuration file, or is named in the same configuration file more than  once, then the duplicates are ignored. The configuration file naming a  particular provider need not be in the same jar file or other distribution  unit as the provider itself. The provider must be accessible from the same  class loader that was initially queried to locate the configuration file;  note that this is not necessarily the class loader from which the file was  actually loaded.  Providers are located and instantiated lazily, that is, on demand. A  service loader maintains a cache of the providers that have been loaded so  far. Each invocation of the iterator method returns an iterator that first  yields all of the elements of the cache, in instantiation order, and then  lazily locates and instantiates any remaining providers, adding each one to  the cache in turn. The cache can be cleared via the reload method.  Service loaders always execute in the security context of the caller.  Trusted system code should typically invoke the methods in this class, and  the methods of the iterators which they return, from within a privileged  security context.  Instances of this class are not safe for use by multiple concurrent  threads.  Unless otherwise specified, passing a null argument to any method in this  class will cause a NullPointerException to be thrown.  Example Suppose we have a service type com.example.CodecSet which is  intended to represent sets of encoder/decoder pairs for some protocol. In  this case it is an abstract class with two abstract methods:       public abstract Encoder getEncoder(String encodingName); public abstract Decoder getDecoder(String encodingName);  Each method returns an appropriate object or null if the provider does not  support the given encoding. Typical providers support more than one  encoding.  If com.example.impl.StandardCodecs is an implementation of the CodecSet  service then its jar file also contains a file named       META-INF/services/com.example.CodecSet  This file contains the single line:       com.example.impl.StandardCodecs    \# Standard codecs  The CodecSet class creates and saves a single service instance at  initialization:       private static ServiceLoader<CodecSet> codecSetLoader = ServiceLoader.load(CodecSet.class);  To locate an encoder for a given encoding name it defines a static factory  method which iterates through the known and available providers, returning  only when it has located a suitable encoder or has run out of providers.       public static Encoder getEncoder(String encodingName) { for (CodecSet cp : codecSetLoader) { Encoder enc = cp.getEncoder(encodingName); if (enc != null) return enc; } return null; }  A getDecoder method is defined similarly.  Usage Note If the class path of a class loader that is used for provider  loading includes remote network URLs then those URLs will be dereferenced  in the process of searching for provider-configuration files.  This activity is normal, although it may cause puzzling entries to be  created in web-server logs. If a web server is not configured correctly,  however, then this activity may cause the provider-loading algorithm to  fail spuriously.  A web server should return an HTTP 404 (Not Found) response when a  requested resource does not exist. Sometimes, however, web servers are  erroneously configured to return an HTTP 200 (OK) response along with a  helpful HTML error page in such cases. This will cause a  ServiceConfigurationError to be thrown when this class attempts to parse  the HTML page as a provider-configuration file. The best solution to this  problem is to fix the misconfigured web server to return the correct  response code (HTTP 404) along with the HTML error page.  Since:     1.6",1,1,1,0,0,0,1,0,1,0,0,0
"Returns true if this set contains no elements.  Specified by: isEmpty in interface Collection<E> Returns: true if this set contains no elements",1,0,0,0,0,0,0,0,0,0,0,0
"Adds the specified element to this set if it is not already present (optional operation). More formally, adds the specified element e to this set if the set contains no element e2 such that (e==null ? e2==null : e.equals(e2)). If this set already contains the element, the call leaves the set unchanged and returns false. In combination with the restriction on constructors, this ensures that sets never contain duplicate elements.  The stipulation above does not imply that sets must accept all elements; sets may refuse to add any particular element, including null, and throw an exception, as described in the specification for Collection.add. Individual set implementations should clearly document any restrictions on the elements that they may contain.  Specified by: add in interface Collection<E> Parameters: e - element to be added to this set Returns: true if this set did not already contain the specified element Throws: UnsupportedOperationException - if the add operation is not supported by this set ClassCastException - if the class of the specified element prevents it from being added to this set NullPointerException - if the specified element is null and this set does not permit null elements IllegalArgumentException - if some property of the specified element prevents it from being added to this set",1,0,1,1,0,0,0,0,0,0,0,0
"A Map that further provides a total ordering on its keys. The map is  ordered according to the natural ordering of its keys, or by a Comparator  typically provided at sorted map creation time. This order is reflected  when iterating over the sorted map's collection views (returned by the  entrySet, keySet and values methods). Several additional operations are  provided to take advantage of the ordering. (This interface is the map  analogue of SortedSet.)  All keys inserted into a sorted map must implement the Comparable  interface (or be accepted by the specified comparator). Furthermore, all  such keys must be mutually comparable: k1.compareTo(k2) (or  comparator.compare(k1, k2)) must not throw a ClassCastException for any  keys k1 and k2 in the sorted map. Attempts to violate this restriction will  cause the offending method or constructor invocation to throw a  ClassCastException.  Note that the ordering maintained by a sorted map (whether or not an  explicit comparator is provided) must be consistent with equals if the  sorted map is to correctly implement the Map interface. (See the  Comparable interface or Comparator interface for a precise definition of  consistent with equals.) This is so because the Map interface is defined in  terms of the equals operation, but a sorted map performs all key  comparisons using its compareTo (or compare) method, so two keys that are  deemed equal by this method are, from the standpoint of the sorted map,  equal. The behavior of a tree map is well-defined even if its ordering is  inconsistent with equals; it just fails to obey the general contract of the  Map interface.  All general-purpose sorted map implementation classes should provide four  standard constructors: 1) A void (no arguments) constructor, which  creates an empty sorted map sorted according to the natural ordering of its  keys. 2) A constructor with a single argument of type Comparator, which  creates an empty sorted map sorted according to the specified comparator.  3) A constructor with a single argument of type Map, which creates a new  map with the same key-value mappings as its argument, sorted according to  the keys' natural ordering. 4) A constructor with a single argument of type  SortedMap, which creates a new sorted map with the same key-value mappings  and the same ordering as the input sorted map. There is no way to enforce  this recommendation, as interfaces cannot contain constructors.  Note: several methods return submaps with restricted key ranges. Such  ranges are half-open, that is, they include their low endpoint but not  their high endpoint (where applicable). If you need a closed range (which  includes both endpoints), and the key type allows for calculation of the  successor of a given key, merely request the subrange from lowEndpoint to  successor(highEndpoint). For example, suppose that m is a map whose keys  are strings. The following idiom obtains a view containing all of the  key-value mappings in m whose keys are between low and high, inclusive:   SortedMap<String, V> sub = m.subMap(low, high+ 0);  A similar technique can be used to generate an open range (which contains  neither endpoint). The following idiom obtains a view containing all of the  key-value mappings in m whose keys are between low and high, exclusive:   SortedMap<String, V> sub = m.subMap(low+ 0, high);  This interface is a member of the Java Collections Framework.  Since:     1.2 See Also:     Map, TreeMap, SortedSet, Comparator, Comparable, Collection,      ClassCastException",1,1,1,0,1,0,0,1,1,0,1,0
"Tests if this stack is empty.  Returns: true if and only if this stack contains no items; false otherwise.",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the next token in this string tokenizer's string. First, the set of characters considered to be delimiters by this StringTokenizer object is changed to be the characters in the string delim. Then the next token in the string after the current position is returned. The current position is advanced beyond the recognized token. The new delimiter set remains the default after this call.  Parameters: delim - the new delimiters. Returns: the next token, after switching to the new delimiter set. Throws: NoSuchElementException - if there are no more tokens in this tokenizer's string. NullPointerException - if delim is null",1,0,0,0,0,0,0,0,0,0,0,1
"A facility for threads to schedule tasks for future execution in a  background thread. Tasks may be scheduled for one-time execution, or for  repeated execution at regular intervals.  Corresponding to each Timer object is a single background thread that is  used to execute all of the timer's tasks, sequentially. Timer tasks should  complete quickly. If a timer task takes excessive time to complete, it  hogs the timer's task execution thread. This can, in turn, delay the  execution of subsequent tasks, which may bunch up and execute in rapid  succession when (and if) the offending task finally completes.  After the last live reference to a Timer object goes away and all  outstanding tasks have completed execution, the timer's task execution  thread terminates gracefully (and becomes subject to garbage collection).  However, this can take arbitrarily long to occur. By default, the task  execution thread does not run as a daemon thread, so it is capable of  keeping an application from terminating. If a caller wants to terminate a  timer's task execution thread rapidly, the caller should invoke the timer's  cancel method.  If the timer's task execution thread terminates unexpectedly, for example,  because its stop method is invoked, any further attempt to schedule a task  on the timer will result in an IllegalStateException, as if the timer's  cancel method had been invoked.  This class is thread-safe: multiple threads can share a single Timer  object without the need for external synchronization.  This class does not offer real-time guarantees: it schedules tasks using  the Object.wait(long) method.  Implementation note: This class scales to large numbers of concurrently  scheduled tasks (thousands should present no problem). Internally, it uses  a binary heap to represent its task queue, so the cost to schedule a task  is O(log n), where n is the number of concurrently scheduled tasks.  Implementation note: All constructors start a timer thread.  Since:     1.3 See Also:     TimerTask, Object.wait(long)",1,0,0,0,1,0,0,1,0,0,0,0
"The TooManyListenersException Exception is used as part of the Java Event  model to annotate and implement a unicast special case of a multicast Event  Source.  The presence of a throws TooManyListenersException clause on any given  concrete implementation of the normally multicast void  addXyzEventListener event listener registration pattern is used to  annotate that interface as implementing a unicast Listener special case,  that is, that one and only one Listener may be registered on the particular  event listener source concurrently.  Since:     JDK1.1 See Also:     EventObject, EventListener, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Returns true if this set contains no elements.  Specified by: isEmpty in interface Collection<E> Specified by: isEmpty in interface Set<E> Overrides: isEmpty in class AbstractCollection<E> Returns: true if this set contains no elements",0,0,0,0,0,0,0,0,0,0,0,1
"Description copied from interface: NavigableSet Retrieves and removes the first (lowest) element, or returns null if this set is empty.  Specified by: pollFirst in interface NavigableSet<E> Returns: the first element, or null if this set is empty Since: 1.6",1,0,0,0,0,0,0,0,0,0,0,0
"Unchecked exception thrown when an unknown flag is given.  Unless otherwise specified, passing a null argument to any method or  constructor in this class will cause a NullPointerException to be thrown.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the set of flags which contains an unknown flag.  Returns: The flags",1,0,0,0,0,0,0,0,0,0,0,1
"A hashtable-based Map implementation with weak keys. An entry in a  WeakHashMap will automatically be removed when its key is no longer in  ordinary use. More precisely, the presence of a mapping for a given key  will not prevent the key from being discarded by the garbage collector,  that is, made finalizable, finalized, and then reclaimed. When a key has  been discarded its entry is effectively removed from the map, so this class  behaves somewhat differently from other Map implementations.  Both null values and the null key are supported. This class has performance  characteristics similar to those of the HashMap class, and has the same  efficiency parameters of initial capacity and load factor.  Like most collection classes, this class is not synchronized. A  synchronized WeakHashMap may be constructed using the  Collections.synchronizedMap method.  This class is intended primarily for use with key objects whose equals  methods test for object identity using the == operator. Once such a key is  discarded it can never be recreated, so it is impossible to do a lookup of  that key in a WeakHashMap at some later time and be surprised that its  entry has been removed. This class will work perfectly well with key  objects whose equals methods are not based upon object identity, such as  String instances. With such recreatable key objects, however, the automatic  removal of WeakHashMap entries whose keys have been discarded may prove to  be confusing.  The behavior of the WeakHashMap class depends in part upon the actions of  the garbage collector, so several familiar (though not required) Map  invariants do not hold for this class. Because the garbage collector may  discard keys at any time, a WeakHashMap may behave as though an unknown  thread is silently removing entries. In particular, even if you synchronize  on a WeakHashMap instance and invoke none of its mutator methods, it is  possible for the size method to return smaller values over time, for the  isEmpty method to return false and then true, for the containsKey method to  return true and later false for a given key, for the get method to return a  value for a given key but later return null, for the put method to return  null and the remove method to return false for a key that previously  appeared to be in the map, and for successive examinations of the key set,  the value collection, and the entry set to yield successively smaller  numbers of elements.  Each key object in a WeakHashMap is stored indirectly as the referent of a  weak reference. Therefore a key will automatically be removed only after  the weak references to it, both inside and outside of the map, have been  cleared by the garbage collector.  Implementation note: The value objects in a WeakHashMap are held by  ordinary strong references. Thus care should be taken to ensure that value  objects do not strongly refer to their own keys, either directly or  indirectly, since that will prevent the keys from being discarded. Note  that a value object may refer indirectly to its key via the WeakHashMap  itself; that is, a value object may strongly refer to some other key object  whose associated value object, in turn, strongly refers to the key of the  first value object. One way to deal with this is to wrap values themselves  within WeakReferences before inserting, as in: m.put(key, new  WeakReference(value)), and then unwrapping upon each get.  The iterators returned by the iterator method of the collections returned  by all of this class's collection view methods are fail-fast: if the map  is structurally modified at any time after the iterator is created, in any  way except through the iterator's own remove method, the iterator will  throw a ConcurrentModificationException. Thus, in the face of concurrent  modification, the iterator fails quickly and cleanly, rather than risking  arbitrary, non-deterministic behavior at an undetermined time in the  future.  Note that the fail-fast behavior of an iterator cannot be guaranteed as it  is, generally speaking, impossible to make any hard guarantees in the  presence of unsynchronized concurrent modification. Fail-fast iterators  throw ConcurrentModificationException on a best-effort basis. Therefore, it  would be wrong to write a program that depended on this exception for its  correctness: the fail-fast behavior of iterators should be used only to  detect bugs.  This class is a member of the Java Collections Framework.  Since:     1.2 See Also:     HashMap, WeakReference",1,1,1,1,0,1,1,1,1,0,0,1
"Associates the specified value with the specified key in this map. If the map previously contained a mapping for this key, the old value is replaced.  Specified by: put in interface Map<K,V> Overrides: put in class AbstractMap<K,V> Parameters: key - key with which the specified value is to be associated. value - value to be associated with the specified key. Returns: the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)",1,0,0,0,0,0,0,0,0,0,0,1
"A Queue that additionally supports operations that wait for the queue to  become non-empty when retrieving an element, and wait for space to become  available in the queue when storing an element.  BlockingQueue methods come in four forms, with different ways of handling  operations that cannot be satisfied immediately, but may be satisfied at  some point in the future: one throws an exception, the second returns a  special value (either null or false, depending on the operation), the third  blocks the current thread indefinitely until the operation can succeed, and  the fourth blocks for only a given maximum time limit before giving up.  These methods are summarized in the following table:  Throws exception 	Special value 	Blocks 	Times out Insert 	add(e) 	offer(e) 	put(e) 	offer(e, time, unit) Remove 	remove() 	poll() 	take() 	poll(time, unit) Examine 	element() 	peek() 	not applicable 	not applicable  A BlockingQueue does not accept null elements. Implementations throw  NullPointerException on attempts to add, put or offer a null. A null is  used as a sentinel value to indicate failure of poll operations.  A BlockingQueue may be capacity bounded. At any given time it may have a  remainingCapacity beyond which no additional elements can be put without  blocking. A BlockingQueue without any intrinsic capacity constraints always  reports a remaining capacity of Integer.MAX_VALUE.  BlockingQueue implementations are designed to be used primarily for  producer-consumer queues, but additionally support the Collection  interface. So, for example, it is possible to remove an arbitrary element  from a queue using remove(x). However, such operations are in general not  performed very efficiently, and are intended for only occasional use, such  as when a queued message is cancelled.  BlockingQueue implementations are thread-safe. All queuing methods achieve  their effects atomically using internal locks or other forms of concurrency  control. However, the bulk Collection operations addAll, containsAll,  retainAll and removeAll are not necessarily performed atomically unless  specified otherwise in an implementation. So it is possible, for example,  for addAll(c) to fail (throwing an exception) after adding only some of the  elements in c.  A BlockingQueue does not intrinsically support any kind of close or  shutdown operation to indicate that no more items will be added. The  needs and usage of such features tend to be implementation-dependent. For  example, a common tactic is for producers to insert special end-of-stream  or poison objects, that are interpreted accordingly when taken by  consumers.  Usage example, based on a typical producer-consumer scenario. Note that a  BlockingQueue can safely be used with multiple producers and multiple  consumers.   class Producer implements Runnable { private final BlockingQueue queue; Producer(BlockingQueue q) { queue = q; } public void run() { try { while (true) { queue.put(produce()); } } catch (InterruptedException ex) { ... handle ...} } Object produce() { ... } }  class Consumer implements Runnable { private final BlockingQueue queue; Consumer(BlockingQueue q) { queue = q; } public void run() { try { while (true) { consume(queue.take()); } } catch (InterruptedException ex) { ... handle ...} } void consume(Object x) { ... } }  class Setup { void main() { BlockingQueue q = new SomeQueueImplementation(); Producer p = new Producer(q); Consumer c1 = new Consumer(q); Consumer c2 = new Consumer(q); new Thread(p).start(); new Thread(c1).start(); new Thread(c2).start(); } }   Memory consistency effects: As with other concurrent collections, actions  in a thread prior to placing an object into a BlockingQueue happen-before  actions subsequent to the access or removal of that element from the  BlockingQueue in another thread.  This interface is a member of the Java Collections Framework.  Since:     1.5",1,0,0,1,0,0,1,0,1,0,0,0
"Exception indicating that the result of a value-producing task, such as a  FutureTask, cannot be retrieved because the task was cancelled.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"A hash table supporting full concurrency of retrievals and adjustable  expected concurrency for updates. This class obeys the same functional  specification as Hashtable, and includes versions of methods corresponding  to each method of Hashtable. However, even though all operations are  thread-safe, retrieval operations do not entail locking, and there is not  any support for locking the entire table in a way that prevents all access.  This class is fully interoperable with Hashtable in programs that rely on  its thread safety but not on its synchronization details.  Retrieval operations (including get) generally do not block, so may overlap  with update operations (including put and remove). Retrievals reflect the  results of the most recently completed update operations holding upon their  onset. For aggregate operations such as putAll and clear, concurrent  retrievals may reflect insertion or removal of only some entries.  Similarly, Iterators and Enumerations return elements reflecting the state  of the hash table at some point at or since the creation of the  iterator/enumeration. They do not throw ConcurrentModificationException.  However, iterators are designed to be used by only one thread at a time.  The allowed concurrency among update operations is guided by the optional  concurrencyLevel constructor argument (default 16), which is used as a hint  for internal sizing. The table is internally partitioned to try to permit  the indicated number of concurrent updates without contention. Because  placement in hash tables is essentially random, the actual concurrency will  vary. Ideally, you should choose a value to accommodate as many threads as  will ever concurrently modify the table. Using a significantly higher value  than you need can waste space and time, and a significantly lower value can  lead to thread contention. But overestimates and underestimates within an  order of magnitude do not usually have much noticeable impact. A value of  one is appropriate when it is known that only one thread will modify and  all others will only read. Also, resizing this or any other kind of hash  table is a relatively slow operation, so, when possible, it is a good idea  to provide estimates of expected table sizes in constructors.  This class and its views and iterators implement all of the optional  methods of the Map and Iterator interfaces.  Like Hashtable but unlike HashMap, this class does not allow null to be  used as a key or value.  This class is a member of the Java Collections Framework.  Since:     1.5 See Also:     Serialized Form",1,0,1,0,1,0,1,0,0,0,0,0
"A ConcurrentMap supporting NavigableMap operations, and recursively so for  its navigable sub-maps.  This interface is a member of the Java Collections Framework.  Since:     1.6",1,0,0,0,0,0,1,0,0,0,0,0
"If the specified key is not already associated with a value, associate it with the given value. This is equivalent to  if (!map.containsKey(key)) return map.put(key, value); else return map.get(key);  except that the action is performed atomically.  Specified by: putIfAbsent in interface ConcurrentMap<K,V> Parameters: key - key with which the specified value is to be associated value - value to be associated with the specified key Returns: the previous value associated with the specified key, or null if there was no mapping for the key Throws: ClassCastException - if the specified key cannot be compared with the keys currently in the map NullPointerException - if the specified key or value is null",1,0,0,0,0,0,1,1,1,0,0,0
"Description copied from interface: NavigableMap Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports.  The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.  Equivalent to subMap(fromKey, true, toKey, false).  Specified by: subMap in interface ConcurrentNavigableMap<K,V> Specified by: subMap in interface NavigableMap<K,V> Specified by: subMap in interface SortedMap<K,V> Parameters: fromKey - low endpoint (inclusive) of the keys in the returned map toKey - high endpoint (exclusive) of the keys in the returned map Returns: a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive Throws: ClassCastException - if fromKey and toKey cannot be compared to one another using this map's comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromKey or toKey cannot be compared to keys currently in the map. NullPointerException - if fromKey or toKey is null IllegalArgumentException - if fromKey is greater than toKey; or if this map itself has a restricted range, and fromKey or toKey lies outside the bounds of the range",1,0,0,0,0,0,1,0,0,0,0,1
"Description copied from interface: NavigableMap Returns the greatest key less than or equal to the given key, or null if there is no such key.  Specified by: floorKey in interface NavigableMap<K,V> Parameters: key - the key Returns: the greatest key less than or equal to key, or null if there is no such key Throws: ClassCastException - if the specified key cannot be compared with the keys currently in the map NullPointerException - if the specified key is null",1,0,0,0,0,0,0,0,0,0,0,1
"Constructs a new, empty set that orders its elements according to the specified comparator.  Parameters: comparator - the comparator that will be used to order this set. If null, the natural ordering of the elements will be used.",1,0,1,0,0,0,0,0,0,0,1,0
"Removes all of the elements from this set.  Specified by: clear in interface Collection<E> Specified by: clear in interface Set<E> Overrides: clear in class AbstractCollection<E>",1,0,0,0,0,0,0,0,0,0,0,0
"Compares the specified object with this set for equality. Returns true if the specified object is also a set, the two sets have the same size, and every member of the specified set is contained in this set (or equivalently, every member of this set is contained in the specified set). This definition ensures that the equals method works properly across different implementations of the set interface.  Specified by: equals in interface Collection<E> Specified by: equals in interface Set<E> Overrides: equals in class AbstractSet<E> Parameters: o - the object to be compared for equality with this set Returns: true if the specified object is equal to this set See Also: Object.hashCode(), Hashtable",1,0,0,0,0,0,0,0,0,0,0,0
"Returns true if this list contains no elements.  Specified by: isEmpty in interface Collection<E> Specified by: isEmpty in interface List<E> Returns: true if this list contains no elements",1,0,0,0,0,0,0,0,0,0,0,1
"Returns an array containing all of the elements in this set. If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.  The returned array will be safe in that no references to it are maintained by this set. (In other words, this method must allocate a new array even if this set is backed by an array). The caller is thus free to modify the returned array.  This method acts as bridge between array-based and collection-based APIs.  Specified by: toArray in interface Collection<E> Specified by: toArray in interface Set<E> Overrides: toArray in class AbstractCollection<E> Returns: an array containing all the elements in this set",1,0,0,1,1,0,0,0,0,0,0,0
"Waits until all parties have invoked await on this barrier, or the specified waiting time elapses.  If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens:  * The last thread arrives; or * The specified timeout elapses; or * Some other thread interrupts the current thread; or * Some other thread interrupts one of the other waiting threads; or * Some other thread times out while waiting for barrier; or * Some other thread invokes reset() on this barrier.  If the current thread:  * has its interrupted status set on entry to this method; or * is interrupted while waiting then InterruptedException is thrown and the current thread's interrupted status is cleared.  If the specified waiting time elapses then TimeoutException is thrown. If the time is less than or equal to zero, the method will not wait at all.  If the barrier is reset() while any thread is waiting, or if the barrier is broken when await is invoked, or while any thread is waiting, then BrokenBarrierException is thrown.  If any thread is interrupted while waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken state.  If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state.  Parameters: timeout - the time to wait for the barrier unit - the time unit of the timeout parameter Returns: the arrival index of the current thread, where index getParties() - 1 indicates the first to arrive and zero indicates the last to arrive Throws: InterruptedException - if the current thread was interrupted while waiting TimeoutException - if the specified timeout elapses BrokenBarrierException - if another thread was interrupted or timed out while the current thread was waiting, or the barrier was reset, or the barrier was broken when await was called, or the barrier action (if present) failed due an exception",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs an ExecutionException with the specified detail message and cause.  Parameters: message - the detail message cause - the cause (which is saved for later retrieval by the Throwable.getCause() method)",0,0,0,0,0,0,0,1,0,0,0,1
"Factory and utility methods for Executor, ExecutorService,  ScheduledExecutorService, ThreadFactory, and Callable classes defined in  this package. This class supports the following kinds of methods:      * Methods that create and return an ExecutorService set up with       commonly useful configuration settings.     * Methods that create and return a ScheduledExecutorService set up with       commonly useful configuration settings.     * Methods that create and return a wrapped ExecutorService, that       disables reconfiguration by making implementation-specific methods       inaccessible.     * Methods that create and return a ThreadFactory that sets newly       created threads to a known state.     * Methods that create and return a Callable out of other closure-like       forms, so they can be used in execution methods requiring Callable.  Since:     1.5",1,0,0,0,0,0,1,0,0,0,0,0
"Description copied from interface: BlockingDeque Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available.  This method is equivalent to offerLast.  Specified by: offer in interface BlockingDeque<E> Specified by: offer in interface BlockingQueue<E> Parameters: e - the element to add timeout - how long to wait before giving up, in units of unit unit - a TimeUnit determining how to interpret the timeout parameter Returns: true if the element was added to this deque, else false Throws: NullPointerException - if the specified element is null InterruptedException - if interrupted while waiting",1,0,0,0,0,0,0,0,0,0,0,0
"Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).  Specified by: contains in interface Collection<E> Specified by: contains in interface BlockingQueue<E> Overrides: contains in class AbstractCollection<E> Parameters: o - object to be checked for containment in this queue Returns: true if this queue contains the specified element",1,0,0,0,0,0,0,0,0,0,0,1
"A Future that is Runnable. Successful execution of the run method causes  completion of the Future and allows access to its results.  Since:     1.6 See Also:     FutureTask, Executor",0,0,0,0,0,1,0,0,0,0,0,0
"A ThreadPoolExecutor that can additionally schedule commands to run after a  given delay, or to execute periodically. This class is preferable to Timer  when multiple worker threads are needed, or when the additional flexibility  or capabilities of ThreadPoolExecutor (which this class extends) are  required.  Delayed tasks execute no sooner than they are enabled, but without any  real-time guarantees about when, after they are enabled, they will  commence. Tasks scheduled for exactly the same execution time are enabled  in first-in-first-out (FIFO) order of submission.  While this class inherits from ThreadPoolExecutor, a few of the inherited  tuning methods are not useful for it. In particular, because it acts as a  fixed-sized pool using corePoolSize threads and an unbounded queue,  adjustments to maximumPoolSize have no useful effect.  Extension notes: This class overrides AbstractExecutorService submit  methods to generate internal objects to control per-task delays and  scheduling. To preserve functionality, any further overrides of these  methods in subclasses must invoke superclass versions, which effectively  disables additional task customization. However, this class provides  alternative protected extension method decorateTask (one version each for  Runnable and Callable) that can be used to customize the concrete task  types used to execute commands entered via execute, submit, schedule,  scheduleAtFixedRate, and scheduleWithFixedDelay. By default, a  ScheduledThreadPoolExecutor uses a task type extending FutureTask. However,  this may be modified or replaced using subclasses of the form:   public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {  static class CustomTask<V> implements RunnableScheduledFuture<V> { ... }  protected <V> RunnableScheduledFuture<V> decorateTask( Runnable r, RunnableScheduledFuture<V> task) { return new CustomTask<V>(r, task); }  protected <V> RunnableScheduledFuture<V> decorateTask( Callable<V> c, RunnableScheduledFuture<V> task) { return new CustomTask<V>(c, task); } // ... add constructors, etc. }   Since:     1.5",1,0,1,0,1,0,1,0,1,0,1,0
"A blocking queue in which each insert operation must wait for a  corresponding remove operation by another thread, and vice versa. A  synchronous queue does not have any internal capacity, not even a capacity  of one. You cannot peek at a synchronous queue because an element is only  present when you try to remove it; you cannot insert an element (using any  method) unless another thread is trying to remove it; you cannot iterate as  there is nothing to iterate. The head of the queue is the element that the  first queued inserting thread is trying to add to the queue; if there is no  such queued thread then no element is available for removal and poll()  will return null. For purposes of other Collection methods (for example  contains), a SynchronousQueue acts as an empty collection. This queue does  not permit null elements.  Synchronous queues are similar to rendezvous channels used in CSP and Ada.  They are well suited for handoff designs, in which an object running in one  thread must sync up with an object running in another thread in order to  hand it some information, event, or task.  This class supports an optional fairness policy for ordering waiting  producer and consumer threads. By default, this ordering is not guaranteed.  However, a queue constructed with fairness set to true grants threads  access in FIFO order.  This class and its iterator implement all of the optional methods of the  Collection and Iterator interfaces.  This class is a member of the Java Collections Framework.  Since:     1.5 See Also:     Serialized Form",1,1,1,1,1,0,1,1,0,0,1,0
"Adds the specified element to this queue, waiting if necessary for another thread to receive it.  Specified by: put in interface BlockingQueue<E> Parameters: o - the element to add Throws: InterruptedException - if interrupted while waiting NullPointerException - if the specified element is null",1,0,0,0,0,0,0,0,0,0,0,1
"Does nothing. A SynchronousQueue has no internal capacity.  Specified by: clear in interface Collection<E> Overrides: clear in class AbstractQueue<E>",1,0,0,0,0,0,0,0,0,0,0,0
"An object that creates new threads on demand. Using thread factories  removes hardwiring of calls to new Thread, enabling applications to use  special thread subclasses, priorities, etc.  The simplest implementation of this interface is just:   class SimpleThreadFactory implements ThreadFactory { public Thread newThread(Runnable r) { return new Thread(r); } }   The Executors.defaultThreadFactory() method provides a more useful simple  implementation, that sets the created thread context to known values before  returning it.  Since:     1.5",1,0,0,1,0,0,0,1,1,0,0,0
"A handler for rejected tasks that silently discards the rejected task.",1,0,0,0,0,0,0,0,0,0,0,0
"Equivalent to MILLISECONDS.convert(duration, this).  Parameters: duration - the duration Returns: the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow. See Also: convert(long, java.util.concurrent.TimeUnit)",0,0,0,0,0,0,0,0,0,0,0,1
"Equivalent to MINUTES.convert(duration, this).  Parameters: duration - the duration Returns: the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow. Since: 1.6 See Also: convert(long, java.util.concurrent.TimeUnit)",0,0,0,0,0,0,0,0,0,0,0,1
"Performs a timed Thread.join using this time unit. This is a convenience method that converts time arguments into the form required by the Thread.join method.  Parameters: thread - the thread to wait for timeout - the maximum time to wait. If less than or equal to zero, do not wait at all. Throws: InterruptedException - if interrupted while waiting. See Also: Thread.join(long, int)",1,0,0,1,0,0,1,0,0,0,0,0
"An int value that may be updated atomically. See the  java.util.concurrent.atomic package specification for description of the  properties of atomic variables. An AtomicInteger is used in applications  such as atomically incremented counters, and cannot be used as a  replacement for an Integer. However, this class does extend Number to allow  uniform access by tools and utilities that deal with numerically-based  classes.  Since:     1.5 See Also:     Serialized Form",1,0,0,1,0,0,1,0,0,0,0,0
"Creates a new AtomicInteger with the given initial value.  Parameters: initialValue - the initial value",0,0,0,0,0,0,0,0,0,0,0,1
"Atomically increments by one the current value.  Returns: the updated value",1,0,0,0,0,0,0,0,0,0,0,0
"An int array in which elements may be updated atomically. See the  java.util.concurrent.atomic package specification for description of the  properties of atomic variables.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Atomically sets the element at position i to the given updated value if the current value == the expected value.  Parameters: i - the index expect - the expected value update - the new value Returns: true if successful. False return indicates that the actual value was not equal to the expected value.",1,0,0,0,0,0,0,0,0,0,0,1
"A reflection-based utility that enables atomic updates to designated  volatile long fields of designated classes. This class is designed for use  in atomic data structures in which several fields of the same node are  independently subject to atomic updates.  Note that the guarantees of the compareAndSet method in this class are  weaker than in other atomic classes. Because this class cannot ensure that  all uses of the field are appropriate for purposes of atomic access, it can  guarantee atomicity only with respect to other invocations of  compareAndSet and set on the same updater.  Since:     1.5",1,0,0,1,1,0,0,0,0,0,0,0
"Unconditionally sets the value of both the reference and stamp.  Parameters: newReference - the new value for the reference newStamp - the new value for the stamp",1,0,0,0,0,0,0,0,0,0,0,1
"Sets the thread that currently owns exclusive access. A null argument indicates that no thread owns access. This method does not otherwise impose any synchronization or volatile field accesses.",1,0,0,0,0,0,0,0,0,0,0,0
"Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write.  Parameters: expect - the expected value update - the new value Returns: true if successful. False return indicates that the actual value was not equal to the expected value.",1,0,0,0,1,0,0,0,0,0,0,1
"Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued.  In this implementation, this operation normally returns in constant time, but may iterate upon contention if other threads are concurrently modifying the queue.  Returns: the first (longest-waiting) thread in the queue, or null if no threads are currently queued",1,0,0,0,1,0,0,0,0,0,0,0
"Condition factors out the Object monitor methods (wait, notify and  notifyAll) into distinct objects to give the effect of having multiple  wait-sets per object, by combining them with the use of arbitrary Lock  implementations. Where a Lock replaces the use of synchronized methods and  statements, a Condition replaces the use of the Object monitor methods.  Conditions (also known as condition queues or condition variables) provide  a means for one thread to suspend execution (to wait) until notified by  another thread that some state condition may now be true. Because access to  this shared state information occurs in different threads, it must be  protected, so a lock of some form is associated with the condition. The key  property that waiting for a condition provides is that it atomically  releases the associated lock and suspends the current thread, just like  Object.wait.  A Condition instance is intrinsically bound to a lock. To obtain a  Condition instance for a particular Lock instance use its newCondition()  method.  As an example, suppose we have a bounded buffer which supports put and  take methods. If a take is attempted on an empty buffer, then the thread  will block until an item becomes available; if a put is attempted on a full  buffer, then the thread will block until a space becomes available. We  would like to keep waiting put threads and take threads in separate  wait-sets so that we can use the optimization of only notifying a single  thread at a time when items or spaces become available in the buffer. This  can be achieved using two Condition instances.   class BoundedBuffer { final Lock lock = new ReentrantLock(); final Condition notFull  = lock.newCondition();  final Condition notEmpty = lock.newCondition();   final Object[] items = new Object[100]; int putptr, takeptr, count;  public void put(Object x) throws InterruptedException { lock.lock(); try { while (count == items.length) notFull.await(); items[putptr] = x; if (++putptr == items.length) putptr = 0; ++count; notEmpty.signal(); } finally { lock.unlock(); } }  public Object take() throws InterruptedException { lock.lock(); try { while (count == 0) notEmpty.await(); Object x = items[takeptr]; if (++takeptr == items.length) takeptr = 0; --count; notFull.signal(); return x; } finally { lock.unlock(); } } }   (The ArrayBlockingQueue class provides this functionality, so there is no  reason to implement this sample usage class.)  A Condition implementation can provide behavior and semantics that is  different from that of the Object monitor methods, such as guaranteed  ordering for notifications, or not requiring a lock to be held when  performing notifications. If an implementation provides such specialized  semantics then the implementation must document those semantics.  Note that Condition instances are just normal objects and can themselves be  used as the target in a synchronized statement, and can have their own  monitor wait and notification methods invoked. Acquiring the monitor lock  of a Condition instance, or using its monitor methods, has no specified  relationship with acquiring the Lock associated with that Condition or the  use of its waiting and signalling methods. It is recommended that to avoid  confusion you never use Condition instances in this way, except perhaps  within their own implementation.  Except where noted, passing a null value for any parameter will result in a  NullPointerException being thrown.   Implementation Considerations  When waiting upon a Condition, a spurious wakeup is permitted to occur,  in general, as a concession to the underlying platform semantics. This has  little practical impact on most application programs as a Condition should  always be waited upon in a loop, testing the state predicate that is being  waited for. An implementation is free to remove the possibility of spurious  wakeups but it is recommended that applications programmers always assume  that they can occur and so always wait in a loop.  The three forms of condition waiting (interruptible, non-interruptible, and  timed) may differ in their ease of implementation on some platforms and in  their performance characteristics. In particular, it may be difficult to  provide these features and maintain specific semantics such as ordering  guarantees. Further, the ability to interrupt the actual suspension of the  thread may not always be feasible to implement on all platforms.  Consequently, an implementation is not required to define exactly the same  guarantees or semantics for all three forms of waiting, nor is it required  to support interruption of the actual suspension of the thread.  An implementation is required to clearly document the semantics and  guarantees provided by each of the waiting methods, and when an  implementation does support interruption of thread suspension then it must  obey the interruption semantics as defined in this interface.  As interruption generally implies cancellation, and checks for interruption  are often infrequent, an implementation can favor responding to an  interrupt over normal method return. This is true even if it can be shown  that the interrupt occurred after another action may have unblocked the  thread. An implementation should document this behavior.  Since:     1.5",1,0,0,1,1,0,1,1,1,0,0,0
"Lock implementations provide more extensive locking operations than can be  obtained using synchronized methods and statements. They allow more  flexible structuring, may have quite different properties, and may support  multiple associated Condition objects.  A lock is a tool for controlling access to a shared resource by multiple  threads. Commonly, a lock provides exclusive access to a shared resource:  only one thread at a time can acquire the lock and all access to the shared  resource requires that the lock be acquired first. However, some locks may  allow concurrent access to a shared resource, such as the read lock of a  ReadWriteLock.  The use of synchronized methods or statements provides access to the  implicit monitor lock associated with every object, but forces all lock  acquisition and release to occur in a block-structured way: when multiple  locks are acquired they must be released in the opposite order, and all  locks must be released in the same lexical scope in which they were  acquired.  While the scoping mechanism for synchronized methods and statements makes  it much easier to program with monitor locks, and helps avoid many common  programming errors involving locks, there are occasions where you need to  work with locks in a more flexible way. For example, some algorithms for  traversing concurrently accessed data structures require the use of  hand-over-hand or chain locking: you acquire the lock of node A, then  node B, then release A and acquire C, then release B and acquire D and so  on. Implementations of the Lock interface enable the use of such techniques  by allowing a lock to be acquired and released in different scopes, and  allowing multiple locks to be acquired and released in any order.  With this increased flexibility comes additional responsibility. The  absence of block-structured locking removes the automatic release of locks  that occurs with synchronized methods and statements. In most cases, the  following idiom should be used:       Lock l = ...; l.lock(); try { // access the resource protected by this lock } finally { l.unlock(); }   When locking and unlocking occur in different scopes, care must be taken to  ensure that all code that is executed while the lock is held is protected  by try-finally or try-catch to ensure that the lock is released when  necessary.  Lock implementations provide additional functionality over the use of  synchronized methods and statements by providing a non-blocking attempt to  acquire a lock (tryLock()), an attempt to acquire the lock that can be  interrupted (lockInterruptibly(), and an attempt to acquire the lock that  can timeout (tryLock(long, TimeUnit)).  A Lock class can also provide behavior and semantics that is quite  different from that of the implicit monitor lock, such as guaranteed  ordering, non-reentrant usage, or deadlock detection. If an implementation  provides such specialized semantics then the implementation must document  those semantics.  Note that Lock instances are just normal objects and can themselves be used  as the target in a synchronized statement. Acquiring the monitor lock of a  Lock instance has no specified relationship with invoking any of the  lock() methods of that instance. It is recommended that to avoid confusion  you never use Lock instances in this way, except within their own  implementation.  Except where noted, passing a null value for any parameter will result in a  NullPointerException being thrown.   Memory Synchronization  All Lock implementations must enforce the same memory synchronization  semantics as provided by the built-in monitor lock, as described in The  Java Language Specification, Third Edition (17.4 Memory Model):      * A successful lock operation has the same memory synchronization       effects as a successful Lock action.     * A successful unlock operation has the same memory synchronization       effects as a successful Unlock action. Unsuccessful locking and unlocking operations, and reentrant  locking/unlocking operations, do not require any memory synchronization  effects.   Implementation Considerations  The three forms of lock acquisition (interruptible, non-interruptible, and  timed) may differ in their performance characteristics, ordering  guarantees, or other implementation qualities. Further, the ability to  interrupt the ongoing acquisition of a lock may not be available in a given  Lock class. Consequently, an implementation is not required to define  exactly the same guarantees or semantics for all three forms of lock  acquisition, nor is it required to support interruption of an ongoing lock  acquisition. An implementation is required to clearly document the  semantics and guarantees provided by each of the locking methods. It must  also obey the interruption semantics as defined in this interface, to the  extent that interruption of lock acquisition is supported: which is either  totally, or only on method entry.  As interruption generally implies cancellation, and checks for interruption  are often infrequent, an implementation can favor responding to an  interrupt over normal method return. This is true even if it can be shown  that the interrupt occurred after another action may have unblocked the  thread. An implementation should document this behavior.  Since:     1.5 See Also:     ReentrantLock, Condition, ReadWriteLock",1,1,1,0,0,0,1,1,1,0,1,0
"Basic thread blocking primitives for creating locks and other  synchronization classes.  This class associates, with each thread that uses it, a permit (in the  sense of the Semaphore class). A call to park will return immediately if  the permit is available, consuming it in the process; otherwise it may  block. A call to unpark makes the permit available, if it was not already  available. (Unlike with Semaphores though, permits do not accumulate. There  is at most one.)  Methods park and unpark provide efficient means of blocking and unblocking  threads that do not encounter the problems that cause the deprecated  methods Thread.suspend and Thread.resume to be unusable for such purposes:  Races between one thread invoking park and another thread trying to unpark  it will preserve liveness, due to the permit. Additionally, park will  return if the caller's thread was interrupted, and timeout versions are  supported. The park method may also return at any other time, for no  reason, so in general must be invoked within a loop that rechecks  conditions upon return. In this sense park serves as an optimization of a  busy wait that does not waste as much time spinning, but must be paired  with an unpark to be effective.  The three forms of park each also support a blocker object parameter. This  object is recorded while the thread is blocked to permit monitoring and  diagnostic tools to identify the reasons that threads are blocked. (Such  tools may access blockers using method getBlocker(java.lang.Thread).) The  use of these forms rather than the original forms without this parameter is  strongly encouraged. The normal argument to supply as a blocker within a  lock implementation is this.  These methods are designed to be used as tools for creating higher-level  synchronization utilities, and are not in themselves useful for most  concurrency control applications. The park method is designed for use only  in constructions of the form:  while (!canProceed()) { ... LockSupport.park(this); }  where neither canProceed nor any other actions prior to the call to park  entail locking or blocking. Because only one permit is associated with each  thread, any intermediary uses of park could interfere with its intended  effects.  Sample Usage. Here is a sketch of a first-in-first-out non-reentrant lock  class:  class FIFOMutex { private final AtomicBoolean locked = new AtomicBoolean(false); private final Queue<Thread> waiters = new ConcurrentLinkedQueue<Thread>();  public void lock() { boolean wasInterrupted = false; Thread current = Thread.currentThread(); waiters.add(current);  // Block while not first in queue or cannot acquire lock while (waiters.peek() != current || !locked.compareAndSet(false, true)) { LockSupport.park(this); if (Thread.interrupted()) // ignore interrupts while waiting wasInterrupted = true; }  waiters.remove(); if (wasInterrupted)          // reassert interrupt status on exit current.interrupt(); }  public void unlock() { locked.set(false); LockSupport.unpark(waiters.peek()); } }",1,0,1,0,1,0,1,0,1,0,0,0
"Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available.  If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:  * Some other thread invokes unpark with the current thread as the target; or * Some other thread interrupts the current thread; or * The specified waiting time elapses; or * The call spuriously (that is, for no reason) returns.  This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the elapsed time upon return.  Parameters: nanos - the maximum number of nanoseconds to wait",1,0,1,0,0,0,1,0,0,0,0,0
"Queries the number of reentrant read holds on this lock by the current thread. A reader thread has a hold on a lock for each lock action that is not matched by an unlock action.  Returns: the number of holds on the read lock by the current thread, or zero if the read lock is not held by the current thread Since: 1.6",1,0,0,0,0,0,0,0,0,0,0,0
" Name object for Manifest-Version manifest attribute. This attribute indicates the version number of the manifest standard to which a JAR file's manifest conforms.  See Also: Manifest and Signature Specification ",0,0,0,0,0,0,0,0,0,0,0,1
"Returns true if this Map contains the specified attribute name (key).  Specified by: containsKey in interface Map<Object,Object> Parameters: name - the attribute name Returns: true if this Map contains the specified attribute name",1,0,0,0,0,0,0,0,0,0,0,1
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"The JarInputStream class is used to read the contents of a JAR file from  any input stream. It extends the class java.util.zip.ZipInputStream with  support for reading an optional Manifest entry. The Manifest can be used to  store meta-information about the JAR file and its entries.  Since:     1.2 See Also:     Manifest, ZipInputStream",1,0,0,0,0,0,0,0,0,0,0,0
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Creates a new JarEntry (ZipEntry) for the specified JAR file entry name. The manifest attributes of the specified JAR file entry name will be copied to the new JarEntry.  Overrides: createZipEntry in class ZipInputStream Parameters: name - the name of the JAR/ZIP file entry Returns: the JarEntry object just created",1,0,0,0,0,0,0,0,0,0,0,0
"The packer engine applies various transformations to the input JAR file,  making the pack stream highly compressible by a compressor such as gzip or  zip. An instance of the engine can be obtained using Pack200.newPacker().  The high degree of compression is achieved by using a number of techniques  described in the JSR 200 specification. Some of the techniques are sorting,  re-ordering and co-location of the constant pool.  The pack engine is initialized to an initial state as described by their  properties below. The initial state can be manipulated by getting the  engine properties (using properties()) and storing the modified properties  on the map. The resource files will be passed through with no changes at  all. The class files will not contain identical bytes, since the unpacker  is free to change minor class file features such as constant pool order.  However, the class files will be semantically identical, as specified in  the Java Virtual Machine Specification  http://java.sun.com/docs/books/vmspec/html/ClassFile.doc.html.  By default, the packer does not change the order of JAR elements. Also, the  modification time and deflation hint of each JAR element is passed  unchanged. (Any other ZIP-archive information, such as extra attributes  giving Unix file permissions, are lost.)  Note that packing and unpacking a JAR will in general alter the bytewise  contents of classfiles in the JAR. This means that packing and unpacking  will in general invalidate any digital signatures which rely on bytewise  images of JAR elements. In order both to sign and to pack a JAR, you must  first pack and unpack the JAR to normalize it, then compute signatures on  the unpacked JAR elements, and finally repack the signed JAR. Both packing  steps should use precisely the same options, and the segment limit may also  need to be set to -1, to prevent accidental variation of segment  boundaries as class file sizes change slightly.  (Here's why this works: Any reordering the packer does of any classfile  structures is idempotent, so the second packing does not change the  orderings produced by the first packing. Also, the unpacker is guaranteed  by the JSR 200 specification to produce a specific bytewise image for any  given transmission ordering of archive elements.)  In order to maintain backward compatibility, if the input JAR-files are  solely comprised of 1.5 (or lesser) classfiles, a 1.5 compatible pack file  is produced. Otherwise a 1.6 compatible pack200 file is produced.  Since:     1.5",1,0,0,1,0,0,0,1,1,1,1,0
"Simple file logging Handler.  The FileHandler can either write to a specified file, or it can write to a  rotating set of files.  For a rotating set of files, as each file reaches a given size limit, it is  closed, rotated out, and a new file opened. Successively older files are  named by adding 0, 1, 2, etc into the base filename.  By default buffering is enabled in the IO libraries but each log record is  flushed out when it is complete.  By default the XMLFormatter class is used for formatting.  Configuration: By default each FileHandler is initialized using the  following LogManager configuration properties. If properties are not  defined (or have invalid values) then the specified default values are  used.      * java.util.logging.FileHandler.level specifies the default level for       the Handler (defaults to Level.ALL).     * java.util.logging.FileHandler.filter specifies the name of a Filter        class to use (defaults to no Filter).     * java.util.logging.FileHandler.formatter specifies the name of a        Formatter class to use (defaults to java.util.logging.XMLFormatter)     * java.util.logging.FileHandler.encoding the name of the character set       encoding to use (defaults to the default platform encoding).     * java.util.logging.FileHandler.limit specifies an approximate maximum       amount to write (in bytes) to any one file. If this is zero, then       there is no limit. (Defaults to no limit).     * java.util.logging.FileHandler.count specifies how many output files       to cycle through (defaults to 1).     * java.util.logging.FileHandler.pattern specifies a pattern for       generating the output file name. See below for details. (Defaults to       %h/java%u.log).     * java.util.logging.FileHandler.append specifies whether the       FileHandler should append onto any existing files (defaults to       false).  A pattern consists of a string that includes the following special  components that will be replaced at runtime:      * / the local pathname separator     * %t the system temporary directory     * %h the value of the user.home system property     * %g the generation number to distinguish rotated logs     * %u a unique number to resolve conflicts     * %% translates to a single percent sign % If no %g field has been specified and the file count is greater than one,  then the generation number will be added to the end of the generated  filename, after a dot.  Thus for example a pattern of %t/java%g.log with a count of 2 would  typically cause log files to be written on Solaris to /var/tmp/java0.log  and /var/tmp/java1.log whereas on Windows 95 they would be typically  written to C: TEMP java0.log and C: TEMP java1.log  Generation numbers follow the sequence 0, 1, 2, etc.  Normally the %u unique field is set to 0. However, if the FileHandler  tries to open the filename and finds the file is currently in use by  another process it will increment the unique number field and try again.  This will be repeated until FileHandler finds a file name that is not  currently in use. If there is a conflict and no %u field has been  specified, it will be added at the end of the filename after a dot. (This  will be after any automatically added generation number.)  Thus if three processes were all trying to log to fred%u.%g.txt then they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as the first file  in their rotating sequences.  Note that the use of unique ids to avoid conflicts is only guaranteed to  work reliably when using a local disk file system.  Since:     1.4",1,0,0,0,0,0,1,1,1,1,0,0
"Initialize a FileHandler to write to the given filename, with optional append.  The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, the file count is set to one, and the append mode is set to the given append argument.  There is no limit on the amount of data that may be written, so use this with care.  Parameters: pattern - the name of the output file append - specifies append mode Throws: IOException - if there are IO problems opening the files. SecurityException - if a security manager exists and if the caller does not have LoggingPermission(control). IllegalArgumentException - if pattern is an empty string",1,0,0,0,0,0,1,0,0,0,0,0
"The Level class defines a set of standard logging levels that can be used  to control logging output. The logging Level objects are ordered and are  specified by ordered integers. Enabling logging at a given level also  enables logging at all higher levels.  Clients should normally use the predefined Level constants such as  Level.SEVERE.  The levels in descending order are:      * SEVERE (highest value)     * WARNING     * INFO     * CONFIG     * FINE     * FINER     * FINEST (lowest value) In addition there is a level OFF that can be used to turn off logging, and  a level ALL that can be used to enable logging of all messages.  It is possible for third parties to define additional logging levels by  subclassing Level. In such cases subclasses should take care to chose  unique integer level values and to ensure that they maintain the Object  uniqueness property across serialization by defining a suitable readResolve  method.  Since:     1.4 See Also:     Serialized Form",0,1,0,0,1,0,0,0,0,0,0,0
" FINE is a message level providing tracing information.  All of FINE, FINER, and FINEST are intended for relatively detailed tracing. The exact meaning of the three levels will vary between subsystems, but in general, FINEST should be used for the most voluminous detailed output, FINER for somewhat less detailed output, and FINE for the lowest volume (and most important) messages.  In general the FINE level should be used for information that will be broadly interesting to developers who do not have a specialized interest in the specific subsystem.  FINE messages might include things like minor (recoverable) failures. Issues indicating potential performance problems are also worth logging as FINE. This level is initialized to 500. ",1,0,0,1,0,0,1,0,0,0,0,0
"LogRecord objects are used to pass logging requests between the logging  framework and individual log Handlers.  When a LogRecord is passed into the logging framework it logically belongs  to the framework and should no longer be used or updated by the client  application.  Note that if the client application has not specified an explicit source  method name and source class name, then the LogRecord class will infer them  automatically when they are first accessed (due to a call on  getSourceMethodName or getSourceClassName) by analyzing the call stack.  Therefore, if a logging Handler wants to pass off a LogRecord to another  thread, or to transmit it over RMI, and if it wishes to subsequently obtain  method name or class name information it should call one of  getSourceClassName or getSourceMethodName to force the values to be filled  in.  Serialization notes:      * The LogRecord class is serializable.     * Because objects in the parameters array may not be serializable,       during serialization all objects in the parameters array are written       as the corresponding Strings (using Object.toString).     * The ResourceBundle is not transmitted as part of the serialized form,       but the resource bundle name is, and the recipient object's       readObject method will attempt to locate a suitable resource bundle.  Since:     1.4 See Also:     Serialized Form",1,0,1,1,0,0,1,1,0,0,0,0
"Get the parameters to the log message.  Returns: the log message parameters. May be null if there are no parameters.",1,0,0,0,0,0,0,0,0,0,0,0
"Find or create a logger for a named subsystem. If a logger has already been created with the given name it is returned. Otherwise a new logger is created.  If a new logger is created its log level will be configured based on the LogManager and it will configured to also send logging output to its parent loggers Handlers. It will be registered in the LogManager global namespace.  Note: The LogManager may only retain a weak reference to the newly created Logger. It is important to understand that a previously created Logger with the given name may be garbage collected at any time if there is no strong reference to the Logger. In particular, this means that two back-to-back calls like getLogger(MyLogger, ...).log(...) may use different Logger objects named MyLogger if there is no strong reference to the Logger named MyLogger elsewhere in the program.  If the named Logger already exists and does not yet have a localization resource bundle then the given resource bundle name is used. If the named Logger already exists and has a different resource bundle name then an IllegalArgumentException is thrown.  Parameters: name - A name for the logger. This should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as java.net or javax.swing resourceBundleName - name of ResourceBundle to be used for localizing messages for this logger. May be null if none of the messages require localization. Returns: a suitable Logger Throws: MissingResourceException - if the named ResourceBundle cannot be found. IllegalArgumentException - if the Logger already exists and uses a different resource bundle name. NullPointerException - if the name is null.",1,0,1,0,0,0,0,0,1,0,0,0
"Stream based logging Handler.  This is primarily intended as a base class or support class to be used in  implementing other logging Handlers.  LogRecords are published to a given java.io.OutputStream.  Configuration: By default each StreamHandler is initialized using the  following LogManager configuration properties. If properties are not  defined (or have invalid values) then the specified default values are  used.      * java.util.logging.StreamHandler.level specifies the default level for       the Handler (defaults to Level.INFO).     * java.util.logging.StreamHandler.filter specifies the name of a        Filter class to use (defaults to no Filter).     * java.util.logging.StreamHandler.formatter specifies the name of a        Formatter class to use (defaults to        java.util.logging.SimpleFormatter).     * java.util.logging.StreamHandler.encoding the name of the character       set encoding to use (defaults to the default platform encoding).  Since:     1.4",1,0,0,1,0,0,1,1,0,0,0,1
"Set (or change) the character encoding used by this Handler.  The encoding should be set before any LogRecords are written to the Handler.  Overrides: setEncoding in class Handler Parameters: encoding - The name of a supported character encoding. May be null, to indicate the default platform encoding. Throws: SecurityException - if a security manager exists and if the caller does not have LoggingPermission(control). UnsupportedEncodingException - if the named encoding is not supported.",1,0,1,0,0,0,1,0,0,0,0,0
"Implements the put method as per the specification in Preferences.put(String,String).  This implementation checks that the key and value are legal, obtains this preference node's lock, checks that the node has not been removed, invokes putSpi(String,String), and if there are any preference change listeners, enqueues a notification event for processing by the event dispatch thread.  Specified by: put in class Preferences Parameters: key - key with which the specified value is to be associated. value - value to be associated with the specified key. Throws: NullPointerException - if key or value is null. IllegalArgumentException - if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH. IllegalStateException - if this node (or an ancestor) has been removed with the removeNode() method.",1,0,0,0,0,1,0,0,0,0,0,0
"Implements the children method as per the specification in Preferences.childrenNames().  This implementation obtains this preference node's lock, checks that the node has not been removed, constructs a TreeSet initialized to the names of children already cached (the children in this node's child-cache), invokes childrenNamesSpi(), and adds all of the returned child-names into the set. The elements of the tree set are dumped into a String array using the toArray method, and this array is returned.  Specified by: childrenNames in class Preferences Returns: the names of the children of this preference node. Throws: BackingStoreException - if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. IllegalStateException - if this node (or an ancestor) has been removed with the removeNode() method. See Also: cachedChildren()",1,0,0,0,0,1,1,0,0,0,0,0
"Thrown to indicate that a preferences operation could not complete because  of a failure in the backing store, or a failure to contact the backing  store.  Since:     1.4 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs an InvalidPreferencesFormatException with the specified detail message and cause.  Parameters: message - the detail message. The detail message is saved for later retrieval by the Throwable.getMessage() method. cause - the cause (which is saved for later retrieval by the Throwable.getCause() method).",0,0,0,0,0,0,1,0,0,0,0,1
"A listener for receiving preference node change events.  Since:     1.4 See Also:     Preferences, NodeChangeEvent, PreferenceChangeListener",0,0,0,0,0,0,0,0,0,0,0,0
"The result of a match operation.  This interface contains query methods used to determine the results of a  match against a regular expression. The match boundaries, groups and group  boundaries can be seen but not modified through a MatchResult.  Since:     1.5 See Also:     Matcher",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the input subsequence matched by the previous match.  For a matcher m with input sequence s, the expressions m.group() and s.substring(m.start(), m.end()) are equivalent.  Note that some patterns, for example a*, match the empty string. This method will return the empty string when the pattern successfully matches the empty string in the input.  Returns: The (possibly empty) subsequence matched by the previous match, in string form Throws: IllegalStateException - If no match has yet been attempted, or if the previous match operation failed",0,0,0,0,0,0,0,1,1,0,0,0
" Compiles the given regular expression into a pattern with the given flags.  Parameters: regex - The expression to be compiled flags - Match flags, a bit mask that may include CASE_INSENSITIVE, MULTILINE, DOTALL, UNICODE_CASE, CANON_EQ, UNIX_LINES, LITERAL and COMMENTS Throws: IllegalArgumentException - If bit values other than those corresponding to the defined match flags are set in flags PatternSyntaxException - If the expression's syntax is invalid ",1,0,0,0,0,0,1,0,0,0,0,1
"An abstract class for service providers that provide localized currency  symbols for the Currency class. Note that currency symbols are considered  names when determining behaviors described in the LocaleServiceProvider  specification.  Since:     1.6",0,0,0,0,0,0,1,0,0,0,0,0
"Sole constructor. (For invocation by subclass constructors, typically implicit.)",0,0,0,0,0,0,0,0,0,0,0,0
"This class provides support for general purpose compression using the  popular ZLIB compression library. The ZLIB compression library was  initially developed as part of the PNG graphics standard and is not  protected by patents. It is fully described in the specifications at the  java.util.zip package description.  The following code fragment demonstrates a trivial compression and  decompression of a string using Deflater and Inflater.       try { // Encode a String into bytes String inputString = blahblahblah??; byte[] input = inputString.getBytes(UTF-8);  // Compress the bytes byte[] output = new byte[100]; Deflater compresser = new Deflater(); compresser.setInput(input); compresser.finish(); int compressedDataLength = compresser.deflate(output);  // Decompress the bytes Inflater decompresser = new Inflater(); decompresser.setInput(output, 0, compressedDataLength); byte[] result = new byte[100]; int resultLength = decompresser.inflate(result); decompresser.end();  // Decode the bytes into a String String outputString = new String(result, 0, resultLength, UTF-8); } catch(java.io.UnsupportedEncodingException ex) { // handle } catch (java.util.zip.DataFormatException ex) { // handle }   See Also:     Inflater",1,0,0,0,0,0,0,0,1,0,1,0
" Compression strategy best used for data consisting mostly of small values with a somewhat random distribution. Forces more Huffman coding and less string matching.  See Also: Constant Field Values ",1,0,0,0,1,0,0,0,0,0,0,0
"This class implements an output stream filter for compressing data in the  deflate compression format. It is also used as the basis for other types  of compression filters, such as GZIPOutputStream.  See Also:     Deflater",1,0,0,0,0,0,1,0,0,0,0,0
"Creates a new output stream with the specified compressor and a default buffer size.  Parameters: out - the output stream def - the compressor (deflater)",1,0,0,0,0,0,0,0,0,0,0,1
"This class implements a stream filter for writing compressed data in the  GZIP file format.",1,0,0,0,0,0,1,0,0,0,0,0
"Repositions this stream to the position at the time the mark method was last called on this input stream.  The method reset for class InflaterInputStream does nothing except throw an IOException.  Overrides: reset in class FilterInputStream Throws: IOException - if this method is invoked. See Also: InputStream.mark(int), IOException",1,0,0,0,0,0,0,0,0,0,0,1
"Implements an output stream filter for uncompressing data stored in the  deflate compression format.  Since:     1.6 See Also:     InflaterInputStream, DeflaterInputStream, DeflaterOutputStream",1,0,0,0,0,0,0,0,0,0,0,0
"Creates a new output stream with the specified decompressor and a default buffer size.  Parameters: out - output stream to write the uncompressed data to infl - decompressor (inflater) for this stream Throws: NullPointerException - if out or infl is null",1,0,0,0,0,0,0,0,0,0,0,0
"Creates a new output stream with the specified decompressor and buffer size.  Parameters: out - output stream to write the uncompressed data to infl - decompressor (inflater) for this stream bufLen - decompression buffer size Throws: IllegalArgumentException - if bufLen is <= 0 NullPointerException - if out or infl is null",1,0,0,0,0,0,0,0,0,0,0,0
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
"Returns an input stream for reading the contents of the specified zip file entry.  Closing this ZIP file will, in turn, close all input streams that have been returned by invocations of this method.  Parameters: entry - the zip file entry Returns: the input stream for reading the contents of the specified zip file entry. Throws: ZipException - if a ZIP format error has occurred IOException - if an I/O error has occurred IllegalStateException - if the zip file has been closed",1,0,0,0,0,0,0,0,0,0,0,1
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Sets the compression level for subsequent entries which are DEFLATED. The default setting is DEFAULT_COMPRESSION.  Parameters: level - the compression level (0-9) Throws: IllegalArgumentException - if the compression level is invalid",1,0,0,0,0,0,1,0,0,0,0,0
"Interface Accessible is the main interface for the accessibility package.  All components that support the accessibility package must implement this  interface. It contains a single method, getAccessibleContext(), which  returns an instance of the class AccessibleContext.",1,0,1,0,0,0,1,0,0,0,0,0
"Adds a PropertyChangeListener to the listener list. The listener is registered for all Accessible properties and will be called when those properties change.  Parameters: listener - The PropertyChangeListener to be added See Also: ACCESSIBLE_NAME_PROPERTY, ACCESSIBLE_DESCRIPTION_PROPERTY, ACCESSIBLE_STATE_PROPERTY, ACCESSIBLE_VALUE_PROPERTY, ACCESSIBLE_SELECTION_PROPERTY, ACCESSIBLE_TEXT_PROPERTY, ACCESSIBLE_VISIBLE_DATA_PROPERTY",1,0,0,0,0,1,0,0,0,0,0,1
"The AccessibleEditableText interface should be implemented by all classes  that present editable textual information on the display. Along with the  AccessibleText interface, this interface provides the standard mechanism  for an assistive technology to access that text via its content,  attributes, and spatial location. Applications can determine if an object  supports the AccessibleEditableText interface by first obtaining its  AccessibleContext (see Accessible) and then calling the  AccessibleContext.getAccessibleEditableText() method of AccessibleContext.  If the return value is not null, the object supports this interface.  Since:     1.4 See Also:     Accessible, Accessible.getAccessibleContext(), AccessibleContext,      AccessibleContext.getAccessibleText(),      AccessibleContext.getAccessibleEditableText()",1,0,0,0,0,0,1,1,0,0,0,0
"Sets the text contents to the specified string.  Parameters: s - the string to set the text contents",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the tool tip text  Returns: the tool tip text, if supported, of the object; otherwise, null",0,0,0,0,0,0,0,0,0,0,0,1
"The AccessibleExtendedText interface contains additional methods not  provided by the AccessibleText interface Applications can determine if an  object supports the AccessibleExtendedText interface by first obtaining its  AccessibleContext (see Accessible) and then calling the  AccessibleContext.getAccessibleText() method of AccessibleContext. If the  return value is an instance of AccessibleExtendedText, the object supports  this interface.  Since:     1.5 See Also:     Accessible, Accessible.getAccessibleContext(), AccessibleContext,      AccessibleContext.getAccessibleText(),      AccessibleText.AccessibleTextChunk",1,0,0,1,0,0,0,0,0,0,0,0
" Indicates that an object is a subwindow of one or more objects.  Since: 1.5 See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" Indicates that an object has one or more objects embedded in it.  Since: 1.5 See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" Indicates the SUBWINDOW_OF relation between two or more objects has changed.  Since: 1.5 See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
" Indicates the EMBEDDED_BY relation between two or more objects has changed.  Since: 1.5 See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" A specialized pane that has a glass pane and a layered pane as its children.  See Also: GLASS_PANE, LAYERED_PANE ",0,0,0,0,0,0,0,0,0,0,0,0
" A FONT_CHOOSER is a component that lets the user pick various attributes for fonts. ",1,0,0,0,0,0,0,0,0,0,0,0
"The AccessibleStreamable interface should be implemented by the  AccessibleContext of any component that presents the raw stream behind a  component on the display screen. Examples of such components are HTML,  bitmap images and MathML. An object that implements AccessibleStreamable  provides two things: a list of MIME types supported by the object and a  streaming interface for each MIME type to get the data.  Since:     1.5 See Also:     AccessibleContext",0,0,0,0,0,0,1,0,0,0,0,0
"Returns the description of the specified row in the table.  Parameters: r - zero-based row of the table Returns: the description of the row",0,0,0,0,0,0,0,0,0,0,0,1
"The AccessibleTableModelChange interface describes a change to the table  model. The attributes of the model change can be obtained by the following  methods:      * public int getType()     * public int getFirstRow();     * public int getLastRow();     * public int getFirstColumn();     * public int getLastColumn(); The model change type returned by getType() will be one of:     * INSERT - one or more rows and/or columns have been inserted     * UPDATE - some of the table data has changed     * DELETE - one or more rows and/or columns have been deleted The affected area of the table can be determined by the other four methods  which specify ranges of rows and columns  Since:     1.3 See Also:     Accessible, Accessible.getAccessibleContext(), AccessibleContext,      AccessibleContext.getAccessibleTable()",1,0,0,0,0,0,0,0,0,0,0,1
"This class collects together key details of a span of text. It is used by  implementors of the class AccessibleExtendedText in order to return the  requested triplet of a String, and the start and end indicies/offsets into  a larger body of text that the String comes from.  See Also:     AccessibleExtendedText",1,0,0,1,0,0,0,0,0,0,0,0
"JavaBeans components that are Activation Framework aware implement this  interface to find out which command verb they're being asked to perform,  and to obtain the DataHandler representing the data they should operate on.  JavaBeans that don't implement this interface may be used as well. Such  commands may obtain the data using the Externalizable interface, or using  an application-specific method.  Since:     1.6",1,0,0,1,0,0,0,0,0,0,0,0
"MailcapCommandMap extends the CommandMap abstract class. It implements a  CommandMap whose configuration is based on mailcap files (RFC 1524). The  MailcapCommandMap can be configured both programmatically and via  configuration files.  Mailcap file search order:  The MailcapCommandMap looks in various places in the user's system for  mailcap file entries. When requests are made to search for commands in the  MailcapCommandMap, it searches mailcap files in the following order:     1. Programatically added entries to the MailcapCommandMap instance.    2. The file .mailcap in the user's home directory.    3. The file <java.home>/lib/mailcap.    4. The file or resources named META-INF/mailcap.    5. The file or resource named META-INF/mailcap.default (usually found       only in the activation.jar file).  Mailcap file format:  Mailcap files must conform to the mailcap file specification (RFC 1524, A  User Agent Configuration Mechanism For Multimedia Mail Format Information ). The file format consists of entries corresponding to particular MIME  types. In general, the specification specifies applications for clients to  use when they themselves cannot operate on the specified MIME type. The  MailcapCommandMap extends this specification by using a parameter mechanism  in mailcap files that allows JavaBeans(tm) components to be specified as  corresponding to particular commands for a MIME type.  When a mailcap file is parsed, the MailcapCommandMap recognizes certain  parameter signatures, specifically those parameter names that begin with  x-java-. The MailcapCommandMap uses this signature to find command entries  for inclusion into its registries. Parameter names with the form  x-java-<name> are read by the MailcapCommandMap as identifying a command  with the name name. When the name is content-handler the MailcapCommandMap  recognizes the class signified by this parameter as a DataContentHandler.  All other commands are handled generically regardless of command name. The  command implementation is specified by a fully qualified class name of a  JavaBean(tm) component. For example; a command for viewing some data can be  specified as: x-java-view=com.foo.ViewBean.  When the command name is fallback-entry, the value of the command may be  true or false. An entry for a MIME type that includes a parameter of  x-java-fallback-entry=true defines fallback commands for that MIME type  that will only be used if no non-fallback entry can be found. For example,  an entry of the form text/*; ; x-java-fallback-entry=true;  x-java-view=com.sun.TextViewer specifies a view command to be used for any  text MIME type. This view command would only be used if a non-fallback view  command for the MIME type could not be found.  MailcapCommandMap aware mailcap files have the following general form:  \# Comments begin with a '\#' and continue to the end of the line. <mime type>; ; <parameter list> \# Where a parameter list consists of one or more parameters, \# where parameters look like: x-java-view=com.sun.TextViewer \# and a parameter list looks like: text/plain; ; x-java-view=com.sun.TextViewer; x-java-edit=com.sun.TextEdit \# Note that mailcap entries that do not contain 'x-java' parameters \# and comply to RFC 1524 are simply ignored: image/gif; /usr/dt/bin/sdtimage %s  Since:     1.6",1,1,0,0,0,1,1,0,1,0,0,0
"Constructor that builds a MimeType from a String.  Parameters: rawdata - the MIME type string Throws: MimeTypeParseException",0,0,0,0,0,0,0,0,0,0,0,0
"Constructor that builds a MimeType with the given primary and sub type but has an empty parameter list.  Parameters: primary - the primary MIME type sub - the MIME sub-type Throws: MimeTypeParseException - if the primary type or subtype is not a valid token",1,1,0,0,0,0,0,0,0,0,0,0
"Set the value to be associated with the given name, replacing any previous association.  Parameters: name - the parameter name value - the parameter's value",1,0,0,0,0,0,0,0,0,0,0,1
"The URLDataSource class provides an object that wraps a URL object in a  DataSource interface. URLDataSource simplifies the handling of data  described by URLs within the JavaBeans Activation Framework because this  class can be used to create new DataHandlers. NOTE: The DataHandler object  creates a URLDataSource internally, when it is constructed with a URL.  Since:     1.6 See Also:     DataSource, DataHandler",1,0,0,1,0,0,1,0,0,0,0,0
"Signals that the requested operation does not support the requested data  type.  Since:     1.6 See Also:     DataHandler, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"This exception is thrown by a container if Activity context is not received  on a method for which Activity context is mandatory. This exception  indicates a deployment or application configuration error. This exception  will be propagated across ORB boundaries via an  org.omg.CORBA.ACTIVITY_REQUIRED system exception.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs a new throwable with the specified detail message and cause.  Parameters: message - the detail message. cause - a chained exception of type Throwable.",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the text of the suggested completion.  Returns: the text of the suggested completion.",1,0,0,0,0,0,0,0,0,0,0,1
"This interface supports the creation of new files by an annotation  processor. Files created in this way will be known to the annotation  processing tool implementing this interface, better enabling the tool to  manage them. Source and class files so created will be considered for  processing by the tool after the close method has been called on the  Writer or OutputStream used to write the contents of the file. Three kinds  of files are distinguished: source files, class files, and auxiliary  resource files.  There are two distinguished supported locations (subtrees within the  logical file system) where newly created files are placed: one for new  source files, and one for new class files. (These might be specified on a  tool's command line, for example, using flags such as -s and -d.) The  actual locations for new source files and new class files may or may not be  distinct on a particular run of the tool. Resource files may be created in  either location. The methods for reading and writing resources take a  relative name argument. A relative name is a non-null, non-empty sequence  of path segments separated by '/'; '.' and '..' are invalid path segments.  A valid relative name must match the path-rootless rule of RFC 3986,  section 3.3.  The file creation methods take a variable number of arguments to allow the  originating elements to be provided as hints to the tool infrastructure to  better manage dependencies. The originating elements are the types or  packages (representing package-info files) which caused an annotation  processor to attempt to create a new file. For example, if an annotation  processor tries to create a source file, GeneratedFromUserSource, in  response to processing       @Generate public class UserSource {}   the type element for UserSource should be passed as part of the creation  method call as in:       filer.createSourceFile(GeneratedFromUserSource, eltUtils.getTypeElement(UserSource));   If there are no originating elements, none need to be passed. This  information may be used in an incremental environment to determine the need  to rerun processors or remove generated files. Non-incremental environments  may ignore the originating element information.  During each run of an annotation processing tool, a file with a given  pathname may be created only once. If that file already exists before the  first attempt to create it, the old contents will be deleted. Any  subsequent attempt to create the same file during a run will throw a  FilerException, as will attempting to create both a class file and source  file for the same type name or same package name. The initial inputs to the  tool are considered to be created by the zeroth round; therefore,  attempting to create a source or class file corresponding to one of those  inputs will result in a FilerException.  In general, processors must not knowingly attempt to overwrite existing  files that were not generated by some processor. A Filer may reject  attempts to open a file corresponding to an existing type, like  java.lang.Object. Likewise, the invoker of the annotation processing tool  must not knowingly configure the tool such that the discovered processors  will attempt to overwrite existing files that were not generated.  Processors can indicate a source or class file is generated by including an  @Generated annotation.  Note that some of the effect of overwriting a file can be achieved by using  a decorator-style pattern. Instead of modifying a class directly, the class  is designed so that either its superclass is generated by annotation  processing or subclasses of the class are generated by annotation  processing. If the subclasses are generated, the parent class may be  designed to use factories instead of public constructors so that only  subclass instances would be presented to clients of the parent class.  Since:     1.6",1,1,1,1,0,1,1,1,1,0,1,0
"An annotation processing tool framework will provide an annotation  processor with an object implementing this interface so that the processor  can query for information about a round of annotation processing.  Since:     1.6",0,0,0,0,0,0,1,0,0,0,0,0
"An annotation used to indicate what annotation types an annotation  processor supports. The Processor.getSupportedAnnotationTypes() method can  construct its result from the value of this annotation, as done by  AbstractProcessor.getSupportedAnnotationTypes(). Only strings conforming to  the grammar should be used as values.  Since:     1.6  Required Element Summary  String[] 	value                Element Detail   value   public abstract String[] value  Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",0,0,1,0,0,0,1,1,0,0,0,1
" Constant used to indicate the to-be-unwrapped key is a secret key.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Flushes this output stream by forcing any buffered output bytes that have already been processed by the encapsulated cipher object to be written out.  Any bytes buffered by the encapsulated cipher and waiting to be processed by it will not be written out. For example, if the encapsulated cipher is a block cipher, and the total number of bytes written using one of the write methods is less than the cipher's block size, no bytes will be written out.  Specified by: flush in interface Flushable Overrides: flush in class FilterOutputStream Throws: IOException - if an I/O error occurs. Since: JCE1.2 See Also: FilterOutputStream.out",1,0,0,0,0,0,0,0,0,0,0,1
"Constructs an EncryptedPrivateKeyInfo from the encryption algorithm name and the encrypted data.  Note: This constructor will use null as the value of the algorithm parameters. If the encryption algorithm has parameters whose value is not null, a different constructor, e.g. EncryptedPrivateKeyInfo(AlgorithmParameters, byte[]), should be used.  Parameters: algName - encryption algorithm name. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard Cipher algorithm names. encryptedData - encrypted data. The contents of encrypedData are copied to protect against subsequent modification when constructing this object. Throws: NullPointerException - if algName or encryptedData is null. IllegalArgumentException - if encryptedData is empty, i.e. 0-length. NoSuchAlgorithmException - if the specified algName is not supported.",0,0,1,0,0,0,0,0,0,0,0,1
"Creates a ExemptionMechanism object.  Parameters: exmechSpi - the delegate provider - the provider mechanism - the exemption mechanism",0,0,0,0,0,0,0,0,0,0,0,1
"Ensures that the key stored away by this ExemptionMechanism object will be wiped out when there are no more references to it.  Overrides: finalize in class Object",1,0,0,0,0,0,0,0,0,0,0,0
"This exception is thrown when the length of data provided to a block cipher  is incorrect, i.e., does not match the block size of the cipher.  Since:     1.4 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"This class defines the Service Provider Interface (SPI) for the  KeyGenerator class. All the abstract methods in this class must be  implemented by each cryptographic service provider who wishes to supply the  implementation of a key generator for a particular algorithm.  Since:     1.4 See Also:     SecretKey",0,0,1,0,0,0,0,0,0,0,1,0
"Generates a secret key.  Returns: the new key",0,0,0,0,0,0,0,0,0,0,0,1
"This class provides the functionality of a Message Authentication Code  (MAC) algorithm.  A MAC provides a way to check the integrity of information transmitted over  or stored in an unreliable medium, based on a secret key. Typically,  message authentication codes are used between two parties that share a  secret key in order to validate information transmitted between these  parties.  A MAC mechanism that is based on cryptographic hash functions is referred  to as HMAC. HMAC can be used with any cryptographic hash function, e.g.,  MD5 or SHA-1, in combination with a secret shared key. HMAC is specified in  RFC 2104.  Since:     1.4",1,1,0,0,0,0,0,0,0,0,0,0
"This class defines the Service Provider Interface (SPI) for the Mac class.  All the abstract methods in this class must be implemented by each  cryptographic service provider who wishes to supply the implementation of a  particular MAC algorithm.  Implementations are free to implement the Cloneable interface.  Since:     1.4",1,0,1,0,0,0,0,0,0,0,0,0
"A secret (symmetric) key.  This interface contains no methods or constants. Its only purpose is to  group (and provide type safety for) secret keys.  Provider implementations of this interface must overwrite the equals and  hashCode methods inherited from java.lang.Object, so that secret keys are  compared based on their underlying key material and not based on reference.  Keys that implement this interface return the string RAW as their encoding  format (see getFormat), and return the raw key bytes as the result of a  getEncoded method call. (The getFormat and getEncoded methods are inherited  from the java.security.Key parent interface.)  Since:     1.4 See Also:     SecretKeyFactory, Cipher",1,0,1,1,0,0,0,0,0,0,0,0
"Returns the private value, x.  Returns: the private value, x",0,0,0,0,0,0,0,0,0,0,0,1
"The interface to a Diffie-Hellman public key.  Since:     1.4 See Also:     DHKey, DHPrivateKey",0,1,0,0,0,0,0,0,0,0,0,1
"This class specifies a Diffie-Hellman private key with its associated  parameters.  Note that this class does not perform any validation on specified  parameters. Thus, the specified values are returned directly even if they  are null.  Since:     1.4 See Also:     DHPublicKeySpec",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the source of encoding input P.  Returns: the source of encoding input P.",1,0,0,0,0,0,0,0,0,0,0,1
"This class specifies the parameters used with the RC5 algorithm.  The parameters consist of a version number, a rounds count, a word size,  and optionally an initialization vector (IV) (only in feedback mode).  This class can be used to initialize a Cipher object that implements the  RC5 algorithm as supplied by RSA Security Inc., or any parties authorized  by RSA Security.  Since:     1.4",1,1,0,1,0,0,0,0,0,0,1,1
"This class specifies a secret key in a provider-independent fashion.  It can be used to construct a SecretKey from a byte array, without having  to go through a (provider-based) SecretKeyFactory.  This class is only useful for raw secret keys that can be represented as a  byte array and have no key parameters associated with them, e.g., DES or  Triple DES keys.  Since:     1.4 See Also:     SecretKey, SecretKeyFactory, Serialized Form",1,0,0,1,0,0,0,1,0,0,0,0
"Constructs a secret key from the given byte array.  This constructor does not check if the given bytes indeed specify a secret key of the specified algorithm. For example, if the algorithm is DES, this constructor does not check if key is 8 bytes long, and also does not check for weak or semi-weak keys. In order for those checks to be performed, an algorithm-specific key specification class (in this case: DESKeySpec) should be used.  Parameters: key - the key material of the secret key. The contents of the array are copied to protect against subsequent modification. algorithm - the name of the secret-key algorithm to be associated with the given key material. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard algorithm names. Throws: IllegalArgumentException - if algorithm is null or key is null or empty.",1,0,0,0,0,0,0,1,0,0,1,0
"Specifies the offset in the destination image at which future decoded pixels are to be placed, when reading, or where a region will be written, when writing.  When reading, the region to be written within the destination BufferedImage will start at this offset and have a width and height determined by the source region of interest, the subsampling parameters, and the destination bounds.  Normal writes are not affected by this method, only writes performed using ImageWriter.replacePixels. For such writes, the offset specified is within the output stream image whose pixels are being modified.  There is no unsetDestinationOffset method; simply call setDestinationOffset(new Point(0, 0)) to restore default values.  Parameters: destinationOffset - the offset in the destination, as a Point. Throws: IllegalArgumentException - if destinationOffset is null. See Also: getDestinationOffset(), ImageWriter.replacePixels(java.awt.image.RenderedImage, javax.imageio.ImageWriteParam)",1,0,1,0,0,0,1,0,0,0,0,0
"Sets the IIOParamController to be used to provide settings for this IIOParam object when the activateController method is called, overriding any default controller. If the argument is null, no controller will be used, including any default. To restore the default, use setController(getDefaultController()).  Parameters: controller - An appropriate IIOParamController, or null. See Also: IIOParamController, getController(), getDefaultController(), hasController(), activateController()",1,0,0,0,0,1,0,0,0,0,0,1
"Returns an ImageInputStream that will take its input from the given Object. The set of ImageInputStreamSpis registered with the IIORegistry class is queried and the first one that is able to take input from the supplied object is used to create the returned ImageInputStream. If no suitable ImageInputStreamSpi exists, null is returned.  The current cache settings from getUseCacheand getCacheDirectory will be used to control caching.  Parameters: input - an Object to be used as an input source, such as a File, readable RandomAccessFile, or InputStream. Returns: an ImageInputStream, or null. Throws: IllegalArgumentException - if input is null. IOException - if a cache file is needed but cannot be created. See Also: ImageInputStreamSpi",1,0,0,0,0,0,1,0,0,0,0,1
"Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode the named format.  Parameters: formatName - a String containing the informal name of a format ( e.g., jpeg or tiff. Returns: an Iterator containing ImageWriters. Throws: IllegalArgumentException - if formatName is null. See Also: ImageReaderWriterSpi.getFormatNames()",1,0,0,0,0,0,1,0,0,0,0,0
"A class describing how a stream is to be decoded. Instances of this class  or its subclasses are used to supply prescriptive how-to information to  instances of ImageReader.  An image encoded as part of a file or stream may be thought of extending  out in multiple dimensions: the spatial dimensions of width and height, a  number of bands, and a number of progressive decoding passes. This class  allows a contiguous (hyper)rectangular subarea of the image in all of these  dimensions to be selected for decoding. Additionally, the spatial  dimensions may be subsampled discontinuously. Finally, color and format  conversions may be specified by controlling the ColorModel and SampleModel  of the destination image, either by providing a BufferedImage or by using  an ImageTypeSpecifier.  An ImageReadParam object is used to specify how an image, or a set of  images, will be converted on input from a stream in the context of the Java  Image I/O framework. A plug-in for a specific image format will return  instances of ImageReadParam from the getDefaultReadParam method of its  ImageReader implementation.  The state maintained by an instance of ImageReadParam is independent of any  particular image being decoded. When actual decoding takes place, the  values set in the read param are combined with the actual properties of the  image being decoded from the stream and the destination BufferedImage that  will receive the decoded pixel data. For example, the source region set  using setSourceRegion will first be intersected with the actual valid  source area. The result will be translated by the value returned by  getDestinationOffset, and the resulting rectangle intersected with the  actual valid destination area to yield the destination area that will be  written.  The parameters specified by an ImageReadParam are applied to an image as  follows. First, if a rendering size has been set by setSourceRenderSize,  the entire decoded image is rendered at the size given by  getSourceRenderSize. Otherwise, the image has its natural size given by  ImageReader.getWidth and ImageReader.getHeight.  Next, the image is clipped against the source region specified by  getSourceXOffset, getSourceYOffset, getSourceWidth, and getSourceHeight.  The resulting region is then subsampled according to the factors given in  IIOParam.setSourceSubsampling. The first pixel, the number of pixels per  row, and the number of rows all depend on the subsampling settings. Call  the minimum X and Y coordinates of the resulting rectangle (minX, minY),  its width w and its height h.  This rectangle is offset by (getDestinationOffset().x,  getDestinationOffset().y) and clipped against the destination bounds. If no  destination image has been set, the destination is defined to have a width  of getDestinationOffset().x + w, and a height of getDestinationOffset().y  + h so that all pixels of the source region may be written to the  destination.  Pixels that land, after subsampling, within the destination image, and that  are written in one of the progressive passes specified by  getSourceMinProgressivePass and getSourceNumProgressivePasses are passed  along to the next step.  Finally, the source samples of each pixel are mapped into destination bands  according to the algorithm described in the comment for  setDestinationBands.  Plug-in writers may extend the functionality of ImageReadParam by providing  a subclass that implements additional, plug-in specific interfaces. It is  up to the plug-in to document what interfaces are available and how they  are to be used. Readers will silently ignore any extended features of an  ImageReadParam subclass of which they are not aware. Also, they may ignore  any optional features that they normally disable when creating their own  ImageReadParam instances via getDefaultReadParam.  Note that unless a query method exists for a capability, it must be  supported by all ImageReader implementations (e.g. source render size is  optional, but subsampling must be supported).  See Also:     ImageReader, ImageWriter, ImageWriteParam",1,0,0,0,0,1,1,0,0,0,0,0
"Returns the height of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex.  If the reader does not support thumbnails, (readerSupportsThumbnails returns false), an UnsupportedOperationException will be thrown.  The default implementation simply returns readThumbnail(imageindex, thumbnailIndex).getHeight(). Subclasses should therefore override this method if possible in order to avoid forcing the thumbnail to be read.  Parameters: imageIndex - the index of the image to be retrieved. thumbnailIndex - the index of the thumbnail to be retrieved. Returns: the height of the desired thumbnail as an int. Throws: UnsupportedOperationException - if thumbnails are not supported. IllegalStateException - if the input source has not been set. IndexOutOfBoundsException - if either of the supplied indices are out of bounds. IOException - if an error occurs during reading.",1,0,0,0,1,0,1,1,0,0,0,1
"A class that allows the format of an image (in particular, its SampleModel  and ColorModel) to be specified in a convenient manner.",0,0,0,1,0,0,1,0,0,0,0,0
" The height of each tile if tiling has been set, or 0 otherwise. The initial value is 0.  Subclasses that do not support tiling may ignore this value. ",1,0,1,0,0,0,0,0,0,0,0,0
"Returns an array of floats that may be used along with getCompressionQualityDescriptions as part of a user interface for setting or displaying the compression quality level. See getCompressionQualityDescriptions for more information.  If no descriptions are available, null is returned. If null is returned from getCompressionQualityDescriptions, this method must also return null.  If there are multiple compression types but none has been set, an IllegalStateException is thrown.  The default implementation checks that compression is supported and that the compression mode is MODE_EXPLICIT. If so, if getCompressionTypes() is null or getCompressionType() is non-null, it returns null.  Returns: an array of floats indicating the boundaries between the compression quality levels as described by the Strings from getCompressionQualityDescriptions. Throws: UnsupportedOperationException - if the writer does not support compression. IllegalStateException - if the compression mode is not MODE_EXPLICIT. IllegalStateException - if the set of legal compression types is non-null and the current compression type is null. See Also: getCompressionQualityDescriptions()",1,0,0,0,0,0,1,0,0,0,0,0
"Returns true if the writer supports the writing of a complete image stream consisting of a single image with undefined pixel values and associated metadata and thumbnails to the output. The pixel values may be defined by future calls to the replacePixels methods. If the output is an ImageOutputStream, its existing contents prior to the current seek position are not affected, and need not be readable or writable.  The default implementation throws an IllegalStateException if the output is null, and otherwise returns false.  Returns: true if the writing of complete image stream with contents to be defined later is supported. Throws: IllegalStateException - if the output has not been set. IOException - if an I/O error occurs during the query.",1,0,0,0,0,0,1,0,0,0,0,0
"Broadcasts the current percentage of image completion to all registered IIOWriteProgressListeners by calling their imageProgress method. Subclasses may use this method as a convenience.  Parameters: percentageDone - the current percentage of completion, as a float.",1,0,0,0,0,0,0,0,0,0,0,0
"Reports that a given region of a thumbnail image has been updated. The application might choose to redisplay the specified area, for example, in order to provide a progressive display effect, or perform other incremental processing.  Parameters: source - the ImageReader object calling this method. theThumbnail - the BufferedImage thumbnail being updated. minX - the X coordinate of the leftmost updated column of pixels. minY - the Y coordinate of the uppermost updated row of pixels. width - the number of updated pixels horizontally. height - the number of updated pixels vertically. periodX - the horizontal spacing between updated pixels; a value of 1 means no gaps. periodY - the vertical spacing between updated pixels; a value of 1 means no gaps. bands - an array of ints indicating which bands are being updated. See Also: imageUpdate(javax.imageio.ImageReader, java.awt.image.BufferedImage, int, int, int, int, int, int, int[])",1,0,0,0,0,0,0,0,0,0,0,0
"An interface used by ImageWriter implementations to notify callers of their  image writing methods of progress.  See Also:     ImageWriter.write(javax.imageio.metadata.IIOMetadata,     javax.imageio.IIOImage, javax.imageio.ImageWriteParam)",0,0,0,1,0,0,1,0,0,0,0,0
" An IIOMetadataController that is suggested for use as the controller for this IIOMetadata object. It may be retrieved via getDefaultController. To install the default controller, call setController(getDefaultController()). This instance variable should be set by subclasses that choose to provide their own default controller, usually a GUI, for setting parameters.  See Also: IIOMetadataController, getDefaultController() ",1,0,0,0,0,0,0,1,0,0,0,0
"Returns the name of the native metadata format for this plug-in, which typically allows for lossless encoding and transmission of the metadata stored in the format handled by this plug-in. If no such format is supported, nullwill be returned.  The structure and contents of the native metadata format are defined by the plug-in that created this IIOMetadata object. Plug-ins for simple formats will usually create a dummy node for the root, and then a series of child nodes representing individual tags, chunks, or keyword/value pairs. A plug-in may choose whether or not to document its native format.  The default implementation returns the value of the nativeMetadataFormatName instance variable.  Returns: the name of the native format, or null. See Also: getExtraMetadataFormatNames(), getMetadataFormatNames()",1,0,0,0,0,0,0,0,0,0,0,0
"An object describing the structure of metadata documents returned from  IIOMetadata.getAsTree and passed to IIOMetadata.setFromTree and mergeTree.  Document structures are described by a set of constraints on the type and  number of child elements that may belong to a given parent element type,  the names, types, and values of attributes that may belong to an element,  and the type and values of Object reference that may be stored at a node.  N.B: classes that implement this interface should contain a method declared  as public static getInstance() which returns an instance of the class.  Commonly, an implentation will construct only a single instance and cache  it for future invocations of getInstance.  The structures that may be described by this class are a subset of those  expressible using XML document type definitions (DTDs), with the addition  of some basic information on the datatypes of attributes and the ability to  store an Object reference within a node. In the future, XML Schemas could  be used to represent these structures, and many others.  The differences between IIOMetadataFormat-described structures and DTDs are  as follows:      * Elements may not contain text or mix text with embedded tags.     * The children of an element must conform to one of a few simple       patterns, described in the documentation for the CHILD_* constants;     * The in-memory representation of an elements may contain a reference       to an Object. There is no provision for representing such objects       textually.",1,1,1,0,0,0,1,0,0,0,0,0
" A constant returned by getAttributeValueType and getObjectValueType to indicate that the attribute or user object may be set one of a number of enumerated values. In the case of attributes, these values are Strings; for objects, they are Objects implementing a given class or interface.  Attribute values of type DATATYPE_BOOLEAN should be marked as enumerations.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Adds a new attribute to a previously defined element that will be defined by a range of values.  Parameters: elementName - the name of the element. attrName - the name of the attribute being added. dataType - the data type (string format) of the attribute, one of the DATATYPE_* constants. required - true if the attribute must be present. defaultValue - the default value for the attribute, or null. minValue - the smallest (inclusive or exclusive depending on the value of minInclusive) legal value for the attribute, as a String. maxValue - the largest (inclusive or exclusive depending on the value of minInclusive) legal value for the attribute, as a String. minInclusive - true if minValue is inclusive. maxInclusive - true if maxValue is inclusive. Throws: IllegalArgumentException - if elementName is null, or is not a legal element name for this format. IllegalArgumentException - if attrName is null. IllegalArgumentException - if dataType is not one of the predefined constants.",1,0,0,0,0,0,0,0,0,0,0,1
"Allows an Object reference of a given class type to be stored in nodes implementing the named element. The value of the Object must be within the range given by minValue and maxValue. Furthermore, the class type must implement the Comparable interface.  If an Object reference was previously allowed, the previous settings are overwritten.  Parameters: elementName - the name of the element. classType - a Class variable indicating the legal class type for the object value. defaultValue - the default value for the minValue - the smallest (inclusive or exclusive depending on the value of minInclusive) legal value for the object value, as a String. maxValue - the largest (inclusive or exclusive depending on the value of minInclusive) legal value for the object value, as a String. minInclusive - true if minValue is inclusive. maxInclusive - true if maxValue is inclusive. Throws: IllegalArgumentException - if elementName is null, or is not a legal element name for this format.",1,0,1,0,0,0,0,0,0,0,0,1
"Description copied from interface: IIOMetadataFormat Returns the maximum number of array elements that may be used to define the Object reference within the named element. A value of Integer.MAX_VALUE may be used to specify that there is no upper bound. This method should only be called if getObjectValueType returns VALUE_LIST.  Specified by: getObjectArrayMaxLength in interface IIOMetadataFormat Parameters: elementName - the name of the element being queried. Returns: the largest valid array length for the Object reference.",1,0,1,0,0,0,0,1,0,0,0,0
"A subclass of ImageWriteParam for encoding images in the BMP format.  This class allows for the specification of various parameters while writing  a BMP format image file. By default, the data layout is bottom-up, such  that the pixels are stored in bottom-up order, the first scanline being  stored last.  The particular compression scheme to be used can be specified by using the  setCompressionType() method with the appropriate type string. The  compression scheme specified will be honored if and only if it is  compatible with the type of image being written. If the specified  compression scheme is not compatible with the type of image being written  then the IOException will be thrown by the BMP image writer. If the  compression type is not set explicitly then getCompressionType() will  return null. In this case the BMP image writer will select a compression  type that supports encoding of the given image without loss of the color  resolution.  The compression type strings and the image type(s) each supports are listed  in the following table:  Compression Types Type String 	Description 	Image Types BI_RGB 	Uncompressed RLE 	<= 8-bits/sample BI_RLE8 	8-bit Run Length Encoding 	<= 8-bits/sample BI_RLE4 	4-bit Run Length Encoding 	<= 4-bits/sample BI_BITFIELDS 	Packed data 	 16 or 32 bits/sample",1,0,0,1,0,0,0,0,0,0,0,0
"If set, the data will be written out in a top-down manner, the first scanline being written first.  Parameters: topDown - whether the data are written in top-down order.",1,1,0,0,0,0,0,0,0,0,0,0
"This class adds the ability to set JPEG quantization and Huffman tables  when using the built-in JPEG writer plug-in, and to request that optimized  Huffman tables be computed for an image. An instance of this class will be  returned from the getDefaultImageWriteParam methods of the built-in JPEG  ImageWriter.  The principal purpose of these additions is to allow the specification of  tables to use in encoding abbreviated streams. The built-in JPEG writer  will also accept an ordinary ImageWriteParam, in which case the writer will  construct the necessary tables internally.  In either case, the quality setting in an ImageWriteParam has the same  meaning as for the underlying library: 1.00 means a quantization table of  all 1's, 0.75 means the standard, visually lossless quantization table,  and 0.00 means aquantization table of all 255's.  While tables for abbreviated streams are often specified by first writing  an abbreviated stream containing only the tables, in some applications the  tables are fixed ahead of time. This class allows the tables to be  specified directly from client code.  Normally, the tables are specified in the IIOMetadata objects passed in to  the writer, and any tables included in these objects are written to the  stream. If no tables are specified in the metadata, then an abbreviated  stream is written. If no tables are included in the metadata and no tables  are specified in a JPEGImageWriteParam, then an abbreviated stream is  encoded using the standard visually lossless tables. This class is  necessary for specifying tables when an abbreviated stream must be written  without writing any tables to a stream first. In order to use this class,  the metadata object passed into the writer must contain no tables, and no  stream metadata must be provided. See JPEGQTable and JPEGHuffmanTable for  more information on the default tables.  The default JPEGImageWriteParam returned by the getDefaultWriteParam  method of the writer contains no tables. Default tables are included in the  default IIOMetadata objects returned by the writer.  If the metadata does contain tables, the tables given in a  JPEGImageWriteParam are ignored. Furthermore, once a set of tables has been  written, only tables in the metadata can override them for subsequent  writes, whether to the same stream or a different one. In order to specify  new tables using this class, the reset method of the writer must be called.  For more information about the operation of the built-in JPEG plug-ins, see  the JPEG metadata format specification and usage notes.",1,0,0,0,0,1,1,0,0,0,0,0
"Description copied from class: Object Returns a string representation of the object. In general, the toString method returns a string that textually represents this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method.  The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:  getClass().getName() + '@' + Integer.toHexString(hashCode())  Overrides: toString in class Object Returns: a string representation of the object.",1,0,0,1,0,0,0,0,0,0,0,0
"The service provider interface (SPI) for ImageInputStreams. For more  information on service provider interfaces, see the class comment for the  IIORegistry class.  This interface allows arbitrary objects to be wrapped by instances of  ImageInputStream. For example, a particular ImageInputStreamSpi might allow  a generic InputStream to be used as an input source; another might take  input from a URL.  By treating the creation of ImageInputStreams as a pluggable service, it  becomes possible to handle future input sources without changing the API.  Also, high-performance implementations of ImageInputStream (for example,  native implementations for a particular platform) can be installed and used  transparently by applications.  See Also:     IIORegistry, ImageInputStream",1,0,0,1,0,0,0,0,0,0,0,0
"Returns an instance of the ImageOutputStream implementation associated with this service provider. If the use of a cache file is optional, the useCache parameter will be consulted. Where a cache is required, or not applicable, the value of useCache will be ignored.  Parameters: output - an object of the class type returned by getOutputClass. useCache - a boolean indicating whether a cache file should be used, in cases where it is optional. cacheDir - a File indicating where the cache file should be created, or null to use the system directory. Returns: an ImageOutputStream instance. Throws: IllegalArgumentException - if output is not an instance of the correct class or is null. IllegalArgumentException - if a cache file is needed, but cacheDir is non-null and is not a directory. IOException - if a cache file is needed but cannot be created. See Also: getOutputClass()",1,0,0,0,0,0,0,0,0,0,0,0
" A String containing the name of the native stream metadata format supported by this plug-in, initially null. ",0,0,0,0,0,0,0,0,0,0,0,0
"Returns true if the ImageWriter object passed in is an instance of the ImageWriter associated with this service provider.  Parameters: writer - an ImageWriter instance. Returns: true if writer is recognized Throws: IllegalArgumentException - if writer is null.",1,0,0,0,0,0,0,0,0,0,0,0
"A simple filter interface used by ServiceRegistry.getServiceProviders to  select providers matching an arbitrary criterion. Classes that implement  this interface should be defined in order to make use of the  getServiceProviders method of ServiceRegistry that takes a Filter.  See Also:     ServiceRegistry.getServiceProviders(Class, ServiceRegistry.Filter,     boolean)",0,0,1,0,0,0,1,0,0,0,0,0
"An implementation of ImageInputStream that gets its input from a regular  InputStream. A file is used to cache previously read data.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns true if this ImageInputStream caches data itself in order to allow seeking backwards, and the cache is kept in a temporary file. Applications may consult this in order to decide how frequently, or whether, to flush in order to conserve cache resources.  Returns: true if this ImageInputStream caches data in a temporary file. See Also: isCached(), isCachedMemory()",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: ImageInputStream Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, and returns the result as a short value.  The bit offset within the stream is reset to zero before the read occurs.  Specified by: readShort in interface DataInput Specified by: readShort in interface ImageInputStream Returns: a signed short value from the stream. Throws: EOFException - if the stream reaches the end before reading all the bytes. IOException - if an I/O error occurs. See Also: ImageInputStream.getByteOrder()",1,0,0,0,0,0,0,0,0,0,0,0
"A seekable output stream interface for use by ImageWriters. Various output  destinations, such as OutputStreams and Files, as well as future fast I/O  destinations may be wrapped by a suitable implementation of this  interface for use by the Image I/O API.  Unlike a standard OutputStream, ImageOutputStream extends its counterpart,  ImageInputStream. Thus it is possible to read from the stream as it is  being written. The same seek and flush positions apply to both reading and  writing, although the semantics for dealing with a non-zero bit offset  before a byte-aligned write are necessarily different from the semantics  for dealing with a non-zero bit offset before a byte-aligned read. When  reading bytes, any bit offset is set to 0 before the read; when writing  bytes, a non-zero bit offset causes the remaining bits in the byte to be  written as 0s. The byte-aligned write then starts at the next byte  position.  See Also:     ImageInputStream",1,0,0,1,0,0,1,1,0,0,0,0
"Writes the 16 low-order bits of v to the stream. The 16 high-order bits of v are ignored. If the stream uses network byte order, the bytes written, in order, will be:  (byte)((v >> 8) & 0xff) (byte)(v & 0xff)  Otherwise, the bytes written will be:  (byte)(v & 0xff) (byte)((v >> 8) & 0xff)  If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.  Specified by: writeShort in interface DataOutput Parameters: v - an int containing the short value to be written. Throws: IOException - if an I/O error occurs.",1,0,0,0,0,0,0,0,1,0,0,0
"Writes the 32 bits of v to the stream. If the stream uses network byte order, the bytes written, in order, will be:  (byte)((v >> 24) & 0xff) (byte)((v >> 16) & 0xff) (byte)((v >> 8) & 0xff) (byte)(v & 0xff)  Otheriwse, the bytes written will be:  (byte)(v & 0xff) (byte)((v >> 8) & 0xff) (byte)((v >> 16) & 0xff) (byte)((v >> 24) & 0xff)  If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.  Specified by: writeInt in interface DataOutput Parameters: v - an int containing the value to be written. Throws: IOException - if an I/O error occurs.",1,1,0,0,0,0,0,0,1,0,0,0
"Writes two bytes of length information to the output stream in network byte order, followed by the modified UTF-8 representation of every character in the string s. If s is null, a NullPointerException is thrown. Each character in the string s is converted to a group of one, two, or three bytes, depending on the value of the character.  If a character c is in the range  u0001 through  u007f, it is represented by one byte:  (byte)c  If a character c is  u0000 or is in the range  u0080 through  u07ff, then it is represented by two bytes, to be written in the order shown:  (byte)(0xc0 | (0x1f & (c >> 6))) (byte)(0x80 | (0x3f & c))  If a character c is in the range  u0800 through uffff, then it is represented by three bytes, to be written in the order shown:  (byte)(0xe0 | (0x0f & (c >> 12))) (byte)(0x80 | (0x3f & (c >> 6))) (byte)(0x80 | (0x3f & c))  First, the total number of bytes needed to represent all the characters of s is calculated. If this number is larger than 65535, then a UTFDataFormatException is thrown. Otherwise, this length is written to the output stream in exactly the manner of the writeShort method; after this, the one-, two-, or three-byte representation of each character in the string s is written.  The current byte order setting is ignored.  If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.  Note: This method should not be used in the implementation of image formats that use standard UTF-8, because the modified UTF-8 used here is incompatible with standard UTF-8.  Specified by: writeUTF in interface DataOutput Parameters: s - a String containing the value to be written. Throws: NullPointerException - if s is null. UTFDataFormatException - if the modified UTF-8 representation of s requires more than 65536 bytes. IOException - if an I/O error occurs.",1,0,0,0,1,0,1,1,1,0,0,0
"Description copied from interface: ImageOutputStream Writes a sequence of bytes to the stream at the current position. If b.length is 0, nothing is written. The byte b[0] is written first, then the byte b[1], and so on.  If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.  Specified by: write in interface DataOutput Specified by: write in interface ImageOutputStream Parameters: b - an array of bytes to be written. Throws: IOException - if an I/O error occurs.",1,0,0,0,0,0,0,0,0,0,0,1
"Marks a Java class as implementing a Web Service, or a Java interface as  defining a Web Service interface.  Optional Element Summary  String 	endpointInterface           The complete name of the service endpoint interface defining the  service's abstract Web Service contract.  String 	name           The name of the Web Service.  String 	portName           The port name of the Web Service.  String 	serviceName           The service name of the Web Service.  String 	targetNamespace           If the @WebService.targetNamespace annotation is on a service  endpoint interface, the targetNamespace is used for the namespace for the  wsdl:portType (and associated XML elements).  String 	wsdlLocation           The location of a pre-defined WSDL describing the service.     name   public abstract String name      The name of the Web Service.      Used as the name of the wsdl:portType when mapped to WSDL 1.1.      Default:            targetNamespace   public abstract String targetNamespace      If the @WebService.targetNamespace annotation is on a service endpoint     interface, the targetNamespace is used for the namespace for the     wsdl:portType (and associated XML elements).      If the @WebService.targetNamespace annotation is on a service     implementation bean that does NOT reference a service endpoint     interface (through the endpointInterface attribute), the     targetNamespace is used for both the wsdl:portType and the wsdl:service     (and associated XML elements).      If the @WebService.targetNamespace annotation is on a service     implementation bean that does reference a service endpoint interface     (through the endpointInterface attribute), the targetNamespace is used     for only the wsdl:service (and associated XML elements).      Default:            serviceName   public abstract String serviceName      The service name of the Web Service.      Used as the name of the wsdl:service when mapped to WSDL 1.1.      This member-value is not allowed on endpoint interfaces.      Default:            portName   public abstract String portName      The port name of the Web Service.      Used as the name of the wsdl:port when mapped to WSDL 1.1.      This member-value is not allowed on endpoint interfaces.      Since:         2.0     Default:            wsdlLocation   public abstract String wsdlLocation      The location of a pre-defined WSDL describing the service.      The wsdlLocation is a URL (relative or absolute) that refers to a     pre-existing WSDL file. The presence of a wsdlLocation value indicates     that the service implementation bean is implementing a pre-defined WSDL     contract. The JSR-181 tool MUST provide feedback if the service     implementation bean is inconsistent with the portType and bindings     declared in this WSDL. Note that a single WSDL file might contain     multiple portTypes and multiple bindings. The annotations on the     service implementation bean determine the specific portType and     bindings that correspond to the Web Service.      Default:            endpointInterface   public abstract String endpointInterface      The complete name of the service endpoint interface defining the     service's abstract Web Service contract.      This annotation allows the developer to separate the interface contract     from the implementation. If this annotation is present, the service     endpoint interface is used to determine the abstract WSDL contract     (portType and bindings). The service endpoint interface MAY include     JSR-181 annotations to customize the mapping from Java to WSDL.     The service implementation bean MAY implement the service endpoint     interface, but is not REQUIRED to do so.     If this member-value is not present, the Web Service contract is     generated from annotations on the service implementation bean. If a     service endpoint interface is required by the target environment, it     will be generated into an implementation-defined package with an     implementation- defined name      This member-value is not allowed on endpoint interfaces.      Default:          Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,0,0,0,1,0,0,0,0,0
"Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows:  for (SOAPBinding.Style c : SOAPBinding.Style.values())     System.out.println(c);  Returns: an array containing the constants of this enum type, in the order they are declared",1,0,0,0,0,0,0,1,1,0,0,0
"@Deprecated public @interface SOAPMessageHandler   A single SOAP message handler  Required Element Summary  String 	className           Deprecated. Name of the handler class.   Optional Element Summary  String[] 	headers           Deprecated. List of SOAP",0,1,0,0,0,0,0,0,0,0,0,1
"Source versions of the JavaT programming language. See  http://java.sun.com/docs/books/jls/ for information on editions of The  JavaT Language Specification, including updates and clarifications.  Note that additional source version constants will be added to model future  releases of the language.  Since:     1.6",0,0,0,0,0,0,0,0,0,1,1,0
"Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null",1,0,1,0,0,0,0,0,0,0,0,1
"Represents a value of an annotation type element. A value is of one of the  following types:      * a wrapper class (such as Integer) for a primitive type     * String     * TypeMirror     * VariableElement (representing an enum constant)     * AnnotationMirror     * List<? extends AnnotationValue> (representing the elements, in       declared order, if the value is an array)  Since:     1.6",1,0,0,0,0,0,0,0,0,0,0,0
"Visits an array value in an annotation.  Parameters: vals - the value being visited p - a visitor-specified parameter Returns: the result of the visit",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the elements that are, loosely speaking, directly enclosed by this element. A class or interface is considered to enclose the fields, methods, constructors, and member types that it directly declares. This includes any (implicit) default constructor and the implicit values and valueOf methods of an enum type. A package encloses the top-level classes and interfaces within it, but is not considered to enclose subpackages. Other kinds of elements are not currently considered to enclose any elements; however, that may change as this API or the programming language evolves.  Note that elements of certain kinds can be isolated using methods in ElementFilter.  Returns: the enclosed elements, or an empty list if none See Also: Elements.getAllMembers(javax.lang.model.element.TypeElement)",1,0,0,0,0,0,1,0,0,0,0,0
"Visits a variable element.  Parameters: e - the element to visit p - a visitor-specified parameter Returns: a visitor-specified result",0,0,0,0,0,0,0,0,0,0,0,1
"Represents a modifier on a program element such as a class, method, or  field.  Not all modifiers are applicable to all kinds of elements. When two or more  modifiers appear in the source code of an element then it is customary,  though not required, that they appear in the same order as the constants  listed in the detail section below.  Note that it is possible additional modifiers will be added in future  versions of the platform.  Since:     1.6",1,0,0,0,0,0,0,0,0,0,0,0
"Represents a formal type parameter of a generic class, interface, method,  or constructor element. A type parameter declares a TypeVariable.  Since:     1.6 See Also:     TypeVariable",1,0,0,0,0,0,1,0,0,0,0,0
"Represents the type of an executable. An executable is a method,  constructor, or initializer.  The executable is represented as when viewed as a method (or constructor or  initializer) of some reference type. If that reference type is  parameterized, then its actual type arguments are substituted into any  types returned by the methods of this interface.  Since:     1.6 See Also:     ExecutableElement",0,1,0,0,0,0,0,0,0,0,0,1
"Thrown when an application attempts to access a sequence of Class objects  each corresponding to a TypeMirror.  Since:     1.6 See Also:     MirroredTypeException, Element.getAnnotation(Class), Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"Represents a primitive type. These include boolean, byte, short, int, long , char, float, and double.  Since:     1.6",0,0,0,0,0,0,0,0,0,0,0,1
"A convenience method equivalent to v.visit(t, null).  Parameters: t - the element to visit Returns: a visitor-specified result",0,0,0,0,0,0,1,0,0,0,0,1
"Visits a declared type.  Parameters: t - the type to visit p - a visitor-specified parameter Returns: a visitor-specified result",0,0,0,0,0,0,0,0,0,0,0,1
"A visitor of program elements based on their kind with default behavior  appropriate for the RELEASE_6 source version. For elements XYZ that may  have more than one kind, the visitXYZ methods in this class delegate to the  visitXYZKind method corresponding to the first argument's kind. The visit XYZKind methods call defaultAction, passing their arguments to  defaultAction's corresponding parameters.  Methods in this class may be overridden subject to their general contract.  Note that annotating methods in concrete subclasses with @Override will  help ensure that methods are overridden as intended.  WARNING: The ElementVisitor interface implemented by this class may have  methods added to it or the ElementKind enum used in this case may have  constants added to it in the future to accommodate new, currently unknown,  language structures added to future versions of the JavaT programming  language. Therefore, methods whose names begin with visit may be added to  this class in the future; to avoid incompatibilities, classes which extend  this class should not declare any instance methods with names beginning  with visit.  When such a new visit method is added, the default implementation in this  class will be to call the visitUnknown method. A new abstract element kind  visitor class will also be introduced to correspond to the new language  level; this visitor will have different default behavior for the visit  method in question. When the new visitor is introduced, all or portions of  this visitor may be deprecated.  Since:     1.6",1,0,1,0,0,1,0,0,0,1,1,0
"Constructor for concrete subclasses; uses the argument for the default value.  Parameters: defaultValue - the value to assign to SimpleElementVisitor6.DEFAULT_VALUE",1,0,0,0,0,0,0,0,0,0,0,1
"Utility methods for operating on program elements.  Compatibility Note: Methods may be added to this interface in future  releases of the platform.  Since:     1.6 See Also:     ProcessingEnvironment.getElementUtils()",1,0,0,0,0,0,0,0,0,0,0,0
"Return a name with the same sequence of characters as the argument.  Parameters: cs - the character sequence to return as a name",1,0,0,0,0,0,0,0,0,0,0,1
"The default action for visit methods. The implementation in this class just returns DEFAULT_VALUE; subclasses will commonly override this method.  Parameters: o - the value of the annotation p - a visitor-specified parameter Returns: DEFAULT_VALUE unless overridden",1,0,0,0,0,0,0,0,0,0,0,0
"A simple visitor of program elements with default behavior appropriate for  the RELEASE_6 source version. Visit methods corresponding to RELEASE_6  language constructs call defaultAction(javax.lang.model.element.Element, P) , passing their arguments to defaultAction's corresponding parameters.  Methods in this class may be overridden subject to their general contract.  Note that annotating methods in concrete subclasses with @Override will  help ensure that methods are overridden as intended.  WARNING: The ElementVisitor interface implemented by this class may have  methods added to it in the future to accommodate new, currently unknown,  language structures added to future versions of the JavaT programming  language. Therefore, methods whose names begin with visit may be added to  this class in the future; to avoid incompatibilities, classes which extend  this class should not declare any instance methods with names beginning  with visit.  When such a new visit method is added, the default implementation in this  class will be to call the visitUnknown method. A new simple element visitor  class will also be introduced to correspond to the new language level; this  visitor will have different default behavior for the visit method in  question. When the new visitor is introduced, all or portions of this  visitor may be deprecated.  Since:     1.6",0,0,1,0,1,0,0,0,0,0,0,0
"Visits a BOOLEAN primitive type by calling defaultAction.  Parameters: t - the type to visit p - a visitor-specified parameter Returns: the result of defaultAction",1,0,0,0,0,1,1,0,0,0,0,0
"Represents an MBean attribute by associating its name with its value. The  MBean server and other objects use this class to get and set attributes  values.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Provides definitions of the attribute change notifications sent by MBeans.  It's up to the MBean owning the attribute of interest to create and send  attribute change notifications when the attribute change occurs. So the  NotificationBroadcaster interface has to be implemented by any MBean for  which an attribute change is of interest.  Example: If an MBean called myMbean needs to notify registered listeners  when its attribute:      String myString  is modified, myMbean creates and emits the following notification:      new AttributeChangeNotification(myMbean, sequenceNumber, timeStamp,     msg, myString, String, oldValue, newValue);  Since:     1.5 See Also:     Serialized Form",0,0,1,0,0,0,0,0,1,0,0,0
"Gets the old value of the attribute which has changed.  Returns: An Object containing the old value of the attribute.",1,0,0,0,0,0,0,0,0,0,0,1
"Defines the methods that should be implemented by a Dynamic MBean (MBean  that exposes a dynamic management interface).  Since:     1.5",0,1,0,0,0,0,0,0,0,0,0,0
"The MBean is already registered in the repository.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"An exception occurred during the introspection of an MBean.  Since:     1.5 See Also:     Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
"Thrown when an attempt is made to apply either of the following: A subquery  expression to an MBean or a qualified attribute expression to an MBean of  the wrong class. This exception is used internally by JMX during the  evaluation of a query. User code does not usually see it.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
"Constructs an MBeanNotificationInfo object.  Parameters: notifTypes - The array of strings (in dot notation) containing the notification types that the MBean may emit. This may be null with the same effect as a zero-length array. name - The fully qualified Java class name of the described notifications. description - A human readable description of the data.",1,0,0,0,0,0,0,0,0,0,0,1
" Indicates that the operation has an unknown nature.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the impact of the method, one of INFO, ACTION, ACTION_INFO, UNKNOWN.  Returns: the impact code.",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: MBeanServerConnection Instantiates and registers an MBean in the MBean server. The class loader to be used is identified by its object name. An object name is associated to the MBean. If the object name of the loader is not specified, the ClassLoader that loaded the MBean server will be used. If the MBean object name given is null, the MBean must provide its own name by implementing the MBeanRegistration interface and returning the name from the preRegister method.  Specified by: createMBean in interface MBeanServerConnection Parameters: className - The class name of the MBean to be instantiated. name - The object name of the MBean. May be null. loaderName - The object name of the class loader to be used. params - An array containing the parameters of the constructor to be invoked. signature - An array containing the signature of the constructor to be invoked. Returns: An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n) .getClassName(). Throws: ReflectionException - Wraps a java.lang.ClassNotFoundException or a java.lang.Exception that occurred when trying to invoke the MBean's constructor. InstanceAlreadyExistsException - The MBean is already under the control of the MBean server. MBeanRegistrationException - The preRegister (MBeanRegistration interface) method of the MBean has thrown an exception. The MBean will not be registered. MBeanException - The constructor of the MBean has thrown an exception NotCompliantMBeanException - This class is not a JMX compliant MBean InstanceNotFoundException - The specified class loader is not registered in the MBean server.",1,1,0,0,0,0,0,1,0,0,0,0
"Description copied from interface: MBeanServerConnection  Removes a listener from a registered MBean.  If the listener is registered more than once, perhaps with different filters or callbacks, this method will remove all those registrations.  Specified by: removeNotificationListener in interface MBeanServerConnection Parameters: name - The name of the MBean on which the listener should be removed. listener - The listener to be removed. Throws: InstanceNotFoundException - The MBean name provided does not match any of the registered MBeans. ListenerNotFoundException - The listener is not registered in the MBean. See Also: MBeanServerConnection.addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)",1,0,0,0,0,0,0,0,0,0,0,1
"This class represents a builder that creates a default MBeanServer  implementation. The JMX MBeanServerFactory allows applications to provide  their custom MBeanServer implementation by providing a subclass of this  class.  Since:     1.5 See Also:     MBeanServer, MBeanServerFactory",1,0,0,0,0,0,1,0,0,0,0,0
"Return a new object implementing the MBeanServer interface with a standard default domain name. The default domain name is used as the domain part in the ObjectName of MBeans when the domain is specified by the user is null.  The standard default domain name is DefaultDomain.  The MBeanServer reference is internally kept. This will allow findMBeanServer to return a reference to this MBeanServer object.  This method is equivalent to createMBeanServer(null).  Returns: the newly created MBeanServer. Throws: SecurityException - if there is a SecurityManager and the caller's permissions do not include or imply MBeanServerPermission (createMBeanServer). JMRuntimeException - if the property javax.management.builder.initial exists but the class it names cannot be instantiated through a public no-argument constructor; or if the instantiated builder returns null from its newMBeanServerDelegate or newMBeanServer methods. ClassCastException - if the property javax.management.builder.initial exists and can be instantiated but is not assignment compatible with MBeanServerBuilder.",1,0,0,0,0,0,1,0,0,0,0,0
"Exception which occurs when trying to register an object in the MBean  server that is not a JMX compliant MBean.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"The Notification class represents a notification emitted by an MBean. It  contains a reference to the source MBean: if the notification has been  forwarded through the MBean server, and the original source of the  notification was a reference to the emitting MBean object, then the MBean  server replaces it by the MBean's ObjectName. If the listener has  registered directly with the MBean, this is either the object name or a  direct reference to the MBean.  It is strongly recommended that notification senders use the object name  rather than a reference to the MBean object as the source.  The serialVersionUID of this class is -7516092053498031989L.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs a NotificationBroadcasterSupport where each listener is invoked by the thread sending the notification. This constructor is equivalent to NotificationBroadcasterSupport(null, null).",1,0,0,0,0,0,1,0,0,0,0,0
"To be implemented by a any class acting as a notification filter. It allows  a registered notification listener to filter the notifications of interest.  Since:     1.5",0,0,0,0,0,0,0,0,0,0,0,1
"Should be implemented by an object that wants to receive notifications.  Since:     1.5",0,0,0,0,0,0,0,0,0,0,0,0
"Construct an object name with exactly one key property.  Parameters: domain - The domain part of the object name. key - The attribute in the key property of the object name. value - The value in the key property of the object name. Throws: MalformedObjectNameException - The domain, key, or value contains an illegal character, or value does not follow the rules for quoting. NullPointerException - One of the parameters is null.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the domain part.  Returns: The domain.",0,0,0,0,0,0,0,0,0,0,0,1
"Returns an unquoted form of the given String. If q is a String returned by quote(s), then unquote(q).equals(s). If there is no String s for which quote(s).equals(q), then unquote(q) throws an IllegalArgumentException.  These rules imply that there is a one-to-one mapping between quoted and unquoted forms.  Parameters: q - the String to be unquoted. Returns: the unquoted String. Throws: IllegalArgumentException - if q could not have been returned by the quote(java.lang.String) method, for instance if it does not begin and end with a quote (). NullPointerException - if q is null.",1,0,0,0,0,0,1,0,0,0,0,1
"This class is the interface to be implemented by MBeans that are meant to  be persistent. MBeans supporting this interface should call the load method  during construction in order to prime the MBean from the persistent store.  In the case of a ModelMBean, the store method should be called by the  MBeanServer based on the descriptors in the ModelMBean or by the MBean  itself during normal processing of the ModelMBean.  Since:     1.5",0,1,0,0,0,0,0,0,0,0,0,0
"Constructs query object constraints. The static methods provided return  query expressions that may be used in listing and enumerating MBeans.  Individual constraint construction methods allow only appropriate types as  arguments. Composition of calls can construct arbitrary nestings of  constraints, as the following example illustrates:   QueryExp exp = Query.and(Query.gt(Query.attr(age),Query.value(5)), Query.match(Query.attr(name), Query.value(Smith)));   Since:     1.5",0,0,0,1,0,0,0,1,1,0,0,1
" A code representing the div(javax.management.ValueExp, javax.management.ValueExp) expression. This is chiefly of interest for the serialized form of queries.  See Also: Constant Field Values ",0,0,0,1,0,0,0,0,0,0,0,0
"Creates a ReflectionException that wraps the actual java.lang.Exception.  Parameters: e - the wrapped exception.",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the actual RuntimeException thrown.  Returns: the wrapped RuntimeException.",0,0,0,0,0,0,0,0,0,0,0,0
"Represents exceptions raised when a requested service is not supported.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"An MBean whose management interface is determined by reflection on a Java  interface, and that emits notifications.  The following example shows how to use the public constructor  StandardEmitterMBean(implementation, mbeanInterface, emitter) to create an  MBean emitting notifications with any implementation class name Impl, with  a management interface defined (as for current Standard MBeans) by any  interface Intf, and with any implementation of the interface  NotificationEmitter. The example uses the class  NotificationBroadcasterSupport as an implementation of the interface  NotificationEmitter.   MBeanServer mbs; ... final String[] types = new String[] {sun.disc.space,sun.disc.alarm}; final MBeanNotificationInfo info = new MBeanNotificationInfo( types, Notification.class.getName(), Notification about disc info.); final NotificationEmitter emitter = new NotificationBroadcasterSupport(info);  final Intf impl = new Impl(...); final Object mbean = new StandardEmitterMBean( impl, Intf.class, emitter); mbs.registerMBean(mbean, objectName);   Since:     1.6 See Also:     StandardMBean",0,0,0,0,0,0,0,1,1,0,0,0
"Sets the directory used by the library loader for storing native libraries before they are loaded into memory.  Specified by: setLibraryDirectory in interface MLetMBean Parameters: libdir - The directory used by the library loader. Throws: UnsupportedOperationException - if this implementation does not support storing native libraries in this way. See Also: getLibraryDirectory()",1,0,0,0,0,0,0,0,0,0,0,1
"Gets the list of .jar files specified by the ARCHIVE attribute of the MLET tag.  Returns: A comma-separated list of .jar file names.",0,0,0,0,0,0,0,0,0,0,0,0
"Exposes the remote management interface of the MLet MBean.  Since:     1.5",1,0,0,0,0,0,0,0,0,0,0,0
"This class represents the metadata set for a ModelMBean element. A  descriptor is part of the ModelMBeanInfo, ModelMBeanNotificationInfo,  ModelMBeanAttributeInfo, ModelMBeanConstructorInfo, and  ModelMBeanParameterInfo.  A descriptor consists of a collection of fields. Each field is in  fieldname=fieldvalue format. Field names are not case sensitive, case will  be preserved on field values.  All field names and values are not predefined. New fields can be defined  and added by any program. Some fields have been predefined for consistency  of implementation and support by the ModelMBeanInfo,  ModelMBeanAttributeInfo, ModelMBeanConstructorInfo,  ModelMBeanNotificationInfo, ModelMBeanOperationInfo and ModelMBean classes.  The serialVersionUID of this class is -6292969195866300415L.  Since:     1.5 See Also:     Serialized Form",1,0,1,1,0,0,1,0,0,1,1,0
"Constructor taking an exception and a string.  Parameters: e - Exception that we may have caught to reissue as an InvalidTargetObjectTypeException. The message will be used, and we may want to consider overriding the printStackTrace() methods to get data pointing back to original throw stack. s - String value that will be incorporated in message for this exception.",1,0,0,0,0,0,0,0,0,0,0,1
"Description copied from interface: ModelMBeanInfo Returns a ModelMBeanAttributeInfo requested by name.  Specified by: getAttribute in interface ModelMBeanInfo Parameters: inName - The name of the ModelMBeanAttributeInfo to get. If no ModelMBeanAttributeInfo exists for this name null is returned. Returns: the attribute info for the named attribute, or null if there is none. Throws: MBeanException - Wraps a distributed communication Exception. RuntimeOperationsException - Wraps an IllegalArgumentException for a null attribute name.",1,0,0,0,0,0,0,0,0,0,0,1
"This interface must be implemented by the ModelMBeans. An implementation of  this interface must be shipped with every JMX Agent.  Java resources wishing to be manageable instantiate the ModelMBean using  the MBeanServer's createMBean method. The resource then sets the  ModelMBeanInfo (with Descriptors) for the ModelMBean instance. The  attributes and operations exposed via the ModelMBeanInfo for the ModelMBean  are accessible from MBeans, connectors/adaptors like other MBeans. Through  the ModelMBeanInfo Descriptors, values and methods in the managed  application can be defined and mapped to attributes and operations of the  ModelMBean. This mapping can be defined during development in an XML  formatted file or dynamically and programmatically at runtime.  Every ModelMBean which is instantiated in the MBeanServer becomes  manageable: its attributes and operations become remotely accessible  through the connectors/adaptors connected to that MBeanServer. A Java  object cannot be registered in the MBeanServer unless it is a JMX compliant  MBean. By instantiating a ModelMBean, resources are guaranteed that the  MBean is valid.  MBeanException and RuntimeOperationsException must be thrown on every  public method. This allows for wrapping exceptions from distributed  communications (RMI, EJB, etc.). These exceptions do not have to be thrown  by the implementation except in the scenarios described in the  specification and javadoc.  Since:     1.5",0,0,1,1,0,0,1,1,0,0,1,0
"The ModelMBeanOperationInfo object describes a management operation of the  ModelMBean. It is a subclass of MBeanOperationInfo with the addition of an  associated Descriptor and an implementation of the DescriptorAccess  interface.   The fields in the descriptor are defined, but not limited to, the following: name           : operation name descriptorType : must be operation class          : class where method is defined (fully qualified) role           : must be operation, getter, or setter targetObject   : object on which to execute this method targetType     : type of object reference for targetObject. Can be: ObjectReference | Handle | EJBHandle | IOR | RMIReference. value          : cached value for operation currencyTimeLimit : how long cached value is valid lastUpdatedTimeStamp : when cached value was set visibility            : 1-4 where 1: always visible 4: rarely visible presentationString :  xml formatted string to describe how to present operation   The default descriptor will have name, descriptorType, displayName and role  fields set.  Note: because of inconsistencies in previous versions of this  specification, it is recommended not to use negative or zero values for  currencyTimeLimit. To indicate that a cached value is never valid, omit the  currencyTimeLimit field. To indicate that it is always valid, use a very  large number for this field.  The serialVersionUID of this class is 6532732096650090465L.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the attributes, operations, constructors and notifications that this RequiredModelMBean exposes for management.  Specified by: getMBeanInfo in interface DynamicMBean Returns: An instance of ModelMBeanInfo allowing retrieval all attributes, operations, and Notifications of this MBean.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the value of a specific attribute defined for this ModelMBean. The last value returned by an attribute may be cached in the attribute's descriptor. The valid value will be in the 'value' field if there is one. If the 'currencyTimeLimit' field in the descriptor is: * <0 Then the value is not cached and is never valid. The getter method is invoked for the attribute. The 'value' and 'lastUpdatedTimeStamp' fields are cleared. * =0 Then the value is always cached and always valid. The 'value' field is returned. If there is no'value' field then the getter method is invoked for the attribute. The 'lastUpdatedTimeStamp' field and `value' fields are set to the attribute's value and the current time stamp. * >0 Represents the number of seconds that the 'value' field is valid. The 'value' field is no longer valid when 'lastUpdatedTimeStamp' + 'currencyTimeLimit' > Now. o When 'value' is valid, 'value' is returned. o When 'value' is no longer valid then the getter method is invoked for the attribute. The 'lastUpdatedTimeStamp' field and `value' fields are updated.  Note: because of inconsistencies in previous versions of this specification, it is recommended not to use negative or zero values for currencyTimeLimit. To indicate that a cached value is never valid, omit the currencyTimeLimit field. To indicate that it is always valid, use a very large number for this field.  If the 'getMethod' field contains the name of a valid operation descriptor, then the method described by the operation descriptor is executed. The response from the method is returned as the value of the attribute. If the operation fails or the returned value is not compatible with the declared type of the attribute, an exception will be thrown.  If no 'getMethod' field is defined then the default value of the attribute is returned. If the returned value is not compatible with the declared type of the attribute, an exception will be thrown.  The declared type of the attribute is the String returned by MBeanAttributeInfo.getType(). A value is compatible with this type if one of the following is true:  * the value is null; * the declared name is a primitive type name (such as int) and the value is an instance of the corresponding wrapper type (such as java.lang.Integer); * the name of the value's class is identical to the declared name; * the declared name can be loaded by the value's class loader and produces a class to which the value can be assigned.  In this implementation, in every case where the getMethod needs to be called, because the method is invoked through the standard invoke method and thus needs operationInfo, an operation must be specified for that getMethod so that the invocation works correctly.  Specified by: getAttribute in interface DynamicMBean Parameters: attrName - A String specifying the name of the attribute to be retrieved. It must match the name of a ModelMBeanAttributeInfo. Returns: The value of the retrieved attribute from the descriptor 'value' field or from the invocation of the operation in the 'getMethod' field of the descriptor. Throws: AttributeNotFoundException - The specified attribute is not accessible in the MBean. The following cases may result in an AttributeNotFoundException: * No ModelMBeanInfo was found for the Model MBean. * No ModelMBeanAttributeInfo was found for the specified attribute name. * The ModelMBeanAttributeInfo isReadable method returns 'false'. MBeanException - Wraps one of the following Exceptions: * InvalidAttributeValueException: A wrong value type was received from the attribute's getter method or no 'getMethod' field defined in the descriptor for the attribute and no default value exists. * ServiceNotFoundException: No ModelMBeanOperationInfo defined for the attribute's getter method or no descriptor associated with the ModelMBeanOperationInfo or the managed resource is null. * InvalidTargetObjectTypeException The 'targetType' field value is not 'objectReference'. * An Exception thrown by the managed object's getter. ReflectionException - Wraps an Exception thrown while trying to invoke the getter. RuntimeOperationsException - Wraps an IllegalArgumentException: The attribute name in parameter is null. See Also: setAttribute(javax.management.Attribute)",0,0,1,0,1,0,1,0,0,0,0,0
"Defines a monitor MBean designed to observe the values of a counter  attribute.  A counter monitor sends a threshold notification when the value of the  counter reaches or exceeds a threshold known as the comparison level. The  notify flag must be set to true.  In addition, an offset mechanism enables particular counting intervals to  be detected. If the offset value is not zero, whenever the threshold is  triggered by the counter value reaching a comparison level, that comparison  level is incremented by the offset value. This is regarded as taking place  instantaneously, that is, before the count is incremented. Thus, for each  level, the threshold triggers an event notification every time the count  increases by an interval equal to the offset value.  If the counter can wrap around its maximum value, the modulus needs to be  specified. The modulus is the value at which the counter is reset to zero.  If the counter difference mode is used, the value of the derived gauge is  calculated as the difference between the observed counter values for two  successive observations. If this difference is negative, the value of the  derived gauge is incremented by the value of the modulus. The derived gauge  value (V[t]) is calculated using the following method:      * if (counter[t] - counter[t-GP]) is positive then V[t] = counter[t] -       counter[t-GP]     * if (counter[t] - counter[t-GP]) is negative then V[t] = counter[t] -       counter[t-GP] + MODULUS This implementation of the counter monitor requires the observed attribute  to be of the type integer (Byte, Integer, Short, Long).  Since:     1.5",1,1,1,0,0,0,0,0,0,0,0,0
"Gets the derived gauge timestamp of the specified object, if this object is contained in the set of observed MBeans, or 0 otherwise.  Specified by: getDerivedGaugeTimeStamp in interface CounterMonitorMBean Parameters: object - the name of the object whose derived gauge timestamp is to be returned. Returns: The derived gauge timestamp of the specified object.",1,0,0,0,0,0,0,0,0,0,0,1
"Gets the high threshold value common to all observed MBeans.  Specified by: getHighThreshold in interface GaugeMonitorMBean Returns: The high threshold value. See Also: setThresholds(java.lang.Number, java.lang.Number)",1,0,0,0,0,0,0,0,0,0,0,1
" This flag is used to reset the alreadyNotifieds monitor attribute.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Provides definitions of the notifications sent by monitor MBeans.  The notification source and a set of parameters concerning the monitor  MBean's state need to be specified when creating a new object of this  class. The list of notifications fired by the monitor MBeans is the  following:      * Common to all kind of monitors:           o The observed object is not registered in the MBean server.           o The observed attribute is not contained in the observed object.           o The type of the observed attribute is not correct.           o Any exception (except the cases described above) occurs when             trying to get the value of the observed attribute.     * Common to the counter and the gauge monitors:           o The threshold high or threshold low are not of the same type as             the gauge (gauge monitors).           o The threshold or the offset or the modulus are not of the same             type as the counter (counter monitors).     * Counter monitors only:           o The observed attribute has reached the threshold value.     * Gauge monitors only:           o The observed attribute has exceeded the threshold high value.           o The observed attribute has exceeded the threshold low value.     * String monitors only:           o The observed attribute has matched the string to compare             value.           o The observed attribute has differed from the string to             compare value.  Since:     1.5 See Also:     Serialized Form",1,0,1,0,0,0,1,0,0,0,0,0
"Returns the composite type of this composite data instance.  Returns: the type of this CompositeData.",0,0,0,0,0,0,0,0,0,0,0,1
"An InvocationHandler that forwards getter methods to a CompositeData. If  you have an interface that contains only getter methods (such as String  getName() or boolean isActive()) then you can use this class in conjunction  with the Proxy class to produce an implementation of the interface where  each getter returns the value of the corresponding item in a CompositeData .  For example, suppose you have an interface like this:       public interface NamedNumber { public int getNumber(); public String getName(); }   and a CompositeData constructed like this:       CompositeData cd = new CompositeDataSupport( someCompositeType, new String[] {number, name}, new Object[] {5, five} );   then you can construct an object implementing NamedNumber and backed by the  object cd like this:       InvocationHandler handler = new CompositeDataInvocationHandler(cd); NamedNumber nn = (NamedNumber) Proxy.newProxyInstance(NamedNumber.class.getClassLoader(), new Class[] {NamedNumber.class}, handler);   A call to nn.getNumber() will then return 5.  If the first letter of the property defined by a getter is a capital, then  this handler will look first for an item in the CompositeData beginning  with a capital, then, if that is not found, for an item beginning with the  corresponding lowercase letter or code point. For a getter called  getNumber(), the handler will first look for an item called Number, then  for number. If the getter is called getnumber(), then the item must be  called number.  If the method given to invoke is the method boolean equals(Object)  inherited from Object, then it will return true if and only if the argument  is a Proxy whose InvocationHandler is also a  CompositeDataInvocationHandler and whose backing CompositeData is equal  (not necessarily identical) to this object's. If the method given to  invoke is the method int hashCode() inherited from Object, then it will  return a value that is consistent with this definition of equals: if two  objects are equal according to equals, then they will have the same  hashCode.  Since:     1.6",1,0,0,0,0,1,1,1,1,0,0,0
"Description copied from interface: InvocationHandler Processes a method invocation on a proxy instance and returns the result. This method will be invoked on an invocation handler when a method is invoked on a proxy instance that it is associated with.  Specified by: invoke in interface InvocationHandler Parameters: proxy - the proxy instance that the method was invoked on method - the Method instance corresponding to the interface method invoked on the proxy instance. The declaring class of the Method object will be the interface that the method was declared in, which may be a superinterface of the proxy interface that the proxy class inherits the method through. args - an array of objects containing the values of the arguments passed in the method invocation on the proxy instance, or null if interface method takes no arguments. Arguments of primitive types are wrapped in instances of the appropriate primitive wrapper class, such as java.lang.Integer or java.lang.Boolean. Returns: the value to return from the method invocation on the proxy instance. If the declared return type of the interface method is a primitive type, then the value returned by this method must be an instance of the corresponding primitive wrapper class; otherwise, it must be a type assignable to the declared return type. If the value returned by this method is null and the interface method's return type is primitive, then a NullPointerException will be thrown by the method invocation on the proxy instance. If the value returned by this method is otherwise not compatible with the interface method's declared return type as described above, a ClassCastException will be thrown by the method invocation on the proxy instance. Throws: Throwable - the exception to throw from the method invocation on the proxy instance. The exception's type must be assignable either to any of the exception types declared in the throws clause of the interface method or to the unchecked exception types java.lang.RuntimeException or java.lang.Error. If a checked exception is thrown by this method that is not assignable to any of the exception types declared in the throws clause of the interface method, then an UndeclaredThrowableException containing the exception that was thrown by this method will be thrown by the method invocation on the proxy instance. See Also: UndeclaredThrowableException",1,0,1,0,0,1,1,0,0,0,0,0
"This runtime exception is thrown to indicate that a method parameter which  was expected to be an item name of a composite data or a row index of a  tabular data is not valid.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the open type for the values of the attribute described by this OpenMBeanAttributeInfoSupport instance.  Specified by: getOpenType in interface OpenMBeanParameterInfo Returns: the open type.",1,0,0,0,0,0,1,0,0,0,0,1
"Describes a constructor of an Open MBean.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"The OpenMBeanInfoSupport class describes the management information of an  open MBean: it is a subclass of MBeanInfo, and it implements the  OpenMBeanInfo interface. Note that an open MBean is recognized as such if  its getMBeanInfo() method returns an instance of a class which implements  the OpenMBeanInfo interface, typically OpenMBeanInfoSupport.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the hash code value for this OpenMBeanOperationInfo instance.  The hash code of an OpenMBeanOperationInfo instance is the sum of the hash codes of all elements of information used in equals comparisons (ie: its name, return open type, impact and signature, where the signature hashCode is calculated by a call to java.util.Arrays.asList(this.getSignature).hashCode()).  This ensures that t1.equals(t2) implies that t1.hashCode()==t2.hashCode() for any two OpenMBeanOperationInfo instances t1 and t2, as required by the general contract of the method Object.hashCode().  Overrides: hashCode in class Object Returns: the hash code value for this OpenMBeanOperationInfo instance See Also: Object.equals(java.lang.Object), Hashtable",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the default value for the parameter described by this OpenMBeanParameterInfoSupport instance, if specified, or null otherwise.  Specified by: getDefaultValue in interface OpenMBeanParameterInfo Returns: the default value.",1,0,0,0,0,0,0,0,0,0,0,1
"The OpenType class is the parent abstract class of all classes which  describe the actual open type of open data values.  An open type is defined by:      * the fully qualified Java class name of the open data values this type       describes; note that only a limited set of Java classes is allowed       for open data values (see ALLOWED_CLASSNAMES_LIST),     * its name,     * its description.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Returns true if and only if this TabularData instance contains a CompositeData value (ie a row) whose index is the specified key. If key cannot be cast to a one dimension array of Object instances, this method simply returns false; otherwise it returns the the result of the call to this.containsKey((Object[]) key).  Specified by: containsKey in interface Map<Object,Object> Parameters: key - the index value whose presence in this TabularData instance is to be tested. Returns: true if this TabularData indexes a row value with the specified key.",1,0,0,0,0,0,1,0,0,0,0,1
"Tests whether obj is a value which could be described by this TabularType instance.  If obj is null or is not an instance of javax.management.openmbean.TabularData, isValue returns false.  If obj is an instance of javax.management.openmbean.TabularData, say td, the result is true if this TabularType is assignable from td.getTabularType(), as defined in CompositeType.isValue.  Specified by: isValue in class OpenType<TabularData> Parameters: obj - the value whose open type is to be tested for compatibility with this TabularType instance. Returns: true if obj is a value for this tabular type, false otherwise.",1,0,0,0,0,0,1,0,0,0,0,1
"This exception is raised when, in a role info, its minimum degree is  greater than its maximum degree.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"This interface has to be implemented by any MBean class expected to  represent a relation managed using the Relation Service.  Simple relations, i.e. having only roles, no properties or methods, can be  created directly by the Relation Service (represented as RelationSupport  objects, internally handled by the Relation Service).  If the user wants to represent more complex relations, involving properties  and/or methods, he has to provide his own class implementing the Relation  interface. This can be achieved either by inheriting from RelationSupport  class, or by implementing the interface (fully or delegation to a  RelationSupport object member).  Specifying such user relation class is to introduce properties and/or  methods. Those have to be exposed for remote management. So this means that  any user relation class must be a MBean class.  Since:     1.5",1,0,1,0,0,0,1,0,0,0,0,0
"Returns the number of MBeans currently referenced in the given role.  Parameters: roleName - name of role Returns: the number of currently referenced MBeans in that role Throws: IllegalArgumentException - if null role name RoleNotFoundException - if there is no role with given name",1,0,0,0,0,0,0,0,0,0,0,1
"Sends a notification (RelationNotification) for a role update in the given relation. The notification type is:  - RelationNotification.RELATION_BASIC_UPDATE if the relation is an object internal to the Relation Service  - RelationNotification.RELATION_MBEAN_UPDATE if the relation is a MBean added as a relation.  The source object is the Relation Service itself.  It is called in relation MBean setRole() (for given role) and setRoles() (for each role) methods (implementation provided in RelationSupport class).  It is also called in Relation Service setRole() (for given role) and setRoles() (for each role) methods.  Specified by: sendRoleUpdateNotification in interface RelationServiceMBean Parameters: relationId - relation identifier of the updated relation newRole - new role (name and new value) oldValue - old role value (List of ObjectName objects) Throws: IllegalArgumentException - if null parameter RelationNotFoundException - if there is no relation for given relation id",1,0,0,0,0,0,1,0,0,0,0,0
"Removes given relation from the Relation Service.  A RelationNotification notification is sent, its type being:  - RelationNotification.RELATION_BASIC_REMOVAL if the relation was only internal to the Relation Service  - RelationNotification.RELATION_MBEAN_REMOVAL if the relation is registered as an MBean.  For MBeans referenced in such relation, nothing will be done,  Parameters: relationId - relation id of the relation to be removed Throws: RelationServiceNotRegisteredException - if the Relation Service is not registered in the MBean Server IllegalArgumentException - if null parameter RelationNotFoundException - if no relation corresponding to given relation id",1,0,0,0,0,1,0,0,0,0,0,0
"A RelationSupport object is used internally by the Relation Service to  represent simple relations (only roles, no properties or methods), with an  unlimited number of roles, of any relation type. As internal  representation, it is not exposed to the user.  RelationSupport class conforms to the design patterns of standard MBean. So  the user can decide to instantiate a RelationSupport object himself as a  MBean (as it follows the MBean design patterns), to register it in the  MBean Server, and then to add it in the Relation Service.  The user can also, when creating his own MBean relation class, have it  extending RelationSupport, to retrieve the implementations of required  interfaces (see below).  It is also possible to have in a user relation MBean class a member being a  RelationSupport object, and to implement the required interfaces by  delegating all to this member.  RelationSupport implements the Relation interface (to be handled by the  Relation Service).  It implements also the MBeanRegistration interface to be able to retrieve  the MBean Server where it is registered (if registered as a MBean) to  access to its Relation Service.  Since:     1.5",0,0,0,1,0,0,1,1,0,0,0,0
"Specifies whether this relation is handled by the Relation Service.  BEWARE, this method has to be exposed as the Relation Service will access the relation through its management interface. It is RECOMMENDED NOT to use this method. Using it does not affect the registration of the relation object in the Relation Service, but will provide wrong information about it!  Parameters: flag - whether the relation is handled by the Relation Service. Throws: IllegalArgumentException - if null parameter",1,0,1,0,0,0,0,0,0,0,0,0
"Represents a role: includes a role name and referenced MBeans (via their  ObjectNames). The role value is always represented as an ArrayList  collection (of ObjectNames) to homogenize the access.  The serialVersionUID of this class is -279985518429862552L.  Since:     1.5 See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"A RoleInfo object summarises a role in a relation type.  The serialVersionUID of this class is 2504952983494636987L.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Default constructor, no message put in exception.",0,0,0,0,0,0,0,0,0,0,0,0
"Constructor.  Parameters: list - list of roles successfully accessed. unresolvedList - list of roles not accessed (with problem descriptions).",0,1,0,0,0,0,0,0,0,0,0,1
"This class describes the various problems which can be encountered when  accessing a role.  Since:     1.5",0,0,0,0,0,0,0,0,0,0,0,0
"Description copied from class: ArrayList Replaces the element at the specified position in this list with the specified element.  Specified by: set in interface List<Object> Overrides: set in class ArrayList<Object> Parameters: index - index of the element to replace element - element to be stored at the specified position Returns: the element previously at the specified position",0,0,0,0,0,0,0,0,0,0,0,1
"Notification emitted when a client connection is opened or closed or when  notifications are lost. These notifications are sent by connector servers  (instances of JMXConnectorServer) and by connector clients (instances of  JMXConnector). For certain connectors, a session can consist of a sequence  of connections. Connection-opened and connection-closed notifications will  be sent for each one.  The notification type is one of the following:  Type 	Meaning jmx.remote.connection.opened 	A new client connection has been opened. jmx.remote.connection.closed 	A client connection has been closed. jmx.remote.connection.failed 	A client connection has failed unexpectedly. jmx.remote.connection.notifs.lost 	A client connection has potentially lost  notifications. This notification only appears on the client side.  The timeStamp of the notification is a time value (consistent with  System.currentTimeMillis()) indicating when the notification was  constructed.  Since:     1.5 See Also:     Serialized Form",1,1,0,0,0,1,1,0,0,0,0,0
"Establishes the connection to the connector server. This method is equivalent to connect(null).  Throws: IOException - if the connection could not be made because of a communication problem. SecurityException - if the connection could not be made for security reasons.",0,0,0,0,0,0,1,0,0,0,0,0
"Factory to create JMX API connector clients. There are no instances of this  class.  Connections are usually made using the connect method of this class. More  advanced applications can separate the creation of the connector client,  using newJMXConnector and the establishment of the connection itself, using  JMXConnector.connect(Map).  Each client is created by an instance of JMXConnectorProvider. This  instance is found as follows. Suppose the given JMXServiceURL looks like  service:jmx:protocol:remainder. Then the factory will attempt to find the  appropriate JMXConnectorProvider for protocol. Each occurrence of the  character + or - in protocol is replaced by . or _, respectively.  A provider package list is searched for as follows:     1. If the environment parameter to newJMXConnector contains the key        jmx.remote.protocol.provider.pkgs then the associated value is the       provider package list.    2. Otherwise, if the system property jmx.remote.protocol.provider.pkgs        exists, then its value is the provider package list.    3. Otherwise, there is no provider package list.  The provider package list is a string that is interpreted as a list of  non-empty Java package names separated by vertical bars (|). If the string  is empty, then so is the provider package list. If the provider package  list is not a String, or if it contains an element that is an empty string,  a JMXProviderException is thrown.  If the provider package list exists and is not empty, then for each element  pkg of the list, the factory will attempt to load the class      pkg.protocol.ClientProvider  If the environment parameter to newJMXConnector contains the key  jmx.remote.protocol.provider.class.loader then the associated value is the  class loader to use to load the provider. If the associated value is not an  instance of ClassLoader, an IllegalArgumentException is thrown.  If the jmx.remote.protocol.provider.class.loader key is not present in the  environment parameter, the calling thread's context class loader is used.  If the attempt to load this class produces a ClassNotFoundException, the  search for a handler continues with the next element of the list.  Otherwise, a problem with the provider found is signalled by a  JMXProviderException whose cause indicates the underlying exception, as  follows:      * if the attempt to load the class produces an exception other than        ClassNotFoundException, that is the cause;     * if Class.newInstance() for the class produces an exception, that is       the cause.  If no provider is found by the above steps, including the default case  where there is no provider package list, then the implementation will use  its own provider for protocol, or it will throw a MalformedURLException if  there is none. An implementation may choose to find providers by other  means. For example, it may support the JAR conventions for service  providers, where the service interface is JMXConnectorProvider.  Every implementation must support the RMI connector protocols, specified  with the string rmi or iiop.  Once a provider is found, the result of the newJMXConnector method is the  result of calling newJMXConnector on the provider.  The Map parameter passed to the JMXConnectorProvider is a new read-only  Map that contains all the entries that were in the environment parameter to  JMXConnectorFactory.newJMXConnector, if there was one. Additionally, if the  jmx.remote.protocol.provider.class.loader key is not present in the  environment parameter, it is added to the new read-only Map. The associated  value is the calling thread's context class loader.  Since:     1.5",1,0,0,0,1,0,0,0,0,0,0,0
"A provider for creating JMX API connector clients using a given protocol.  Instances of this interface are created by JMXConnectorFactory as part of  its newJMXConnector method.  Since:     1.5",1,0,0,0,0,0,0,0,0,0,0,0
" Name of the attribute that specifies the default class loader MBean name. This class loader is used to deserialize objects in requests received from the client, possibly after consulting an MBean-specific class loader. The value associated with this attribute is an instance of ObjectName.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
" Name of the attribute that specifies the class loader for loading protocol providers. The value associated with this attribute is an instance of ClassLoader.  See Also: Constant Field Values ",0,0,0,1,0,0,1,0,0,0,0,0
"Exception thrown as the result of a remote MBeanServer method invocation  when an Error is thrown while processing the invocation in the remote MBean  server. A JMXServerErrorException instance contains the original Error  that occurred as its cause.  Since:     1.5 See Also:     ServerError, Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: RMIConnection Handles the method MBeanServerConnection.invoke(ObjectName, String, Object[], String[]). The Object[] parameter is wrapped in a MarshalledObject.  Specified by: invoke in interface RMIConnection Parameters: name - The object name of the MBean on which the method is to be invoked. operationName - The name of the operation to be invoked. params - An array containing the parameters to be set when the operation is invoked, encapsulated into a MarshalledObject. The encapsulated array can be null, equivalent to an empty array. signature - An array containing the signature of the operation. The class objects will be loaded using the same class loader as the one used for loading the MBean on which the operation was invoked. Can be null, equivalent to an empty array. delegationSubject - The Subject containing the delegation principals or null if the authentication principal is used instead. Returns: The object returned by the operation, which represents the result of invoking the operation on the MBean specified. Throws: InstanceNotFoundException - The MBean specified is not registered in the MBean server. MBeanException - Wraps an exception thrown by the MBean's invoked method. ReflectionException - Wraps a java.lang.Exception thrown while trying to invoke the method. IOException - if a general communication exception occurred.",1,0,0,0,0,0,1,0,0,0,0,0
"Description copied from interface: RMIConnection Handles the method MBeanServerConnection.setAttribute(ObjectName, Attribute). The Attribute parameter is wrapped in a MarshalledObject.  Specified by: setAttribute in interface RMIConnection Parameters: $param_ObjectName_1 - The name of the MBean within which the attribute is to be set. $param_MarshalledObject_2 - The identification of the attribute to be set and the value it is to be set to, encapsulated into a MarshalledObject. $param_Subject_3 - The Subject containing the delegation principals or null if the authentication principal is used instead. Throws: IOException - if a general communication exception occurred. AttributeNotFoundException - The attribute specified is not accessible in the MBean. InstanceNotFoundException - The MBean specified is not registered in the MBean server. InvalidAttributeValueException - The value specified for the attribute is not valid. MBeanException - Wraps an exception thrown by the MBean's setter. ReflectionException - Wraps a java.lang.Exception thrown when trying to invoke the setter. See Also: RMIConnection.getAttribute(javax.management.ObjectName, java.lang.String, javax.security.auth.Subject)",1,0,0,0,0,0,1,0,0,0,0,0
"A JMX API connector server that creates RMI-based connections from remote  clients. Usually, such connector servers are made using  JMXConnectorServerFactory. However, specialized applications can use this  class directly, for example with an RMIServerImpl object.  Since:     1.5",1,0,0,0,0,0,1,0,0,0,0,0
"An RMIServer object that is exported through JRMP and that creates client  connections as RMI objects exported through JRMP. User code does not  usually reference this class directly.  Since:     1.5 See Also:     RMIServerImpl",1,0,0,0,0,0,0,0,0,0,0,0
"Sets the MBeanServer to which this connector server is attached. New client connections will interact with this MBeanServer. Existing client connections are unaffected.  Parameters: mbs - the new MBeanServer. Can be null, but new client connections will be refused as long as it is. See Also: getMBeanServer()",0,0,1,0,0,0,1,0,0,0,0,0
"Called by close() to close the connector server. After returning from this method, the connector server must not accept any new connections.  Throws: IOException - if the attempt to close the connector server failed.",1,0,1,0,0,1,0,0,0,0,0,0
"Provides the implementation of the timer MBean. The timer MBean sends out  an alarm at a specified time that wakes up all the listeners registered to  receive timer notifications.  This class manages a list of dated timer notifications. A method allows  users to add/remove as many notifications as required. When a timer  notification is emitted by the timer and becomes obsolete, it is  automatically removed from the list of timer notifications. Additional timer notifications can be added into regularly repeating  notifications.  Note:     1. When sending timer notifications, the timer updates the notification       sequence number irrespective of the notification type.    2. The timer service relies on the system date of the host where the        Timer class is loaded. Listeners may receive untimely notifications       if their host has a different system date. To avoid such problems,       synchronize the system date of all host machines where timing is       needed.    3. The default behavior for periodic notifications is fixed-delay       execution, as specified in Timer. In order to use fixed-rate       execution, use the overloaded addNotification(String, String, Object,       Date, long, long, boolean) method.    4. Notification listeners are potentially all executed in the same       thread. Therefore, they should execute rapidly to avoid holding up       other listeners or perturbing the regularity of fixed-delay       executions. See NotificationBroadcasterSupport.  Since:     1.5",1,0,1,0,1,1,1,1,0,0,0,0
" Number of milliseconds in one week. Useful constant for the addNotification method.  See Also: Constant Field Values ",0,0,0,1,0,0,0,0,0,0,0,0
"Creates a new timer notification with the specified type, message and userData and inserts it into the list of notifications with a given date, period and number of occurrences.  If the timer notification to be inserted has a date that is before the current date, the method behaves as if the specified date were the current date. For once-off notifications, the notification is delivered immediately. For periodic notifications, the first notification is delivered immediately and the subsequent ones are spaced as specified by the period parameter.  Note that once the timer notification has been added into the list of notifications, its associated date, period and number of occurrences cannot be updated.  In the case of a periodic notification, uses a fixed-delay execution scheme, as specified in Timer. In order to use a fixed-rate execution scheme, use addNotification(String, String, Object, Date, long, long, boolean) instead.  Specified by: addNotification in interface TimerMBean Parameters: type - The timer notification type. message - The timer notification detailed message. userData - The timer notification user data object. date - The date when the notification occurs. period - The period of the timer notification (in milliseconds). nbOccurences - The total number the timer notification will be emitted. Returns: The identifier of the new created timer notification. Throws: IllegalArgumentException - The date is null or the period or the number of occurrences is negative. See Also: addNotification(String, String, Object, Date, long, long, boolean)",1,0,0,0,0,0,1,1,0,0,0,0
" Contains the environment relevant for the Context or DirContext method that cannot proceed.  This field is initialized to null. It should not be manipulated directly: it should be accessed and updated using getEnvironment() and setEnvironment().  See Also: getEnvironment(), setEnvironment(java.util.Hashtable) ",1,0,1,0,0,0,0,0,0,0,0,0
"This class represents a composite name -- a sequence of component names  spanning multiple namespaces. Each component is a string name from the  namespace of a naming system. If the component comes from a hierarchical  namespace, that component can be further parsed into its atomic parts by  using the CompoundName class.  The components of a composite name are numbered. The indexes of a composite  name with N components range from 0 up to, but not including, N. This range  may be written as [0,N). The most significant component is at index 0. An  empty composite name has no components.   JNDI Composite Name Syntax  JNDI defines a standard string representation for composite names. This  representation is the concatenation of the components of a composite name  from left to right using the component separator (a forward slash character  (/)) to separate each component. The JNDI syntax defines the following meta  characters:     * escape (backward slash  ),     * quote characters (single (') and double quotes ()), and     * component separator (forward slash character (/)). Any occurrence of a leading quote, an escape preceding any meta character,  an escape at the end of a component, or a component separator character in  an unquoted component must be preceded by an escape character when that  component is being composed into a composite name string. Alternatively, to  avoid adding escape characters as described, the entire component can be  quoted using matching single quotes or matching double quotes. A single  quote occurring within a double-quoted component is not considered a meta  character (and need not be escaped), and vice versa.  When two composite names are compared, the case of the characters is  significant.  A leading component separator (the composite name string begins with a  separator) denotes a leading empty component (a component consisting of an  empty string). A trailing component separator (the composite name string  ends with a separator) denotes a trailing empty component. Adjacent  component separators denote an empty component.   Composite Name Examples  This table shows examples of some composite names. Each row shows the  string form of a composite name and its corresponding structural form ( CompositeName).  String Name 	CompositeName  	{} (the empty name == new CompositeName() == new CompositeName()) x 	{x} x/y 	{x, y} x/ 	{x, } /x 	{, x} / 	{} // 	{, } /x/ 	{, x, } x//y 	{x, , y}   Composition Examples  Here are some composition examples. The right column shows composing string  composite names while the left column shows composing the corresponding  CompositeNames. Notice that composing the string forms of two composite  names simply involves concatenating their string forms together.  String Names 	CompositeNames x/y + / = x/y/ 	 {x, y} + {} = {x, y, }  + x = x 	 {} + {x} = {x} / + x = /x 	 {} + {x} = {, x} x +  +  = x 	 {x} + {} + {} = {x}   Multithreaded Access  A CompositeName instance is not synchronized against concurrent  multithreaded access. Multiple threads trying to access and modify a  CompositeName should lock the object.  Since:     1.3 See Also:     Serialized Form",1,1,0,0,1,0,1,1,1,0,0,0
"Constructs a new composite name instance using the components specified by 'comps'. This protected method is intended to be to be used by subclasses of CompositeName when they override methods such as clone(), getPrefix(), getSuffix().  Parameters: comps - A non-null enumeration containing the components for the new composite name. Each element is of class String. The enumeration will be consumed to extract its elements.",1,0,0,0,0,0,0,0,0,0,0,0
"Adds a single component to the end of this compound name.  Specified by: add in interface Name Parameters: comp - The non-null component to add. Returns: The updated CompoundName, not a new one. Cannot be null. Throws: InvalidNameException - If adding comp at end of the name would violate the compound name's syntax.",0,0,0,0,0,0,0,0,0,0,0,0
"This interface represents a naming context, which consists of a set of  name-to-object bindings. It contains methods for examining and updating  these bindings.   Names  Each name passed as an argument to a Context method is relative to that  context. The empty name is used to name the context itself. A name  parameter may never be null.  Most of the methods have overloaded versions with one taking a Name  parameter and one taking a String. These overloaded versions are equivalent  in that if the Name and String parameters are just different  representations of the same name, then the overloaded versions of the same  methods behave the same. In the method descriptions below, only one version  is fully documented. The second version instead has a link to the first:  the same documentation applies to both.  For systems that support federation, String name arguments to Context  methods are composite names. Name arguments that are instances of  CompositeName are treated as composite names, while Name arguments that are  not instances of CompositeName are treated as compound names (which might  be instances of CompoundName or other implementations of compound names).  This allows the results of NameParser.parse() to be used as arguments to  the Context methods. Prior to JNDI 1.2, all name arguments were treated as  composite names.  Furthermore, for systems that support federation, all names returned in a  NamingEnumeration from list() and listBindings() are composite names  represented as strings. See CompositeName for the string syntax of names.  For systems that do not support federation, the name arguments (in either  Name or String forms) and the names returned in NamingEnumeration may be  names in their own namespace rather than names in a composite namespace, at  the discretion of the service provider.   Exceptions  All the methods in this interface can throw a NamingException or any of its  subclasses. See NamingException and their subclasses for details on each  exception.   Concurrent Access  A Context instance is not guaranteed to be synchronized against concurrent  access by multiple threads. Threads that need to access a single Context  instance concurrently should synchronize amongst themselves and provide the  necessary locking. Multiple threads each manipulating a different Context  instance need not synchronize. Note that the lookup method, when passed an  empty name, will return a new Context instance representing the same naming  context.  For purposes of concurrency control, a Context operation that returns a  NamingEnumeration is not considered to have completed while the enumeration  is still in use, or while any referrals generated by that operation are  still being followed.   Parameters  A Name parameter passed to any method of the Context interface or one of  its subinterfaces will not be modified by the service provider. The service  provider may keep a reference to it for the duration of the operation,  including any enumeration of the method's results and the processing of any  referrals generated. The caller should not modify the object during this  time. A Name returned by any such method is owned by the caller. The caller  may subsequently modify it; the service provider may not.   Environment Properties  JNDI applications need a way to communicate various preferences and  properties that define the environment in which naming and directory  services are accessed. For example, a context might require specification  of security credentials in order to access the service. Another context  might require that server configuration information be supplied. These are  referred to as the environment of a context. The Context interface provides  methods for retrieving and updating this environment.  The environment is inherited from the parent context as context methods  proceed from one context to the next. Changes to the environment of one  context do not directly affect those of other contexts.  It is implementation-dependent when environment properties are used and/or  verified for validity. For example, some of the security-related properties  are used by service providers to log in to the directory. This login  process might occur at the time the context is created, or the first time a  method is invoked on the context. When, and whether this occurs at all, is  implementation-dependent. When environment properties are added or removed  from the context, verifying the validity of the changes is again  implementation-dependent. For example, verification of some properties  might occur at the time the change is made, or at the time the next  operation is performed on the context, or not at all.  Any object with a reference to a context may examine that context's  environment. Sensitive information such as clear-text passwords should not  be stored there unless the implementation is known to protect it.   Resource Files  To simplify the task of setting up the environment required by a JNDI  application, application components and service providers may be  distributed along with resource files. A JNDI resource file is a file in  the properties file format (see java.util.Properties), containing a list of  key/value pairs. The key is the name of the property (e.g.  java.naming.factory.object) and the value is a string in the format  defined for that property. Here is an example of a JNDI resource file:       java.naming.factory.object=com.sun.jndi.ldap.AttrsToCorba:com.wiz.from.Person java.naming.factory.state=com.sun.jndi.ldap.CorbaToAttrs:com.wiz.from.Person java.naming.factory.control=com.sun.jndi.ldap.ResponseControlFactory   The JNDI class library reads the resource files and makes the property  values freely available. Thus JNDI resource files should be considered to  be world readable, and sensitive information such as clear-text passwords  should not be stored there.  There are two kinds of JNDI resource files: provider and application.   Provider Resource Files  Each service provider has an optional resource that lists properties  specific to that provider. The name of this resource is:      [prefix/]jndiprovider.properties  where prefix is the package name of the provider's context  implementation(s), with each period (.) converted to a slash (/). For  example, suppose a service provider defines a context implementation with  class name com.sun.jndi.ldap.LdapCtx. The provider resource for this  provider is named com/sun/jndi/ldap/jndiprovider.properties. If the class  is not in a package, the resource's name is simply jndiprovider.properties .  Certain methods in the JNDI class library make use of the standard JNDI  properties that specify lists of JNDI factories:      * java.naming.factory.object     * java.naming.factory.state     * java.naming.factory.control     * java.naming.factory.url.pkgs The JNDI library will consult the provider resource file when determining  the values of these properties. Properties other than these may be set in  the provider resource file at the discretion of the service provider. The  service provider's documentation should clearly state which properties are  allowed; other properties in the file will be ignored.   Application Resource Files  When an application is deployed, it will generally have several codebase  directories and JARs in its classpath. Similarly, when an applet is  deployed, it will have a codebase and archives specifying where to find the  applet's classes. JNDI locates (using ClassLoader.getResources()) all  application resource files named jndi.properties in the classpath. In  addition, if the file java.home/lib/jndi.properties exists and is readable,  JNDI treats it as an additional application resource file. (java.home  indicates the directory named by the java.home system property.) All of the  properties contained in these files are placed into the environment of the  initial context. This environment is then inherited by other contexts.  For each property found in more than one application resource file, JNDI  uses the first value found or, in a few cases where it makes sense to do  so, it concatenates all of the values (details are given below). For  example, if the java.naming.factory.object property is found in three  jndi.properties resource files, the list of object factories is a  concatenation of the property values from all three files. Using this  scheme, each deployable component is responsible for listing the factories  that it exports. JNDI automatically collects and uses all of these export  lists when searching for factory classes.   Search Algorithm for Properties  When JNDI constructs an initial context, the context's environment is  initialized with properties defined in the environment parameter passed to  the constructor, the system properties, the applet parameters, and the  application resource files. See InitialContext for details. This initial  environment is then inherited by other context instances.  When the JNDI class library needs to determine the value of a property, it  does so by merging the values from the following two sources, in order:     1. The environment of the context being operated on.    2. The provider resource file (jndiprovider.properties) for the context       being operated on. For each property found in both of these two sources, JNDI determines the  property's value as follows. If the property is one of the standard JNDI  properties that specify a list of JNDI factories (listed above), the values  are concatenated into a single colon-separated list. For other properties,  only the first value found is used.  When a service provider needs to determine the value of a property, it will  generally take that value directly from the environment. A service provider  may define provider-specific properties to be placed in its own provider  resource file. In that case it should merge values as described in the  previous paragraph.  In this way, each service provider developer can specify a list of  factories to use with that service provider. These can be modified by the  application resources specified by the deployer of the application or  applet, which in turn can be modified by the user.  Since:     1.3",1,0,0,0,0,1,1,1,0,0,0,0
" Constant that holds the name of the environment property for specifying the preferred language to use with the service. The value of the property is a colon-separated list of language tags as defined in RFC 1766. If this property is unspecified, the language preference is determined by the service provider.  The value of this constant is java.naming.language.  See Also: addToEnvironment(String, Object), removeFromEnvironment(String), Constant Field Values ",0,0,0,1,0,0,0,0,0,0,1,0
"Retrieves the named object, following links except for the terminal atomic component of the name. If the object bound to name is not a link, returns the object itself.  Parameters: name - the name of the object to look up Returns: the object bound to name, not following the terminal link (if any). Throws: NamingException - if a naming exception is encountered See Also: lookupLink(String)",1,0,0,0,0,0,0,0,0,0,0,1
"This exception is thrown when attempting to destroy a context that is not  empty.  If the program wants to handle this exception in particular, it should  catch ContextNotEmptyException explicitly before attempting to catch  NamingException. For example, after catching ContextNotEmptyException, the  program might try to remove the contents of the context before reattempting  the destroy.  Synchronization and serialization issues that apply to NamingException  apply directly here.  Since:     1.3 See Also:     Context.destroySubcontext(javax.naming.Name), Serialized Form",1,0,0,0,0,0,0,1,0,0,0,0
"Description copied from interface: Context Removes an environment property from the environment of this context. See class description for more details on environment properties.  Specified by: removeFromEnvironment in interface Context Parameters: propName - the name of the environment property to remove; may not be null Returns: the previous value of the property, or null if the property was not in the environment Throws: NamingException - if a naming exception is encountered See Also: Context.getEnvironment(), Context.addToEnvironment(String, Object)",1,0,0,0,0,0,0,0,0,0,0,1
"This class represents a Reference whose contents is a name, called the link  name, that is bound to an atomic name in a context.  The name is a URL, or a name to be resolved relative to the initial  context, or if the first character of the name is ., the name is relative  to the context in which the link is bound.  Normal resolution of names in context operations always follow links.  Resolution of the link name itself may cause resolution to pass through  other links. This gives rise to the possibility of a cycle of links whose  resolution could not terminate normally. As a simple means to avoid such  non-terminating resolutions, service providers may define limits on the  number of links that may be involved in any single operation invoked by the  caller.  A LinkRef contains a single StringRefAddr, whose type is LinkAddress, and  whose contents is the link name. The class name field of the Reference is  that of this (LinkRef) class.  LinkRef is bound to a name using the normal Context.bind()/rebind(), and  DirContext.bind()/rebind(). Context.lookupLink() is used to retrieve the  link itself if the terminal atomic name is bound to a link.  Many naming systems support a native notion of link that may be used within  the naming system itself. JNDI does not specify whether there is any  relationship between such native links and JNDI links.  A LinkRef instance is not synchronized against concurrent access by  multiple threads. Threads that need to access a LinkRef instance  concurrently should synchronize amongst themselves and provide the  necessary locking.  Since:     1.3 See Also:     LinkException, LinkLoopException, MalformedLinkException,      Context.lookupLink(javax.naming.Name), Serialized Form",0,1,1,0,1,0,1,1,0,0,0,0
"This exception is thrown when a malformed link was encountered while  resolving or constructing a link.  Synchronization and serialization issues that apply to LinkException apply  directly here.  Since:     1.3 See Also:     LinkRef.getLinkName(), LinkRef, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"The Name interface represents a generic name -- an ordered sequence of  components. It can be a composite name (names that span multiple  namespaces), or a compound name (names that are used within individual  hierarchical naming systems).  There can be different implementations of Name; for example, composite  names, URLs, or namespace-specific compound names.  The components of a name are numbered. The indexes of a name with N  components range from 0 up to, but not including, N. This range may be  written as [0,N). The most significant component is at index 0. An empty  name has no components.  None of the methods in this interface accept null as a valid value for a  parameter that is a name or a name component. Likewise, methods that return  a name or name component never return null.  An instance of a Name may not be synchronized against concurrent  multithreaded access if that access is not read-only.  Since:     1.3",1,1,0,0,0,0,0,1,0,0,0,1
"Constructs a new instance of NameNotFoundException using the explanation supplied. All other fields default to null.  Parameters: explanation - Possibly null additional detail about this exception. See Also: Throwable.getMessage()",1,1,0,0,1,0,0,0,0,0,0,0
"Constructs a new instance of NamingSecurityException using the explanation supplied. All other fields default to null.  Parameters: explanation - Possibly null additional detail about this exception. See Also: Throwable.getMessage()",0,0,0,0,0,0,0,0,0,0,0,0
"This exception is thrown to indicate that the result being returned or  returned so far is partial, and that the operation cannot be completed. For  example, when listing a context, this exception indicates that returned  results only represents some of the bindings in the context.  Synchronization and serialization issues that apply to NamingException  apply directly here.  Since:     1.3 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Computes the hash code of this reference. The hash code is the sum of the hash code of its addresses.  Overrides: hashCode in class Object Returns: A hash code of this reference as an int. See Also: Object.equals(java.lang.Object), Hashtable",1,0,0,0,0,0,0,0,0,0,0,1
"This interface is implemented by an object that can provide a Reference to  itself.  A Reference represents a way of recording address information about objects  which themselves are not directly bound to the naming system. Such objects  can implement the Referenceable interface as a way for programs that use  that object to determine what its Reference is. For example, when binding a  object, if an object implements the Referenceable interface, getReference()  can be invoked on the object to get its Reference to use for binding.  Since:     1.3 See Also:     Context.bind(javax.naming.Name, java.lang.Object),      NamingManager.getObjectInstance(java.lang.Object, javax.naming.Name,     javax.naming.Context, java.util.Hashtable), Reference",0,0,0,1,0,0,0,0,0,0,1,0
"This exception is thrown when a method does not terminate within the  specified time limit. This can happen, for example, if the user specifies  that the method should take no longer than 10 seconds, and the method fails  to complete with 10 seconds.  Synchronization and serialization issues that apply to NamingException  apply directly here.  Since:     1.3 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"This interface represents an attribute associated with a named object.  In a directory, named objects can have associated with them attributes. The  Attribute interface represents an attribute associated with a named object.  An attribute contains 0 or more, possibly null, values. The attribute  values can be ordered or unordered (see isOrdered()). If the values are  unordered, no duplicates are allowed. If the values are ordered, duplicates  are allowed.  The content and representation of an attribute and its values is defined by  the attribute's schema. The schema contains information about the  attribute's syntax and other properties about the attribute. See  getAttributeDefinition() and getAttributeSyntaxDefinition() for details  regarding how to get schema information about an attribute if the  underlying directory service supports schemas.  Equality of two attributes is determined by the implementation class. A  simple implementation can use Object.equals() to determine equality of  attribute values, while a more sophisticated implementation might make use  of schema information to determine equality. Similarly, one implementation  might provide a static storage structure which simply returns the values  passed to its constructor, while another implementation might define get()  and getAll(). to get the values dynamically from the directory.  Note that updates to Attribute (such as adding or removing a value) do not  affect the corresponding representation of the attribute in the directory.  Updates to the directory can only be effected using operations in the  DirContext interface.  Since:     1.3 See Also:     BasicAttribute",1,1,0,0,0,0,1,0,0,0,0,0
"The directory service interface, containing methods for examining and  updating attributes associated with objects, and for searching the  directory.   Names  Each name passed as an argument to a DirContext method is relative to that  context. The empty name is used to name the context itself. The name  parameter may never be null.  Most of the methods have overloaded versions with one taking a Name  parameter and one taking a String. These overloaded versions are equivalent  in that if the Name and String parameters are just different  representations of the same name, then the overloaded versions of the same  methods behave the same. In the method descriptions below, only one version  is documented. The second version instead has a link to the first: the same  documentation applies to both.  See Context for a discussion on the interpretation of the name argument to  the Context methods. These same rules apply to the name argument to the  DirContext methods.   Attribute Models  There are two basic models of what attributes should be associated with.  First, attributes may be directly associated with a DirContext object. In  this model, an attribute operation on the named object is roughly  equivalent to a lookup on the name (which returns the DirContext object),  followed by the attribute operation invoked on the DirContext object in  which the caller supplies an empty name. The attributes can be viewed as  being stored along with the object (note that this does not imply that the  implementation must do so).  The second model is that attributes are associated with a name (typically  an atomic name) in a DirContext. In this model, an attribute operation on  the named object is roughly equivalent to a lookup on the name of the  parent DirContext of the named object, followed by the attribute operation  invoked on the parent in which the caller supplies the terminal atomic  name. The attributes can be viewed as being stored in the parent DirContext  (again, this does not imply that the implementation must do so). Objects  that are not DirContexts can have attributes, as long as their parents are  DirContexts.  JNDI support both of these models. It is up to the individual service  providers to decide where to store attributes. JNDI clients are safest  when they do not make assumptions about whether an object's attributes are  stored as part of the object, or stored within the parent object and  associated with the object's name.   Attribute Type Names  In the getAttributes() and search() methods, you can supply the attributes  to return by supplying a list of attribute names (strings). The attributes  that you get back might not have the same names as the attribute names you  have specified. This is because some directories support features that  cause them to return other attributes. Such features include attribute  subclassing, attribute name synonyms, and attribute language codes.  In attribute subclassing, attributes are defined in a class hierarchy. In  some directories, for example, the name attribute might be the superclass  of all name-related attributes, including commonName and surName.  Asking for the name attribute might return both the commonName and  surName attributes.  With attribute type synonyms, a directory can assign multiple names to the  same attribute. For example, cn and commonName might both refer to the  same attribute. Asking for cn might return the commonName attribute.  Some directories support the language codes for attributes. Asking such a  directory for the description attribute, for example, might return all of  the following attributes:      * description     * description;lang-en     * description;lang-de     * description;lang-fr   Operational Attributes  Some directories have the notion of operational attributes which are  attributes associated with a directory object for administrative purposes.  An example of operational attributes is the access control list for an  object.  In the getAttributes() and search() methods, you can specify that all  attributes associated with the requested objects be returned by supply  null as the list of attributes to return. The attributes returned do not  include operational attributes. In order to retrieve operational  attributes, you must name them explicitly.   Named Context  There are certain methods in which the name must resolve to a context (for  example, when searching a single level context). The documentation of such  methods use the term named context to describe their name parameter. For  these methods, if the named object is not a DirContext,  NotContextException is thrown. Aside from these methods, there is no  requirement that the named object be a DirContext.   Parameters  An Attributes, SearchControls, or array object passed as a parameter to any  method will not be modified by the service provider. The service provider  may keep a reference to it for the duration of the operation, including any  enumeration of the method's results and the processing of any referrals  generated. The caller should not modify the object during this time. An  Attributes object returned by any method is owned by the caller. The caller  may subsequently modify it; the service provider will not.   Exceptions  All the methods in this interface can throw a NamingException or any of its  subclasses. See NamingException and their subclasses for details on each  exception.  Since:     1.3 See Also:     Context",1,1,0,1,0,0,0,1,0,1,0,0
" This constant specifies to delete the specified attribute values from the attribute.  The resulting attribute has the set difference of its prior value set and the specified value set. If no values are specified, deletes the entire attribute. If the attribute does not exist, or if some or all members of the specified value set do not exist, this absence may be ignored and the operation succeeds, or a NamingException may be thrown to indicate the absence. Removal of the last value will remove the attribute if the attribute is required to have at least one value.  The value of this constant is 3.  See Also: ModificationItem, modifyAttributes(javax.naming.Name, int, javax.naming.directory.Attributes), Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Searches in the named context or object for entries that satisfy the given search filter. Performs the search as specified by the search controls. See search(Name, String, Object[], SearchControls) for details.  Parameters: name - the name of the context or object to search filterExpr - the filter expression to use for the search. The expression may contain variables of the form {i} where i is a nonnegative integer. May not be null. filterArgs - the array of arguments to substitute for the variables in filterExpr. The value of filterArgs[i] will replace each occurrence of {i}. If null, equivalent to an empty array. cons - the search controls that control the search. If null, the default search controls are used (equivalent to (new SearchControls())). Returns: an enumeration of SearchResults of the objects that satisfy the filter; never null Throws: ArrayIndexOutOfBoundsException - if filterExpr contains {i} expressions where i is outside the bounds of the array filterArgs InvalidSearchControlsException - if cons contains invalid settings InvalidSearchFilterException - if filterExpr with filterArgs represents an invalid search filter NamingException - if a naming exception is encountered",1,1,0,0,0,0,0,0,0,0,1,0
"Description copied from interface: DirContext Binds a name to an object, along with associated attributes, overwriting any existing binding. See DirContext.rebind(Name, Object, Attributes) for details.  Specified by: rebind in interface DirContext Parameters: name - the name to bind; may not be empty obj - the object to bind; possibly null attrs - the attributes to associate with the binding Throws: InvalidAttributesException - if some mandatory attributes of the binding are not supplied NamingException - if a naming exception is encountered",1,0,1,0,0,0,1,0,0,0,0,1
"This exception is thrown when the specification of the SearchControls for a  search operation is invalid. For example, if the scope is set to a value  other than OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE, this exception is  thrown.  Synchronization and serialization issues that apply to NamingException  apply directly here.  Since:     1.3 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"This class represents a modification item. It consists of a modification  code and an attribute on which to operate.  A ModificationItem instance is not synchronized against concurrent  multithreaded access. Multiple threads trying to access and modify a single  ModificationItem instance should lock the object.  Since:     1.3 See Also:     Serialized Form",1,0,1,0,0,0,0,0,0,0,0,1
"Constructs a new instance of NoSuchAttributeException. All fields are initialized to null.",1,0,0,0,0,0,0,0,0,0,0,1
"Retrieves the time limit of these SearchControls in milliseconds.  If the value is 0, this means to wait indefinitely.  Returns: The time limit of these SearchControls in milliseconds. See Also: setTimeLimit(int)",0,0,0,0,0,0,0,0,0,0,0,1
"Constructs an instance of NamingExceptionEvent using the context in which the NamingException was thrown and the exception that was thrown.  Parameters: source - The non-null context in which the exception was thrown. exc - The non-null NamingException that was thrown.",0,0,0,0,0,0,0,0,0,0,0,0
"Specifies the method that a listener of a NamingEvent with event type of  OBJECT_CHANGED must implement.  An OBJECT_CHANGED event type is fired when (the contents of) an object has  changed. This might mean that its attributes have been modified, added, or  removed, and/or that the object itself has been replaced. How the object  has changed can be determined by examining the NamingEvent's old and new  bindings.  A listener interested in OBJECT_CHANGED event types must:     1. Implement this interface and its method (objectChanged())    2. Implement NamingListener.namingExceptionThrown() so that it will be       notified of exceptions thrown while attempting to collect information       about the events.    3. Register with the source using the source's addNamingListener()        method. A listener that wants to be notified of namespace change events should also  implement the NamespaceChangeListener interface.  Since:     1.3 See Also:     NamingEvent, NamespaceChangeListener, EventContext, EventDirContext",1,0,1,0,0,1,1,1,0,0,0,0
"This interface represents an LDAPv3 extended operation request as defined  in RFC 2251.   ExtendedRequest ::= [APPLICATION 23] SEQUENCE { requestName      [0] LDAPOID, requestValue     [1] OCTET STRING OPTIONAL }   It comprises an object identifier string and an optional ASN.1 BER encoded  value.  The methods in this class are used by the service provider to construct the  bits to send to the LDAP server. Applications typically only deal with the  classes that implement this interface, supplying them with any information  required for a particular extended operation request. It would then pass  such a class as an argument to the LdapContext.extendedOperation() method  for performing the LDAPv3 extended operation.  For example, suppose the LDAP server supported a 'get time' extended  operation. It would supply GetTimeRequest and GetTimeResponse classes:       public class GetTimeRequest implements ExtendedRequest { public GetTimeRequest() {... }; public ExtendedResponse createExtendedResponse(String id, byte[] berValue, int offset, int length) throws NamingException { return new GetTimeResponse(id, berValue, offset, length); } ... } public class GetTimeResponse implements ExtendedResponse { long time; public GetTimeResponse(String id, byte[] berValue, int offset, int length) throws NamingException { time = ... // decode berValue to get time } public java.util.Date getDate() { return new java.util.Date(time) }; public long getTime() { return time }; ... }   A program would use then these classes as follows:       GetTimeResponse resp = (GetTimeResponse) ectx.extendedOperation(new GetTimeRequest()); long time = resp.getTime();   Since:     1.3 See Also:     ExtendedResponse,      LdapContext.extendedOperation(javax.naming.ldap.ExtendedRequest)",1,0,0,1,0,0,0,0,1,0,1,0
"This interface is for returning controls with objects returned in  NamingEnumerations. For example, suppose a server sends back controls with  the results of a search operation, the service provider would return a  NamingEnumeration of objects that are both SearchResult and implement  HasControls.       NamingEnumeration elts = ectx.search((Name)name, filter, sctls); while (elts.hasMore()) { Object entry = elts.next();  // Get search result SearchResult res = (SearchResult)entry; // do something with it  // Get entry controls if (entry instanceof HasControls) { Control[] entryCtls = ((HasControls)entry).getControls(); // do something with controls } }   Since:     1.3",1,0,0,0,0,0,0,0,1,0,0,0
"Description copied from interface: LdapContext Sets the request controls for methods subsequently invoked on this context. The request controls are owned by the JNDI implementation and are immutable. Neither the array nor the controls may be modified by the caller.  This removes any previous request controls and adds requestControls for use by subsequent methods invoked on this context. This method does not affect this context's connection request controls.  Note that requestControls will be in effect until the next invocation of setRequestControls(). You need to explicitly invoke setRequestControls() with null or an empty array to clear the controls if you don't want them to affect the context methods any more. To check what request controls are in effect for this context, use getRequestControls().  Specified by: setRequestControls in interface LdapContext Parameters: requestControls - The possibly null controls to use. If null, no controls are used. Throws: NamingException - If an error occurred while setting the request controls. See Also: LdapContext.getRequestControls()",1,0,0,0,0,0,1,1,0,0,0,0
" The ManageReferral control's assigned object identifier is 2.16.840.1.113730.3.4.2.  See Also: Constant Field Values ",0,1,0,0,0,0,0,0,0,0,0,0
"Constructs a critical ManageReferral control.",0,0,0,0,0,0,0,0,0,0,0,0
"Constructs a control to set the number of entries to be returned per page of results. The cookie is provided by the server and may be obtained from the paged-results response control.  A sequence of paged-results can be abandoned by setting the pageSize to zero and setting the cookie to the last cookie received from the server.  Parameters: pageSize - The number of entries to return in a page. cookie - A possibly null server-generated cookie. criticality - If true then the server must honor the control and return search results as indicated by pageSize or refuse to perform the search. If false, then the server need not honor the control. Throws: IOException - If an error was encountered while encoding the supplied arguments into a control.",1,0,0,0,0,0,0,1,0,0,0,0
"This class represents a relative distinguished name, or RDN, which is a  component of a distinguished name as specified by RFC 2253. An example of  an RDN is OU=Sales+CN=J.Smith. In this example, the RDN consist of  multiple attribute type/value pairs. The RDN is parsed as described in the  class description for LdapName.  The Rdn class represents an RDN as attribute type/value mappings, which can  be viewed using Attributes. In addition, it contains convenience methods  that allow easy retrieval of type and value when the Rdn consist of a  single type/value pair, which is how it appears in a typical usage. It also  contains helper methods that allow escaping of the unformatted attribute  value and unescaping of the value formatted according to the escaping  syntax defined in RFC2253. For methods that take or return attribute value  as an Object, the value is either a String (in unescaped form) or a byte  array.  Rdn will properly parse all valid RDNs, but does not attempt to detect all  possible violations when parsing invalid RDNs. It is generous in  accepting invalid RDNs. The validity of a name is determined ultimately  when it is supplied to an LDAP server, which may accept or reject the name  based on factors such as its schema information and interoperability  considerations.  The following code example shows how to construct an Rdn using the  constructor that takes type and value as arguments:   Rdn rdn = new Rdn(cn, Juicy, Fruit); System.out.println(rdn.toString());   The last line will print cn=Juicy , Fruit. The unescapeValue() method can  be used to unescape the escaped comma resulting in the original value  Juicy, Fruit. The escapeValue() method adds the escape back preceding the  comma.  This class can be instantiated by a string representation of the RDN  defined in RFC 2253 as shown in the following code example:   Rdn rdn = new Rdn(cn=Juicy  , Fruit); System.out.println(rdn.toString());   The last line will print cn=Juicy , Fruit.  Concurrent multithreaded read-only access of an instance of Rdn need not be  synchronized.  Unless otherwise noted, the behavior of passing a null argument to a  constructor or method in this class will cause NullPointerException to be  thrown.  Since:     1.5 See Also:     Serialized Form",1,1,1,1,1,0,1,0,1,0,1,0
"This interface represents an unsolicited notification as defined in RFC  2251. An unsolicited notification is sent by the LDAP server to the LDAP  client without any provocation from the client. Its format is that of an  extended response (ExtendedResponse).  Since:     1.3 See Also:     ExtendedResponse, UnsolicitedNotificationEvent,      UnsolicitedNotificationListener",0,0,0,0,0,1,1,0,0,0,1,0
"This interface is for handling UnsolicitedNotificationEvent. Unsolicited  notification is defined in RFC 2251. It allows the server to send  unsolicited notifications to the client. A UnsolicitedNotificationListener  must:     1. Implement this interface and its method    2. Implement NamingListener.namingExceptionThrown() so that it will be       notified of exceptions thrown while attempting to collect unsolicited       notification events.    3. Register with the context using one of the addNamingListener()        methods from EventContext or EventDirContext. Only the        NamingListener argument of these methods are applicable; the rest are       ignored for a UnsolicitedNotificationListener. (These arguments might       be applicable to the listener if it implements other listener       interfaces).  Since:     1.3 See Also:     UnsolicitedNotificationEvent, UnsolicitedNotification,      EventContext.addNamingListener(javax.naming.Name, int,     javax.naming.event.NamingListener),      EventDirContext.addNamingListener(javax.naming.Name, java.lang.String,     javax.naming.directory.SearchControls,     javax.naming.event.NamingListener),      EventContext.removeNamingListener(javax.naming.event.NamingListener)",1,0,1,1,0,1,0,0,0,0,1,0
"An object/attributes pair for returning the result of  DirStateFactory.getStateToBind().",0,0,0,0,0,0,0,0,0,0,0,0
"This class contains methods for creating context objects and objects  referred to by location information in the naming or directory service.  This class cannot be instantiated. It has only static methods.  The mention of URL in the documentation for this class refers to a URL  string as defined by RFC 1738 and its related RFCs. It is any string that  conforms to the syntax described therein, and may not always have  corresponding support in the java.net.URL class or Web browsers.  NamingManager is safe for concurrent access by multiple threads.  Except as otherwise noted, a Name or environment parameter passed to any  method is owned by the caller. The implementation will not modify the  object or keep a reference to it, although it may keep a reference to a  clone or copy.  Since:     1.3",1,0,0,0,1,0,1,0,0,0,0,0
"This interface represents a builder that creates object factories.  The JNDI framework allows for object implementations to be loaded in  dynamically via object factories. For example, when looking up a printer  bound in the name space, if the print service binds printer names to  References, the printer Reference could be used to create a printer object,  so that the caller of lookup can directly operate on the printer object  after the lookup. An ObjectFactory is responsible for creating objects of a  specific type. JNDI uses a default policy for using and loading object  factories. You can override this default policy by calling  NamingManager.setObjectFactoryBuilder() with an ObjectFactoryBuilder, which  contains the program-defined way of creating/loading object factories. Any  ObjectFactoryBuilder implementation must implement this interface that for  creating object factories.  Since:     1.3 See Also:     ObjectFactory, NamingManager.getObjectInstance(java.lang.Object,     javax.naming.Name, javax.naming.Context, java.util.Hashtable),      NamingManager.setObjectFactoryBuilder(javax.naming.spi.ObjectFactoryBuilder)",1,0,1,1,0,0,0,1,0,0,0,0
"Constructs a new instance of ResolveResult consisting of the resolved object and the remaining unresolved component.  Parameters: robj - The non-null object resolved to. rcomp - The single remaining name component that has yet to be resolved. Cannot be null (but can be empty).",1,0,0,0,0,0,1,0,0,0,0,0
"This class creates server sockets. It may be subclassed by other factories,  which create particular types of server sockets. This provides a general  framework for the addition of public socket-level functionality. It is the  server side analogue of a socket factory, and similarly provides a way to  capture a variety of policies related to the sockets being constructed.  Like socket factories, server Socket factory instances have methods used to  create sockets. There is also an environment specific default server socket  factory; frameworks will often use their own customized factory.  Since:     1.4 See Also:     SocketFactory",1,0,0,1,0,0,1,1,0,0,0,0
"Returns an unbound server socket. The socket is configured with the socket options (such as accept timeout) given to this factory.  Returns: the unbound socket Throws: IOException - if the socket cannot be created See Also: ServerSocket.bind(java.net.SocketAddress), ServerSocket.bind(java.net.SocketAddress, int), ServerSocket.ServerSocket()",1,0,0,0,0,0,0,0,0,0,0,1
"HttpsURLConnection extends HttpURLConnection with support for  https-specific features.  See http://www.w3.org/pub/WWW/Protocols/ and RFC 2818 for more details on  the https specification.  This class uses HostnameVerifier and SSLSocketFactory. There are default  implementations defined for both classes. However, the implementations can  be replaced on a per-class (static) or per-instance basis. All new  HttpsURLConnections instances will be assigned the default static values  at instance creation, but they can be overriden by calling the appropriate  per-instance set method(s) before connecting.  Since:     1.4",0,0,0,0,0,0,1,1,0,0,1,0
"Returns the server's certificate chain which was established as part of defining the session.  Note: This method can be used only when using certificate-based cipher suites; using it with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException.  Returns: an ordered array of server certificates, with the peer's own certificate first followed by any certificate authorities. Throws: SSLPeerUnverifiedException - if the peer is not verified. IllegalStateException - if this method is called before the connection has been established. See Also: getPeerPrincipal()",1,0,0,0,0,0,0,0,0,0,0,0
"Gets the default static SSLSocketFactory that is inherited by new instances of this class.  The socket factories are used when creating sockets for secure https URL connections.  Returns: the default SSLSocketFactory See Also: setDefaultSSLSocketFactory(SSLSocketFactory)",0,0,0,1,0,0,0,0,0,0,0,1
"A parameters object for X509KeyManagers that encapsulates a List of  KeyStore.Builders.  Since:     1.5 See Also:     KeyStore.Builder, X509KeyManager",0,0,0,0,0,0,0,0,0,0,0,1
"Instances of this class represent a secure socket protocol implementation  which acts as a factory for secure socket factories or SSLEngines. This  class is initialized with an optional set of key and trust managers and  source of secure random bytes.  Since:     1.4",1,0,0,0,0,0,1,0,0,0,0,0
"Constructor for an SSLEngine.  SSLEngine implementations may use the peerHost and peerPort parameters as hints for their internal session reuse strategy.  Some cipher suites (such as Kerberos) require remote hostname information. Implementations of this class should use this constructor to use Kerberos.  The parameters are not authenticated by the SSLEngine.  Parameters: peerHost - the name of the peer host peerPort - the port number of the peer See Also: SSLContext.createSSLEngine(String, int), SSLSessionContext",1,0,0,0,0,0,0,1,0,0,0,1
"Set the protocol versions enabled for use on this engine.  The protocols must have been listed by getSupportedProtocols() as being supported. Following a successful call to this method, only protocols listed in the protocols parameter are enabled for use.  Parameters: protocols - Names of all the protocols to enable. Throws: IllegalArgumentException - when one or more of the protocols named by the parameter is not supported or when the protocols parameter is null. See Also: getEnabledProtocols()",1,0,1,0,0,0,0,0,0,0,0,0
" The SSLEngine was not able to unwrap the incoming data because there were not enough source bytes available to make a complete packet.  Repeat the call once more bytes are available. ",1,0,0,0,0,0,0,1,0,0,0,0
"Returns the object bound to the given name in the session's application layer data. Returns null if there is no such binding.  For security reasons, the same named values may not be visible across different access control contexts.  Parameters: name - the name of the binding to find. Returns: the value bound to that name, or null if the binding does not exist. Throws: IllegalArgumentException - if the argument is null.",1,0,0,0,0,0,0,0,0,0,0,0
"This event is propagated to a SSLSessionBindingListener. When a listener  object is bound or unbound to an SSLSession by SSLSession.putValue(String,  Object) or SSLSession.removeValue(String), objects which implement the  SSLSessionBindingListener will be receive an event of this type. The  event's name field is the key in which the listener is being bound or  unbound.  Since:     1.4 See Also:     SSLSession, SSLSessionBindingListener, Serialized Form",0,0,0,0,0,1,1,0,0,0,0,0
"Sets the timeout limit for SSLSession objects grouped under this SSLSessionContext.  If the timeout limit is set to 't' seconds, a session exceeds the timeout limit 't' seconds after its creation time. When the timeout limit is exceeded for a session, the SSLSession object is invalidated and future connections cannot resume or rejoin the session. A check for sessions exceeding the timeout is made immediately whenever the timeout limit is changed for this SSLSessionContext.  Parameters: seconds - the new session timeout limit in seconds; zero means there is no limit. Throws: IllegalArgumentException - if the timeout specified is < 0. See Also: getSessionTimeout()",1,0,0,0,0,0,0,0,0,0,0,0
"This class acts as a factory for trust managers based on a source of trust  material. Each trust manager manages a specific type of trust material for  use by secure sockets. The trust material is based on a KeyStore and/or  provider specific sources.  Since:     1.4 See Also:     TrustManager",1,0,0,0,0,0,0,1,0,0,0,0
"This class defines the Service Provider Interface (SPI) for the  TrustManagerFactory class.  All the abstract methods in this class must be implemented by each  cryptographic service provider who wishes to supply the implementation of a  particular trust manager factory.  Since:     1.4 See Also:     TrustManagerFactory, TrustManager",0,0,1,0,0,0,0,0,0,0,0,1
"Abstract class that provides for extension of the X509KeyManager interface.  Methods in this class should be overriden to provide actual  implementations.  Since:     1.5",0,0,0,0,0,0,0,0,0,0,0,1
"Instances of this interface manage which X509 certificate-based key pairs  are used to authenticate the local side of a secure socket.  During secure socket negotiations, implentations call methods in this  interface to:      * determine the set of aliases that are available for negotiations       based on the criteria presented,     * select the best alias based on the criteria presented, and     * obtain the corresponding key material for given aliases.  Note: the X509ExtendedKeyManager should be used in favor of this class.  Since:     1.4",0,0,1,1,0,0,0,0,0,0,1,0
"Interface AttributeException is a mixin interface which a subclass of  PrintException can implement to report an error condition involving one or  more printing attributes that a particular Print Service instance does not  support. Either the attribute is not supported at all, or the attribute is  supported but the particular specified value is not supported. The Print  Service API does not define any print exception classes that implement  interface AttributeException, that being left to the Print Service  implementor's discretion.",1,0,0,1,0,0,1,0,0,0,0,0
"Returns the array of printing attribute classes for which the Print Service instance does not support the attribute at all, or null if there are no such attributes. The objects in the returned array are classes that extend the base interface Attribute.  Returns: unsupported attribute classes",1,0,0,0,0,0,1,0,0,0,0,1
"This interface is used by a printing application to cancel a print job.  This interface extends DocPrintJob. A DocPrintJob implementation returned  from a print service implements this interface if the print job can be  cancelled. Before trying to cancel a print job, the client needs to test if  the DocPrintJob object returned from the print service actually implements  this interface. Clients should never assume that a DocPrintJob implements  this interface. A print service might support cancellation only for certain  types of print data and representation class names. This means that only  some of the DocPrintJob objects returned from a service will implement this  interface.  Service implementors are encouraged to implement this optional interface  and to deliver a javax.print.event.PrintJobEvent.JOB_CANCELLED event to any  listeners if a job is successfully cancelled with an implementation of this  interface. Services should also note that an implementation of this method  may be made from a separate client thread than that which made the print  request. Thus the implementation of this interface must be made thread  safe.",1,1,1,1,0,0,1,0,0,0,0,0
" Doc flavor with MIME type = text/html; charset=utf-16, print data representation class name = java.net.URL (byte stream). ",0,0,0,0,0,0,0,0,0,0,0,1
" Doc flavor with MIME type = text/html; charset=utf-16le (little-endian byte ordering), print data representation class name = java.net.URL (byte stream). ",0,0,0,0,0,0,0,0,0,0,0,1
"Interface PrintService is the factory for a DocPrintJob. A PrintService  describes the capabilities of a Printer and can be queried regarding a  printer's supported attributes.  Example:   DocFlavor flavor = DocFlavor.INPUT_STREAM.POSTSCRIPT; PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet(); aset.add(MediaSizeName.ISO_A4); PrintService[] pservices = PrintServiceLookup.lookupPrintServices(flavor, aset); if (pservices.length > 0) { DocPrintJob pj = pservices[0].createPrintJob(); try { FileInputStream fis = new FileInputStream(test.ps); Doc doc = new SimpleDoc(fis, flavor, null); pj.print(doc, aset); } catch (FileNotFoundException fe) { } catch (PrintException e) { } }",1,0,0,0,0,0,1,0,1,0,0,0
"Locates print services capable of printing the specified DocFlavor.  Parameters: flavor - the flavor to print. If null, this constraint is not used. attributes - attributes that the print service must support. If null this constraint is not used. Returns: array of matching PrintService objects representing print services that support the specified flavor attributes. If no services match, the array is zero-length.",0,0,0,0,0,0,0,0,0,0,0,1
"Services may optionally provide UIs which allow different styles of  interaction in different roles. One role may be end-user browsing and  setting of print options. Another role may be administering the print  service.  Although the Print Service API does not presently provide standardised  support for administering a print service, monitoring of the print service  is possible and a UI may provide for private update mechanisms.  The basic design intent is to allow applications to lazily locate and  initialize services only when needed without any API dependencies except in  an environment in which they are used.  Swing UIs are preferred as they provide a more consistent L&F and can  support accessibility APIs.  Example usage:   ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != null) { JComponent swingui = (JComponent)factory.getUI( ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != null) { tabbedpane.add(Custom UI, swingui); } }",1,0,0,1,0,0,0,0,1,0,0,0
"Determines the doc flavor in which this doc object will supply its piece of print data.  Specified by: getDocFlavor in interface Doc Returns: Doc flavor.",1,0,0,0,0,0,0,0,0,0,0,1
"A StreamPrintServiceFactory is the factory for StreamPrintService  instances, which can print to an output stream in a particular document  format described as a mime type. A typical output document format may be  Postscript(TM).  This class is implemented by a service and located by the implementation  using the SPI JAR File specification.  Applications locate instances of this class by calling the  lookupStreamPrintServiceFactories(DocFlavor, String) method.  Applications can use a StreamPrintService obtained from a factory in place  of a PrintService which represents a physical printer device.",1,0,0,0,0,0,1,1,0,0,1,0
"Interface Attribute is the base interface implemented by any and every  printing attribute class to indicate that the class represents a printing  attribute. All printing attributes are serializable.",0,0,0,0,0,0,0,0,0,0,0,0
"Class AttributeSetUtilities provides static methods for manipulating  AttributeSets.      * Methods for creating unmodifiable and synchronized views of attribute       sets.     * operations useful for building implementations of interface        AttributeSet  An unmodifiable view U of an AttributeSet S provides a client with  read-only access to S. Query operations on U read through to S; thus,  changes in S are reflected in U. However, any attempt to modify U, results  in an UnmodifiableSetException. The unmodifiable view object U will be  serializable if the attribute set object S is serializable.  A synchronized view V of an attribute set S provides a client with  synchronized (multiple thread safe) access to S. Each operation of V is  synchronized using V itself as the lock object and then merely invokes the  corresponding operation of S. In order to guarantee mutually exclusive  access, it is critical that all access to S is accomplished through V. The  synchronized view object V will be serializable if the attribute set object  S is serializable.  As mentioned in the package description of javax.print, a null reference  parameter to methods is incorrect unless explicitly documented on the  method as having a meaningful interpretation. Usage to the contrary is  incorrect coding and may result in a run time exception either immediately  or at some later time. IllegalArgumentException and NullPointerException  are examples of typical and acceptable run time exceptions for such cases.",1,0,1,0,1,0,1,0,0,0,0,0
"Class DateTimeSyntax is an abstract base class providing the common  implementation of all attributes whose value is a date and time.  Under the hood, a date-time attribute is stored as a value of class  java.util.Date. You can get a date-time attribute's Date value by calling  getValue(). A date-time attribute's Date value is established when it is  constructed (see DateTimeSyntax(Date)). Once constructed, a date-time  attribute's value is immutable.  To construct a date-time attribute from separate values of the year, month,  day, hour, minute, and so on, use a java.util.Calendar object to construct  a java.util.Date object, then use the java.util.Date object to construct  the date-time attribute. To convert a date-time attribute to separate  values of the year, month, day, hour, minute, and so on, create a  java.util.Calendar object and set it to the java.util.Date from the  date-time attribute. Class DateTimeSyntax stores its value in the form of a  java.util.Date rather than a java.util.Calendar because it typically takes  less memory to store and less time to compare a java.util.Date than a  java.util.Calendar.  See Also:     Serialized Form",1,0,0,1,0,0,1,0,0,0,1,0
"Interface DocAttribute is a tagging interface which a printing attribute  class implements to indicate the attribute denotes a setting for a doc.  (Doc is a short, easy-to-pronounce term that means a piece of print  data.) The client may include a DocAttribute in a Doc's attribute set to  specify a characteristic of that doc. If an attribute implements  PrintRequestAttribute as well as DocAttribute, the client may include the  attribute in a attribute set which specifies a print job to specify a  characteristic for all the docs in that job.  See Also:     DocAttributeSet, PrintRequestAttributeSet",1,0,0,0,0,0,0,0,0,0,1,0
"Class HashDocAttributeSet provides an attribute set which inherits its  implementation from class HashAttributeSet and enforces the semantic  restrictions of interface DocAttributeSet.  See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,1,0
"Construct a new hash print service attribute set, initially populated with the given value.  Parameters: attribute - Attribute value to add to the set. Throws: NullPointerException - (unchecked exception) Thrown if attribute is null.",1,0,0,0,0,0,0,0,0,0,0,0
"Construct a new print service attribute set, initially populated with the values from the given array. The new attribute set is populated by adding the elements of attributes array to the set in sequence, starting at index 0. Thus, later array elements may replace earlier array elements if the array contains duplicate attribute values or attribute categories.  Parameters: attributes - Array of attribute values to add to the set. If null, an empty attribute set is constructed. Throws: NullPointerException - (unchecked exception) Thrown if any element of attributes is null.",1,0,0,0,0,0,0,0,0,0,0,0
"Class IntegerSyntax is an abstract base class providing the common  implementation of all attributes with integer values.  Under the hood, an integer attribute is just an integer. You can get an  integer attribute's integer value by calling getValue(). An integer  attribute's integer value is established when it is constructed (see  IntegerSyntax(int)). Once constructed, an integer attribute's value is  immutable.  See Also:     Serialized Form",0,0,0,0,0,0,1,1,0,0,0,0
"Get this resolution attribute's resolution values in the given units. The values are rounded to the nearest integer.  Parameters: units - Unit conversion factor, e.g. DPI or DPCM. Returns: A two-element array with the cross feed direction resolution at index 0 and the feed direction resolution at index 1. Throws: IllegalArgumentException - (unchecked exception) Thrown if units < 1.",1,0,0,0,0,0,0,0,0,0,0,1
"Returns whether this text attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: 1. object is not null. 2. object is an instance of class TextSyntax. 3. This text attribute's underlying string and object's underlying string are equal. 4. This text attribute's locale and object's locale are equal.  Overrides: equals in class Object Parameters: object - Object to compare to. Returns: True if object is equivalent to this text attribute, false otherwise. See Also: Object.hashCode(), Hashtable",1,0,0,0,0,0,0,0,0,0,0,1
"Class Chromaticity is a printing attribute class, an enumeration, that  specifies monochrome or color printing. This is used by a print client to  specify how the print data should be generated or processed. It is not  descriptive of the color capabilities of the device. Query the service's  ColorSupported attribute to determine if the device can be verified to  support color printing.  The table below shows the effects of specifying a Chromaticity attribute of  MONOCHROME or COLOR for a monochrome or color document.  Chromaticity Attribute 	 Effect on Monochrome Document 	 Effect on Color Document MONOCHROME 	 Printed as is, in monochrome 	 Printed in monochrome, with  colors converted to shades of gray COLOR 	 Printed as is, in monochrome 	 Printed as is, in color  IPP Compatibility: Chromaticity is not an IPP attribute at present.  See Also:     Serialized Form",0,0,0,0,0,0,1,1,0,0,0,0
"Class Copies is an integer valued printing attribute class that specifies  the number of copies to be printed.  On many devices the supported number of collated copies will be limited by  the number of physical output bins on the device, and may be different from  the number of uncollated copies which can be supported.  The effect of a Copies attribute with a value of n on a multidoc print job  (a job with multiple documents) depends on the (perhaps defaulted) value of  the MultipleDocumentHandling attribute:      * SINGLE_DOCUMENT -- The result will be n copies of a single output       document comprising all the input docs.      * SINGLE_DOCUMENT_NEW_SHEET -- The result will be n copies of a single       output document comprising all the input docs, and the first       impression of each input doc will always start on a new media sheet.      * SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- The result will be n copies       of the first input document, followed by n copies of the second input       document, . . . followed by n copies of the last input document.      * SEPARATE_DOCUMENTS_COLLATED_COPIES -- The result will be the first       input document, the second input document, . . . the last input       document, the group of documents being repeated n times.  IPP Compatibility: The integer value gives the IPP integer value. The  category name returned by getName() gives the IPP attribute name.  See Also:     Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"Class Destination is a printing attribute class, a URI, that is used to  indicate an alternate destination for the spooled printer formatted data.  Many PrintServices will not support the notion of a destination other than  the printer device, and so will not support this attribute.  A common use for this attribute will be applications which want to redirect  output to a local disk file : eg.file:out.prn. Note that proper  construction of file: scheme URI instances should be performed using the  toURI() method of class File. See the documentation on that class for more  information.  If a destination URI is specified in a PrintRequest and it is not  accessible for output by the PrintService, a PrintException will be thrown.  The PrintException may implement URIException to provide a more specific  cause.  IPP Compatibility: Destination is not an IPP attribute.  See Also:     Serialized Form",1,0,0,0,0,1,1,1,0,0,0,0
"Get the name of the category of which this attribute value is an instance.  For class Destination, the category name is spool-data-destination.  Specified by: getName in interface Attribute Returns: Attribute category name.",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the string table for class Fidelity.  Overrides: getStringTable in class EnumSyntax Returns: the string table",1,0,0,0,0,0,0,0,0,0,0,1
" Bind the document(s) with two staples (wire stitches) along the left edge assuming a portrait document (see above). ",0,0,0,0,0,0,0,0,0,0,0,0
"Class JobImpressionsCompleted is an integer valued printing attribute class  that specifies the number of impressions completed for the job so far. For  printing devices, the impressions completed includes interpreting, marking,  and stacking the output.  The JobImpressionsCompleted attribute describes the progress of the job.  This attribute is intended to be a counter. That is, the  JobImpressionsCompleted value for a job that has not started processing  must be 0. When the job's JobState is PROCESSING or PROCESSING_STOPPED, the  JobImpressionsCompleted value is intended to increase as the job is  processed; it indicates the amount of the job that has been processed at  the time the Print Job's attribute set is queried or at the time a print  job event is reported. When the job enters the COMPLETED, CANCELED, or  ABORTED states, the JobImpressionsCompleted value is the final value for  the job.  IPP Compatibility: The integer value gives the IPP integer value. The  category name returned by getName() gives the IPP attribute name.  See Also:     JobImpressions, JobImpressionsSupported, JobKOctetsProcessed,      JobMediaSheetsCompleted, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Class JobKOctets is an integer valued printing attribute class that  specifies the total size of the document(s) in K octets, i.e., in units of  1024 octets requested to be processed in the job. The value must be rounded  up, so that a job between 1 and 1024 octets must be indicated as being 1K  octets, 1025 to 2048 must be 2K octets, etc. For a multidoc print job (a  job with multiple documents), the JobKOctets value is computed by adding up  the individual documents' sizes in octets, then rounding up to the next K  octets value.  The JobKOctets attribute describes the size of the job. This attribute is  not intended to be a counter; it is intended to be useful routing and  scheduling information if known. The printer may try to compute the  JobKOctets attribute's value if it is not supplied in the Print Request.  Even if the client does supply a value for the JobKOctets attribute in the  Print Request, the printer may choose to change the value if the printer is  able to compute a value which is more accurate than the client supplied  value. The printer may be able to determine the correct value for the  JobKOctets attribute either right at job submission time or at any later  point in time.  The JobKOctets value must not include the multiplicative factors  contributed by the number of copies specified by the Copies attribute,  independent of whether the device can process multiple copies without  making multiple passes over the job or document data and independent of  whether the output is collated or not. Thus the value is independent of the  implementation and indicates the size of the document(s) measured in K  octets independent of the number of copies.  The JobKOctets value must also not include the multiplicative factor due to  a copies instruction embedded in the document data. If the document data  actually includes replications of the document data, this value will  include such replication. In other words, this value is always the size of  the source document data, rather than a measure of the hardcopy output to  be produced.  The size of a doc is computed based on the print data representation class  as specified by the doc's DocFlavor, as shown in the table below.  Representation Class 	Document Size byte[] 	Length of the byte array java.io.InputStream 	Number of bytes read from the stream char[] 	Length of the character array x 2 java.lang.String 	Length of the string x 2 java.io.Reader 	Number of characters read from the stream x 2 java.net.URL 	Number of bytes read from the file at the given URL address java.awt.image.renderable.RenderableImage 	Implementation dependent* java.awt.print.Printable 	Implementation dependent* java.awt.print.Pageable 	Implementation dependent*  * In these cases the Print Service itself generates the print data sent to  the printer. If the Print Service supports the JobKOctets attribute, for  these cases the Print Service itself must calculate the size of the print  data, replacing any JobKOctets value the client specified.  IPP Compatibility: The integer value gives the IPP integer value. The  category name returned by getName() gives the IPP attribute name.  See Also:     JobKOctetsSupported, JobKOctetsProcessed, JobImpressions,      JobMediaSheets, Serialized Form",0,1,1,1,0,0,1,0,0,0,0,0
"Construct a new job K octets attribute with the given integer value.  Parameters: value - Integer value. Throws: IllegalArgumentException - (Unchecked exception) Thrown if value is less than 0.",1,0,0,0,0,0,0,0,0,0,0,1
"Construct a new job K octets processed attribute with the given integer value.  Parameters: value - Integer value. Throws: IllegalArgumentException - (Unchecked exception) Thrown if value is less than 0.",0,0,0,0,0,0,0,0,0,0,0,1
"Class JobMediaSheetsCompleted is an integer valued printing attribute class  that specifies the number of media sheets which have completed marking and  stacking for the entire job so far, whether those sheets have been  processed on one side or on both.  The JobMediaSheetsCompleted attribute describes the progress of the job.  This attribute is intended to be a counter. That is, the  JobMediaSheetsCompleted value for a job that has not started processing  must be 0. When the job's JobState is PROCESSING or PROCESSING_STOPPED, the  JobMediaSheetsCompleted value is intended to increase as the job is  processed; it indicates the amount of the job that has been processed at  the time the Print Job's attribute set is queried or at the time a print  job event is reported. When the job enters the COMPLETED, CANCELED, or  ABORTED states, the JobMediaSheetsCompleted value is the final value for  the job.  IPP Compatibility: The integer value gives the IPP integer value. The  category name returned by getName() gives the IPP attribute name.  See Also:     JobMediaSheets, JobMediaSheetsSupported, JobKOctetsProcessed,      JobImpressionsCompleted, Serialized Form",1,0,1,0,0,0,1,0,0,0,0,0
"Construct a new job media sheets completed attribute with the given integer value.  Parameters: value - Integer value. Throws: IllegalArgumentException - (Unchecked exception) Thrown if value is less than 0.",1,0,0,0,0,0,0,0,0,0,0,1
"Get the printing attribute class which is to be used as the category for this printing attribute value.  For class JobOriginatingUserName, the category is class JobOriginatingUserName itself.  Specified by: getCategory in interface Attribute Returns: Printing attribute class (category), an instance of class java.lang.Class.",0,0,0,0,0,0,0,0,0,0,0,1
"JobState is a printing attribute class, an enumeration, that identifies the  current state of a print job. Class JobState defines standard job state  values. A Print Service implementation only needs to report those job  states which are appropriate for the particular implementation; it does not  have to report every defined job state. The JobStateReasons attribute  augments the JobState attribute to give more detailed information about the  job in the given job state.  IPP Compatibility: The category name returned by getName() is the IPP  attribute name. The enumeration's integer value is the IPP enum value. The  toString() method returns the IPP string representation of the attribute  value.  See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"Class MediaSize.JIS includes MediaSize values for JIS (Japanese) media. *",0,0,0,0,0,0,1,0,0,0,0,0
" Specifies the JIS B7 size, 91 mm by 128 mm. ",1,0,0,0,0,0,0,0,0,0,0,1
" Specifies the JIS Kaku (square) \#1 envelope size, 270 mm by 382 mm. ",1,0,0,0,0,0,0,0,0,0,0,0
"Class MediaSize.NA includes MediaSize values for North American media.",0,0,0,0,0,0,0,0,0,0,0,1
" Specifies the Personal envelope size, 3.625 inch by 6.5 inch. ",1,0,0,0,0,0,0,0,0,0,0,0
" The manual feed input tray in the printer. ",0,1,0,0,0,0,0,0,0,0,0,1
"Class OutputDeviceAssigned is a printing attribute class, a text attribute,  that identifies the output device to which the service has assigned this  job. If an output device implements an embedded Print Service instance, the  printer need not set this attribute. If a print server implements a Print  Service instance, the value may be empty (zero- length string) or not  returned until the service assigns an output device to the job. This  attribute is particularly useful when a single service supports multiple  devices (so called fan-out).  IPP Compatibility: The string value gives the IPP name value. The locale  gives the IPP natural language. The category name returned by getName()  gives the IPP attribute name.  See Also:     Serialized Form",1,0,0,1,0,0,1,0,0,0,0,0
"Returns whether this output device assigned attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: 1. object is not null. 2. object is an instance of class OutputDeviceAssigned. 3. This output device assigned attribute's underlying string and object's underlying string are equal. 4. This output device assigned attribute's locale and object's locale are equal.  Overrides: equals in class TextSyntax Parameters: object - Object to compare to. Returns: True if object is equivalent to this output device assigned attribute, false otherwise. See Also: Object.hashCode(), Hashtable",1,0,0,0,1,0,0,0,0,0,0,0
"Class PageRanges is a printing attribute class, a set of integers, that  identifies the range(s) of print-stream pages that the Printer object uses  for each copy of each document which are to be printed. Nothing is printed  for any pages identified that do not exist in the document(s). The  attribute is associated with print-stream pages, not application-numbered  pages (for example, the page numbers found in the headers and or footers  for certain word processing applications).  In most cases, the exact pages to be printed will be generated by a device  driver and this attribute would not be required. However, when printing an  archived document which has already been formatted, the end user may elect  to print just a subset of the pages contained in the document. In this  case, if a page range of n-m is specified, the first page to be printed  will be page n. All subsequent pages of the document will be printed  through and including page m.  If a PageRanges attribute is not specified for a print job, all pages of  the document will be printed. In other words, the default value for the  PageRanges attribute is always {{1, Integer.MAX_VALUE}}.  The effect of a PageRanges attribute on a multidoc print job (a job with  multiple documents) depends on whether all the docs have the same page  ranges specified or whether different docs have different page ranges  specified, and on the (perhaps defaulted) value of the  MultipleDocumentHandling attribute.      * If all the docs have the same page ranges specified, then any value       of MultipleDocumentHandling makes sense, and the printer's processing       depends on the MultipleDocumentHandling value:           o SINGLE_DOCUMENT -- All the input docs will be combined together             into one output document. The specified page ranges of that             output document will be printed.            o SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be             combined together into one output document, and the first             impression of each input doc will always start on a new media             sheet. The specified page ranges of that output document will             be printed.            o SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- For each separate input             doc, the specified page ranges will be printed.            o SEPARATE_DOCUMENTS_COLLATED_COPIES -- For each separate input             doc, the specified page ranges will be printed.           o SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- For each separate input             doc, its own specified page ranges will be printed..            o SEPARATE_DOCUMENTS_COLLATED_COPIES -- For each separate input             doc, its own specified page ranges will be printed..  IPP Compatibility: The PageRanges attribute's canonical array form gives  the lower and upper bound for each range of pages to be included in and IPP  page-ranges attribute. See class SetOfIntegerSyntax for an explanation of  canonical array form. The category name returned by getName() gives the IPP  attribute name.  See Also:     Serialized Form",1,1,1,1,1,1,1,1,0,0,0,0
"Class PagesPerMinute is an integer valued printing attribute that indicates  the nominal number of pages per minute to the nearest whole number which  may be generated by this printer (e.g., simplex, black-and-white). This  attribute is informative, not a service guarantee. Generally, it is the  value used in the marketing literature to describe the device. A value of 0  indicates a device that takes more than two minutes to process a page.  IPP Compatibility: The integer value gives the IPP integer value. The  category name returned by getName() gives the IPP attribute name.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Class PagesPerMinuteColor is an integer valued printing attribute that  indicates the nominal number of pages per minute to the nearest whole  number which may be generated by this printer when printing color (e.g.,  simplex, color). For purposes of this attribute, color means the same as  for the ColorSupported attribute, namely, the device is capable of any type  of color printing at all, including highlight color as well as full process  color. This attribute is informative, not a service guarantee. Generally,  it is the value used in the marketing literature to describe the color  capabilities of this device. A value of 0 indicates a device that takes  more than two minutes to process a page. If a color device has several  color modes, it may use the pages-per- minute value for this attribute that  corresponds to the mode that produces the highest number.  A black and white only printer must not include the PagesPerMinuteColor  attribute in its attribute set or service registration. If this attribute  is present, then the ColorSupported printer description attribute must also  be present and have a value of SUPPORTED.  IPP Compatibility: The integer value gives the IPP integer value. The  category name returned by getName() gives the IPP attribute name.  See Also:     Serialized Form",1,1,1,0,0,0,0,0,0,0,1,0
"Construct a new printer is accepting jobs enumeration value with the given integer value.  Parameters: value - Integer value.",1,0,0,0,0,0,0,0,0,0,0,1
"Class PrinterLocation is a printing attribute class, a text attribute, that  identifies the location of the device. This could include things like: in  Room 123A, second floor of building XYZ.  IPP Compatibility: The string value gives the IPP name value. The locale  gives the IPP natural language. The category name returned by getName()  gives the IPP attribute name.  See Also:     Serialized Form",0,1,0,0,0,0,0,0,0,0,0,0
"Returns whether this printer resolution attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: 1. object is not null. 2. object is an instance of class PrinterResolution. 3. This attribute's cross feed direction resolution is equal to object's cross feed direction resolution. 4. This attribute's feed direction resolution is equal to object's feed direction resolution.  Overrides: equals in class ResolutionSyntax Parameters: object - Object to compare to. Returns: True if object is equivalent to this printer resolution attribute, false otherwise. See Also: Object.hashCode(), Hashtable",1,0,1,0,0,0,0,0,0,0,1,1
" At least one input tray is empty. ",1,0,0,0,0,0,0,0,0,0,0,0
" The device marker supply waste receptacle is almost full. ",1,0,0,0,0,0,0,0,0,0,0,0
"Returns whether this queued job count attribute is equivalent to the passed in object. To be equivalent, all of the following conditions mus be true: 1. object is not null. 2. object is an instance of class QueuedJobCount. 3. This queued job count attribute's value and object's value are equal.  Overrides: equals in class IntegerSyntax Parameters: object - Object to compare to. Returns: True if object is equivalent to this queued job count attribute, false otherwise. See Also: Object.hashCode(), Hashtable",1,1,0,0,0,0,0,0,0,0,0,1
"Construct a new reference URI scheme enumeration value with the given integer value.  Parameters: value - Integer value.",0,0,0,0,0,0,0,0,0,0,0,1
"Class RequestingUserName is a printing attribute class, a text attribute,  that specifies the name of the end user that submitted the print job. A  requesting user name is an arbitrary string defined by the client. The  printer does not put the client-specified RequestingUserName attribute into  the Print Job's attribute set; rather, the printer puts in a  JobOriginatingUserName attribute. This means that services which support  specifying a username with this attribute should also report a  JobOriginatingUserName in the job's attribute set. Note that many print  services may have a way to independently authenticate the user name, and so  may state support for a requesting user name, but in practice will then  report the user name authenticated by the service rather than that  specified via this attribute.  IPP Compatibility: The string value gives the IPP name value. The locale  gives the IPP natural language. The category name returned by getName()  gives the IPP attribute name.  See Also:     Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
"Class Severity is a printing attribute class, an enumeration, that denotes  the severity of a PrinterStateReason attribute.  Instances of Severity do not appear in a Print Service's attribute set  directly. Rather, a PrinterStateReasons attribute appears in the Print  Service's attribute set. The PrinterStateReasons attribute contains zero,  one, or more than one PrinterStateReason objects which pertain to the Print  Service's status, and each PrinterStateReason object is associated with a  Severity level of REPORT (least severe), WARNING, or ERROR (most severe).  The printer adds a PrinterStateReason object to the Print Service's  PrinterStateReasons attribute when the corresponding condition becomes true  of the printer, and the printer removes the PrinterStateReason object again  when the corresponding condition becomes false, regardless of whether the  Print Service's overall PrinterState also changed.  IPP Compatibility: Severity.toString() returns either error, warning,  or report. The string values returned by each individual  PrinterStateReason and associated Severity object's toString() methods,  concatenated together with a hyphen (-) in between, gives the IPP keyword  value for a PrinterStateReasons. The category name returned by getName()  gives the IPP attribute name.  See Also:     Serialized Form",1,1,0,0,0,1,1,0,0,0,0,0
"Implementations of this listener interface should be attached to a  DocPrintJob to monitor the status of the printer job. These callback  methods may be invoked on the thread processing the print job, or a service  created notification thread. In either case the client should not perform  lengthy processing in these callbacks.",0,0,0,1,0,1,0,0,0,0,0,0
"Called to notify the client that the job failed to complete successfully and will have to be resubmitted.  Parameters: pje - the job generating this event",0,0,0,0,0,0,0,0,0,0,0,0
"Class PrintServiceAttributeEvent encapsulates an event a Print Service  instance reports to let the client know of changes in the print service  state.  See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Supports delegation for method implementations in PortableRemoteObject. The  delegate is a singleton instance of a class that implements this interface  and provides a replacement implementation for all the methods of  javax.rmi.PortableRemoteObject. Delegates are enabled by providing the  delegate's class name as the value of the  javax.rmi.CORBA.PortableRemoteObjectClass system property.  See Also:     PortableRemoteObject",0,1,0,0,1,0,0,1,0,0,0,0
"Supports delegation for method implementations in Stub. A delegate is an  instance of a class that implements this interface and provides a  replacement implementation for all the methods of javax.rmi.CORBA.Stub. If  delegation is enabled, each stub has an associated delegate. Delegates are  enabled by providing the delegate's class name as the value of the  javax.rmi.CORBA.StubClass system property.  See Also:     Stub",1,1,0,0,0,0,1,1,0,0,0,0
"Delegation call for Stub.writeObject(java.io.ObjectOutputStream).  Throws: IOException",0,0,0,0,0,0,1,0,0,0,0,1
"Returns the tie (if any) for a given target object.  Returns: the tie or null if no tie is registered for the given target.",1,0,0,0,0,0,1,0,0,0,0,0
"Server implementation objects may either inherit from  javax.rmi.PortableRemoteObject or they may implement a remote interface and  then use the exportObject method to register themselves as a server object.  The toStub method takes a server implementation and returns a stub that can  be used to access that server object. The connect method makes a Remote  object ready for remote communication. The unexportObject method is used to  deregister a server object, allowing it to become available for garbage  collection. The narrow method takes an object reference or abstract  interface type and attempts to narrow it to conform to the given interface.  If the operation is successful the result will be an object of the  specified type, otherwise an exception will be thrown.",0,0,0,0,0,1,1,0,0,0,0,0
"Returns a stub for the given server object.  Parameters: obj - the server object for which a stub is required. Must either be a subclass of PortableRemoteObject or have been previously the target of a call to exportObject(java.rmi.Remote). Returns: the most derived stub for the object. Throws: NoSuchObjectException - if a stub cannot be located for the given server object.",1,0,0,0,0,0,0,0,0,0,0,0
"An SslRMIClientSocketFactory instance is used by the RMI runtime in order  to obtain client sockets for RMI calls via SSL.  This class implements RMIClientSocketFactory over the Secure Sockets Layer  (SSL) or Transport Layer Security (TLS) protocols.  This class creates SSL sockets using the default SSLSocketFactory (see  SSLSocketFactory.getDefault()). All instances of this class are  functionally equivalent. In particular, they all share the same truststore,  and the same keystore when client authentication is required by the server.  This behavior can be modified in subclasses by overriding the  createSocket(String,int) method; in that case, equals and hashCode may also  need to be overridden.  If the system property javax.rmi.ssl.client.enabledCipherSuites is  specified, the createSocket(String,int) method will call  SSLSocket.setEnabledCipherSuites(String[]) before returning the socket. The  value of this system property is a string that is a comma-separated list of  SSL/TLS cipher suites to enable.  If the system property javax.rmi.ssl.client.enabledProtocols is specified,  the createSocket(String,int) method will call  SSLSocket.setEnabledProtocols(String[]) before returning the socket. The  value of this system property is a string that is a comma-separated list of  SSL/TLS protocol versions to enable.  Since:     1.5 See Also:     SSLSocketFactory, SslRMIServerSocketFactory, Serialized Form",1,0,1,1,0,0,1,1,0,0,0,0
"Creates a new SslRMIServerSocketFactory with the default SSL socket configuration.  SSL connections accepted by server sockets created by this factory have the default cipher suites and protocol versions enabled and do not require client authentication.",1,1,0,0,0,0,0,0,0,0,0,0
"Same as eval(Reader) except that the abstract eval(String, ScriptContext) is used.  Specified by: eval in interface ScriptEngine Parameters: script - A String containing the source of the script. Returns: The return value from eval(String, ScriptContext) Throws: ScriptException - if an error occurrs in script. NullPointerException - if any of the parameters is null.",1,0,0,0,0,0,1,0,0,0,0,0
"The optional interface implemented by ScriptEngines whose methods allow the  invocation of procedures in scripts that have previously been executed.  Since:     1.6",0,1,0,0,0,0,0,0,0,0,0,0
"The ScriptEngineManager implements a discovery and instantiation mechanism  for ScriptEngine classes and also maintains a collection of key/value pairs  storing state shared by all engines created by the Manager. This class uses  the service provider mechanism to enumerate all the implementations of  ScriptEngineFactory.  The ScriptEngineManager provides a method to return an array of all these  factories as well as utility methods which look up factories on the basis  of language name, file extension and mime type.  The Bindings of key/value pairs, referred to as the Global Scope  maintained by the manager is available to all instances of ScriptEngine  created by the ScriptEngineManager. The values in the Bindings are  generally exposed in all scripts.  Since:     1.6",1,0,0,1,0,0,1,0,0,0,0,0
"Sets the specified key/value pair in the Global Scope.  Parameters: key - Key to set value - Value to set. Throws: NullPointerException - if key is null. IllegalArgumentException - if key is empty string.",1,0,0,0,0,0,0,0,0,0,0,1
"Registers a ScriptEngineFactory to handle a mime type. Overrides any such association found using the Discovery mechanism.  Parameters: type - The mime type to be associated with the ScriptEngineFactory . factory - The class to associate with the given mime type. Throws: NullPointerException - if any of the parameters is null.",1,0,0,0,0,0,0,0,0,0,0,0
"The generic Exception class for the Scripting APIs. Checked exception types  thrown by underlying scripting implementations must be wrapped in instances  of ScriptException. The class has members to store line and column numbers  and filenames if this information is available.  Since:     1.6 See Also:     Serialized Form",0,0,1,1,0,0,1,0,0,0,0,0
"Constructor uses an existing Map to store the values.  Parameters: m - The Map backing this SimpleBindings. Throws: NullPointerException - if m is null",1,0,0,0,0,0,0,0,0,0,0,0
"@Deprecated public abstract class Policy      extends Object   This is an abstract class for representing the system policy for  Subject-based authorization. A subclass implementation of this class  provides a means to specify a Subject-based access contr",1,0,1,1,0,0,1,0,1,1,0,0
"This class is used to protect access to private Credentials belonging to a  particular Subject. The Subject is represented by a Set of Principals.  The target name of this Permission specifies a Credential class name, and a  Set of Principals. The only valid value for this Permission's actions is,  read. The target name must abide by the following syntax:   CredentialClass {PrincipalClass PrincipalName}*   For example, the following permission grants access to the  com.sun.PrivateCredential owned by Subjects which have a com.sun.Principal  with the name, duke. Note that although this example, as well as all the  examples below, do not contain Codebase, SignedBy, or Principal information  in the grant statement (for simplicity reasons), actual policy  configurations should specify that information when appropriate.    grant { permission javax.security.auth.PrivateCredentialPermission com.sun.PrivateCredential com.sun.Principal  duke , read; };   If CredentialClass is *, then access is granted to all private  Credentials belonging to the specified Subject. If PrincipalName is *,  then access is granted to the specified Credential owned by any Subject  that has the specified Principal (the actual PrincipalName doesn't matter).  For example, the following grants access to the a.b.Credential owned by any  Subject that has an a.b.Principal.   grant { permission javax.security.auth.PrivateCredentialPermission a.b.Credential a.b.Principal *, read; };   If both the PrincipalClass and PrincipalName are *, then access is  granted to the specified Credential owned by any Subject.  In addition, the PrincipalClass/PrincipalName pairing may be repeated:   grant { permission javax.security.auth.PrivateCredentialPermission a.b.Credential a.b.Principal duke c.d.Principal dukette, read; };   The above grants access to the private Credential, a.b.Credential,  belonging to a Subject with at least two associated Principals:  a.b.Principal with the name, duke, and c.d.Principal, with the name,  dukette.  See Also:     Serialized Form",1,0,1,0,0,0,1,1,1,0,0,0
"Returns the hash code value for this object.  Specified by: hashCode in class Permission Returns: a hash code value for this object. See Also: Object.equals(java.lang.Object), Hashtable",0,0,0,0,0,0,0,0,0,0,0,1
"Implementations of this interface are passed to a CallbackHandler, allowing  underlying security services the ability to interact with a calling  application to retrieve specific authentication data such as usernames and  passwords, or to display certain information, such as error and warning  messages.  Callback implementations do not retrieve or display the information  requested by underlying security services. Callback implementations simply  provide the means to pass such requests to applications, and for  applications, if appropriate, to return requested information back to the  underlying security services.  See Also:     CallbackHandler, ChoiceCallback, ConfirmationCallback,      LanguageCallback, NameCallback, PasswordCallback, TextInputCallback,      TextOutputCallback  Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,1,0,0,0,0,0,0,0,0
"Set the selected choices.  Parameters: selections - the selections represented as indexes into the choices list. Throws: UnsupportedOperationException - if multiple selections are not allowed, as determined by allowMultipleSelections. See Also: getSelectedIndexes()",0,0,0,0,0,0,0,0,0,0,0,1
"Construct a ConfirmationCallback with a message type, an option type and a default option.  Underlying security services use this constructor if they require either a YES/NO, YES/NO/CANCEL or OK/CANCEL confirmation.  Parameters: messageType - the message type (INFORMATION, WARNING or ERROR).  optionType - the option type (YES_NO_OPTION, YES_NO_CANCEL_OPTION or OK_CANCEL_OPTION).  defaultOption - the default option from the provided optionType ( YES, NO, CANCEL or OK). Throws: IllegalArgumentException - if messageType is not either INFORMATION, WARNING, or ERROR, if optionType is not either YES_NO_OPTION, YES_NO_CANCEL_OPTION, or OK_CANCEL_OPTION, or if defaultOption does not correspond to one of the options in optionType.",1,0,0,0,0,0,1,0,0,0,0,1
"Underlying security services instantiate and pass a NameCallback to the  handle method of a CallbackHandler to retrieve name information.  See Also:     CallbackHandler, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"This class is used to restrict the usage of the Kerberos delegation model,  ie: forwardable and proxiable tickets.  The target name of this Permission specifies a pair of kerberos service  principals. The first is the subordinate service principal being entrusted  to use the TGT. The second service principal designates the target service  the subordinate service principal is to interact with on behalf of the  initiating KerberosPrincipal. This latter service principal is specified to  restrict the use of a proxiable ticket.  For example, to specify the host service use of a forwardable TGT the  target permission is specified as follows:   DelegationPermission( host/foo.example.com@EXAMPLE.COM   krbtgt/EXAMPLE.COM@EXAMPLE.COM );   To give the backup service a proxiable nfs service ticket the target  permission might be specified:   DelegationPermission( backup/bar.example.com@EXAMPLE.COM   nfs/home.EXAMPLE.COM@EXAMPLE.COM );   Since:     1.4 See Also:     Serialized Form",1,0,0,0,0,0,0,0,1,0,0,0
"Constructs a KerberosKey from a principal's password.  Parameters: principal - the principal that this password belongs to password - the password that should be used to compute the key algorithm - the name for the algorithm that this key will be used for. This parameter may be null in which case the default algorithm DES will be assumed. Throws: IllegalArgumentException - if the name of the algorithm passed is unsupported.",1,0,0,0,0,0,0,0,0,0,0,1
"Extends the validity period of this ticket. The ticket will contain a new session key if the refresh operation succeeds. The refresh operation will fail if the ticket is not renewable or the latest allowable renew time has passed. Any other error returned by the KDC will also cause this method to fail. Note: This method is not synchronized with the the accessor methods of this object. Hence callers need to be aware of multiple threads that might access this and try to renew it at the same time.  Specified by: refresh in interface Refreshable Throws: RefreshFailedException - if the ticket is not renewable, or the latest allowable renew time has passed, or the KDC returns some error. See Also: isRenewable(), getRenewTill()",1,0,0,0,1,0,0,0,0,0,1,0
"A Configuration object is responsible for specifying which LoginModules  should be used for a particular application, and in what order the  LoginModules should be invoked.  A login configuration contains the following information. Note that this  example only represents the default syntax for the Configuration. Subclass  implementations of this class may implement alternative syntaxes and may  retrieve the Configuration from any source such as files, databases, or  servers.   Name { ModuleClass  Flag    ModuleOptions; ModuleClass  Flag    ModuleOptions; ModuleClass  Flag    ModuleOptions; }; Name { ModuleClass  Flag    ModuleOptions; ModuleClass  Flag    ModuleOptions; }; other { ModuleClass  Flag    ModuleOptions; ModuleClass  Flag    ModuleOptions; };   Each entry in the Configuration is indexed via an application name, Name,  and contains a list of LoginModules configured for that application. Each  LoginModule is specified via its fully qualified class name. Authentication  proceeds down the module list in the exact order specified. If an  application does not have specific entry, it defaults to the specific entry  for other.  The Flag value controls the overall behavior as authentication proceeds  down the stack. The following represents a description of the valid values  for Flag and their respective semantics:   1) Required     - The LoginModule is required to succeed. If it succeeds or fails, authentication still continues to proceed down the LoginModule list.  2) Requisite    - The LoginModule is required to succeed. If it succeeds, authentication continues down the LoginModule list.  If it fails, control immediately returns to the application (authentication does not proceed down the LoginModule list).  3) Sufficient   - The LoginModule is not required to succeed.  If it does succeed, control immediately returns to the application (authentication does not proceed down the LoginModule list). If it fails, authentication continues down the LoginModule list.  4) Optional     - The LoginModule is not required to succeed.  If it succeeds or fails, authentication still continues to proceed down the LoginModule list.   The overall authentication succeeds only if all Required and Requisite  LoginModules succeed. If a Sufficient LoginModule is configured and  succeeds, then only the Required and Requisite LoginModules prior to that  Sufficient LoginModule need to have succeeded for the overall  authentication to succeed. If no Required or Requisite LoginModules are  configured for an application, then at least one Sufficient or Optional  LoginModule must succeed.  ModuleOptions is a space separated list of LoginModule-specific values  which are passed directly to the underlying LoginModules. Options are  defined by the LoginModule itself, and control the behavior within it. For  example, a LoginModule may define options to support debugging/testing  capabilities. The correct way to specify options in the Configuration is by  using the following key-value pairing: debug=true. The key and value  should be separated by an 'equals' symbol, and the value should be  surrounded by double quotes. If a String in the form, ${system.property},  occurs in the value, it will be expanded to the value of the system  property. Note that there is no limit to the number of options a  LoginModule may define.  The following represents an example Configuration entry based on the syntax  above:   Login { com.sun.security.auth.module.UnixLoginModule required; com.sun.security.auth.module.Krb5LoginModule optional useTicketCache=true ticketCache=${user.home}${/}tickets; };   This Configuration specifies that an application named, Login, requires  users to first authenticate to the  com.sun.security.auth.module.UnixLoginModule, which is required to succeed.  Even if the UnixLoginModule authentication fails, the  com.sun.security.auth.module.Krb5LoginModule still gets invoked. This helps  hide the source of failure. Since the Krb5LoginModule is Optional, the  overall authentication succeeds only if the UnixLoginModule (Required)  succeeds.  Also note that the LoginModule-specific options, useTicketCache=true and  ticketCache=${user.home}${/}tickets, are passed to the Krb5LoginModule.  These options instruct the Krb5LoginModule to use the ticket cache at the  specified location. The system properties, user.home and /  (file.separator), are expanded to their respective values.  There is only one Configuration object installed in the runtime at any  given time. A Configuration object can be installed by calling the  setConfiguration method. The installed Configuration object can be obtained  by calling the getConfiguration method.  If no Configuration object has been installed in the runtime, a call to  getConfiguration installs an instance of the default Configuration  implementation (a default subclass implementation of this abstract class).  The default Configuration implementation can be changed by setting the  value of the login.configuration.provider security property (in the Java  security properties file) to the fully qualified name of the desired  Configuration subclass implementation. The Java security properties file is  located in the file named <JAVA_HOME>/lib/security/java.security.  <JAVA_HOME> refers to the value of the java.home system property, and  specifies the directory where the JRE is installed.  Application code can directly subclass Configuration to provide a custom  implementation. In addition, an instance of a Configuration object can be  constructed by invoking one of the getInstance factory methods with a  standard type. The default policy type is JavaLoginConfig. See Appendix A  in the Java Cryptography Architecture API Specification & Reference for a  list of standard Configuration types.  See Also:     LoginContext",1,1,1,1,0,1,1,1,1,0,1,0
"A generic credential exception.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"This is the basic login exception.  See Also:     LoginContext, Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"Constructs a LoginException with no detail message. A detail message is a String that describes this particular exception.",1,1,0,0,0,0,0,0,0,0,0,0
"LoginModule describes the interface implemented by authentication  technology providers. LoginModules are plugged in under applications to  provide a particular type of authentication.  While applications write to the LoginContext API, authentication technology  providers implement the LoginModule interface. A Configuration specifies  the LoginModule(s) to be used with a particular login application.  Therefore different LoginModules can be plugged in under the application  without requiring any modifications to the application itself.  The LoginContext is responsible for reading the Configuration and  instantiating the appropriate LoginModules. Each LoginModule is initialized  with a Subject, a CallbackHandler, shared LoginModule state, and  LoginModule-specific options. The Subject represents the Subject currently  being authenticated and is updated with relevant Credentials if  authentication succeeds. LoginModules use the CallbackHandler to  communicate with users. The CallbackHandler may be used to prompt for  usernames and passwords, for example. Note that the CallbackHandler may be  null. LoginModules which absolutely require a CallbackHandler to  authenticate the Subject may throw a LoginException. LoginModules  optionally use the shared state to share information or data among  themselves.  The LoginModule-specific options represent the options configured for this  LoginModule by an administrator or user in the login Configuration. The  options are defined by the LoginModule itself and control the behavior  within it. For example, a LoginModule may define options to support  debugging/testing capabilities. Options are defined using a key-value  syntax, such as debug=true. The LoginModule stores the options as a Map so  that the values may be retrieved using the key. Note that there is no limit  to the number of options a LoginModule chooses to define.  The calling application sees the authentication process as a single  operation. However, the authentication process within the LoginModule  proceeds in two distinct phases. In the first phase, the LoginModule's  login method gets invoked by the LoginContext's login method. The login  method for the LoginModule then performs the actual authentication (prompt  for and verify a password for example) and saves its authentication status  as private state information. Once finished, the LoginModule's login  method either returns true (if it succeeded) or false (if it should be  ignored), or throws a LoginException to specify a failure. In the failure  case, the LoginModule must not retry the authentication or introduce  delays. The responsibility of such tasks belongs to the application. If the  application attempts to retry the authentication, the LoginModule's login  method will be called again.  In the second phase, if the LoginContext's overall authentication succeeded  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules  succeeded), then the commit method for the LoginModule gets invoked. The  commit method for a LoginModule checks its privately saved state to see if  its own authentication succeeded. If the overall LoginContext  authentication succeeded and the LoginModule's own authentication  succeeded, then the commit method associates the relevant Principals  (authenticated identities) and Credentials (authentication data such as  cryptographic keys) with the Subject located within the LoginModule.  If the LoginContext's overall authentication failed (the relevant REQUIRED,  REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed), then the  abort method for each LoginModule gets invoked. In this case, the  LoginModule removes/destroys any authentication state originally saved.  Logging out a Subject involves only one phase. The LoginContext invokes the  LoginModule's logout method. The logout method for the LoginModule then  performs the logout procedures, such as removing Principals or Credentials  from the Subject or logging session information.  A LoginModule implementation must have a constructor with no arguments.  This allows classes which load the LoginModule to instantiate it.  See Also:     LoginContext, Configuration",1,1,0,1,0,1,0,0,0,0,0,0
"Method to abort the authentication process (phase 2).  This method is called if the LoginContext's overall authentication failed. (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed).  If this LoginModule's own authentication attempt succeeded (checked by retrieving the private state saved by the login method), then this method cleans up any state that was originally saved.  Returns: true if this method succeeded, or false if this LoginModule should be ignored. Throws: LoginException - if the abort fails",1,0,0,0,0,1,0,0,0,0,0,0
"This class represents an X.500 Principal. X500Principals are represented by  distinguished names such as CN=Duke, OU=JavaSoft, O=Sun Microsystems,  C=US.  This class can be instantiated by using a string representation of the  distinguished name, or by using the ASN.1 DER encoded byte representation  of the distinguished name. The current specification for the string  representation of a distinguished name is defined in RFC 2253. This class,  however, accepts string formats from both RFC 2253 and RFC 1779, and also  recognizes attribute type keywords whose OIDs (Object Identifiers) are  defined in RFC 2459.  The string representation for this X500Principal can be obtained by calling  the getName methods.  Note that the getSubjectX500Principal and getIssuerX500Principal methods of  X509Certificate return X500Principals representing the issuer and subject  fields of the certificate.  Since:     1.4 See Also:     X509Certificate, Serialized Form",0,0,0,0,0,0,0,1,0,1,1,0
"Creates an X500PrivateCredential that associates an X.509 certificate, a private key and the KeyStore alias.  Parameters: cert - X509Certificate key - PrivateKey for the certificate Throws: IllegalArgumentException - if either cert or key is null",1,0,0,0,0,0,0,0,0,0,1,0
"Abstract class for managing a variety of identity certificates. An identity  certificate is a guarantee by a principal that a public key is that of  another principal. (A principal represents an entity such as an individual  user, a group, or a corporation.)  This class is an abstraction for certificates that have different formats  but important common uses. For example, different types of certificates,  such as X.509 and PGP, share general certificate functionality (like  encoding and verifying) and some types of information (like a public key).  X.509, PGP, and SDSI certificates can all be implemented by subclassing the  Certificate class, even though they contain different sets of information,  and they store and retrieve the information in different ways.  Note: The classes in the package javax.security.cert exist for  compatibility with earlier versions of the Java Secure Sockets Extension  (JSSE). New applications should instead use the standard Java SE  certificate classes located in java.security.cert.  Since:     1.4 See Also:     X509Certificate",1,1,0,0,0,0,1,0,0,0,0,0
"This callback is used by SaslClient and SaslServer to retrieve realm  information.  Since:     1.5 See Also:     Serialized Form",1,0,0,1,0,0,1,0,0,0,0,0
"A static class for creating SASL clients and servers.  This class defines the policy of how to locate, load, and instantiate SASL  clients and servers.  For example, an application or library gets a SASL client by doing  something like:       SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, serverName, props, callbackHandler);   It can then proceed to use the instance to create an authentication  connection.  Similarly, a server gets a SASL server by using code that looks as follows:       SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, callbackHandler);   Since:     1.5",1,0,0,0,0,0,0,1,1,0,0,0
"Determines whether this mechanism has an optional initial response. If true, caller should call evaluateChallenge() with an empty array to get the initial response.  Returns: true if this mechanism has an initial response.",1,0,0,0,0,0,0,0,0,0,0,1
"Retrieves the negotiated property. This method can be called only after the authentication exchange has completed (i.e., when isComplete() returns true); otherwise, an IllegalStateException is thrown.  Parameters: propName - the property Returns: The value of the negotiated property. If null, the property was not negotiated or is not applicable to this mechanism. Throws: IllegalStateException - if this authentication exchange has not completed",1,0,0,0,0,0,0,0,0,0,0,1
"An InvalidMidiDataException indicates that inappropriate MIDI data was  encountered. This often means that the data is invalid in and of itself,  from the perspective of the MIDI specification. An example would be an  undefined status byte. However, the exception might simply mean that the  data was invalid in the context it was used, or that the object to which  the data was given was unable to parse or use it. For example, a file  reader might not be able to parse a Type 2 MIDI file, even though that  format is defined in the MIDI specification.  See Also:     Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
"The MetaEventListener interface should be implemented by classes whose  instances need to be notified when a Sequencer has processed a MetaMessage . To register a MetaEventListener object to receive such notifications,  pass it as the argument to the addMetaEventListener method of Sequencer.",0,0,1,0,0,0,1,1,0,0,0,0
"Obtains the current value of the specified controller. The return value is represented with 7 bits. For 14-bit controllers, the MSB and LSB controller value needs to be obtained separately. For example, the 14-bit value of the volume controller can be calculated by multiplying the value of controller 7 (0x07, channel volume MSB) with 128 and adding the value of controller 39 (0x27, channel volume LSB). If the device does not support setting a specific controller, this method returns 0 for that controller. Calling controlChange will have no effect then.  Parameters: controller - the number of the controller whose value is desired. The allowed range is 0-127; see the MIDI 1.0 Specification for the interpretation. Returns: the current value of the specified controller (0 to 127) See Also: controlChange(int, int)",1,0,0,0,0,0,1,1,0,0,1,1
"MidiDevice is the base interface for all MIDI devices. Common devices  include synthesizers, sequencers, MIDI input ports, and MIDI output ports.  A MidiDevice can be a transmitter or a receiver of MIDI events, or both.  Therefore, it can provide Transmitter or Receiver instances (or both).  Typically, MIDI IN ports provide transmitters, MIDI OUT ports and  synthesizers provide receivers. A Sequencer typically provides transmitters  for playback and receivers for recording.  A MidiDevice can be opened and closed explicitly as well as implicitly.  Explicit opening is accomplished by calling open(), explicit closing is  done by calling close() on the MidiDevice instance. If an application opens  a MidiDevice explicitly, it has to close it explicitly to free system  resources and enable the application to exit cleanly. Implicit opening is  done by calling MidiSystem.getReceiver and MidiSystem.getTransmitter. The  MidiDevice used by MidiSystem.getReceiver and MidiSystem.getTransmitter is  implementation-dependant unless the properties javax.sound.midi.Receiver  and javax.sound.midi.Transmitter are used (see the description of  properties to select default providers in MidiSystem). A MidiDevice that  was opened implicitly, is closed implicitly by closing the Receiver or  Transmitter that resulted in opening it. If more than one implicitly  opening Receiver or Transmitter were obtained by the application, the  decive is closed after the last Receiver or Transmitter has been closed. On  the other hand, calling getReceiver or getTransmitter on the device  instance directly does not open the device implicitly. Closing these  Transmitters and Receivers does not close the device implicitly. To use a  device with Receivers or Transmitters obtained this way, the device has to  be opened and closed explicitly.  If implicit and explicit opening and closing are mixed on the same  MidiDevice instance, the following rules apply:      * After an explicit open (either before or after implicit opens), the       device will not be closed by implicit closing. The only way to close       an explicitly opened device is an explicit close.     * An explicit close always closes the device, even if it also has been       opened implicitly. A subsequent implicit close has no further effect. To detect if a MidiDevice represents a hardware MIDI port, the following  programming technique can be used:   MidiDevice device = ...; if ( ! (device instanceof Sequencer) && ! (device instanceof Synthesizer)) { // we're now sure that device represents a MIDI port // ... }   A MidiDevice includes a MidiDevice.Info object to provide manufacturer  information and so on.  See Also:     Synthesizer, Sequencer, Receiver, Transmitter",0,1,1,1,0,0,0,1,1,0,0,0
" The length of the MIDI file in bytes. ",0,0,0,0,0,0,0,0,0,0,0,1
"A Receiver receives MidiEvent objects and typically does something useful  in response, such as interpreting them to generate sound or raw MIDI  output. Common MIDI receivers include synthesizers and MIDI Out ports.  See Also:     MidiDevice, Synthesizer, Transmitter",1,1,0,0,0,0,1,0,0,0,0,0
"Obtains the duration of this sequence, expressed in MIDI ticks.  Returns: this sequence's length in ticks See Also: getMicrosecondLength()",1,0,0,0,0,0,0,0,0,0,0,1
"Stops recording, if active. Playback of the current sequence continues.  Throws: IllegalStateException - if the Sequencer is closed. See Also: startRecording(), isRecording()",1,0,0,0,0,0,0,0,0,0,0,0
"Removes a controller event listener's interest in one or more types of controller event. The controllers argument is an array of MIDI numbers corresponding to the controllers for which the listener should no longer receive change notifications. To completely remove this listener from the list of registered listeners, pass in null for controllers. The returned array contains the MIDI controller numbers for which the listener will now receive events. The array has a length of 0 if the listener will not receive change notifications for any controllers.  Parameters: listener - old listener controllers - the MIDI controller numbers for which change notification should be cancelled, or null to cancel for all controllers Returns: the numbers of all the MIDI controllers whose changes will now be reported to the specified listener See Also: addControllerEventListener(javax.sound.midi.ControllerEventListener, int[])",1,0,1,0,0,0,0,1,0,0,0,0
"A Synthesizer generates sound. This usually happens when one of the  Synthesizer's MidiChannel objects receives a noteOn message, either  directly or via the Synthesizer object. Many Synthesizers support  Receivers, through which MIDI events can be delivered to the Synthesizer.  In such cases, the Synthesizer typically responds by sending a  corresponding message to the appropriate MidiChannel, or by processing the  event itself if the event isn't one of the MIDI channel messages.  The Synthesizer interface includes methods for loading and unloading  instruments from soundbanks. An instrument is a specification for  synthesizing a certain type of sound, whether that sound emulates a  traditional instrument or is some kind of sound effect or other imaginary  sound. A soundbank is a collection of instruments, organized by bank and  program number (via the instrument's Patch object). Different Synthesizer  classes might implement different sound-synthesis techniques, meaning that  some instruments and not others might be compatible with a given  synthesizer. Also, synthesizers may have a limited amount of memory for  instruments, meaning that not every soundbank and instrument can be used by  every synthesizer, even if the synthesis technique is compatible. To see  whether the instruments from a certain soundbank can be played by a given  synthesizer, invoke the isSoundbankSupported method of Synthesizer.  Loading an instrument means that that instrument becomes available for  synthesizing notes. The instrument is loaded into the bank and program  location specified by its Patch object. Loading does not necessarily mean  that subsequently played notes will immediately have the sound of this  newly loaded instrument. For the instrument to play notes, one of the  synthesizer's MidiChannel objects must receive (or have received) a  program-change message that causes that particular instrument's bank and  program number to be selected.  See Also:     MidiSystem.getSynthesizer(), Soundbank, Instrument,      MidiChannel.programChange(int, int), Receiver, Transmitter, MidiDevice",1,1,1,1,0,1,1,0,0,0,0,0
"A SysexMessage object represents a MIDI system exclusive message.  When a system exclusive message is read from a MIDI file, it always has a  defined length. Data from a system exclusive message from a MIDI file  should be stored in the data array of a SysexMessage as follows: the system  exclusive message status byte (0xF0 or 0xF7), all message data bytes, and  finally the end-of-exclusive flag (0xF7). The length reported by the  SysexMessage object is therefore the length of the system exclusive data  plus two: one byte for the status byte and one for the end-of-exclusive  flag.  As dictated by the Standard MIDI Files specification, two status byte  values are legal for a SysexMessage read from a MIDI file:      * 0xF0: System Exclusive message (same as in MIDI wire protocol)     * 0xF7: Special System Exclusive message  When Java Sound is used to handle system exclusive data that is being  received using MIDI wire protocol, it should place the data in one or more  SysexMessages. In this case, the length of the system exclusive data is not  known in advance; the end of the system exclusive data is marked by an  end-of-exclusive flag (0xF7) in the MIDI wire byte stream.      * 0xF0: System Exclusive message (same as in MIDI wire protocol)     * 0xF7: End of Exclusive (EOX) The first SysexMessage object containing data for a particular system  exclusive message should have the status value 0xF0. If this message  contains all the system exclusive data for the message, it should end with  the status byte 0xF7 (EOX). Otherwise, additional system exclusive data  should be sent in one or more SysexMessages with a status value of 0xF7.  The SysexMessage containing the last of the data for the system exclusive  message should end with the value 0xF7 (EOX) to mark the end of the system  exclusive message.  If system exclusive data from SysexMessages objects is being transmitted  using MIDI wire protocol, only the initial 0xF0 status byte, the system  exclusive data itself, and the final 0xF7 (EOX) byte should be propagated;  any 0xF7 status bytes used to indicate that a SysexMessage contains  continuing system exclusive data should not be propagated via MIDI wire  protocol.",0,1,1,0,0,0,0,0,0,0,0,1
"Adds a new event to the track. However, if the event is already contained in the track, it is not added again. The list of events is kept in time order, meaning that this event inserted at the appropriate place in the list, not necessarily at the end.  Parameters: event - the event to add Returns: true if the event did not already exist in the track and was added, otherwise false",1,0,1,0,0,0,1,0,0,0,0,1
"Obtains the current receiver to which this transmitter will deliver MIDI messages.  Returns: the current receiver. If no receiver is currently set, returns null",1,0,0,0,0,0,0,0,0,0,0,1
"A MidiFileReader supplies MIDI file-reading services. Classes implementing  this interface can parse the format information from one or more types of  MIDI file, and can produce a Sequence object from files of these types.  Since:     1.3",1,0,0,0,0,0,0,0,0,0,0,0
"Writes a stream of bytes representing a MIDI file of the file type indicated to the external file provided.  Parameters: in - sequence containing MIDI data to be written to the external file fileType - type of the file to be written to the external file out - external file to which the file data should be written Returns: the number of bytes written to the file Throws: IOException - if an I/O exception occurs IllegalArgumentException - if the file type is not supported by this file writer See Also: isFileTypeSupported(int, Sequence), getMidiFileTypes(Sequence)",0,0,0,0,0,0,0,0,0,0,0,1
"Constructs an AudioFormat with the given parameters. The encoding specifies the convention used to represent the data. The other parameters are further explained in the class description.  Parameters: encoding - the audio encoding technique sampleRate - the number of samples per second sampleSizeInBits - the number of bits in each sample channels - the number of channels (1 for mono, 2 for stereo, and so on) frameSize - the number of bytes in each frame frameRate - the number of frames per second bigEndian - indicates whether the data for a single sample is stored in big-endian byte order (false means little-endian) properties - a Map<String,Object> object containing format properties Since: 1.5",1,0,0,0,0,0,0,0,0,0,0,0
"Besides the class information inherited from its superclass, DataLine.Info  provides additional information specific to data lines. This information  includes:      * the audio formats supported by the data line     * the minimum and maximum sizes of its internal buffer Because a Line.Info knows the class of the line its describes, a  DataLine.Info object can describe DataLine subinterfaces such as  SourceDataLine, TargetDataLine, and Clip. You can query a mixer for lines  of any of these types, passing an appropriate instance of DataLine.Info as  the argument to a method such as Mixer.getLine(Line.Info).  Since:     1.3 See Also:     Line.Info",1,0,0,0,0,0,1,1,0,0,0,1
"Obtains a textual description of the data line info.  Overrides: toString in class Line.Info Returns: a string description",1,0,0,0,0,0,0,0,0,0,0,1
"Stops the line. A stopped line should cease I/O activity. If the line is open and running, however, it should retain the resources required to resume activity. A stopped line should retain any audio data in its buffer instead of discarding it, so that upon resumption the I/O can continue where it left off, if possible. (This doesn't guarantee that there will never be discontinuities beyond the current buffer, of course; if the stopped condition continues for too long, input or output samples might be dropped.) If desired, the retained data can be discarded by invoking the flush method. When audio capture or playback stops, a STOP event is generated.  See Also: start(), isRunning(), flush(), LineEvent",1,0,0,0,1,1,1,0,0,0,0,1
"A EnumControl provides control over a set of discrete possible values, each  represented by an object. In a graphical user interface, such a control  might be represented by a set of buttons, each of which chooses one value  or setting. For example, a reverb control might provide several preset  reverberation settings, instead of providing continuously adjustable  parameters of the sort that would be represented by FloatControl objects.  Controls that provide a choice between only two settings can often be  implemented instead as a BooleanControl, and controls that provide a set of  values along some quantifiable dimension might be implemented instead as a  FloatControl with a coarse resolution. However, a key feature of  EnumControl is that the returned values are arbitrary objects, rather than  numerical or boolean values. This means that each returned object can  provide further information. As an example, the settings of a REVERB  control are instances of ReverbType that can be queried for the parameter  values used for each setting.  Since:     1.3  Nested Class Summary static class 	EnumControl.Type           An instance of the EnumControl.Type inner class identifies one  kind of enumerated control.   Constructor Summary protected 	EnumControl(EnumControl.Type type, Object[] values, Object  value)           Constructs a new enumerated control object with the given  parameters.   Method Summary  Object 	getValue()           Obtains this control's current value.  Object[] 	getValues()           Returns the set of possible values for this control.  void 	setValue(Object value)           Sets the current value for the control.  String 	toString()           Provides a string representation of the control.   Methods inherited from class javax.sound.sampled.Control getType   Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait , wait    Constructor Detail   EnumControl   protected EnumControl(EnumControl.Type type, Object[] values, Object value)      Constructs a new enumerated control object with the given parameters.      Parameters:         type - the type of control represented this enumerated control         object         values - the set of possible values for the control         value - the initial control value Method Detail   setValue   public void setValue(Object value)      Sets the current value for the control. The default implementation     simply sets the value as indicated. If the value indicated is not     supported, an IllegalArgumentException is thrown. Some controls require     that their line be open before they can be affected by setting a value.      Parameters:         value - the desired new value     Throws:         IllegalArgumentException - if the value indicated does not fall         within the allowable range   getValue   public Object getValue()      Obtains this control's current value.      Returns:         the current value   getValues   public Object[] getValues()      Returns the set of possible values for this control.      Returns:         the set of possible values   toString   public String toString()      Provides a string representation of the control.      Overrides:         toString in class Control     Returns:         a string description Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR |  METHOD Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,1,0,0,1,0,0,0,0,0
"The Line interface represents a mono or multi-channel audio feed. A line is  an element of the digital audio pipeline, such as a mixer, an input or  output port, or a data path into or out of a mixer.  A line can have controls, such as gain, pan, and reverb. The controls  themselves are instances of classes that extend the base Control class. The  Line interface provides two accessor methods for obtaining the line's  controls: getControls returns the entire set, and getControl returns a  single control of specified type.  Lines exist in various states at different times. When a line opens, it  reserves system resources for itself, and when it closes, these resources  are freed for other objects or applications. The isOpen() method lets you  discover whether a line is open or closed. An open line need not be  processing data, however. Such processing is typically initiated by  subinterface methods such as SourceDataLine.write and TargetDataLine.read.  You can register an object to receive notifications whenever the line's  state changes. The object must implement the LineListener interface, which  consists of the single method update. This method will be invoked when a  line opens and closes (and, if it's a DataLine, when it starts and stops).  An object can be registered to listen to multiple lines. The event it  receives in its update method will specify which line created the event,  what type of event it was (OPEN, CLOSE, START, or STOP), and how many  sample frames the line had processed at the time the event occurred.  Certain line operations, such as open and close, can generate security  exceptions if invoked by unprivileged code when the line is a shared audio  resource.  Since:     1.3 See Also:     LineEvent",1,1,0,0,0,1,1,1,0,0,0,0
"Indicates whether the line is open, meaning that it has reserved system resources and is operational, although it might not currently be playing or capturing sound.  Returns: true if the line is open, otherwise false See Also: open(), close()",1,0,0,0,0,0,0,0,0,0,0,0
"The Mixer.Info class represents information about an audio mixer, including  the product's name, version, and vendor, along with a textual description.  This information may be retrieved through the getMixerInfo method of the  Mixer interface.  Since:     1.3",0,0,0,0,0,0,0,0,0,0,0,0
"A mixer is an audio device with one or more lines. It need not be designed  for mixing audio signals. A mixer that actually mixes audio has multiple  input (source) lines and at least one output (target) line. The former are  often instances of classes that implement SourceDataLine, and the latter,  TargetDataLine. Port objects, too, are either source lines or target lines.  A mixer can accept prerecorded, loopable sound as input, by having some of  its source lines be instances of objects that implement the Clip  interface.  Through methods of the Line interface, which Mixer extends, a mixer might  provide a set of controls that are global to the mixer. For example, the  mixer can have a master gain control. These global controls are distinct  from the controls belonging to each of the mixer's individual lines.  Some mixers, especially those with internal digital mixing capabilities,  may provide additional capabilities by implementing the DataLine  interface.  A mixer can support synchronization of its lines. When one line in a  synchronized group is started or stopped, the other lines in the group  automatically start or stop simultaneously with the explicitly affected  one.  Since:     1.3",1,1,0,0,0,0,1,0,0,0,0,0
"Obtains information about the set of target lines supported by this mixer. Some target lines may only be available when this mixer is open.  Returns: array of Line.Info objects representing target lines for this mixer. If no target lines are supported, an array of length 0 is returned.",1,0,0,0,0,0,0,0,0,0,0,0
"Obtains the set of all source lines currently open to this mixer.  Returns: the source lines currently open to the mixer. If no source lines are currently open to this mixer, an array of length 0 is returned. Throws: SecurityException - if the matching lines are not available due to security restrictions",1,0,0,0,0,0,0,0,0,0,0,0
" A type of port that gets audio from a line-level audio input jack. ",0,0,0,0,0,0,0,0,0,0,0,0
"Ports are simple lines for input or output of audio to or from audio  devices. Common examples of ports that act as source lines (mixer inputs)  include the microphone, line input, and CD-ROM drive. Ports that act as  target lines (mixer outputs) include the speaker, headphone, and line  output. You can access port using a Port.Info object.  Since:     1.3",0,1,0,0,0,0,0,1,0,0,0,0
"Finalizes the hashcode method.  Overrides: hashCode in class Object Returns: a hash code value for this object. See Also: Object.equals(java.lang.Object), Hashtable",0,0,0,0,0,0,0,0,0,0,1,0
"A target data line is a type of DataLine from which audio data can be read.  The most common example is a data line that gets its data from an audio  capture device. (The device is implemented as a mixer that writes to the  target data line.)  Note that the naming convention for this interface reflects the  relationship between the line and its mixer. From the perspective of an  application, a target data line may act as a source for audio data.  The target data line can be obtained from a mixer by invoking the getLine  method of Mixer with an appropriate DataLine.Info object.  The TargetDataLine interface provides a method for reading the captured  data from the target data line's buffer.Applications that record audio  should read data from the target data line quickly enough to keep the  buffer from overflowing, which could cause discontinuities in the captured  data that are perceived as clicks. Applications can use the available  method defined in the DataLine interface to determine the amount of data  currently queued in the data line's buffer. If the buffer does overflow,  the oldest queued data is discarded and replaced by new data.  Since:     1.3 See Also:     Mixer, DataLine, SourceDataLine",1,1,0,0,0,0,1,1,0,0,0,0
"Provider for audio file writing services. Classes providing concrete  implementations can write one or more types of audio file from an audio  stream.  Since:     1.3",1,0,0,0,0,0,0,0,0,0,0,0
"An Event object that provides information about the source of a  connection-related event. ConnectionEvent objects are generated when an  application closes a pooled connection and when an error occurs. The  ConnectionEvent object contains two kinds of information:      * The pooled connection closed by the application     * In the case of an error event, the SQLException about to be thrown to       the application  Since:     1.4 See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,1,0
"Notifies this ConnectionEventListener that the application has called the method close on its representation of a pooled connection.  Parameters: event - an event object describing the source of the event",1,0,0,0,0,0,0,0,0,0,0,0
"A factory for connections to the physical data source that this DataSource  object represents. An alternative to the DriverManager facility, a  DataSource object is the preferred means of getting a connection. An object  that implements the DataSource interface will typically be registered with  a naming service based on the JavaTM Naming and Directory (JNDI) API.  The DataSource interface is implemented by a driver vendor. There are three  types of implementations:     1. Basic implementation -- produces a standard Connection object    2. Connection pooling implementation -- produces a Connection object       that will automatically participate in connection pooling. This       implementation works with a middle-tier connection pooling manager.    3. Distributed transaction implementation -- produces a Connection        object that may be used for distributed transactions and almost       always participates in connection pooling. This implementation works       with a middle-tier transaction manager and almost always with a       connection pooling manager.  A DataSource object has properties that can be modified when necessary. For  example, if the data source is moved to a different server, the property  for the server can be changed. The benefit is that because the data  source's properties can be changed, any code accessing that data source  does not need to be changed.  A driver that is accessed via a DataSource object does not register itself  with the DriverManager. Rather, a DataSource object is retrieved though a  lookup operation and then used to create a Connection object. With a basic  implementation, the connection obtained through a DataSource object is  identical to a connection obtained through the DriverManager facility.  Since:     1.4",1,0,0,1,0,0,1,1,0,0,0,0
"Creates and returns a Connection object that is a handle for the physical connection that this PooledConnection object represents. The connection pool manager calls this method when an application has called the method DataSource.getConnection and there are no PooledConnection objects available. See the interface description for more information.  Returns: a Connection object that is a handle to this PooledConnection object Throws: SQLException - if a database access error occurs SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.4",0,0,0,0,0,1,0,0,0,0,0,0
"Sets the designated parameter in this RowSet object's command with the given Ref value. The driver will convert this to the appropriate REF(<structured-type>) value.  Parameters: i - the first parameter is 1, the second is 2, ... x - an object representing data of an SQL REF type Throws: SQLException - if a database access error occurs",0,0,1,0,0,0,0,0,0,0,0,0
"Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB . When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB  Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setClob which takes a length parameter.  Parameters: parameterIndex - index of the first parameter is 1, the second is 2, ... reader - An object that contains the data to set the parameter value to. Throws: SQLException - if a database access error occurs, this method is called on a closed PreparedStatementor if parameterIndex does not correspond to a parameter marker in the SQL statement SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.6",1,0,0,0,0,1,0,0,0,0,0,1
"Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB  Parameters: parameterIndex - index of the first parameter is 1, the second is 2, ... reader - An object that contains the data to set the parameter value to. length - the number of characters in the parameter data. Throws: SQLException - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.6",1,0,1,0,0,0,0,0,0,0,0,0
"An Event object generated when an event occurs to a RowSet object. A  RowSetEvent object is generated when a single row in a rowset is changed,  the whole rowset is changed, or the rowset cursor moves.  When an event occurs on a RowSet object, one of the RowSetListener methods  will be sent to all registered listeners to notify them of the event. An  Event object is supplied to the RowSetListener method so that the listener  can use it to find out which RowSet object is the source of the event.  Since:     1.4 See Also:     Serialized Form",1,1,0,0,0,1,1,0,0,0,0,0
"An object that contains information about the columns in a RowSet object.  This interface is an extension of the ResultSetMetaData interface with  methods for setting the values in a RowSetMetaData object. When a  RowSetReader object reads data into a RowSet object, it creates a  RowSetMetaData object and initializes it using the methods in the  RowSetMetaData interface. Then the reader passes the RowSetMetaData object  to the rowset.  The methods in this interface are invoked internally when an application  calls the method RowSet.execute; an application programmer would not use  them directly.  Since:     1.4",1,0,1,0,0,1,0,0,0,0,0,0
"An abstract class providing a RowSet object with its basic functionality.  The basic functions include having properties and sending event  notifications, which all JavaBeansTM components must implement.   1.0 Overview  The BaseRowSet class provides the core functionality for all RowSet  implementations, and all standard implementations may use this class in  combination with one or more RowSet interfaces in order to provide a  standard vendor-specific implementation. To clarify, all implementations  must implement at least one of the RowSet interfaces (JdbcRowSet,  CachedRowSet, JoinRowSet, FilteredRowSet, or WebRowSet). This means that  any implementation that extends the BaseRowSet class must also implement  one of the RowSet interfaces.  The BaseRowSet class provides the following:      * Properties           o Fields for storing current properties           o Methods for getting and setting properties      * Event notification      * A complete set of setter methods for setting the parameters in a        RowSet object's command      * Streams           o Fields for storing stream instances           o Constants for indicating the type of a stream   2.0 Setting Properties  All rowsets maintain a set of properties, which will usually be set using a  tool. The number and kinds of properties a rowset has will vary, depending  on what the RowSet implementation does and how it gets its data. For  example, rowsets that get their data from a ResultSet object need to set  the properties that are required for making a database connection. If a  RowSet object uses the DriverManager facility to make a connection, it  needs to set a property for the JDBC URL that identifies the appropriate  driver, and it needs to set the properties that give the user name and  password. If, on the other hand, the rowset uses a DataSource object to  make the connection, which is the preferred method, it does not need to set  the property for the JDBC URL. Instead, it needs to set the property for  the logical name of the data source along with the properties for the user  name and password.  NOTE: In order to use a DataSource object for making a connection, the  DataSource object must have been registered with a naming service that uses  the Java Naming and Directory InterfaceTM (JNDI) API. This registration is  usually done by a person acting in the capacity of a system administrator.   3.0 Setting the Command and Its Parameters  When a rowset gets its data from a relational database, it executes a  command (a query) that produces a ResultSet object. This query is the  command that is set for the RowSet object's command property. The rowset  populates itself with data by reading the data from the ResultSet object  into itself. If the query contains placeholders for values to be set, the  BaseRowSet setter methods are used to set these values. All setter methods  allow these values to be set to null if required.  The following code fragment illustrates how the CachedRowSetTM object crs  might have its command property set. Note that if a tool is used to set  properties, this is the code that the tool would use.   crs.setCommand(SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS + WHERE CREDIT_LIMIT > ? AND REGION = ?);   In this example, the values for CREDIT_LIMIT and REGION are placeholder  parameters, which are indicated with a question mark (?). The first  question mark is placeholder parameter number 1, the second question mark  is placeholder parameter number 2, and so on. Any placeholder parameters  must be set with values before the query can be executed. To set these  placeholder parameters, the BaseRowSet class provides a set of setter  methods, similar to those provided by the PreparedStatement interface, for  setting values of each data type. A RowSet object stores the parameter  values internally, and its execute method uses them internally to set  values for the placeholder parameters before it sends the command to the  DBMS to be executed.  The following code fragment demonstrates setting the two parameters in the  query from the previous example.   crs.setInt(1, 5000); crs.setString(2, West);   If the execute method is called at this point, the query sent to the DBMS  will be:   SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS + WHERE CREDIT_LIMIT > 5000 AND REGION = 'West'   NOTE: Setting Array, Clob, Blob and Ref objects as a command parameter,  stores these values as SerialArray, SerialClob, SerialBlob and SerialRef  objects respectively.   4.0 Handling of Parameters Behind the Scenes  NOTE: The BaseRowSet class provides two kinds of setter methods, those that  set properties and those that set placeholder parameters. The setter  methods discussed in this section are those that set placeholder  parameters.  The placeholder parameters set with the BaseRowSet setter methods are  stored as objects in an internal Hashtable object. Primitives are stored as  their Object type. For example, byte is stored as Byte object, and int is  stored as an Integer object. When the method execute is called, the values  in the Hashtable object are substituted for the appropriate placeholder  parameters in the command. <P)> A call to the method getParams returns the  values stored in the Hashtable object as an array of Object instances. An  element in this array may be a simple Object instance or an array (which is  a type of Object). The particular setter method used determines whether an  element in this array is an Object or an array.  The majority of methods for setting placeholder parameters take two  parameters, with the first parameter indicating which placeholder parameter  is to be set, and the second parameter giving the value to be set. Methods  such as getInt, getString, getBoolean, and getLong fall into this category.  After these methods have been called, a call to the method getParams will  return an array with the values that have been set. Each element in the  array is an Object instance representing the values that have been set. The  order of these values in the array is determined by the int (the first  parameter) passed to the setter method. The values in the array are the  values (the second parameter) passed to the setter method. In other words,  the first element in the array is the value to be set for the first  placeholder parameter in the RowSet object's command. The second element is  the value to be set for the second placeholder parameter, and so on.  Several setter methods send the driver and DBMS information beyond the  value to be set. When the method getParams is called after one of these  setter methods has been used, the elements in the array will themselves be  arrays to accommodate the additional information. In this category, the  method setNull is a special case because one version takes only two  parameters (setNull(int parameterIndex, int SqlType)). Nevertheless, it  requires an array to contain the information that will be passed to the  driver and DBMS. The first element in this array is the value to be set,  which is null, and the second element is the int supplied for sqlType,  which indicates the type of SQL value that is being set to null. This  information is needed by some DBMSs and is therefore required in order to  ensure that applications are portable. The other version is intended to be  used when the value to be set to null is a user-defined type. It takes  three parameters (setNull(int parameterIndex, int sqlType, String typeName) ) and also requires an array to contain the information to be passed to the  driver and DBMS. The first two elements in this array are the same as for  the first version of setNull. The third element, typeName, gives the SQL  name of the user-defined type. As is true with the other setter methods,  the number of the placeholder parameter to be set is indicated by an  element's position in the array returned by getParams. So, for example, if  the parameter supplied to setNull is 2, the second element in the array  returned by getParams will be an array of two or three elements.  Some methods, such as setObject and setDate have versions that take more  than two parameters, with the extra parameters giving information to the  driver or the DBMS. For example, the methods setDate, setTime, and  setTimestamp can take a Calendar object as their third parameter. If the  DBMS does not store time zone information, the drivern uses the Calendar  object to construct the Date, Time, or Timestamp object being set. As is  true with other methods that provide additional information, the element in  the array returned by getParams is an array instead of a simple Object  instance.  The methods setAsciiStream, setBinaryStream, setCharacterStream, and  setUnicodeStream (which is deprecated, so applications should use  getCharacterStream instead) take three parameters, so for them, the element  in the array returned by getParams is also an array. What is different  about these setter methods is that in addition to the information provided  by parameters, the array contains one of the BaseRowSet constants  indicating the type of stream being set.  NOTE: The method getParams is called internally by RowSet implementations  extending this class; it is not normally called by an application  programmer directly.   5.0 Event Notification  The BaseRowSet class provides the event notification mechanism for rowsets.  It contains the field listeners, methods for adding and removing listeners,  and methods for notifying listeners of changes.  A listener is an object that has implemented the RowSetListener interface.  If it has been added to a RowSet object's list of listeners, it will be  notified when an event occurs on that RowSet object. Each listener's  implementation of the RowSetListener methods defines what that object will  do when it is notified that an event has occurred.  There are three possible events for a RowSet object:     1. the cursor moves    2. an individual row is changed (updated, deleted, or inserted)    3. the contents of the entire RowSet object are changed  The BaseRowSet method used for the notification indicates the type of event  that has occurred. For example, the method notifyRowChanged indicates that  a row has been updated, deleted, or inserted. Each of the notification  methods creates a RowSetEvent object, which is supplied to the listener in  order to identify the RowSet object on which the event occurred. What the  listener does with this information, which may be nothing, depends on how  it was implemented.   6.0 Default Behavior  A default BaseRowSet object is initialized with many starting values. The  following is true of a default RowSet instance that extends the BaseRowSet  class:     * Has a scrollable cursor and does not show changes made by others.     * Is updatable.     * Does not show rows that have been deleted.     * Has no time limit for how long a driver may take to execute the        RowSet object's command.     * Has no limit for the number of rows it may contain.     * Has no limit for the number of bytes a column may contain. NOTE: This       limit applies only to columns that hold values of the following       types: BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and        LONGVARCHAR.     * Will not see uncommitted data (make dirty reads).     * Has escape processing turned on.     * Has its connection's type map set to null.     * Has an empty Vector object for storing the values set for the       placeholder parameters in the RowSet object's command.  If other values are desired, an application must set the property values  explicitly. For example, the following line of code sets the maximum number  of rows for the CachedRowSet object crs to 500.   crs.setMaxRows(500);   Methods implemented in extensions of this BaseRowSet class must throw an  SQLException object for any violation of the defined assertions. Also, if  the extending class overrides and reimplements any BaseRowSet method and  encounters connectivity or underlying data source issues, that method may  in addition throw an SQLException object for that reason.  See Also:     Serialized Form",1,1,1,1,1,1,1,1,1,0,0,0
"Notifies all of the listeners registered with this RowSet object that its entire contents have changed.  When an application calls methods that change the entire contents of the RowSet object, such as the CachedRowSet methods execute, populate, restoreOriginal, or release, that method calls notifyRowSetChanged internally (either directly or indirectly). An application should never invoke this method directly.  Throws: SQLException - if the class extending the BaseRowSet abstract class does not implement the RowSet interface or one of it's sub-interfaces.",1,0,1,0,0,1,0,0,0,0,0,0
"Returns the type of this RowSet object. The type is initially determined by the statement that created the RowSet object. The RowSet object can call the method setType at any time to change its type. The default is TYPE_SCROLL_INSENSITIVE.  Returns: the type of this JDBC RowSet object, which must be one of the following: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE Throws: SQLException - if an error occurs getting the type of of this RowSet object See Also: setType(int)",1,0,0,0,0,0,1,0,0,0,0,0
"Retrieves the type map associated with the Connection object for this RowSet object.  Drivers that support the JDBC 3.0 API will create Connection objects with an associated type map. This type map, which is initially empty, can contain one or more fully-qualified SQL names and Class objects indicating the class to which the named SQL value will be mapped. The type mapping specified in the connection's type map is used for custom type mapping when no other type map supersedes it.  If a type map is explicitly supplied to a method that can perform custom mapping, that type map supersedes the connection's type map.  Returns: the java.util.Map object that is the type map for this RowSet object's connection",1,0,0,0,0,0,1,0,0,0,0,0
"Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format.  Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.  Parameters: parameterName - the name of the parameter reader - the java.io.Reader object that contains the UNICODE data used as the designated parameter length - the number of characters in the stream Throws: SQLException - if a database access error occurs or this method is called on a closed CallableStatement SQLFeatureNotSupportedException - if the JDBC driver does not support this method Since: 1.4",1,1,0,0,0,1,1,0,0,0,0,1
"Sets the designated paramter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument's size relative to the driver's limits on NVARCHAR values) when it sends it to the database.  Parameters: parameterIndex - of the first parameter is 1, the second is 2, ... value - the parameter value Throws: SQLException - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs Since: 1.6",1,0,0,0,0,0,0,0,0,0,0,1
"Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.  Parameters: parameterName - the name of the column to be set value - the parameter value length - the number of characters in the parameter data. Throws: SQLException - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs Since: 1.6",1,0,0,0,0,0,0,0,0,0,0,1
"Notifies registered listeners that a RowSet object in the given RowSetEvent object has populated a number of additional rows. The numRows parameter ensures that this event will only be fired every numRow.  The source of the event can be retrieved with the method event.getSource.  Parameters: event - a RowSetEvent object that contains the RowSet object that is the source of the events numRows - when populating, the number of rows interval on which the CachedRowSet populated should fire; the default value is zero; cannot be less than fetchSize or zero Throws: SQLException",1,0,1,1,0,1,0,1,0,0,0,0
"Return a SQL-like description of the WHERE clause being used in a JoinRowSet object. An implementation can describe the WHERE clause of the SQL JOIN by supplying a SQL strings description of JOIN or provide a textual description to assist applications using a JoinRowSet  Returns: whereClause a textual or SQL description of the logical WHERE clause used in the JoinRowSet instance Throws: SQLException - if an error occurs in generating a representation of the WHERE clause.",1,0,0,0,0,0,0,1,0,0,0,0
"The standard interface that provides the framework for all FilteredRowSet  objects to describe their filters.   1.0 Background  The Predicate interface is a standard interface that applications can  implement to define the filter they wish to apply to a a FilteredRowSet  object. A FilteredRowSet object consumes implementations of this interface  and enforces the constraints defined in the implementation of the method  evaluate. A FilteredRowSet object enforces the filter constraints in a  bi-directional manner: It outputs only rows that are within the constraints  of the filter; and conversely, it inserts, modifies, or updates only rows  that are within the constraints of the filter.   2.0 Implementation Guidelines  In order to supply a predicate for the FilteredRowSet. this interface must  be implemented. At this time, the JDBC RowSet Implementations (JSR-114)  does not specify any standard filters definitions. By specifying a standard  means and mechanism for a range of filters to be defined and deployed with  both the reference and vendor implementations of the FilteredRowSet  interface, this allows for a flexible and application motivated  implementations of Predicate to emerge.  A sample implementation would look something like this:    public class Range implements Predicate {  private Object lo[]; private Object hi[]; private int idx[];  public Range(Object[] lo, Object[] hi, int[] idx) { this.lo = lo; this.hi = hi; this.idx = idx; }  public boolean evaluate(RowSet rs) { CachedRowSet crs = (CachedRowSet)rs; boolean bool1,bool2;  // Check the present row determine if it lies // within the filtering criteria.  for (int i = 0; i < idx.length; i++) {  if ((rs.getObject(idx[i]) >= lo[i]) && (rs.getObject(idx[i]) >= hi[i]) { bool1 = true; // within filter constraints } else { bool2 = true; // outside of filter constraints } }  if (bool2) { return false; } else { return true; } }    The example above implements a simple range predicate. Note, that  implementations should but are not required to provider String and integer  index based constructors to provide for JDBC RowSet Implementation  applications that use both column identification conventions.",1,0,1,1,0,0,1,0,1,1,0,0
"Retrieves the next attribute in this SQLInputImpl object as a java.sql.Time object.  This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.  Specified by: readTime in interface SQLInput Returns: the attribute; if the value is SQL NULL, return null Throws: SQLException - if the read position is located at an invalid position; or if there are no further values in the stream.",1,0,0,0,0,0,0,0,0,0,0,0
"Reads an SQL NCLOB value from the stream and returns it as a Clob object in the Java programming language.  Specified by: readNClob in interface SQLInput Returns: a NClob object representing data of the SQL NCLOB value at the head of the stream; null if the value read is SQL NULL Throws: SQLException - if a database access error occurs",0,0,0,0,0,0,0,0,0,0,0,0
"A serialized version of an Array object, which is the mapping in the Java  programming language of an SQL ARRAY value.  The SerialArray class provides a constructor for creating a SerialArray  instance from an Array object, methods for getting the base type and the  SQL name for the base type, and methods for copying all or part of a  SerialArray object.  Note: In order for this class to function correctly, a connection to the  data source must be available in order for the SQL Array object to be  materialized (have all of its elements brought to the client server) if  necessary. At this time, logical pointers to the data in the data source,  such as locators, are not currently supported.  See Also:     Serialized Form",1,0,1,1,0,0,0,0,0,0,1,0
"Retrieves the DBMS-specific type name for the elements in this SerialArray object.  Specified by: getBaseTypeName in interface Array Returns: the SQL type name used by the DBMS for the base type of this SerialArray object Throws: SerialException - if an error occurs",1,0,0,0,0,0,0,0,0,0,0,1
"A serialized mapping of a Ref object, which is the mapping in the Java  programming language of an SQL REF value.  The SerialRef class provides a constructor for creating a SerialRef  instance from a Ref object and provides methods for getting and setting the  Ref object.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"The Service Provider Interface (SPI) mechanism that generates SyncProvider  instances to be used by disconnected RowSet objects. The SyncProvider  instances in turn provide the javax.sql.RowSetReader object the RowSet  object needs to populate itself with data and the javax.sql.RowSetWriter  object it needs to propagate changes to its data back to the underlying  data source.  Because the methods in the SyncFactory class are all static, there is only  one SyncFactory object per Java VM at any one time. This ensures that there  is a single source from which a RowSet implementation can obtain its  SyncProvider implementation.   1.0 Overview  The SyncFactory class provides an internal registry of available  synchronization provider implementations (SyncProvider objects). This  registry may be queried to determine which synchronization providers are  available. The following line of code gets an enumeration of the providers  currently registered.   java.util.Enumeration e = SyncFactory.getRegisteredProviders();   All standard RowSet implementations must provide at least two providers:     * an optimistic provider for use with a CachedRowSet implementation or       an implementation derived from it     * an XML provider, which is used for reading and writing XML, such as       with WebRowSet objects Note that the JDBC RowSet Implementations include the SyncProvider  implemtations RIOptimisticProvider and RIXmlProvider, which satisfy this  requirement.  The SyncFactory class provides accessor methods to assist applications in  determining which synchronization providers are currently registered with  the SyncFactory.  Other methods let RowSet persistence providers be registered or  de-registered with the factory mechanism. This allows additional  synchronization provider implementations to be made available to RowSet  objects at run time.  Applications can apply a degree of filtering to determine the level of  synchronization that a SyncProvider implementation offers. The following  criteria determine whether a provider is made available to a RowSet  object:     1. If a particular provider is specified by a RowSet object, and the        SyncFactory does not contain a reference to this provider, a        SyncFactoryException is thrown stating that the synchronization       provider could not be found.     2. If a RowSet implementation is instantiated with a specified provider       and the specified provider has been properly registered, the       requested provider is supplied. Otherwise a SyncFactoryException is       thrown.     3. If a RowSet object does not specify a SyncProvider implementation and       no additional SyncProvider implementations are available, the       reference implementation providers are supplied.   2.0 Registering SyncProvider Implementations  Both vendors and developers can register SyncProvider implementations using  one of the following mechanisms.      * Using the command line       The name of the provider is supplied on the command line, which will       add the provider to the system properties. For example:         -Drowset.provider.classname=com.fred.providers.HighAvailabilityProvider       * Using the Standard Properties File       The reference implementation is targeted to ship with J2SE 1.5, which       will include an additional resource file that may be edited by hand.       Here is an example of the properties file included in the reference       implementation:         \#Default JDBC RowSet sync providers listing \#  \# Optimistic synchronization provider rowset.provider.classname.0=com.sun.rowset.providers.RIOptimisticProvider rowset.provider.vendor.0=Sun Microsystems Inc rowset.provider.version.0=1.0  \# XML Provider using standard XML schema rowset.provider.classname.1=com.sun.rowset.providers.RIXMLProvider rowset.provider.vendor.1=Sun Microsystems Inc. rowset.provider.version.1=1.0         The SyncFactory checks this file and registers the SyncProvider        implementations that it contains. A developer or vendor can add other       implementations to this file. For example, here is a possible       addition:         rowset.provider.classname.2=com.fred.providers.HighAvailabilityProvider rowset.provider.vendor.2=Fred, Inc. rowset.provider.version.2=1.0       * Using a JNDI Context       Available providers can be registered on a JNDI context, and the        SyncFactory will attempt to load SyncProvider implementations from       that JNDI context. For example, the following code fragment registers       a provider implementation on a JNDI context. This is something a       deployer would normally do. In this example, MyProvider is being       registered on a CosNaming namespace, which is the namespace used by       J2EE resources.         import javax.naming.*;  Hashtable svrEnv = new  Hashtable(); srvEnv.put(Context.INITIAL_CONTEXT_FACTORY, CosNaming);  Context ctx = new InitialContext(svrEnv); com.fred.providers.MyProvider = new MyProvider(); ctx.rebind(providers/MyProvider, syncProvider);   Next, an application will register the JNDI context with the SyncFactory  instance. This allows the SyncFactory to browse within the JNDI context  looking for SyncProvider implementations.   Hashtable appEnv = new Hashtable(); appEnv.put(Context.INITIAL_CONTEXT_FACTORY, CosNaming); appEnv.put(Context.PROVIDER_URL, iiop://hostname/providers); Context ctx = new InitialContext(appEnv);  SyncFactory.registerJNDIContext(ctx);   If a RowSet object attempts to obtain a MyProvider object, the SyncFactory  will try to locate it. First it searches for it in the system properties,  then it looks in the resource files, and finally it checks the JNDI context  that has been set. The SyncFactory instance verifies that the requested  provider is a valid extension of the SyncProvider abstract class and then  gives it to the RowSet object. In the following code fragment, a new  CachedRowSet object is created and initialized with env, which contains the  binding to MyProvider.   Hashtable env = new Hashtable(); env.put(SyncFactory.ROWSET_SYNC_PROVIDER, com.fred.providers.MyProvider); CachedRowSet crs = new com.sun.rowset.CachedRowSetImpl(env);   Further details on these mechanisms are available in the  javax.sql.rowset.spi package specification.  See Also:     SyncProvider, SyncFactoryException",1,0,0,0,0,0,0,0,0,0,0,0
" Sets the logging object that is used by SyncProvider implementations provided by the SyncFactory SPI. All SyncProvider implementations can log their events to this object and the application can retrieve a handle to this object using the getLogger method.  This method checks to see that there is an SQLPermission object which grants the permission setSyncFactory before allowing the method to succeed. If a SecurityManager exists and its checkPermission method denies calling setLogger, this method throws a java.lang.SecurityException.  Parameters: logger - a Logger object instance level - a Level object instance indicating the degree of logging required Throws: SecurityException - if a security manager exists and its checkPermission method denies calling setLogger See Also: SecurityManager.checkPermission(java.security.Permission) ",1,0,0,0,0,1,1,1,0,0,0,1
"Returns a constant indicating the grade of synchronization a RowSet object can expect from this SyncProvider object.  Returns: an int that is one of the following constants: SyncProvider.GRADE_NONE, SyncProvider.GRADE_CHECK_MODIFIED_AT_COMMIT, SyncProvider.GRADE_CHECK_ALL_AT_COMMIT, SyncProvider.GRADE_LOCK_WHEN_MODIFIED, SyncProvider.GRADE_LOCK_WHEN_LOADED",1,0,0,0,0,0,0,0,0,0,0,0
"Defines a framework that allows applications to use a manual decision tree  to decide what should be done when a synchronization conflict occurs.  Although it is not mandatory for applications to resolve synchronization  conflicts manually, this framework provides the means to delegate to the  application when conflicts arise.  Note that a conflict is a situation where the RowSet object's original  values for a row do not match the values in the data source, which  indicates that the data source row has been modified since the last  synchronization. Note also that a RowSet object's original values are the  values it had just prior to the the last synchronization, which are not  necessarily its initial values.   Description of a SyncResolver Object  A SyncResolver object is a specialized RowSet object that implements the  SyncResolver interface. It may operate as either a connected RowSet object  (an implementation of the JdbcRowSet interface) or a connected RowSet  object (an implementation of the CachedRowSet interface or one of its  subinterfaces). For information on the subinterfaces, see the  javax.sql.rowset package description. The reference implementation for  SyncResolver implements the CachedRowSet interface, but other  implementations may choose to implement the JdbcRowSet interface to satisfy  particular needs.  After an application has attempted to synchronize a RowSet object with the  data source (by calling the CachedRowSet method acceptChanges), and one or  more conflicts have been found, a rowset's SyncProvider object creates an  instance of SyncResolver. This new SyncResolver object has the same number  of rows and columns as the RowSet object that was attempting the  synchronization. The SyncResolver object contains the values from the data  source that caused the conflict(s) and null for all other values. In  addition, it contains information about each conflict.   Getting and Using a SyncResolver Object  When the method acceptChanges encounters conflicts, the SyncProvider  object creates a SyncProviderException object and sets it with the new  SyncResolver object. The method acceptChanges will throw this exception,  which the application can then catch and use to retrieve the SyncResolver  object it contains. The following code snippet uses the  SyncProviderException method getSyncResolver to get the SyncResolver  object resolver.   } catch (SyncProviderException spe) { SyncResolver resolver = spe.getSyncResolver(); ... }   With resolver in hand, an application can use it to get the information it  contains about the conflict or conflicts. A SyncResolver object such as  resolver keeps track of the conflicts for each row in which there is a  conflict. It also places a lock on the table or tables affected by the  rowset's command so that no more conflicts can occur while the current  conflicts are being resolved.  The following kinds of information can be obtained from a SyncResolver  object:     1. What operation was being attempted when a conflict occurred The SyncProvider interface defines four constants describing states that  may occur. Three constants describe the type of operation (update, delete,  or insert) that a RowSet object was attempting to perform when a conflict  was discovered, and the fourth indicates that there is no conflict. These  constants are the possible return values when a SyncResolver object calls  the method getStatus.   int operation = resolver.getStatus();      2. The value in the data source that caused a conflict A conflict exists when a value that a RowSet object has changed and is  attempting to write to the data source has also been changed in the data  source since the last synchronization. An application can call the  SyncResolver method getConflictValue to retrieve the value in the data  source that is the cause of the conflict because the values in a  SyncResolver object are the conflict values from the data source.   java.lang.Object conflictValue = resolver.getConflictValue(2);   Note that the column in resolver can be designated by the column number, as  is done in the preceding line of code, or by the column name.  With the information retrieved from the methods getStatus and  getConflictValue, the application may make a determination as to which  value should be persisted in the data source. The application then calls  the SyncResolver method setResolvedValue, which sets the value to be  persisted in the RowSet object and also in the data source.   resolver.setResolvedValue(DEPT, 8390426);   In the preceding line of code, the column name designates the column in the  RowSet object that is to be set with the given value. The column number can  also be used to designate the column.  An application calls the method setResolvedValue after it has resolved all  of the conflicts in the current conflict row and repeats this process for  each conflict row in the SyncResolver object.   Navigating a SyncResolver Object  Because a SyncResolver object is a RowSet object, an application can use  all of the RowSet methods for moving the cursor to navigate a SyncResolver  object. For example, an application can use the RowSet method next to get  to each row and then call the SyncResolver method getStatus to see if the  row contains a conflict. In a row with one or more conflicts, the  application can iterate through the columns to find any non-null values,  which will be the values from the data source that are in conflict.  To make it easier to navigate a SyncResolver object, especially when there  are large numbers of rows with no conflicts, the SyncResolver interface  defines the methods nextConflict and previousConflict, which move only to  rows that contain at least one conflict value. Then an application can call  the SyncResolver method getConflictValue, supplying it with the column  number, to get the conflict value itself. The code fragment in the next  section gives an example.   Code Example  The following code fragment demonstrates how a disconnected RowSet object  crs might attempt to synchronize itself with the underlying data source and  then resolve the conflicts. In the try block, crs calls the method  acceptChanges, passing it the Connection object con. If there are no  conflicts, the changes in crs are simply written to the data source.  However, if there is a conflict, the method acceptChanges throws a  SyncProviderException object, and the catch block takes effect. In this  example, which illustrates one of the many ways a SyncResolver object can  be used, the SyncResolver method nextConflict is used in a while loop. The  loop will end when nextConflict returns false, which will occur when there  are no more conflict rows in the SyncResolver object resolver. In This  particular code fragment, resolver looks for rows that have update  conflicts (rows with the status SyncResolver.UPDATE_ROW_CONFLICT), and the  rest of this code fragment executes only for rows where conflicts occurred  because crs was attempting an update.  After the cursor for resolver has moved to the next conflict row that has  an update conflict, the method getRow indicates the number of the current  row, and the cursor for the CachedRowSet object crs is moved to the  comparable row in crs. By iterating through the columns of that row in both  resolver and crs, the conflicting values can be retrieved and compared to  decide which one should be persisted. In this code fragment, the value in  crs is the one set as the resolved value, which means that it will be used  to overwrite the conflict value in the data source.   try {  crs.acceptChanges(con);  } catch (SyncProviderException spe) {  SyncResolver resolver = spe.getSyncResolver();  Object crsValue;  // value in the RowSet object Object resolverValue:  // value in the SyncResolver object Object resolvedValue:  // value to be persisted  while(resolver.nextConflict())  { if(resolver.getStatus() == SyncResolver.UPDATE_ROW_CONFLICT)  { int row = resolver.getRow(); crs.absolute(row);  int colCount = crs.getMetaData().getColumnCount(); for(int j = 1; j <= colCount; j++) { if (resolver.getConflictValue(j) != null)  { crsValue = crs.getObject(j); resolverValue = resolver.getConflictValue(j); . . . // compare crsValue and resolverValue to determine // which should be the resolved value (the value to persist) resolvedValue = crsValue;  resolver.setResolvedValue(j, resolvedValue); } } } } }",1,1,0,1,0,1,1,1,1,0,0,0
"Determine the bounding box of the character at the given index into the string. The bounds are returned in local coordinates. If the index is invalid an empty rectangle is returned. Note: the AbstractButton must have a valid size (e.g. have been added to a parent container whose ancestor container is a valid top-level window) for this method to be able to return a meaningful value.  Specified by: getCharacterBounds in interface AccessibleText Parameters: i - the index into the String Returns: the screen coordinates of the character's the bounding box, if index is invalid returns an empty rectangle. Since: 1.3",1,0,1,0,0,0,1,0,0,0,0,0
"Returns the String before a given index.  Specified by: getBeforeIndex in interface AccessibleText Parameters: part - the AccessibleText.CHARACTER, AccessibleText.WORD, or AccessibleText.SENTENCE to retrieve index - an index within the text >= 0 Returns: the letter, word, or sentence, null for an invalid index or part Since: 1.3",1,0,0,0,0,0,0,0,0,0,0,0
"Extends ChangeListener to be serializable.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,1,0,0,0,0,0,0,0,0,0
" Identifies a change in the button's vertical alignment.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,1
" Identifies a change in the button's vertical text position.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Sets the button's text.  Parameters: text - the string used to set the text See Also: getText()",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the keyboard mnemonic from the the current model.  Returns: the keyboard mnemonic from the model",1,0,0,0,0,0,0,0,0,0,0,1
" The key used for storing the String name for the action, used for a menu or button.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" The key used for storing an Integer that corresponds to the index in the text (identified by the NAME property) that the decoration for a mnemonic should be rendered at. If the value of this property is greater than or equal to the length of the text, it will treated as -1.  Note: the value of this field is prefixed with 'Swing' to avoid possible collisions with existing Actions.  Since: 1.6 See Also: AbstractButton.setDisplayedMnemonicIndex(int), Constant Field Values ",0,0,0,1,0,0,1,1,0,0,0,0
"Throws an AWTError, since a Box can use only a BoxLayout.  Overrides: setLayout in class Container Parameters: l - the layout manager to use See Also: Container.doLayout(), Container.getLayout()",1,0,0,0,0,0,0,0,0,0,1,1
"Indicates that a child has changed its layout related information, and thus any cached calculations should be flushed.  This method is called by AWT when the invalidate method is called on the Container. Since the invalidate method may be called asynchronously to the event thread, this method may be called asynchronously.  Specified by: invalidateLayout in interface LayoutManager2 Parameters: target - the affected container Throws: AWTError - if the target isn't the container specified to the BoxLayout constructor",1,0,0,0,0,1,0,0,0,0,0,0
"Removes a ChangeListener from the model.  Parameters: l - the listener to remove",0,0,0,0,0,0,0,0,0,0,0,1
"This class implements accessibility support for the CellRendererPane  class.",0,0,0,1,0,0,0,0,0,0,0,1
"Set the item that should be edited. Cancel any editing if necessary",1,0,0,0,0,0,0,0,0,0,0,0
"Remove an ActionListener",0,0,0,0,0,0,0,0,0,0,0,1
"A data model for a combo box. This interface extends ListDataModel and adds  the concept of a selected item. The selected item is generally the item  which is visible in the combo box display area.  The selected item may not necessarily be managed by the underlying  ListModel. This disjoint behavior allows for the temporary storage and  retrieval of a selected item in the model.",1,1,0,0,0,0,0,1,0,0,0,1
"Returns the time delay of drawing operation flashing.  See Also: setFlashTime(int)",1,0,0,0,0,0,0,0,0,0,0,0
"Overrides Graphics.draw3DRect.  Overrides: draw3DRect in class Graphics Parameters: x - the x coordinate of the rectangle to be drawn. y - the y coordinate of the rectangle to be drawn. width - the width of the rectangle to be drawn. height - the height of the rectangle to be drawn. raised - a boolean that determines whether the rectangle appears to be raised above the surface or sunk into the surface. See Also: Graphics.fill3DRect(int, int, int, int, boolean)",1,1,0,0,0,0,0,0,0,0,0,0
"Overrides Graphics.fill3DRect.  Overrides: fill3DRect in class Graphics Parameters: x - the x coordinate of the rectangle to be filled. y - the y coordinate of the rectangle to be filled. width - the width of the rectangle to be filled. height - the height of the rectangle to be filled. raised - a boolean value that determines whether the rectangle appears to be raised above the surface or etched into the surface. See Also: Graphics.draw3DRect(int, int, int, int, boolean)",1,0,0,0,0,0,0,0,0,0,0,1
"Overrides Graphics.drawOval.  Specified by: drawOval in class Graphics Parameters: x - the x coordinate of the upper left corner of the oval to be drawn. y - the y coordinate of the upper left corner of the oval to be drawn. width - the width of the oval to be drawn. height - the height of the oval to be drawn. See Also: Graphics.fillOval(int, int, int, int)",1,0,0,0,0,0,0,0,0,0,0,1
"Overrides Graphics.drawImage.  Specified by: drawImage in class Graphics Parameters: img - the specified image to be drawn. This method does nothing if img is null. dx1 - the x coordinate of the first corner of the destination rectangle. dy1 - the y coordinate of the first corner of the destination rectangle. dx2 - the x coordinate of the second corner of the destination rectangle. dy2 - the y coordinate of the second corner of the destination rectangle. sx1 - the x coordinate of the first corner of the source rectangle. sy1 - the y coordinate of the first corner of the source rectangle. sx2 - the x coordinate of the second corner of the source rectangle. sy2 - the y coordinate of the second corner of the source rectangle. observer - object to be notified as more of the image is scaled and converted. Returns: false if the image pixels are still changing; true otherwise. See Also: Image, ImageObserver, ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)",1,0,0,0,0,0,0,0,0,0,0,0
"Returns an array of all the item listeners registered on this DefaultButtonModel.  Returns: all of this model's ItemListeners or an empty array if no item listeners are currently registered Since: 1.4 See Also: addItemListener(java.awt.event.ItemListener), removeItemListener(java.awt.event.ItemListener)",1,0,0,0,0,0,0,0,0,0,0,0
"The default editor for table and tree cells.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,0,0,0,0,0,0,1,0,0
"This class has been obsoleted by the 1.4 focus APIs. While client code may  still use this class, developers are strongly encouraged to use  java.awt.KeyboardFocusManager and java.awt.DefaultKeyboardFocusManager  instead.  Please see How to Use the Focus Subsystem, a section in The Java Tutorial,  and the Focus Specification for more information.",0,0,1,0,0,0,0,0,0,1,1,1
"Overridden for performance reasons. See the Implementation Note for more information.  Overrides: firePropertyChange in class Component Parameters: propertyName - the programmatic name of the property that was changed oldValue - the old value of the property (as a float) newValue - the new value of the property (as a float) See Also: Component.firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)",0,0,0,0,0,0,0,0,0,0,0,1
"Sets the size of this list.  Parameters: newSize - the new size of this list See Also: Vector.setSize(int)",0,0,0,0,0,0,0,0,0,0,0,0
"An implementation of RowSorter that provides sorting and filtering around a  grid-based data model. Beyond creating and installing a RowSorter, you very  rarely need to interact with one directly. Refer to TableRowSorter for a  concrete implementation of RowSorter for JTable.  Sorting is done based on the current SortKeys, in order. If two objects are  equal (the Comparator for the column returns 0) the next SortKey is used.  If no SortKeys remain or the order is UNSORTED, then the order of the rows  in the model is used.  Sorting of each column is done by way of a Comparator that you can specify  using the setComparator method. If a Comparator has not been specified, the  Comparator returned by Collator.getInstance() is used on the results of  calling toString on the underlying objects. The Comparator is never passed  null. A null value is treated as occuring before a non-null value, and two  null values are considered equal.  If you specify a Comparator that casts its argument to a type other than  that provided by the model, a ClassCastException will be thrown when the  data is sorted.  In addition to sorting, DefaultRowSorter provides the ability to filter  rows. Filtering is done by way of a RowFilter that is specified using the  setRowFilter method. If no filter has been specified all rows are included.  By default, rows are in unsorted order (the same as the model) and every  column is sortable. The default Comparators are documented in the  subclasses (for example, TableRowSorter).  If the underlying model structure changes (the modelStructureChanged  method is invoked) the following are reset to their default values:  Comparators by column, current sort order, and whether each column is  sortable. To find the default Comparators, see the concrete implementation  (for example, TableRowSorter). The default sort order is unsorted (the same  as the model), and columns are sortable by default.  If the underlying model structure changes (the modelStructureChanged  method is invoked) the following are reset to their default values:  Comparators by column, current sort order and whether a column is sortable.  DefaultRowSorter is an abstract class. Concrete subclasses must provide  access to the underlying data by invoking setModelWrapper. The  setModelWrapper method must be invoked soon after the constructor is  called, ideally from within the subclass's constructor. Undefined behavior  will result if you use a DefaultRowSorter without specifying a  ModelWrapper.  DefaultRowSorter has two formal type parameters. The first type parameter  corresponds to the class of the model, for example DefaultTableModel. The  second type parameter corresponds to the class of the identifier passed to  the RowFilter. Refer to TableRowSorter and RowFilter for more details on  the type parameters.  Since:     1.6 See Also:     TableRowSorter, DefaultTableModel, Collator",1,0,1,0,0,1,1,1,0,0,0,0
"Returns the model wrapper providing the data that is being sorted and filtered.  Returns: the model wrapper responsible for providing the data that gets sorted and filtered",1,0,0,0,0,0,0,0,0,0,0,1
"Generally, this call should remove the frame from it's parent.",0,0,0,1,0,0,0,0,0,0,0,0
"An image filter that disables an image by turning it into a grayscale  image, and brightening the pixels in the image. Used by buttons to create  an image for a disabled button.",1,0,0,1,0,0,0,0,0,0,0,0
"Adds a Component to this Group.  Parameters: component - the Component to add Returns: this Group",1,0,0,0,0,0,0,0,0,0,0,1
"Gets the height of the icon.  Specified by: getAccessibleIconHeight in interface AccessibleIcon Returns: the height of the icon",1,0,0,0,0,0,0,0,0,0,0,1
"JColorChooser provides a pane of controls designed to allow a user to  manipulate and select a color. For information about using color choosers,  see How to Use Color Choosers, a section in The Java Tutorial.  This class provides three levels of API:     1. A static convenience method which shows a modal color-chooser dialog       and returns the color selected by the user.    2. A static convenience method for creating a color-chooser dialog where        ActionListeners can be specified to be invoked when the user presses       one of the dialog buttons.    3. The ability to create instances of JColorChooser panes directly       (within any container). PropertyChange listeners can be added to       detect when the current color property changes.  Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,1,1,0,1,0,0,1,1,0
"Returns true if the JComboBox is editable. By default, a combo box is not editable.  Returns: true if the JComboBox is editable, else false",1,0,0,0,0,0,0,0,0,0,0,1
"Description copied from interface: FocusListener Invoked when a component gains the keyboard focus.  Specified by: focusGained in interface FocusListener",0,0,0,0,0,0,0,0,0,0,0,0
"Returns true if the current painting operation on this component is part of a print operation. This method is useful when you want to customize what you print versus what you show on the screen.  You can detect changes in the value of this property by listening for property change events on this component with name paintingForPrint.  Note: This method provides complimentary functionality to that provided by other high level Swing printing APIs. However, it deals strictly with painting and should not be confused as providing information on higher level print processes. For example, a JTable.print() operation doesn't necessarily result in a continuous rendering of the full component, and the return value of this method can change multiple times during that operation. It is even possible for the component to be painted to the screen while the printing process is ongoing. In such a case, the return value of this method is true when, and only when, the table is being painted as part of the printing process.  Returns: true if the current painting operation on this component is part of a print operation Since: 1.6 See Also: print(java.awt.Graphics)",1,1,0,1,0,0,0,1,0,0,0,0
"Sets the default locale used to initialize each JComponent's locale property upon creation. The initial value is the VM's default locale. The default locale has AppContext scope so that applets (and potentially multiple lightweight applications running in a single VM) can have their own setting. An applet can safely alter its default locale because it will have no affect on other applets (or the browser).  Parameters: l - the desired default Locale for new components. Since: 1.4 See Also: getDefaultLocale(), Component.getLocale(), Component.setLocale(java.util.Locale)",1,0,0,0,0,0,1,0,0,0,0,0
"Returns the tooltip string that has been set with setToolTipText.  Returns: the text of the tool tip See Also: TOOL_TIP_TEXT_KEY",1,0,0,0,0,0,0,0,0,0,0,1
"Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.  Overrides: processMouseMotionEvent in class Component Parameters: e - the MouseEvent See Also: MouseEvent",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the current x coordinate of the component's origin. This method is preferable to writing component.getBounds().x, or component.getLocation().x because it doesn't cause any heap allocations.  Overrides: getX in class Component Returns: the current x coordinate of the component's origin",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the current height of this component. This method is preferable to writing component.getBounds().height, or component.getSize().height because it doesn't cause any heap allocations.  Overrides: getHeight in class Component Returns: the current height of this component",1,0,0,0,0,0,0,0,0,0,0,1
"Creates a new JDesktopPane.",0,0,0,0,0,0,0,0,0,0,0,1
"This class implements accessibility support for the JDialog class. It  provides an implementation of the Java Accessibility API appropriate to  dialog user-interface elements.",1,0,0,1,0,0,0,0,0,0,0,0
"Get the state of this object.  Overrides: getAccessibleStateSet in class Dialog.AccessibleAWTDialog Returns: an instance of AccessibleStateSet containing the current state set of the object See Also: AccessibleState",1,0,0,0,0,0,0,0,0,0,0,0
"Creates a modeless dialog without a title and without a specified Frame owner. A shared, hidden frame will be set as the owner of the dialog.  This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale.  NOTE: This constructor does not allow you to create an unowned JDialog . To create an unowned JDialog you must use either the JDialog(Window) or JDialog(Dialog) constructor with an argument of null.  Throws: HeadlessException - if GraphicsEnvironment.isHeadless() returns true. See Also: GraphicsEnvironment.isHeadless(), JComponent.getDefaultLocale()",1,0,0,0,0,0,1,1,0,0,0,0
"Creates a modeless dialog without a title with the specified Dialog as its owner.  This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale.  Parameters: owner - the owner Dialog from which the dialog is displayed or null if this dialog has no owner Throws: HeadlessException - if GraphicsEnvironment.isHeadless() returns true. See Also: GraphicsEnvironment.isHeadless(), JComponent.getDefaultLocale()",1,0,0,0,0,0,1,0,0,0,0,0
"Sets the operation that will happen by default when the user initiates a close on this dialog. You must specify one of the following choices:  * DO_NOTHING_ON_CLOSE (defined in WindowConstants): Don't do anything; require the program to handle the operation in the windowClosing method of a registered WindowListener object. * HIDE_ON_CLOSE (defined in WindowConstants): Automatically hide the dialog after invoking any registered WindowListener objects. * DISPOSE_ON_CLOSE (defined in WindowConstants): Automatically hide and dispose the dialog after invoking any registered WindowListener objects.  The value is set to HIDE_ON_CLOSE by default. Changes to the value of this property cause the firing of a property change event, with property name defaultCloseOperation.  Note: When the last displayable window within the Java virtual machine (VM) is disposed of, the VM may terminate. See AWT Threading Issues for more information.  Parameters: operation - the operation which should be performed when the user closes the dialog Throws: IllegalArgumentException - if defaultCloseOperation value isn't one of the above valid values See Also: Window.addWindowListener(java.awt.event.WindowListener), getDefaultCloseOperation(), WindowConstants",1,1,1,0,0,0,0,0,0,0,0,0
"Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.  Parameters: listener - the listener",1,0,0,0,0,0,0,0,0,0,0,1
"JFileChooser provides a simple mechanism for the user to choose a file. For  information about using JFileChooser, see How to Use File Choosers, a  section in The Java Tutorial.  The following code pops up a file chooser for the user's home directory  that sees only .jpg and .gif images:   JFileChooser chooser = new JFileChooser(); FileNameExtensionFilter filter = new FileNameExtensionFilter( JPG & GIF Images, jpg, gif); chooser.setFileFilter(filter); int returnVal = chooser.showOpenDialog(parent); if(returnVal == JFileChooser.APPROVE_OPTION) { System.out.println(You chose to open this file:  + chooser.getSelectedFile().getName()); }   Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.",1,0,0,0,0,0,0,1,1,0,1,0
" Identifies whether a the AcceptAllFileFilter is used or not.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Instances of AbstractFormatter are used by JFormattedTextField to handle  the conversion both from an Object to a String, and back from a String to  an Object. AbstractFormatters can also enfore editing policies, or  navigation policies, or manipulate the JFormattedTextField in any way it  sees fit to enforce the desired policy.  An AbstractFormatter can only be active in one JFormattedTextField at a  time. JFormattedTextField invokes install when it is ready to use it  followed by uninstall when done. Subclasses that wish to install additional  state should override install and message super appropriately.  Subclasses must override the conversion methods stringToValue and  valueToString. Optionally they can override getActions,  getNavigationFilter and getDocumentFilter to restrict the  JFormattedTextField in a particular way.  Subclasses that allow the JFormattedTextField to be in a temporarily  invalid state should invoke setEditValid at the appropriate times.  Since:     1.4",1,0,1,0,0,0,0,1,0,0,0,0
"Subclass and override if you wish to provide a custom set of Actions. install will install these on the JFormattedTextField's ActionMap.  Returns: Array of Actions to install on JFormattedTextField",1,0,1,0,0,0,0,0,0,0,0,0
"Returns the current AbstractFormatterFactory.  Returns: AbstractFormatterFactory used to determine AbstractFormatters See Also: setFormatterFactory(javax.swing.JFormattedTextField.AbstractFormatterFactory)",0,0,0,1,0,0,0,0,0,0,0,1
"Gets the class ID for a UI.  Overrides: getUIClassID in class JTextField Returns: the string FormattedTextFieldUI See Also: JComponent.getUIClassID()",0,0,0,0,0,0,0,0,0,0,0,1
"A lightweight object that provides many of the features of a native frame,  including dragging, closing, becoming an icon, resizing, title display, and  support for a menu bar. For task-oriented documentation and examples of  using internal frames, see How to Use Internal Frames, a section in The  Java Tutorial.  Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the  look-and-feel-specific actions to the DesktopManager object maintained by  the JDesktopPane.  The JInternalFrame content pane is where you add child components. As a  conveniance add and its variants, remove and setLayout have been overridden  to forward to the contentPane as necessary. This means you can write:   internalFrame.add(child);   And the child will be added to the contentPane. The content pane is  actually managed by an instance of JRootPane, which also manages a layout  pane, glass pane, and optional menu bar for the internal frame. Please see  the JRootPane documentation for a complete description of these components.  Refer to RootPaneContainer for details on adding, removing and setting the  LayoutManager of a JInternalFrame.  Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     InternalFrameEvent, JDesktopPane, DesktopManager,      JInternalFrame.JDesktopIcon, JRootPane, RootPaneContainer",0,0,0,0,0,0,0,0,0,0,0,0
"Sets the JInternalFrame title. title may have a null value.  Parameters: title - the String to display in the title bar See Also: getTitle()",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.  Returns: index representing mnemonic character Since: 1.4 See Also: setDisplayedMnemonicIndex(int)",1,0,0,0,0,0,0,0,0,0,0,1
"JLayeredPane adds depth to a JFC/Swing container, allowing components to  overlap each other when needed. An Integer object specifies each  component's depth in the container, where higher-numbered components sit  on top of other components. For task-oriented documentation and examples  of using layered panes see How to Use a Layered Pane, a section in The Java  Tutorial.  [The following text describes this image.]  For convenience, JLayeredPane divides the depth-range into several  different layers. Putting a component into one of those layers makes it  easy to ensure that components overlap properly, without having to worry  about specifying numbers for specific depths: DEFAULT_LAYER     The standard layer, where most components go. This the bottommost     layer. PALETTE_LAYER     The palette layer sits over the default layer. Useful for floating     toolbars and palettes, so they can be positioned above other     components. MODAL_LAYER     The layer used for modal dialogs. They will appear on top of any     toolbars, palettes, or standard components in the container. POPUP_LAYER     The popup layer displays above dialogs. That way, the popup windows     associated with combo boxes, tooltips, and other help text will appear     above the component, palette, or dialog that generated them. DRAG_LAYER     When dragging a component, reassigning it to the drag layer ensures     that it is positioned over every other component in the container. When     finished dragging, it can be reassigned to its normal layer. The JLayeredPane methods moveToFront(Component), moveToBack(Component) and  setPosition can be used to reposition a component within its layer. The  setLayer method can also be used to change the component's current layer.   Details  JLayeredPane manages its list of children like Container, but allows for  the definition of a several layers within itself. Children in the same  layer are managed exactly like the normal Container object, with the added  feature that when children components overlap, children in higher layers  display above the children in lower layers.  Each layer is a distinct integer number. The layer attribute can be set on  a Component by passing an Integer object during the add call. For example:   layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, new Integer(10));   The layer attribute can also be set on a Component by calling   layeredPaneParent.setLayer(child, 10)  on the JLayeredPane that is the parent of component. The layer should be  set before adding the child to the parent.  Higher number layers display above lower number layers. So, using numbers  for the layers and letters for individual components, a representative list  order would look like this:   5a, 5b, 5c, 2a, 2b, 2c, 1a   where the leftmost components are closest to the top of the display.  A component can be moved to the top or bottom position within its layer by  calling moveToFront or moveToBack.  The position of a component within a layer can also be specified directly.  Valid positions range from 0 up to one less than the number of components  in that layer. A value of -1 indicates the bottommost position. A value of  0 indicates the topmost position. Unlike layer numbers, higher position  values are lower in the display.      Note: This sequence (defined by java.awt.Container) is the reverse of     the layer numbering sequence. Usually though, you will use moveToFront     , moveToBack, and setLayer.  Here are some examples using the method add(Component, layer, position):  Calling add(5x, 5, -1) results in:   5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a   Calling add(5z, 5, 2) results in:   5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a   Calling add(3a, 3, 7) results in:   5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a   Using normal paint/event mechanics results in 1a appearing at the bottom  and 5a being above all other components.  Note: that these layers are simply a logical construct and LayoutManagers  will affect all child components of this container without regard for layer  settings.  Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,1,0,0,0,0,1,0,1,0,1,0
"Primitive method that determines the proper location to insert a new child based on layer and position requests.  Parameters: layer - an int specifying the layer position - an int specifying the position within the layer Returns: an int giving the (absolute) insertion-index See Also: getIndexOf(java.awt.Component)",1,0,0,0,0,0,0,0,0,0,0,1
"Description copied from class: AccessibleContext Gets the AccessibleAction associated with this object that supports one or more actions.  Overrides: getAccessibleAction in class AccessibleContext Returns: AccessibleAction if supported by object; else return null See Also: AccessibleAction",0,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: AccessibleComponent Gets the foreground color of this object.  Specified by: getForeground in interface AccessibleComponent Returns: the foreground color, if supported, of the object; otherwise, null See Also: AccessibleComponent.setForeground(java.awt.Color)",1,0,0,0,0,0,1,0,0,0,0,0
"Description copied from interface: AccessibleComponent Adds the specified focus listener to receive focus events from this component.  Specified by: addFocusListener in interface AccessibleComponent Parameters: l - the focus listener See Also: AccessibleComponent.removeFocusListener(java.awt.event.FocusListener)",0,0,0,0,0,0,0,0,0,0,0,1
"A component that displays a list of objects and allows the user to select  one or more items. A separate model, ListModel, maintains the contents of  the list.  It's easy to display an array or Vector of objects, using the JList  constructor that automatically builds a read-only ListModel instance for  you:   // Create a JList that displays strings from an array  String[] data = {one, two, three, four}; JList myList = new JList(data);  // Create a JList that displays the superclasses of JList.class, by // creating it with a Vector populated with this data  Vector superClasses = new Vector(); Class rootClass = javax.swing.JList.class; for(Class cls = rootClass; cls != null; cls = cls.getSuperclass()) { superClasses.addElement(cls); } JList myList = new JList(superClasses);  // The automatically created model is stored in JList's model // property, which you can retrieve  ListModel model = myList.getModel(); for(int i = 0; i < model.getSize(); i++) { System.out.println(model.getElementAt(i)); }   A ListModel can be supplied directly to a JList by way of a constructor or  the setModel method. The contents need not be static - the number of items,  and the values of items can change over time. A correct ListModel  implementation notifies the set of javax.swing.event.ListDataListeners that  have been added to it, each time a change occurs. These changes are  characterized by a javax.swing.event.ListDataEvent, which identifies the  range of list indices that have been modified, added, or removed. JList's  ListUI is responsible for keeping the visual representation up to date with  changes, by listening to the model.  Simple, dynamic-content, JList applications can use the DefaultListModel  class to maintain list elements. This class implements the ListModel  interface and also provides a java.util.Vector-like API. Applications that  need a more custom ListModel implementation may instead wish to subclass  AbstractListModel, which provides basic support for managing and notifying  listeners. For example, a read-only implementation of AbstractListModel:   // This list model has about 2^16 elements.  Enjoy scrolling.  ListModel bigData = new AbstractListModel() { public int getSize() { return Short.MAX_VALUE; } public Object getElementAt(int index) { return Index  + index; } };   The selection state of a JList is managed by another separate model, an  instance of ListSelectionModel. JList is initialized with a selection model  on construction, and also contains methods to query or set this selection  model. Additionally, JList provides convenient methods for easily managing  the selection. These methods, such as setSelectedIndex and  getSelectedValue, are cover methods that take care of the details of  interacting with the selection model. By default, JList's selection model  is configured to allow any combination of items to be selected at a time;  selection mode MULTIPLE_INTERVAL_SELECTION. The selection mode can be  changed on the selection model directly, or via JList's cover method.  Responsibility for updating the selection model in response to user  gestures lies with the list's ListUI.  A correct ListSelectionModel implementation notifies the set of  javax.swing.event.ListSelectionListeners that have been added to it each  time a change to the selection occurs. These changes are characterized by a  javax.swing.event.ListSelectionEvent, which identifies the range of the  selection change.  The preferred way to listen for changes in list selection is to add  ListSelectionListeners directly to the JList. JList then takes care of  listening to the the selection model and notifying your listeners of  change.  Responsibility for listening to selection changes in order to keep the  list's visual representation up to date lies with the list's ListUI.  Painting of cells in a JList is handled by a delegate called a cell  renderer, installed on the list as the cellRenderer property. The renderer  provides a java.awt.Component that is used like a rubber stamp to paint  the cells. Each time a cell needs to be painted, the list's ListUI asks the  cell renderer for the component, moves it into place, and has it paint the  contents of the cell by way of its paint method. A default cell renderer,  which uses a JLabel component to render, is installed by the lists's  ListUI. You can substitute your own renderer using code like this:   // Display an icon and a string for each object in the list. class MyCellRenderer extends JLabel implements ListCellRenderer { final static ImageIcon longIcon = new ImageIcon(long.gif); final static ImageIcon shortIcon = new ImageIcon(short.gif); // This is the only method defined by ListCellRenderer. // We just reconfigure the JLabel each time we're called. public Component getListCellRendererComponent( JList list,              // the list Object value,            // value to display int index,               // cell index boolean isSelected,      // is the cell selected boolean cellHasFocus)    // does the cell have focus { String s = value.toString(); setText(s); setIcon((s.length() > 10) ? longIcon : shortIcon); if (isSelected) { setBackground(list.getSelectionBackground()); setForeground(list.getSelectionForeground()); } else { setBackground(list.getBackground()); setForeground(list.getForeground()); } setEnabled(list.isEnabled()); setFont(list.getFont()); setOpaque(true); return this; } } myList.setCellRenderer(new MyCellRenderer());   Another job for the cell renderer is in helping to determine sizing  information for the list. By default, the list's ListUI determines the size  of cells by asking the cell renderer for its preferred size for each list  item. This can be expensive for large lists of items. To avoid these  calculations, you can set a fixedCellWidth and fixedCellHeight on the list,  or have these values calculated automatically based on a single prototype  value:   JList bigDataList = new JList(bigData); // We don't want the JList implementation to compute the width // or height of all of the list cells, so we give it a string // that's as big as we'll need for any cell.  It uses this to // compute values for the fixedCellWidth and fixedCellHeight // properties. bigDataList.setPrototypeCellValue(Index 1234567890);   JList doesn't implement scrolling directly. To create a list that scrolls,  make it the viewport view of a JScrollPane. For example:   JScrollPane scrollPane = new JScrollPane(myList); // Or in two steps: JScrollPane scrollPane = new JScrollPane(); scrollPane.getViewport().setView(myList);   JList doesn't provide any special handling of double or triple (or N) mouse  clicks, but it's easy to add a MouseListener if you wish to take action on  these events. Use the locationToIndex method to determine what cell was  clicked. For example:   MouseListener mouseListener = new MouseAdapter() { public void mouseClicked(MouseEvent e) { if (e.getClickCount() == 2) { int index = list.locationToIndex(e.getPoint()); System.out.println(Double clicked on Item  + index); } } }; list.addMouseListener(mouseListener);   Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See How to Use Lists in The Java Tutorial for further documentation. Also  see the article Advanced JList Programming in The Swing Connection.  See Also:     ListModel, AbstractListModel, DefaultListModel, ListSelectionModel,      DefaultListSelectionModel, ListCellRenderer, DefaultListCellRenderer",1,0,0,0,1,1,1,1,1,0,1,0
"Returns an array of all the ListSelectionListeners added to this JList by way of addListSelectionListener.  Returns: all of the ListSelectionListeners on this list, or an empty array if no listeners have been added Since: 1.4 See Also: addListSelectionListener(javax.swing.event.ListSelectionListener)",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the anchor selection index. This is a cover method that delegates to the method of the same name on the list's selection model.  Returns: the anchor selection index See Also: ListSelectionModel.getAnchorSelectionIndex()",1,0,0,0,0,0,0,0,0,0,0,1
"A listener class that watches for a popup window closing. When the popup is  closing, the listener deselects the menu.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,1,0,0,0,1,0,0,0,0,0
"Constructs a new JMenu with no text.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the name of the L&F class that renders this component.  Overrides: getUIClassID in class JMenuItem Returns: the string MenuUI See Also: JComponent.getUIClassID(), UIDefaults.getUI(javax.swing.JComponent)",1,0,0,0,0,0,0,0,0,0,0,0
"Inserts the specified JMenuitem at a given position.  Parameters: mi - the JMenuitem to add pos - an integer specifying the position at which to add the new JMenuitem Returns: the new menu item Throws: IllegalArgumentException - if the value of pos < 0",0,0,0,0,0,0,0,0,0,0,0,1
"Description copied from class: Component Sets the language-sensitive orientation that is to be used to order the elements or text within this component. Language-sensitive LayoutManager and Component subclasses will use this property to determine how to lay out and draw components.  At construction time, a component's orientation is set to ComponentOrientation.UNKNOWN, indicating that it has not been specified explicitly. The UNKNOWN orientation behaves the same as ComponentOrientation.LEFT_TO_RIGHT.  To set the orientation of a single component, use this method. To set the orientation of an entire component hierarchy, use applyComponentOrientation.  Overrides: setComponentOrientation in class Component See Also: ComponentOrientation",0,0,0,0,0,0,0,1,0,0,0,0
"setAccelerator is not defined for JMenu. Use setMnemonic instead.  Overrides: setAccelerator in class JMenuItem Parameters: keyStroke - the keystroke combination which will invoke the JMenuItem's actionlisteners without navigating the menu hierarchy Throws: Error - if invoked -- this method is not defined for JMenu. Use setMnemonic instead",1,0,0,0,0,0,1,0,0,0,0,0
"This class implements accessibility support for the JMenuBar class. It  provides an implementation of the Java Accessibility API appropriate to  menu bar user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,0,0,0,0,0,0
"Implemented to be a MenuElement. Returns this object.  Specified by: getComponent in interface MenuElement Returns: the current Component (this) See Also: getSubElements()",0,0,0,0,0,0,1,0,0,0,0,1
"This class implements accessibility support for the JMenuItem class. It  provides an implementation of the Java Accessibility API appropriate to  menu item user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,1,0,0,0,0,0
"Updates the button's state in response to property changes in the associated action. This method is invoked from the PropertyChangeListener returned from createActionPropertyChangeListener. Subclasses do not normally need to invoke this. Subclasses that support additional Action properties should override this and configurePropertiesFromAction.  Refer to the table at Swing Components Supporting Action for a list of the properties this method sets.  Overrides: actionPropertyChanged in class AbstractButton Parameters: action - the Action associated with this button propertyName - the name of the property that changed Since: 1.6 See Also: Action, AbstractButton.configurePropertiesFromAction(javax.swing.Action)",1,0,1,0,0,0,1,0,0,0,0,0
"This class implements accessibility support for the JOptionPane class. It  provides an implementation of the Java Accessibility API appropriate to  option pane user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,0,0,0,0,0,0
"JOptionPane makes it easy to pop up a standard dialog box that prompts  users for a value or informs them of something. For information about using  JOptionPane, see How to Make Dialogs, a section in The Java Tutorial.  While the JOptionPane class may appear complex because of the large number  of methods, almost all uses of this class are one-line calls to one of the  static showXxxDialog methods shown below:      Method Name 	Description     showConfirmDialog 	Asks a confirming question, like yes/no/cancel.     showInputDialog 	Prompt for some input.     showMessageDialog 	Tell the user about something that has happened.     showOptionDialog 	The Grand Unification of the above three.  Each of these methods also comes in a showInternalXXX flavor, which uses an  internal frame to hold the dialog box (see JInternalFrame). Multiple  convenience methods have also been defined -- overloaded versions of the  basic methods that use different parameter lists.  All dialogs are modal. Each showXxxDialog method blocks the caller until  the user's interaction is complete.  icon 	message input value option buttons The basic appearance of one of these dialog boxes is generally similar to  the picture at the right, although the various look-and-feels are  ultimately responsible for the final result. In particular, the  look-and-feels will adjust the layout to accommodate the option pane's  ComponentOrientation property.  Parameters: The parameters to these methods follow consistent patterns:      parentComponent         Defines the Component that is to be the parent of this dialog box.         It is used in two ways: the Frame that contains it is used as the          Frame parent for the dialog box, and its screen coordinates are         used in the placement of the dialog box. In general, the dialog box         is placed just below the component. This parameter may be null, in         which case a default Frame is used as the parent, and the dialog         will be centered on the screen (depending on the L&F).     message         A descriptive message to be placed in the dialog box. In the most         common usage, message is just a String or String constant. However,         the type of this parameter is actually Object. Its interpretation         depends on its type:         Object[]             An array of objects is interpreted as a series of messages (one             per object) arranged in a vertical stack. The interpretation is             recursive -- each object in the array is interpreted according             to its type.         Component             The Component is displayed in the dialog.         Icon             The Icon is wrapped in a JLabel and displayed in the dialog.         others             The object is converted to a String by calling its toString              method. The result is wrapped in a JLabel and displayed.     messageType         Defines the style of the message. The Look and Feel manager may lay         out the dialog differently depending on this value, and will often         provide a default icon. The possible values are:             * ERROR_MESSAGE             * INFORMATION_MESSAGE             * WARNING_MESSAGE             * QUESTION_MESSAGE             * PLAIN_MESSAGE     optionType         Defines the set of option buttons that appear at the bottom of the         dialog box:             * DEFAULT_OPTION             * YES_NO_OPTION             * YES_NO_CANCEL_OPTION             * OK_CANCEL_OPTION         You aren't limited to this set of option buttons. You can provide         any buttons you want using the options parameter.     options         A more detailed description of the set of option buttons that will         appear at the bottom of the dialog box. The usual value for the         options parameter is an array of Strings. But the parameter type is         an array of Objects. A button is created for each object depending         on its type:         Component             The component is added to the button row directly.         Icon             A JButton is created with this as its label.         other             The Object is converted to a string using its toString method             and the result is used to label a JButton.     icon         A decorative icon to be placed in the dialog box. A default value         for this is determined by the messageType parameter.     title         The title for the dialog box.     initialValue         The default selection (input value).  When the selection is changed, setValue is invoked, which generates a  PropertyChangeEvent.  If a JOptionPane has configured to all input setWantsInput the bound  property JOptionPane.INPUT_VALUE_PROPERTY can also be listened to, to  determine when the user has input or selected a value.  When one of the showXxxDialog methods returns an integer, the possible  values are:      * YES_OPTION     * NO_OPTION     * CANCEL_OPTION     * OK_OPTION     * CLOSED_OPTION Examples: Show an error dialog that displays the message, 'alert':     JOptionPane.showMessageDialog(null, alert, alert,     JOptionPane.ERROR_MESSAGE);  Show an internal information dialog with the message, 'information':     JOptionPane.showInternalMessageDialog(frame, information,                 information, JOptionPane.INFORMATION_MESSAGE);  Show an information panel with the options yes/no and message 'choose one':     JOptionPane.showConfirmDialog(null,                 choose one, choose one, JOptionPane.YES_NO_OPTION);  Show an internal information dialog with the options yes/no/cancel and  message 'please choose one' and title information:     JOptionPane.showInternalConfirmDialog(frame,                 please choose one, information,                 JOptionPane.YES_NO_CANCEL_OPTION,                 JOptionPane.INFORMATION_MESSAGE);  Show a warning dialog with the options OK, CANCEL, title 'Warning', and  message 'Click OK to continue':     Object[] options = { OK, CANCEL };     JOptionPane.showOptionDialog(null, Click OK to continue, Warning,                 JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,                 null, options, options[0]);  Show a dialog asking the user to type in a String:     String inputValue = JOptionPane.showInputDialog(Please input a     value);  Show a dialog asking the user to select a String:     Object[] possibleValues = { First, Second, Third };     Object selectedValue = JOptionPane.showInputDialog(null,                 Choose one, Input,                 JOptionPane.INFORMATION_MESSAGE, null,                 possibleValues, possibleValues[0]);  Direct Use: To create and use an JOptionPane directly, the standard pattern is roughly  as follows:   JOptionPane pane = new JOptionPane(arguments); pane.set.Xxxx(...); // Configure JDialog dialog = pane.createDialog(parentComponent, title); dialog.show(); Object selectedValue = pane.getValue(); if(selectedValue == null) return CLOSED_OPTION; //If there is not an array of option buttons: if(options == null) { if(selectedValue instanceof Integer) return ((Integer)selectedValue).intValue(); return CLOSED_OPTION; } //If there is an array of option buttons: for(int counter = 0, maxCounter = options.length; counter < maxCounter; counter++) { if(options[counter].equals(selectedValue)) return counter; } return CLOSED_OPTION;   Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     JInternalFrame",1,0,0,1,0,1,1,1,1,0,1,0
"Shows a question-message dialog requesting input from the user parented to parentComponent. The dialog is displayed on top of the Component's frame, and is usually positioned below the Component.  Parameters: parentComponent - the parent Component for the dialog message - the Object to display Throws: HeadlessException - if GraphicsEnvironment.isHeadless returns true See Also: GraphicsEnvironment.isHeadless()",1,0,0,0,0,0,0,0,0,0,0,1
"Brings up a dialog with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter.  If optionType is YES_NO_OPTION, or YES_NO_CANCEL_OPTION and the options parameter is null, then the options are supplied by the look and feel.  The messageType parameter is primarily used to supply a default icon from the look and feel.  Parameters: parentComponent - determines the Frame in which the dialog is displayed; if null, or if the parentComponent has no Frame, a default Frame is used message - the Object to display title - the title string for the dialog optionType - an integer designating the options available on the dialog: DEFAULT_OPTION, YES_NO_OPTION, YES_NO_CANCEL_OPTION, or OK_CANCEL_OPTION messageType - an integer designating the kind of message this is, primarily used to determine the icon from the pluggable Look and Feel: ERROR_MESSAGE, INFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE icon - the icon to display in the dialog options - an array of objects indicating the possible choices the user can make; if the objects are components, they are rendered properly; non-String objects are rendered using their toString methods; if this parameter is null, the options are determined by the Look and Feel initialValue - the object that represents the default selection for the dialog; only meaningful if options is used; can be null Returns: an integer indicating the option chosen by the user, or CLOSED_OPTION if the user closed the dialog Throws: HeadlessException - if GraphicsEnvironment.isHeadless returns true See Also: GraphicsEnvironment.isHeadless()",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the Frame to use for the class methods in which a frame is not provided.  Returns: the default Frame to use Throws: HeadlessException - if GraphicsEnvironment.isHeadless returns true See Also: setRootFrame(java.awt.Frame), GraphicsEnvironment.isHeadless()",1,0,0,0,0,0,0,0,0,0,0,1
"JPanel is a generic lightweight container. For examples and task-oriented  documentation for JPanel, see How to Use Panels, a section in The Java  Tutorial.  Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,0,1,0,0,0,0,1,0,0
"Returns a string representation of this JPanel. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.  Overrides: paramString in class JComponent Returns: a string representation of this JPanel.",1,0,0,0,0,0,0,0,0,0,0,0
"A popup menu-specific separator.",0,0,0,0,0,0,0,0,0,0,0,1
"Resets the UI property to a value from the current look and feel.  Overrides: updateUI in class JComponent See Also: JComponent.updateUI()",1,0,0,0,0,0,0,0,0,0,0,0
"This class implements accessibility support for the JProgressBar class. It  provides an implementation of the Java Accessibility API appropriate to  progress bar user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,1,0,0,1,0,0
"Paints the progress bar's border if the borderPainted property is true .  Overrides: paintBorder in class JComponent Parameters: g - the Graphics context within which to paint the border See Also: JComponent.paint(java.awt.Graphics), JComponent.setBorder(javax.swing.border.Border), isBorderPainted() , setBorderPainted(boolean)",1,0,0,0,0,0,0,0,0,0,0,0
"This class implements accessibility support for the JRadioButton class. It  provides an implementation of the Java Accessibility API appropriate to  radio button user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,0,0,0,1,0,0,0,0,0
"Creates a radio button with the specified text and selection state.  Parameters: text - the string displayed on the radio button selected - if true, the button is initially selected; otherwise, the button is initially unselected",0,1,0,0,0,0,0,0,0,0,0,0
"Creates a radio button that has the specified text and image, and that is initially unselected.  Parameters: text - the string displayed on the radio button icon - the image that the button should display",1,0,0,0,0,0,0,0,0,0,0,1
"Description copied from interface: LayoutManager2 Returns the alignment along the y axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc.  Specified by: getLayoutAlignmentY in interface LayoutManager2",1,0,1,0,0,0,0,0,0,0,0,0
" The content pane. ",0,0,0,0,0,0,0,0,0,0,0,1
"Sets the layered pane for the root pane. The layered pane typically holds a content pane and an optional JMenuBar.  Parameters: layered - the JLayeredPane to use Throws: IllegalComponentStateException - (a runtime exception) if the layered pane parameter is null",1,0,0,0,0,0,0,0,0,0,0,1
"Unregister ourselves from SystemEventQueueUtils.  Overrides: removeNotify in class JComponent See Also: addNotify()",1,0,0,0,0,0,0,0,0,0,0,0
"Overridden to enforce the position of the glass component as the zero child.  Overrides: addImpl in class Container Parameters: comp - the component to be enhanced constraints - the constraints to be respected index - the index See Also: Container.add(Component), Container.add(Component, int), Container.add(Component, java.lang.Object), LayoutManager, LayoutManager2",0,0,0,0,0,0,0,0,0,0,0,0
"By default JScrollPane creates scrollbars that are instances of this class.  Scrollbar overrides the getUnitIncrement and getBlockIncrement methods so  that, if the viewport's view is a Scrollable, the view is asked to compute  these values. Unless the unit/block increment have been explicitly set.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     Scrollable, JScrollPane.createVerticalScrollBar(),      JScrollPane.createHorizontalScrollBar()",1,0,0,0,0,1,0,0,0,1,0,1
" The display policy for the horizontal scrollbar. The default is ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED.  See Also: setHorizontalScrollBarPolicy(int) ",0,1,0,0,0,0,0,0,0,0,0,0
"This class implements accessibility support for the JSlider class. It  provides an implementation of the Java Accessibility API appropriate to  slider user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,0,0,0,0,0,0
"Adds a ChangeListener to the slider.  Parameters: l - the ChangeListener to add See Also: fireStateChanged(), removeChangeListener(javax.swing.event.ChangeListener)",0,0,0,0,0,0,0,0,0,0,0,1
"Gets the AccessibleContext associated with this JSlider. For sliders, the AccessibleContext takes the form of an AccessibleJSlider. A new AccessibleJSlider instance is created if necessary.  Specified by: getAccessibleContext in interface Accessible Overrides: getAccessibleContext in class JComponent Returns: an AccessibleJSlider that serves as the AccessibleContext of this JSlider",1,0,0,0,0,0,0,0,0,0,0,1
"AccessibleJSpinner implements accessibility support for the JSpinner  class.  Since:     1.5",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the object in the sequence that comes after the object returned by getValue(). If the end of the sequence has been reached then return null. Calling this method does not effect value.  This method simply delegates to the model. It is equivalent to:  getModel().getNextValue()  Returns: the next legal value or null if one doesn't exist See Also: getValue(), getPreviousValue(), SpinnerModel.getNextValue()",1,0,0,0,0,0,1,0,0,0,0,0
"This class implements accessibility support for the JSplitPane class. It  provides an implementation of the Java Accessibility API appropriate to  split pane user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,0,0,0,1,0,0,0,0,0
"Returns the name of the L&F class that renders this component.  Overrides: getUIClassID in class JComponent Returns: the string SplitPaneUI See Also: JComponent.getUIClassID(), UIDefaults.getUI(javax.swing.JComponent)",1,0,0,0,0,0,0,0,0,0,0,0
"Sets the component above, or to the left of the divider.  Parameters: comp - the Component to display in that position",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: AccessibleSelection Clears the selection in the object, so that no children in the object are selected.  Specified by: clearAccessibleSelection in interface AccessibleSelection",1,0,0,0,0,0,0,0,0,0,0,0
"Removes the tab and component which corresponds to the specified index.  Overrides: remove in class Container Parameters: index - the index of the component to remove from the tabbedpane Throws: IndexOutOfBoundsException - if index is out of range (index < 0 || index >= tab count) See Also: addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), removeTabAt(int)",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: AccessibleTableModelChange Returns the first row that changed.  Specified by: getFirstRow in interface AccessibleTableModelChange",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null",1,0,1,0,0,0,0,0,0,0,0,1
"The JTable is used to display and edit regular two-dimensional tables of  cells. See How to Use Tables in The Java Tutorial for task-oriented  documentation and examples of using JTable.  The JTable has many facilities that make it possible to customize its  rendering and editing but provides defaults for these features so that  simple tables can be set up easily. For example, to set up a table with 10  rows and 10 columns of numbers:   TableModel dataModel = new AbstractTableModel() { public int getColumnCount() { return 10; } public int getRowCount() { return 10;} public Object getValueAt(int row, int col) { return new Integer(row*col); } }; JTable table = new JTable(dataModel); JScrollPane scrollpane = new JScrollPane(table);   Note that if you wish to use a JTable in a standalone view (outside of a  JScrollPane) and want the header displayed, you can get it using  getTableHeader() and display it separately.  To enable sorting and filtering of rows, use a RowSorter. You can set up a  row sorter in either of two ways:      * Directly set the RowSorter. For example: table.setRowSorter(new       TableRowSorter(model)).     * Set the autoCreateRowSorter property to true, so that the JTable        creates a RowSorter for you. For example:        setAutoCreateRowSorter(true).  When designing applications that use the JTable it is worth paying close  attention to the data structures that will represent the table's data. The  DefaultTableModel is a model implementation that uses a Vector of Vectors  of Objects to store the cell values. As well as copying the data from an  application into the DefaultTableModel, it is also possible to wrap the  data in the methods of the TableModel interface so that the data can be  passed to the JTable directly, as in the example above. This often results  in more efficient applications because the model is free to choose the  internal representation that best suits the data. A good rule of thumb for  deciding whether to use the AbstractTableModel or the DefaultTableModel is  to use the AbstractTableModel as the base class for creating subclasses and  the DefaultTableModel when subclassing is not required.  The TableExample directory in the demo area of the source distribution  gives a number of complete examples of JTable usage, covering how the  JTable can be used to provide an editable view of data taken from a  database and how to modify the columns in the display to use specialized  renderers and editors.  The JTable uses integers exclusively to refer to both the rows and the  columns of the model that it displays. The JTable simply takes a tabular  range of cells and uses getValueAt(int, int) to retrieve the values from  the model during painting. It is important to remember that the column and  row indexes returned by various JTable methods are in terms of the JTable  (the view) and are not necessarily the same indexes used by the model.  By default, columns may be rearranged in the JTable so that the view's  columns appear in a different order to the columns in the model. This does  not affect the implementation of the model at all: when the columns are  reordered, the JTable maintains the new order of the columns internally and  converts its column indices before querying the model.  So, when writing a TableModel, it is not necessary to listen for column  reordering events as the model will be queried in its own coordinate system  regardless of what is happening in the view. In the examples area there is  a demonstration of a sorting algorithm making use of exactly this technique  to interpose yet another coordinate system where the order of the rows is  changed, rather than the order of the columns.  Similarly when using the sorting and filtering functionality provided by  RowSorter the underlying TableModel does not need to know how to do  sorting, rather RowSorter will handle it. Coordinate conversions will be  necessary when using the row based methods of JTable with the underlying  TableModel. All of JTables row based methods are in terms of the RowSorter , which is not necessarily the same as that of the underlying TableModel.  For example, the selection is always in terms of JTable so that when using  RowSorter you will need to convert using convertRowIndexToView or  convertRowIndexToModel. The following shows how to convert coordinates from  JTable to that of the underlying model:   int[] selection = table.getSelectedRows(); for (int i = 0; i < selection.length; i++) { selection[i] = table.convertRowIndexToModel(selection[i]); } // selection is now in terms of the underlying TableModel   By default if sorting is enabled JTable will persist the selection and  variable row heights in terms of the model on sorting. For example if row  0, in terms of the underlying model, is currently selected, after the sort  row 0, in terms of the underlying model will be selected. Visually the  selection may change, but in terms of the underlying model it will remain  the same. The one exception to that is if the model index is no longer  visible or was removed. For example, if row 0 in terms of model was  filtered out the selection will be empty after the sort.  J2SE 5 adds methods to JTable to provide convenient access to some common  printing needs. Simple new print() methods allow for quick and easy  addition of printing support to your application. In addition, a new  getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat,  java.text.MessageFormat) method is available for more advanced printing  needs.  As for all JComponent classes, you can use InputMap and ActionMap to  associate an Action object with a KeyStroke and execute the action under  specified conditions.  Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     DefaultTableModel, TableRowSorter",1,1,1,1,1,1,1,0,1,0,0,0
" The background color of selected cells. ",0,0,0,0,0,0,0,0,0,0,0,1
"Returns an appropriate editor for the cell specified by row and column . If the TableColumn for this column has a non-null editor, returns that. If not, finds the class of the data in this column (using getColumnClass) and returns the default editor for this type of data.  Note: Throughout the table package, the internal implementations always use this method to provide editors so that this default behavior can be safely overridden by a subclass.  Parameters: row - the row of the cell to edit, where 0 is the first row column - the column of the cell to edit, where 0 is the first column Returns: the editor for this cell; if null return the default editor for this type of cell See Also: DefaultCellEditor",1,0,0,0,0,0,0,0,0,0,0,0
"A JTextArea is a multi-line area that displays plain text. It is intended  to be a lightweight component that provides source compatibility with the  java.awt.TextArea class where it can reasonably do so. You can find  information and examples of using all the text components in Using Text  Components, a section in The Java Tutorial.  This component has capabilities not found in the java.awt.TextArea class.  The superclass should be consulted for additional capabilities. Alternative  multi-line text classes with more capabilities are JTextPane and  JEditorPane.  The java.awt.TextArea internally handles scrolling. JTextArea is different  in that it doesn't manage scrolling, but implements the swing Scrollable  interface. This allows it to be placed inside a JScrollPane if scrolling  behavior is desired, and used directly if scrolling is not desired.  The java.awt.TextArea has the ability to do line wrapping. This was  controlled by the horizontal scrolling policy. Since scrolling is not done  by JTextArea directly, backward compatibility must be provided another way.  JTextArea has a bound property for line wrapping that controls whether or  not it will wrap lines. By default, the line wrapping property is set to  false (not wrapped).  java.awt.TextArea has two properties rows and columns that are used to  determine the preferred size. JTextArea uses these properties to indicate  the preferred size of the viewport when placed inside a JScrollPane to  match the functionality provided by java.awt.TextArea. JTextArea has a  preferred size of what is needed to display all of the text, so that it  functions properly inside of a JScrollPane. If the value for rows or  columns is equal to zero, the preferred size along that axis is used for  the viewport preferred size along the same axis.  The java.awt.TextArea could be monitored for changes by adding a  TextListener for TextEvents. In the JTextComponent based components,  changes are broadcasted from the model via a DocumentEvent to  DocumentListeners. The DocumentEvent gives the location of the change and  the kind of change if desired. The code fragment might look something like:   DocumentListener myListener = ??; JTextArea myArea = ??; myArea.getDocument().addDocumentListener(myListener);   Newlines     For a discussion on how newlines are handled, see DefaultEditorKit.  Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     JTextPane, JEditorPane",1,0,0,0,0,0,1,0,1,0,0,0
"Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation. This is implemented to use the values returned by the getRowHeight and getColumnWidth methods.  Scrolling containers, like JScrollPane, will use this method each time the user requests a unit scroll.  Specified by: getScrollableUnitIncrement in interface Scrollable Overrides: getScrollableUnitIncrement in class JTextComponent Parameters: visibleRect - the view area visible within the viewport orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL. direction - Less than zero to scroll up/left, greater than zero for down/right. Returns: The unit increment for scrolling in the specified direction Throws: IllegalArgumentException - for an invalid orientation See Also: JScrollBar.setUnitIncrement(int), getRowHeight(), getColumnWidth()",1,0,0,1,0,0,1,0,0,0,0,0
"This class implements accessibility support for the JTextField class. It  provides an implementation of the Java Accessibility API appropriate to  text field user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,0,0,0,1,1,0
"Returns the currently set Action for this ActionEvent source, or null if no Action is set.  Returns: the Action for this ActionEvent source, or null Since: 1.3 See Also: Action, setAction(javax.swing.Action)",0,0,0,0,0,0,0,0,0,0,0,0
"This class implements accessibility support for the JToggleButton class. It  provides an implementation of the Java Accessibility API appropriate to  toggle button user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,0,0,0,0,0,0,1,1,0
"Description copied from interface: AccessibleComponent Determines if the object is enabled. Objects that are enabled will also have the AccessibleState.ENABLED state set in their AccessibleStateSets.  Specified by: isEnabled in interface AccessibleComponent Returns: true if object is enabled; otherwise, false See Also: AccessibleComponent.setEnabled(boolean), AccessibleContext.getAccessibleStateSet(), AccessibleState.ENABLED , AccessibleStateSet",1,0,0,0,0,0,1,0,0,0,0,0
"Description copied from interface: AccessibleComponent Sets the enabled state of the object.  Specified by: setEnabled in interface AccessibleComponent Parameters: b - if true, enables this object; otherwise, disables it See Also: AccessibleComponent.isEnabled()",1,0,0,0,0,0,0,0,0,0,0,1
"Description copied from interface: AccessibleComponent Returns whether this object can accept focus or not. Objects that can accept focus will also have the AccessibleState.FOCUSABLE state set in their AccessibleStateSets.  Specified by: isFocusTraversable in interface AccessibleComponent Returns: true if object can accept focus; otherwise false See Also: AccessibleContext.getAccessibleStateSet(), AccessibleState.FOCUSABLE, AccessibleState.FOCUSED, AccessibleStateSet",1,0,0,0,0,0,0,0,0,0,0,1
"Adds the specified selected item in the object to the object's selection. If the object supports multiple selections, the specified item is added to any existing selection, otherwise it replaces any existing selection in the object. If the specified item is already selected, this method has no effect.  Specified by: addAccessibleSelection in interface AccessibleSelection Parameters: i - the zero-based index of selectable items See Also: AccessibleContext.getAccessibleChild(int)",1,0,0,0,0,0,1,0,0,0,0,0
"A subclass of TransferHandler.DropLocation representing a drop location for  a JTree.  Since:     1.6 See Also:     JTree.getDropLocation()",0,0,0,0,0,0,1,0,0,0,0,0
" Is this tree a large model? This is a code-optimization setting. A large model can be used when the cell height is the same for all nodes. The UI will then cache very little information and instead continually message the model. Without a large model the UI caches most of the information, resulting in fewer method calls to the model.  This value is only a suggestion to the UI. Not all UIs will take advantage of it. Default value is false. ",1,0,0,1,0,0,0,1,0,0,0,1
" Bound property name for cellEditor.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
"Determines whether or not the root node from the TreeModel is visible.  Parameters: rootVisible - true if the root node of the tree is to be displayed See Also: rootVisible",1,0,0,0,0,0,0,0,0,0,0,0
"Adds the paths at each of the specified rows to the current selection.  Parameters: rows - an array of ints specifying the rows to add, where 0 indicates the first row in the display",1,0,0,0,0,0,0,0,0,0,0,0
"This class implements accessibility support for the JViewport class. It  provides an implementation of the Java Accessibility API appropriate to  viewport user-interface elements.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,0,0,0,1,0,0
"The viewport or porthole through which you see the underlying  information. When you scroll, what moves is the viewport. It is like  peering through a camera's viewfinder. Moving the viewfinder upwards brings  new things into view at the top of the picture and loses things that were  at the bottom.  By default, JViewport is opaque. To change this, use the setOpaque method.  NOTE:We have implemented a faster scrolling algorithm that does not require  a buffer to draw in. The algorithm works as follows:     1. The view and parent view and checked to see if they are JComponents,       if they aren't, stop and repaint the whole viewport.    2. If the viewport is obscured by an ancestor, stop and repaint the       whole viewport.    3. Compute the region that will become visible, if it is as big as the       viewport, stop and repaint the whole view region.    4. Obtain the ancestor Window's graphics and do a copyArea on the       scrolled region.    5. Message the view to repaint the newly visible region.    6. The next time paint is invoked on the viewport, if the clip region is       smaller than the viewport size a timer is kicked off to repaint the       whole region. In general this approach is much faster. Compared to the backing store  approach this avoids the overhead of maintaining an offscreen buffer and  having to do two copyAreas. Compared to the non backing store case this  approach will greatly reduce the painted region.  This approach can cause slower times than the backing store approach when  the viewport is obscured by another window, or partially offscreen. When  another window obscures the viewport the copyArea will copy garbage and a  paint event will be generated by the system to inform us we need to paint  the newly exposed region. The only way to handle this is to repaint the  whole viewport, which can cause slower performance than the backing store  case. In most applications very rarely will the user be scrolling while the  viewport is obscured by another window or offscreen, so this optimization  is usually worth the performance hit when obscured.  Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     JScrollPane",1,1,0,0,1,1,1,1,0,1,1,0
" The scrollUnderway flag is used for components like JList. When the downarrow key is pressed on a JList and the selected cell is the last in the list, the scrollpane autoscrolls. Here, the old selected cell needs repainting and so we need a flag to make the viewport do the optimized painting only when there is an explicit call to setViewPosition(Point). When setBounds is called through other routes, the flag is off and the view repaints normally. Another approach would be to remove this from the JViewport class and have the JList manage this case by using setBackingStoreEnabled. The default is false. ",1,0,0,1,0,0,1,0,0,0,0,0
"Returns the insets (border) dimensions as (0,0,0,0), since borders are not supported on a JViewport.  Overrides: getInsets in class JComponent Returns: a Rectange of zero dimension and zero origin See Also: setBorder(javax.swing.border.Border)",1,0,0,0,0,0,0,0,0,0,0,0
"Removes a ChangeListener from the list that's notified each time the views size, position, or the viewports extent size has changed.  Parameters: l - the ChangeListener to remove See Also: addChangeListener(javax.swing.event.ChangeListener)",0,0,0,0,0,0,0,0,0,0,0,1
"A JWindow is a container that can be displayed anywhere on the user's  desktop. It does not have the title bar, window-management buttons, or  other trimmings associated with a JFrame, but it is still a first-class  citizen of the user's desktop, and can exist anywhere on it.  The JWindow component contains a JRootPane as its only child. The  contentPane should be the parent of any children of the JWindow. As a  conveniance add and its variants, remove and setLayout have been overridden  to forward to the contentPane as necessary. This means you can write:   window.add(child);   And the child will be added to the contentPane. The contentPane will always  be non-null. Attempting to set it to null will cause the JWindow to throw  an exception. The default contentPane will have a BorderLayout manager set  on it. Refer to RootPaneContainer for details on adding, removing and  setting the LayoutManager of a JWindow.  Please see the JRootPane documentation for a complete description of the  contentPane, glassPane, and layeredPane components.  In a multi-screen environment, you can create a JWindow on a different  screen device. See Window for more information.  Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     JRootPane",1,0,0,0,1,0,1,0,1,0,0,0
"Creates a window with no specified owner. This window will not be focusable.  This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale.  Throws: HeadlessException - if GraphicsEnvironment.isHeadless() returns true. See Also: GraphicsEnvironment.isHeadless(), Window.isFocusableWindow(), JComponent.getDefaultLocale()",1,0,0,0,0,0,0,0,0,0,0,0
"Repaints the specified rectangle of this component within time milliseconds. Refer to RepaintManager for details on how the repaint is handled.  Overrides: repaint in class Component Parameters: time - maximum time in milliseconds before update x - the x coordinate y - the y coordinate width - the width height - the height Since: 1.6 See Also: RepaintManager",1,0,0,0,0,0,1,0,0,0,0,1
"A SortingFocusTraversalPolicy which sorts Components based on their size,  position, and orientation. Based on their size and position, Components are  roughly categorized into rows and columns. For a Container with horizontal  orientation, columns run left-to-right or right-to-left, and rows run top-  to-bottom. For a Container with vertical orientation, columns run top-to-  bottom and rows run left-to-right or right-to-left. See  ComponentOrientation for more information. All columns in a row are fully  traversed before proceeding to the next row.  Since:     1.4 See Also:     ComponentOrientation",0,0,0,0,0,0,1,0,0,0,0,0
"Determines whether the specified Component is an acceptable choice as the new focus owner. This method performs the following sequence of operations: 1. Checks whether aComponent is visible, displayable, enabled, and focusable. If any of these properties is false, this method returns false. 2. If aComponent is an instance of JTable, returns true. 3. If aComponent is an instance of JComboBox, then returns the value of aComponent.getUI().isFocusTraversable(aComponent). 4. If aComponent is a JComponent with a JComponent.WHEN_FOCUSED InputMap that is neither null nor empty, returns true. 5. Returns the value of DefaultFocusTraversalPolicy.accept(aComponent).  Overrides: accept in class SortingFocusTraversalPolicy Parameters: aComponent - the Component whose fitness as a focus owner is to be tested Returns: true if aComponent is a valid choice for a focus owner; otherwise false See Also: Component.isVisible(), Component.isDisplayable(), Component.isEnabled(), Component.isFocusable(), ComboBoxUI.isFocusTraversable(javax.swing.JComboBox), JComponent.getInputMap(int), DefaultFocusTraversalPolicy.accept(java.awt.Component)",1,0,0,0,0,0,1,0,0,0,0,1
"This interface represents the current state of the selection for any of the  components that display a list of values with stable indices. The selection  is modeled as a set of intervals, each interval represents a contiguous  range of selected list elements. The methods for modifying the set of  selected intervals all take a pair of indices, index0 and index1, that  represent a closed interval, i.e. the interval includes both index0 and  index1.  See Also:     DefaultListSelectionModel",1,1,0,0,0,0,0,0,0,0,0,0
"A layout manager to arrange components over the top of each other. The  requested size of the container will be the largest requested size of the  children, taking alignment needs into consideration. The alignment is based  upon what is needed to properly fit the children in the allocation area.  The children will be placed such that their alignment points are all on top  of each other.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,1,0,0,0,0,0,1,0,0
"Returns the minimum dimensions needed to lay out the components contained in the specified target container. Recomputes the layout if it has been invalidated, and factors in the current inset setting.  Specified by: minimumLayoutSize in interface LayoutManager Parameters: target - the component which needs to be laid out Returns: a Dimension object containing the minimum dimensions See Also: preferredLayoutSize(java.awt.Container)",1,0,0,0,0,0,0,0,0,0,0,0
"Popups are used to display a Component to the user, typically on top of all  the other Components in a particular containment hierarchy. Popups have a  very small life cycle. Once you have obtained a Popup, and hidden it  (invoked the hide method), you should no longer invoke any methods on it.  This allows the PopupFactory to cache Popups for later use.  The general contract is that if you need to change the size of the  Component, or location of the Popup, you should obtain a new Popup.  Popup does not descend from Component, rather implementations of Popup are  responsible for creating and maintaining their own Components to render the  requested Component to the user.  You typically do not explicitly create an instance of Popup, instead obtain  one from a PopupFactory.  Since:     1.4 See Also:     PopupFactory",1,1,0,0,0,0,1,1,0,0,0,0
"Makes the Popup visible. If the Popup is currently visible, this has no effect.",0,0,0,0,0,0,0,0,0,0,0,0
"AccessibleProgressMonitor implements accessibility support for the  ProgressMonitor class.  Since:     1.5",0,0,0,0,0,0,0,0,0,0,0,1
"Indicate the progress of the operation being monitored. If the specified value is >= the maximum, the progress monitor is closed.  Parameters: nv - an int specifying the current value, between the maximum and minimum specified for this component See Also: setMinimum(int), setMaximum(int), close()",1,0,0,0,0,0,1,0,0,0,0,0
"Returns the minimum value -- the lower end of the progress value.  Returns: an int representing the minimum value See Also: setMinimum(int)",1,0,0,0,0,0,0,0,0,0,0,1
"Constructs an object to monitor the progress of an input stream.  Parameters: message - Descriptive text to be placed in the dialog box if one is popped up. parentComponent - The component triggering the operation being monitored. in - The input stream to be monitored.",1,0,0,0,0,0,0,0,0,0,0,0
"Remove a component from the list of invalid components.  See Also: addInvalidComponent(javax.swing.JComponent)",1,0,0,0,0,0,0,0,0,0,0,1
"Mark a component completely clean. aComponent will not get painted during the next paintDirtyRegions() call.",1,0,0,1,0,0,0,0,0,0,0,1
"Returns the glassPane.  Returns: the value of the glassPane property. See Also: setGlassPane(java.awt.Component)",0,0,0,0,0,0,0,0,0,0,0,1
"An Entry object is passed to instances of RowFilter, allowing the filter to  get the value of the entry's data, and thus to determine whether the entry  should be shown. An Entry object contains information about the model as  well as methods for getting the underlying values from the model.  Since:     1.6 See Also:     RowFilter, DefaultRowSorter.setRowFilter(javax.swing.RowFilter)",1,1,0,0,0,0,1,0,0,0,0,0
"RowFilter is used to filter out entries from the model so that they are not  shown in the view. For example, a RowFilter associated with a JTable might  only allow rows that contain a column with a specific string. The meaning  of entry depends on the component type. For example, when a filter is  associated with a JTable, an entry corresponds to a row; when associated  with a JTree, an entry corresponds to a node.  Subclasses must override the include method to indicate whether the entry  should be shown in the view. The Entry argument can be used to obtain the  values in each of the columns in that entry. The following example shows an  include method that allows only entries containing one or more values  starting with the string a:   RowFilter<Object,Object> startsWithAFilter = new RowFilter<Object,Object>() { public boolean include(Entry<? extends Object, ? extends Object> entry) { for (int i = entry.getValueCount() - 1; i >= 0; i--) { if (entry.getStringValue(i).startsWith(a)) { // The value starts with a, include it return true; } } // None of the columns start with a; return false so that this // entry is not shown return false; } };   RowFilter has two formal type parameters that allow you to create a  RowFilter for a specific model. For example, the following assumes a  specific model that is wrapping objects of type Person. Only Persons with  an age over 20 will be shown:   RowFilter<PersonModel,Integer> ageFilter = new RowFilter<PersonModel,Integer>() { public boolean include(Entry<? extends PersonModel, ? extends Integer> entry) { PersonModel personModel = entry.getModel(); Person person = personModel.getPerson(entry.getIdentifier()); if (person.getAge() > 20) { // Returning true indicates this row should be shown. return true; } // Age is <= 20, don't show it. return false; } }; PersonModel model = createPersonModel(); TableRowSorter<PersonModel> sorter = new TableRowSorter<PersonModel>(model); sorter.setRowFilter(ageFilter);   Since:     1.6 See Also:     TableRowSorter",1,1,1,1,0,0,0,1,1,0,0,0
"Returns a RowFilter that uses a regular expression to determine which entries to include. Only entries with at least one matching value are included. For example, the following creates a RowFilter that includes entries with at least one value starting with a:  RowFilter.regexFilter(^a);  The returned filter uses Matcher.find() to test for inclusion. To test for exact matches use the characters '^' and '$' to match the beginning and end of the string respectively. For example, ^foo$ includes only rows whose string is exactly foo and not, for example, food. See Pattern for a complete description of the supported regular-expression constructs.  Parameters: regex - the regular expression to filter on indices - the indices of the values to check. If not supplied all values are evaluated Returns: a RowFilter implementing the specified criteria Throws: NullPointerException - if regex is null IllegalArgumentException - if any of the indices are < 0 PatternSyntaxException - if regex is not a valid regular expression. See Also: Pattern",1,0,0,0,0,0,1,0,1,0,0,0
"Constants used with the JScrollPane component.",0,0,0,0,0,0,0,0,0,0,0,1
" The minimum size required. For a component comp, this should be equal to either comp.getMinimumSize().width or comp.getMinimumSize().height. ",0,0,1,0,0,0,0,0,0,0,0,0
"Constructs a SpinnerDateModel whose initial value is the current date, calendarField is equal to Calendar.DAY_OF_MONTH, and for which there are no start/end limits.",1,0,0,0,0,0,0,0,0,0,0,0
"The current element of the sequence. This element is usually displayed by the editor part of a JSpinner.  Returns: the current spinner value. See Also: setValue(java.lang.Object)",1,0,0,0,0,0,0,0,0,0,0,1
"A Constraints object holds the constraints that govern the way a  component's size and position change in a container controlled by a  SpringLayout. A Constraints object is like a Rectangle, in that it has x,  y, width, and height properties. In the Constraints object, however, these  properties have Spring values instead of integers. In addition, a  Constraints object can be manipulated as four edges -- north, south, east,  and west -- using the constraint property.  The following formulas are always true for a Constraints object (here WEST  and x are synonyms, as are and NORTH and y):   EAST = WEST + WIDTH SOUTH = NORTH + HEIGHT HORIZONTAL_CENTER = WEST + WIDTH/2 VERTICAL_CENTER = NORTH + HEIGHT/2 ABSOLUTE_BASELINE = NORTH + RELATIVE_BASELINE*   For example, if you have specified the WIDTH and WEST (X) location the EAST  is calculated as WEST + WIDTH. If you instead specified the WIDTH and EAST  locations the WEST (X) location is then calculated as EAST - WIDTH.  [RELATIVE_BASELINE is a private constraint that is set automatically when  the SpringLayout.Constraints(Component) constuctor is called or when a  constraints object is registered with a SpringLayout object.]  Note: In this document, operators represent methods in the Spring class.  For example, a + b is equal to Spring.sum(a, b), and a - b is equal to  Spring.sum(a, Spring.minus(b)). See the Spring API documentation for  further details of spring arithmetic.  Because a Constraints object's properties -- representing its edges, size,  and location -- can all be set independently and yet are interrelated, a  Constraints object can become over-constrained. For example, if the WEST,  WIDTH and EAST edges are all set, steps must be taken to ensure that the  first of the formulas above holds. To do this, the Constraints object  throws away the least recently set constraint so as to make the formulas  hold.  Since:     1.4",1,0,0,0,0,0,0,0,0,0,0,0
"An abstract class to perform lengthy GUI-interacting tasks in a dedicated  thread.  When writing a multi-threaded application using Swing, there are two  constraints to keep in mind: (refer to How to Use Threads for more  details):      * Time-consuming tasks should not be run on the Event Dispatch Thread.       Otherwise the application becomes unresponsive.     * Swing components should be accessed on the Event Dispatch Thread        only.  These constraints mean that a GUI application with time intensive computing  needs at least two threads: 1) a thread to perform the lengthy task and 2)  the Event Dispatch Thread (EDT) for all GUI-related activities. This  involves inter-thread communication which can be tricky to implement.  SwingWorker is designed for situations where you need to have a long  running task run in a background thread and provide updates to the UI  either when done, or while processing. Subclasses of SwingWorker must  implement the doInBackground() method to perform the background  computation.  Workflow  There are three threads involved in the life cycle of a SwingWorker :      * Current thread: The execute() method is called on this thread. It       schedules SwingWorker for the execution on a worker thread and       returns immediately. One can wait for the SwingWorker to complete       using the get methods.      * Worker thread: The doInBackground() method is called on this thread.       This is where all background activities should happen. To notify        PropertyChangeListeners about bound properties changes use the        firePropertyChange and getPropertyChangeSupport() methods. By default       there are two bound properties available: state and progress.      * Event Dispatch Thread: All Swing related activities occur on this       thread. SwingWorker invokes the process and done() methods and       notifies any PropertyChangeListeners on this thread.  Often, the Current thread is the Event Dispatch Thread.  Before the doInBackground method is invoked on a worker thread,  SwingWorker notifies any PropertyChangeListeners about the state property  change to StateValue.STARTED. After the doInBackground method is finished  the done method is executed. Then SwingWorker notifies any  PropertyChangeListeners about the state property change to StateValue.DONE .  SwingWorker is only designed to be executed once. Executing a SwingWorker  more than once will not result in invoking the doInBackground method twice.  Sample Usage  The following example illustrates the simplest use case. Some processing is  done in the background and when done you update a Swing component.  Say we want to find the Meaning of Life and display the result in a  JLabel.   final JLabel label; class MeaningOfLifeFinder extends SwingWorker<String, Object> { @Override public String doInBackground() { return findTheMeaningOfLife(); }  @Override protected void done() { try { label.setText(get()); } catch (Exception ignore) { } } }  (new MeaningOfLifeFinder()).execute();   The next example is useful in situations where you wish to process data as  it is ready on the Event Dispatch Thread.  Now we want to find the first N prime numbers and display the results in a  JTextArea. While this is computing, we want to update our progress in a  JProgressBar. Finally, we also want to print the prime numbers to  System.out.   class PrimeNumbersTask extends SwingWorker<List<Integer>, Integer> { PrimeNumbersTask(JTextArea textArea, int numbersToFind) { //initialize }  @Override public List<Integer> doInBackground() { while (! enough && ! isCancelled()) { number = nextPrimeNumber(); publish(number); setProgress(100 * numbers.size() / numbersToFind); } } return numbers; }  @Override protected void process(List<Integer> chunks) { for (int number : chunks) { textArea.append(number +  n); } } }  JTextArea textArea = new JTextArea(); final JProgressBar progressBar = new JProgressBar(0, 100); PrimeNumbersTask task = new PrimeNumbersTask(textArea, N); task.addPropertyChangeListener( new PropertyChangeListener() { public  void propertyChange(PropertyChangeEvent evt) { if (progress.equals(evt.getPropertyName())) { progressBar.setValue((Integer)evt.getNewValue()); } } });  task.execute(); System.out.println(task.get()); //prints all prime numbers we have got   Because SwingWorker implements Runnable, a SwingWorker can be submitted to  an Executor for execution.  Since:     1.6",0,0,1,1,1,1,1,1,1,0,1,0
"Returns the Timer's initial delay.  See Also: setInitialDelay(int), setDelay(int)",0,0,0,0,0,0,0,0,0,0,0,1
"Returns a shared ToolTipManager instance.  Returns: a shared ToolTipManager object",0,0,0,0,0,0,0,0,0,0,0,1
"Removes a component from tooltip control.  Parameters: component - a JComponent object to remove",1,0,0,0,0,0,0,0,0,0,0,0
"Represents a location where dropped data should be inserted. This is a base  class that only encapsulates a point. Components supporting drop may  provide subclasses of this containing more information.  Developers typically shouldn't create instances of, or extend, this class.  Instead, these are something provided by the DnD implementation by  TransferSupport instances and by components with a getDropLocation()  method.  Since:     1.6 See Also:     TransferHandler.TransferSupport.getDropLocation()",1,0,1,0,0,0,0,1,0,0,0,0
"Returns the Transferable associated with this transfer.  Note: Unless it is necessary to fetch the Transferable directly, use one of the other methods on this class to inquire about the transfer. This may perform better than fetching the Transferable and asking it directly.  Returns: the Transferable associated with this transfer",0,0,0,0,0,0,0,0,0,0,0,1
"Invoked after data has been exported. This method should remove the data that was transferred if the action was MOVE.  This method is implemented to do nothing since MOVE is not a supported action of this implementation (getSourceActions does not include MOVE ).  Parameters: source - the component that was the source of the data data - The data that was transferred or possibly null if the action is NONE. action - the actual action that was performed",1,0,1,0,0,1,1,0,0,0,0,0
"This class enables one to store an entry in the defaults table that's  constructed each time it's looked up with one of the getXXX(key) methods.  Here's an example of an ActiveValue that constructs a  DefaultListCellRenderer:   Object cellRendererActiveValue = new UIDefaults.ActiveValue() { public Object createValue(UIDefaults table) { return new DefaultListCellRenderer(); } };  uiDefaultsTable.put(MyRenderer, cellRendererActiveValue);   See Also:     UIDefaults.get(java.lang.Object)",1,0,0,0,0,0,0,0,1,0,0,0
"LazyInputMap will create a InputMap in its createValue method. The bindings  are passed in in the constructor. The bindings are an array with the even  number entries being string KeyStrokes (eg alt SPACE) and the odd number  entries being the value to use in the InputMap (and the key in the  ActionMap).  Since:     1.3",1,0,0,0,0,0,1,0,0,0,0,0
"If the value of key is a Dimension return it, otherwise return null.  Parameters: key - the desired key Returns: if the value for key is a Dimension, return the Dimension object; otherwise return null",1,0,0,0,0,0,0,0,0,0,0,1
"Creates an ComponentUI implementation for the specified component. In other words create the look and feel specific delegate object for target. This is done in two steps: * Look up the name of the ComponentUI implementation class under the value returned by target.getUIClassID(). * Use the implementation classes static createUI() method to construct a look and feel delegate.  Parameters: target - the JComponent which needs a UI Returns: the ComponentUI object",1,0,0,0,0,0,0,1,0,0,0,0
"The default layout manager for JViewport. ViewportLayout defines a policy  for layout that should be useful for most applications. The viewport makes  its view the same size as the viewport, however it will not make the view  smaller than its minimum size. As the viewport grows the view is kept  bottom justified until the entire view is visible, subsequently the view is  kept top justified.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,1,0,0,0,0,0
"Constants used to control the window-closing operation. The  setDefaultCloseOperation and getDefaultCloseOperation methods provided by  JFrame, JInternalFrame, and JDialog use these constants. For examples of  setting the default window-closing operation, see Responding to  Window-Closing Events, a section in The Java Tutorial.  See Also:     JFrame.setDefaultCloseOperation(int),      JDialog.setDefaultCloseOperation(int),      JInternalFrame.setDefaultCloseOperation(int)",0,0,0,0,0,0,1,0,0,0,0,0
" The do-nothing default window close operation.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"This default implementation returns a new Insets instance where the top, left, bottom, and right fields are set to 0.  Specified by: getBorderInsets in interface Border Parameters: c - the component for which this border insets value applies Returns: the new Insets object initialized to 0",1,0,0,0,0,0,0,0,0,0,0,0
"A class which implements a simple two-line bevel border.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,0,0,0,0,0,1
"A class which provides an empty, transparent border which takes up space  but does no drawing.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,1,0,0,1,0,0
"Creates a bevel border with the specified type and whose colors will be derived from the background color of the component passed into the paintBorder method.  Parameters: bevelType - the type of bevel for the border",1,0,0,0,0,0,0,0,0,0,0,0
" Position the title below the border's top line.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"This is the abstract superclass for color choosers. If you want to add a  new color chooser panel into a JColorChooser, subclass this class.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,1,1,0,1,0,0
"Runs each ChangeListener's stateChanged method.  See Also: EventListenerList",1,0,0,0,0,0,0,0,0,0,0,0
"CellEditorListener defines the interface for an object that listens to  changes in a CellEditor",0,0,0,0,0,0,0,0,0,0,0,0
"Enumeration for document event types",0,0,0,0,0,0,0,0,0,0,0,1
"Defines the ENTERED, EXITED, and ACTIVATED event types, along with their  string representations, returned by toString().",1,0,0,0,0,0,1,0,0,0,0,0
"An abstract adapter class for receiving internal frame events. The methods  in this class are empty. This class exists as convenience for creating  listener objects, and is functionally equivalent to the WindowAdapter class  in the AWT.  See How to Write an Internal Frame Listener in The Java Tutorial and The  Java Class Libraries (update)  See Also:     InternalFrameEvent, InternalFrameListener, WindowListener",1,0,0,1,0,0,0,0,0,0,1,0
"Invoked when an internal frame is in the process of being closed. The close operation can be overridden at this point.  See Also: JInternalFrame.setDefaultCloseOperation(int)",0,0,0,0,0,0,0,0,0,0,0,0
"ListDataListener",0,0,0,0,0,0,0,0,0,0,0,1
"An event that characterizes a change in selection. The change is limited to  a a single inclusive interval. The selection of at least one index within  the range will have changed. A decent ListSelectionModel implementation  will keep the range as small as possible. ListSelectionListeners will  generally query the source of the event for the new selected status of each  potentially changed row.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     ListSelectionModel",1,0,0,0,0,0,0,0,0,1,0,0
"Defines a menu mouse-drag listener.",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the path to the menu item referenced by this event.  Returns: an array of MenuElement objects representing the path value",0,0,0,0,0,0,0,0,0,0,0,0
"A listener implementing all the methods in both the MouseListener and  MouseMotionListener interfaces.  See Also:     MouseInputAdapter",1,0,0,0,0,0,1,0,0,0,0,0
"PopupMenuEvent only contains the source of the event which is the JPoupMenu  sending the event  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,0,0,0,1,0,0,0,0,0
"Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null",1,0,1,0,0,0,0,0,0,0,0,0
" The index of the column from where it was moved or removed ",1,0,0,0,0,0,0,0,0,0,0,0
"An event used to identify a single path in a tree. The source returned by  getSource will be an instance of JTree.  For further documentation and examples see the following sections in The  Java Tutorial: How to Write a Tree Expansion Listener and How to Write a  Tree-Will-Expand Listener.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,1,0,0,1,1,0
"Invoked after nodes have been removed from the tree. Note that if a subtree is removed from the tree, this method may only be invoked once for the root of the removed subtree, not once for each individual set of siblings removed.  Use e.getPath() to get the former parent of the deleted node(s). e.getChildIndices() returns, in ascending order, the index(es) the node(s) had before being deleted.",0,0,1,0,0,1,0,1,0,0,0,0
"Invoked whenever a node in the tree is about to be expanded.  Throws: ExpandVetoException",0,0,0,0,0,0,0,0,0,0,0,0
"FileSystemView is JFileChooser's gateway to the file system. Since the  JDK1.1 File API doesn't allow access to such information as root  partitions, file type information, or hidden file bits, this class is  designed to intuit as much OS-specific file system information as possible.  Java Licensees may want to provide a different implementation of  FileSystemView to better handle a given operating system.",1,0,0,0,0,0,1,0,0,1,0,0
"On Windows, a file can appear in multiple folders, other than its parent directory in the filesystem. Folder could for example be the Desktop folder which is not the same as file.getParentFile().  Parameters: folder - a File object repesenting a directory or special folder file - a File object Returns: true if folder is a directory or special folder and contains file. Since: 1.4",0,0,0,0,0,0,0,0,0,0,0,0
"Pluggable look and feel interface for JDesktopIcon.",1,0,0,0,0,0,0,0,0,0,0,0
"Pluggable look and feel interface for JDesktopPane.",1,0,0,0,0,0,0,0,0,0,0,0
"A subclass of java.awt.Font that implements UIResource. UI classes which  set default font properties should use this class.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     UIResource",1,0,0,0,0,0,1,0,0,1,0,0
"Pluggable look and feel interface for JInternalFrame.",0,0,0,0,0,0,0,0,0,0,0,0
"Pluggable look and feel interface for JLabel.",1,0,0,0,0,0,0,0,0,0,0,0
"Converts the given place in the view coordinate system to the nearest representative location in the model.  Parameters: pt - the location in the view to translate. This should be in the same coordinate system as the mouse events. Returns: the offset from the start of the document >= 0",0,1,1,0,0,0,0,0,0,0,0,0
"Pluggable look and feel interface for JToolBar.",0,0,0,0,0,0,0,0,0,0,0,0
"This interface is used to mark objects created by ComponentUI delegates.  The ComponentUI.installUI() and ComponentUI.uninstallUI() methods can use  this interface to decide if a properties value has been overridden. For  example, the JList cellRenderer property is initialized by  BasicListUI.installUI(), only if it's initial value is null:   if (list.getCellRenderer() == null) { list.setCellRenderer((ListCellRenderer)(UIManager.get(List.cellRenderer))); }   At uninstallUI() time we reset the property to null if its value is an  instance of UIResource:   if (list.getCellRenderer() instanceof UIResource) { list.setCellRenderer(null); }   This pattern applies to all properties except the java.awt.Component  properties font, foreground, and background. If one of these properties  isn't initialized, or is explicitly set to null, its container provides the  value. For this reason the == null is unreliable when installUI() is  called to dynamically change a components look and feel. So at installUI()  time we check to see if the current value is a UIResource:   if (!(list.getFont() instanceof UIResource)) { list.setFont(UIManager.getFont(List.font)); }   See Also:     ComponentUI  Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,1,0,0,1,1,1,0,0,0
"Pluggable look and feel interface for JViewport.",0,0,0,0,0,0,0,0,0,0,0,1
"BasicCheckboxMenuItem implementation",0,0,0,0,0,0,0,0,0,0,0,1
"This layout manager handles the 'standard' layout of combo boxes. It puts  the arrow button to the right and the editor to the left. If there is no  editor it still keeps the arrow button to the right. This public inner  class should be treated as protected. Instantiate it only within subclasses  of BasicComboBoxUI.",1,0,1,0,0,0,1,0,0,0,0,0
"Basic UI implementation for JComboBox.  The combo box is a compound component which means that it is an agregate of  many simpler components. This class creates and manages the listeners on  the combo box and the combo box model. These listeners update the user  interface in response to changes in the properties and state of the combo  box.  All event handling is handled by listener classes created with the  createxxxListener() methods and internal classes. You can change the  behavior of this class by overriding the createxxxListener() methods and  supplying your own event listeners or subclassing from the ones supplied in  this class.  For adding specific actions, overide installKeyboardActions to add actions  in response to KeyStroke bindings. See the article Keyboard Bindings in  Swing at The Swing Connection.",1,0,0,0,0,0,1,1,0,0,1,1
"This public method is implementation specific and should be private. do not call or override. To implement a specific editor create a custom ComboBoxEditor  See Also: createEditor(), JComboBox.setEditor(javax.swing.ComboBoxEditor), ComboBoxEditor",0,0,1,0,0,0,0,1,0,0,0,0
"Selects the previous item in the list. It won't change the selection if the currently selected item is already the first item.",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from class: KeyAdapter Invoked when a key has been released.  Specified by: keyReleased in interface KeyListener Overrides: keyReleased in class KeyAdapter",0,0,0,0,0,0,0,0,0,0,0,1
"This listener watches for dragging and updates the current selection in the  list if it is dragging over the list.",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: ListDataListener Sent after the indices in the index0,index1 interval have been removed from the data model. The interval includes both index0 and index1.  Specified by: intervalRemoved in interface ListDataListener Parameters: e - a ListDataEvent encapsulating the event information",0,0,0,0,0,0,0,0,0,0,0,0
"This listener hides the popup when the mouse is released in the list.",1,0,0,0,0,0,0,0,0,0,0,0
"This listener watches for bound properties that have changed in the combo  box.  Subclasses which wish to listen to combo box property changes should call  the superclass methods to ensure that the combo popup correctly handles  property changes.  See Also:     BasicComboPopup.createPropertyChangeListener()",1,0,0,0,0,0,0,1,0,0,0,0
" This protected field is implementation specific. Do not access directly or override. Use the create method instead  See Also: createListMouseMotionListener() ",0,0,1,0,0,0,0,0,0,0,0,0
" This protected field is implementation specific. Do not access directly or override. Use the create method instead  See Also: createListDataListener() ",0,0,1,0,0,0,0,0,0,0,0,0
" This protected field is implementation specific. Do not access directly or override. ",0,0,1,0,0,0,0,0,0,0,0,0
"Creates the scroll pane which houses the scrollable list.",1,0,0,0,0,0,1,0,0,0,0,0
"Gets the AccessibleContext associated with this BasicComboPopup. The AccessibleContext will have its parent set to the ComboBox.  Specified by: getAccessibleContext in interface Accessible Overrides: getAccessibleContext in class JPopupMenu Returns: an AccessibleContext for the BasicComboPopup Since: 1.5",1,0,0,0,0,0,1,0,0,0,0,1
"Handles minimizing an internal frame.",1,0,0,0,0,0,0,0,0,0,0,1
"Basic L&F for a desktop.",0,0,0,0,0,0,0,0,0,0,0,1
"Description copied from class: ComponentUI Returns the specified component's preferred size appropriate for the look and feel. If null is returned, the preferred size will be calculated by the component's layout manager instead (this is the preferred approach for any component with a specific layout manager installed). The default implementation of this method returns null.  Overrides: getPreferredSize in class ComponentUI Parameters: c - the component whose preferred size is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components See Also: JComponent.getPreferredSize(), LayoutManager.preferredLayoutSize(java.awt.Container)",1,0,0,0,0,0,0,0,0,0,0,0
"Creates a new folder.",1,0,0,0,0,0,0,0,0,0,0,0
"Rescans the files in the current directory",1,0,0,0,0,0,0,0,0,0,0,0
"This class should be treated as a protected inner class. Instantiate it  only within subclasses of .",0,0,1,0,0,0,0,0,0,0,0,0
"Description copied from class: JComponent Returns true if this component is completely opaque.  An opaque component paints every pixel within its rectangular bounds. A non-opaque component paints only a subset of its pixels or none at all, allowing the pixels underneath it to show through. Therefore, a component that does not fully paint its pixels provides a degree of transparency.  Subclasses that guarantee to always completely paint their contents should override this method and return true.  Overrides: isOpaque in class JComponent Returns: true if this component is completely opaque See Also: JComponent.setOpaque(boolean)",1,1,1,0,0,0,0,0,0,0,0,1
"Description copied from interface: InternalFrameListener Invoked when an internal frame is iconified.  Specified by: internalFrameIconified in interface InternalFrameListener See Also: JInternalFrame.setIcon(boolean)",0,0,0,1,0,1,0,0,0,0,0,0
"Listens for border adjustments.",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from class: MouseAdapter Invoked when the mouse exits a component.  Specified by: mouseExited in interface MouseListener Overrides: mouseExited in class MouseAdapter",0,0,0,0,0,0,0,0,0,0,0,0
"A basic L&F implementation of JInternalFrame.",0,0,0,0,0,0,0,0,0,0,0,1
"A Windows L&F implementation of LabelUI. This implementation is completely  static, i.e. there's only one UIView implementation that's shared by all  JLabel objects.",0,0,0,0,0,0,1,0,0,0,0,1
"The ListSelectionListener that's added to the JLists selection model at  installUI time, and whenever the JList.selectionModel property changes.  When the selection changes we repaint the affected rows.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     BasicListUI.createListSelectionListener(),      BasicListUI.getCellBounds(javax.swing.JList, int, int),      BasicListUI.installUI(javax.swing.JComponent)",1,0,0,0,0,1,0,0,0,0,0,0
"An extensible implementation of ListUI.  BasicListUI instances cannot be shared between multiple lists.",0,1,1,0,0,0,0,0,0,0,0,0
"Creates a delegate that implements MouseInputListener. The delegate is added to the corresponding java.awt.Component listener lists at installUI() time. Subclasses can override this method to return a custom MouseInputListener, e.g.  class MyListUI extends BasicListUI { protected MouseInputListener createMouseInputListener() { return new MyMouseInputHandler(); } public class MyMouseInputHandler extends MouseInputHandler { public void mouseMoved(MouseEvent e) { // do some extra work when the mouse moves super.mouseMoved(e); } } }  See Also: BasicListUI.MouseInputHandler, installUI(javax.swing.JComponent)",1,0,0,0,0,0,0,0,1,0,0,0
"Description copied from class: ComponentUI Reverses configuration which was done on the specified component during installUI. This method is invoked when this UIComponent instance is being removed as the UI delegate for the specified component. This method should undo the configuration performed in installUI, being careful to leave the JComponent instance in a clean state (no extraneous listeners, look-and-feel-specific property objects, etc.). This should include the following: 1. Remove any UI-set borders from the component. 2. Remove any UI-set layout managers on the component. 3. Remove any UI-added sub-components from the component. 4. Remove any UI-added event/property listeners from the component. 5. Remove any UI-installed keyboard UI from the component. 6. Nullify any allocated instance data objects to allow for GC.  Overrides: uninstallUI in class ComponentUI Parameters: c - the component from which this UI delegate is being removed; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components See Also: ComponentUI.installUI(javax.swing.JComponent), JComponent.updateUI()",1,0,1,0,0,1,0,1,0,0,0,0
"As of Java 2 platform 1.4, this previously undocumented class is now  obsolete. KeyBindings are now managed by the popup menu.",0,0,0,0,0,0,0,0,0,0,0,0
"This inner class is marked public due to a compiler bug. This class  should be treated as a protected inner class. Instantiate it only within  subclasses of BasicOptionPaneUI.",0,0,1,0,0,0,0,0,0,1,0,0
" JComponent provide for input if optionPane.getWantsInput() returns true. ",1,0,0,0,0,0,1,0,0,0,0,0
"Creates a UI for a JPasswordField.  Parameters: c - the JPasswordField Returns: the UI",0,0,0,0,0,0,0,0,0,0,0,1
"A Basic L&F implementation of ProgressBarUI.",0,0,0,0,0,0,0,0,0,0,0,0
"Gets the index of the current animation frame.  Since: 1.4",1,0,0,0,0,0,0,0,0,0,0,0
"BasicRadioButtonMenuItem implementation",0,0,0,0,0,0,0,0,0,0,0,1
"Overrides: installDefaults in class BasicButtonUI",0,0,0,0,0,0,0,0,0,0,0,1
"A listener to listen for model changes.",0,0,0,0,0,0,0,0,0,0,0,0
"Track mouse drags.",0,0,0,0,0,0,0,0,0,0,0,0
"Returns true if the mouse is currently over the thumb.  Returns: true if the thumb is currently active Since: 1.5",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: ActionListener Invoked when an action occurs.",0,0,0,0,0,1,0,0,0,0,0,0
"Data model listener. This class should be treated as a protected inner  class. Instantiate it only within subclasses of .",1,0,1,0,0,0,0,0,0,0,0,0
"Focus-change listener.  This class should be treated as a protected inner class. Instantiate it  only within subclasses of .",0,0,1,0,0,0,0,0,0,0,0,1
"Description copied from class: ComponentUI Returns the specified component's maximum size appropriate for the look and feel. If null is returned, the maximum size will be calculated by the component's layout manager instead (this is the preferred approach for any component with a specific layout manager installed). The default implementation of this method invokes getPreferredSize and returns that value.  Overrides: getMaximumSize in class ComponentUI Parameters: c - the component whose maximum size is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components Returns: a Dimension object or null See Also: JComponent.getMaximumSize(), LayoutManager2.maximumLayoutSize(java.awt.Container)",1,0,0,0,0,0,1,1,0,0,0,0
"Create a PropertyChangeListener that can be added to the JSpinner itself. Typically, this listener will call replaceEditor when the editor property changes, since it's the SpinnerUI's responsibility to add the editor to the JSpinner (and remove the old one). This method is called by installListeners.  Returns: A PropertyChangeListener for the JSpinner itself See Also: installListeners()",1,1,0,1,0,0,0,0,0,0,0,1
"Messages dragDividerTo with the new location for the mouse event.",1,0,0,0,0,0,0,0,0,0,0,0
"Handles the events during a dragging session for a VERTICAL_SPLIT oriented  split pane. This continually messages dragDividerTo and then when done  messages finishDraggingTo. When an instance is created it should be  messaged with isValid to insure that dragging can happen (dragging won't be  allowed if the two views can not be resized).",1,0,0,0,0,1,1,1,0,0,0,0
" Size of the divider. ",0,0,0,0,0,0,0,0,0,0,0,1
" JSplitPane the receiver is contained in. ",1,0,0,0,0,0,0,0,0,0,0,0
"Message to prepare for dragging. This messages the BasicSplitPaneUI with startDragging.",1,0,0,0,0,0,0,0,0,0,0,0
" Marks the receiver so that the next time this instance is laid out it'll ask for the preferred sizes. ",1,0,0,0,0,0,0,0,0,0,0,0
"Implementation of an ActionListener that the JSplitPane UI uses for  handling specific key presses.  This class should be treated as a protected inner class. Instantiate it  only within subclasses of BasicSplitPaneUI.",1,0,1,0,0,0,1,0,0,0,0,0
"Implementation of an ActionListener that the JSplitPane UI uses for  handling specific key presses.  This class should be treated as a protected inner class. Instantiate it  only within subclasses of BasicSplitPaneUI.",1,0,1,0,0,0,0,0,0,0,0,0
"A Basic L&F implementation of the SplitPaneUI.",0,0,0,0,0,0,0,0,0,0,0,1
" Deprecated. As of Java 2 platform v1.3. As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details. ",0,0,0,0,0,0,0,0,0,1,0,0
"Sets the divider to use when the splitPane is configured to not continuously layout. This divider will only be used during a dragging session. It is recommended that the passed in component be a heavy weight.",1,0,0,0,0,0,0,0,0,0,0,0
"This class should be treated as a protected inner class. Instantiate it  only within subclasses of BasicTabbedPaneUI.",0,0,1,0,0,0,1,0,0,0,0,0
"A Basic L&F implementation of TabbedPaneUI.",0,0,0,0,0,0,0,0,0,0,0,0
" Deprecated. As of Java 2 platform v1.3. As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details. ",0,0,0,0,0,0,0,0,0,1,0,0
" Deprecated. As of Java 2 platform v1.3. As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details. ",0,0,0,0,0,0,0,0,0,1,0,0
"Description copied from interface: KeyListener Invoked when a key has been released. See the class description for KeyEvent for a definition of a key released event.  Specified by: keyReleased in interface KeyListener",0,0,0,0,0,0,0,0,0,0,0,0
"This method gets called when a bound property is changed on the associated JTextComponent. This is a hook which UI implementations may change to reflect how the UI displays bound properties of JTextComponent subclasses. If the font, foreground or document has changed, the the appropriate property is set in the default style of the document.  Overrides: propertyChange in class BasicEditorPaneUI Parameters: evt - the property change event",1,0,0,0,0,1,0,1,0,0,0,1
"Basis of a text components look-and-feel. This provides the basic editor  view and controller services that may be useful when creating a  look-and-feel for an extension of JTextComponent.  Most state is held in the associated JTextComponent as bound properties,  and the UI installs default values for the various properties. This default  will install something for all of the properties. Typically, a LAF  implementation will do more however. At a minimum, a LAF would generally  install key bindings.  This class also provides some concurrency support if the Document  associated with the JTextComponent is a subclass of AbstractDocument.  Access to the View (or View hierarchy) is serialized between any thread  mutating the model and the Swing event thread (which is expected to render,  do model/view coordinate translation, etc). Any access to the root view  should first acquire a read-lock on the AbstractDocument and release that  lock in a finally block.  An important method to define is the getPropertyPrefix() method which is  used as the basis of the keys used to fetch defaults from the UIManager.  The string should reflect the type of TextUI (eg. TextField, TextArea, etc)  without the particular LAF part of the name (eg Metal, Motif, etc).  To build a view of the model, one of the following strategies can be  employed.     1. One strategy is to simply redefine the ViewFactory interface in the       UI. By default, this UI itself acts as the factory for View       implementations. This is useful for simple factories. To do this       reimplement the create(javax.swing.text.Element) method.    2. A common strategy for creating more complex types of documents is to       have the EditorKit implementation return a factory. Since the       EditorKit ties all of the pieces necessary to maintain a type of       document, the factory is typically an important part of that and       should be produced by the EditorKit implementation.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,1,1,0,0,0,1,1,0,0,0,0
"A Basic L&F implementation of ToolBarUI. This implementation is a  combined view/controller.",0,0,0,0,0,0,0,0,0,0,0,0
" Deprecated. As of Java 2 platform v1.3. As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details. ",0,0,0,0,0,0,0,0,0,1,0,0
"Sets the flag for enabling rollover borders on the toolbar and it will also install the apropriate border depending on the state of the flag.  Parameters: rollover - if true, rollover borders are installed. Otherwise non-rollover borders are installed Since: 1.4 See Also: isRolloverBorders()",1,0,0,0,0,0,0,0,0,0,0,0
"Returns a rollover border for the button.  Parameters: b - the button to calculate the rollover border for Returns: the rollover border Since: 1.6 See Also: setBorderToRollover(java.awt.Component)",0,0,0,0,0,0,0,0,0,0,0,1
"Description copied from class: ComponentUI Reverses configuration which was done on the specified component during installUI. This method is invoked when this UIComponent instance is being removed as the UI delegate for the specified component. This method should undo the configuration performed in installUI, being careful to leave the JComponent instance in a clean state (no extraneous listeners, look-and-feel-specific property objects, etc.). This should include the following: 1. Remove any UI-set borders from the component. 2. Remove any UI-set layout managers on the component. 3. Remove any UI-added sub-components from the component. 4. Remove any UI-added event/property listeners from the component. 5. Remove any UI-installed keyboard UI from the component. 6. Nullify any allocated instance data objects to allow for GC.  Overrides: uninstallUI in class ComponentUI Parameters: c - the component from which this UI delegate is being removed; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components See Also: ComponentUI.installUI(javax.swing.JComponent), JComponent.updateUI()",1,0,0,0,0,1,0,0,0,0,0,0
"Listener responsible for getting cell editing events and updating the tree  accordingly.",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from class: KeyAdapter Invoked when a key has been pressed.  Specified by: keyPressed in interface KeyListener Overrides: keyPressed in class KeyAdapter",0,0,0,0,0,0,0,0,0,0,0,1
"PropertyChangeListener for the tree. Updates the appropriate varaible, or  TreeState, based on what changes.",1,0,0,0,0,0,1,0,0,0,0,0
"For the first selected row expandedness will be toggled.",0,0,0,0,0,0,0,0,0,0,0,0
"Resets the selection model. The appropriate listener are installed on the model.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the minimum preferred size.",0,0,0,0,0,0,0,0,0,0,0,1
"BasicViewport implementation",0,0,0,0,0,0,0,0,0,0,0,1
"A concrete implementation of MetalTheme providing the original look of the  Java Look and Feel, code-named Steel. Refer to  MetalLookAndFeel.setCurrentTheme(javax.swing.plaf.metal.MetalTheme) for  details on changing the default theme.  All colors returned by DefaultMetalTheme are completely opaque.   Font Style  DefaultMetalTheme uses bold fonts for many controls. To make all controls  (with the exception of the internal frame title bars and client decorated  frame title bars) use plain fonts you can do either of the following:     * Set the system property swing.boldMetal to false. For example, java       -Dswing.boldMetal=false MyApp.     * Set the defaults property swing.boldMetal to Boolean.FALSE. For       example: UIManager.put(swing.boldMetal, Boolean.FALSE); The defaults property swing.boldMetal, if set, takes precendence over the  system property of the same name. After setting this defaults property you  need to re-install MetalLookAndFeel, as well as update the UI of any  previously created widgets. Otherwise the results are undefined. The  following illustrates how to do this:   // turn off bold fonts UIManager.put(swing.boldMetal, Boolean.FALSE);  // re-install the Metal Look and Feel UIManager.setLookAndFeel(new MetalLookAndFeel());  // Update the ComponentUIs for all Components. This // needs to be invoked for all windows. SwingUtilities.updateComponentTreeUI(rootComponent);   Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     MetalLookAndFeel,      MetalLookAndFeel.setCurrentTheme(javax.swing.plaf.metal.MetalTheme)",1,0,0,0,0,0,1,1,1,0,0,0
"Returns the sub-text font. This returns Dialog, 10pt, plain.  Specified by: getSubTextFont in class MetalTheme Returns: the sub-text font",1,0,0,0,0,0,0,0,0,0,0,1
"Description copied from class: AbstractBorder This default implementation returns a new Insets instance where the top, left, bottom, and right fields are set to 0.  Specified by: getBorderInsets in interface Border Overrides: getBorderInsets in class AbstractBorder Parameters: c - the component for which this border insets value applies Returns: the new Insets object initialized to 0",0,0,0,0,0,0,0,0,0,0,0,1
"Border for a Palette.  Since:     1.3",0,0,0,0,0,0,0,0,0,0,0,1
"Factory object that can vend Borders appropriate for the metal L & F.",1,0,0,0,0,0,0,0,0,0,0,0
"If necessary paints the background of the component, then invokes paint.  Overrides: update in class ComponentUI Parameters: g - Graphics to paint to c - JComponent painting on Throws: NullPointerException - if g or c is null Since: 1.5 See Also: ComponentUI.update(java.awt.Graphics, javax.swing.JComponent), ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent)",1,0,0,0,0,0,1,0,0,0,0,0
"This inner class is marked public due to a compiler bug. This class  should be treated as a protected inner class. Instantiate it only within  subclasses of .",0,0,1,0,0,0,0,0,0,1,0,0
"Acts when DirectoryComboBox has changed the selected item.",1,0,0,0,0,0,0,0,0,0,0,0
"Data model for a type-face selection combo-box.",0,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: PropertyChangeListener This method gets called when a bound property is changed.  Specified by: propertyChange in interface PropertyChangeListener Parameters: e - A PropertyChangeEvent object describing the event source and the property that has changed.",1,0,0,0,0,0,0,0,0,0,0,0
"Metal L&F implementation of a FileChooser.",0,0,0,0,0,0,0,0,0,0,0,0
"Defines an icon for Palette close  Since:     1.3",0,0,0,0,0,0,0,0,0,0,0,1
"Overrides: getAdditionalHeight in class MetalIconFactory.FolderIcon16",0,0,0,0,0,0,0,0,0,0,0,0
"Overrides: uninstallComponents in class BasicInternalFrameUI",0,0,0,0,0,0,0,0,0,0,0,0
"Overrides: installListeners in class BasicScrollBarUI",0,0,0,0,0,0,0,0,0,0,0,1
"Description copied from class: BasicArrowButton Returns the minimum size of the BasicArrowButton.  Overrides: getMinimumSize in class BasicArrowButton Returns: the minimum size See Also: JComponent.setMinimumSize(java.awt.Dimension), ComponentUI",1,0,0,0,0,0,0,0,0,0,1,0
"The Metal subclass of BasicTabbedPaneUI.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,0,0,0,0,0,0,1,0,1
"Description copied from class: BasicTabbedPaneUI this function draws the border around each tab note that this function does now draw the background of the tab. that is done elsewhere  Overrides: paintTabBorder in class BasicTabbedPaneUI",1,0,0,0,0,0,0,0,0,0,0,1
"Basis of a look and feel for a JTextField.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,1,0,0,1,0,1
"Returns the white color. This returns opaque white (0xFFFFFFFF).  Returns: the white color",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the window title background color. This returns the value of getPrimary3().  Returns: the window title background color",1,0,0,0,0,0,0,0,0,0,0,1
"Overrides: paintButtonPressed in class BasicButtonUI",0,0,0,0,0,0,0,0,0,0,0,0
"A Metal L&F extension of BasicToolTipUI.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,0,0,0,0,1,0
"The default theme for the MetalLookAndFeel.  The designers of the Metal Look and Feel strive to keep the default look up  to date, possibly through the use of new themes in the future. Therefore,  developers should only use this class directly when they wish to customize  the Ocean look, or force it to be the current theme, regardless of future  updates.  All colors returned by OceanTheme are completely opaque.  Since:     1.5 See Also:     MetalLookAndFeel.setCurrentTheme(javax.swing.plaf.metal.MetalTheme)",1,0,0,0,0,0,0,1,0,0,0,0
"Invokes the getPreferredSize method on each UI handled by this object.  Overrides: getPreferredSize in class ComponentUI Parameters: a - the component whose preferred size is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel See Also: JComponent.getPreferredSize(), LayoutManager.preferredLayoutSize(java.awt.Container)",1,0,0,0,0,1,0,0,0,0,0,0
"Invokes the installUI method on each UI handled by this object.  Overrides: installUI in class ComponentUI Parameters: a - the component where this UI delegate is being installed See Also: ComponentUI.uninstallUI(javax.swing.JComponent), JComponent.setUI(javax.swing.plaf.ComponentUI), JComponent.updateUI()",1,0,0,0,0,0,0,0,0,0,0,0
"Invokes the getAcceptAllFileFilter method on each UI handled by this object.  Specified by: getAcceptAllFileFilter in class FileChooserUI Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel",1,0,0,0,0,1,0,0,0,0,0,0
"A multiplexing UI used to combine InternalFrameUIs.  This file was automatically generated by AutoMulti.",0,0,0,1,0,0,0,0,0,0,0,0
"A multiplexing UI used to combine LabelUIs.  This file was automatically generated by AutoMulti.",1,0,0,0,0,0,0,0,0,0,0,0
"Invokes the getAccessibleChild method on each UI handled by this object.  Overrides: getAccessibleChild in class ComponentUI b - zero-based index of child Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel See Also: ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)",1,0,0,0,0,0,1,0,0,0,0,1
"A multiplexing UI used to combine MenuItemUIs.  This file was automatically generated by AutoMulti.",1,0,0,0,0,0,0,0,0,0,0,0
"Invokes the selectInitialValue method on each UI handled by this object.  Specified by: selectInitialValue in class OptionPaneUI",1,0,0,0,0,0,0,0,0,0,0,0
"Invokes the contains method on each UI handled by this object.  Overrides: contains in class ComponentUI Parameters: a - the component where the x,y location is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components b - the x coordinate of the point c - the y coordinate of the point Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel See Also: JComponent.contains(int, int), Component.contains(int, int)",1,0,0,0,0,0,0,0,0,0,0,0
"A multiplexing UI used to combine PanelUIs.  This file was automatically generated by AutoMulti.",1,0,0,0,0,0,1,0,0,0,0,0
"Invokes the getAccessibleChild method on each UI handled by this object.  Overrides: getAccessibleChild in class ComponentUI b - zero-based index of child Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel See Also: ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)",1,0,0,0,0,0,0,0,0,0,0,0
"Invokes the getMinimumSize method on each UI handled by this object.  Overrides: getMinimumSize in class ComponentUI Parameters: a - the component whose minimum size is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel See Also: JComponent.getMinimumSize(), LayoutManager.minimumLayoutSize(java.awt.Container), ComponentUI.getPreferredSize(javax.swing.JComponent)",1,0,0,0,0,0,0,0,0,0,0,0
"A multiplexing UI used to combine SeparatorUIs.  This file was automatically generated by AutoMulti.",1,0,0,0,0,0,0,0,0,0,0,0
"A multiplexing UI used to combine SliderUIs.  This file was automatically generated by AutoMulti.",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the list of UIs associated with this multiplexing UI. This allows processing of the UIs by an application aware of multiplexing UIs on components.",1,0,0,1,0,0,0,0,0,0,0,0
"A multiplexing UI used to combine SplitPaneUIs.  This file was automatically generated by AutoMulti.",0,0,0,0,0,0,0,0,0,0,0,0
"Invokes the getAccessibleChild method on each UI handled by this object.  Overrides: getAccessibleChild in class ComponentUI b - zero-based index of child Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel See Also: ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)",1,0,0,0,0,0,0,0,0,0,0,0
"Invokes the getAccessibleChild method on each UI handled by this object.  Overrides: getAccessibleChild in class ComponentUI b - zero-based index of child Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel See Also: ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)",1,0,0,0,0,0,0,0,0,0,0,1
"Invokes the isEditing method on each UI handled by this object.  Specified by: isEditing in class TreeUI Returns: the value obtained from the first UI, which is the UI obtained from the default LookAndFeel",1,0,0,0,0,0,0,0,0,0,0,0
"Invokes the paint method on each UI handled by this object.  Overrides: paint in class ComponentUI Parameters: a - the Graphics context in which to paint b - the component being painted; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components See Also: ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)",1,1,0,0,0,0,0,0,0,0,0,0
"Returns the textual description of this ColorType. This is the same value that the ColorType was created with.  Overrides: toString in class Object Returns: the description of the string",1,0,0,0,0,0,0,0,0,0,0,1
"A distinct rendering area of a Swing component. A component may support one  or more regions. Specific component regions are defined by the typesafe  enumeration in this class.  Regions are typically used as a way to identify the Components and areas a  particular style is to apply to. Synth's file format allows you to bind  styles based on the name of a Region. The name is derived from the field  name of the constant:     1. Map all characters to lowercase.    2. Map the first character to uppercase.    3. Map the first character after underscores to uppercase.    4. Remove all underscores. For example, to identify the SPLIT_PANE Region you would use SplitPane. The  following shows a custom SynthStyleFactory that returns a specific style  for split panes:   public SynthStyle getStyle(JComponent c, Region id) { if (id == Region.SPLIT_PANE) { return splitPaneStyle; } ... }   The following xml accomplishes the same thing:   <style id=splitPaneStyle> ... </style> <bind style=splitPaneStyle type=region key=SplitPane/>   Since:     1.5",1,0,0,1,0,0,1,0,1,0,0,0
" InternalFrame region. To bind a style to this Region use the name InternalFrame. ",0,0,0,0,0,0,0,0,0,0,0,0
" Tree region. To bind a style to this Region use the name Tree. ",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the style associated with this Region.  Returns: SynthStyle associated with the region.",1,0,0,0,0,0,0,0,0,0,0,1
"SynthPainter is used for painting portions of JComponents. At a minimum  each JComponent has two paint methods: one for the border and one for the  background. Some JComponents have more than one Region, and as a  consequence more paint methods.  Instances of SynthPainter are obtained from the  SynthStyle.getPainter(javax.swing.plaf.synth.SynthContext) method.  You typically supply a SynthPainter by way of Synth's file format. The  following example registers a painter for all JButtons that will render the  image myImage.png:   <style id=buttonStyle> <imagePainter path=myImage.png sourceInsets=2 2 2 2 paintCenter=true stretch=true/> <insets top=2 bottom=2 left=2 right=2/> </style> <bind style=buttonStyle type=REGION key=button/>   SynthPainter is abstract in so far as it does no painting, all the methods  are empty. While none of these methods are typed to throw an exception,  subclasses can assume that valid arguments are passed in, and if not they  can throw a NullPointerException or IllegalArgumentException in response to  invalid arguments.  Since:     1.5",1,0,0,0,0,0,1,0,1,0,0,0
"Paints the border of a formatted text field.  Parameters: context - SynthContext identifying the JComponent and Region to paint to g - Graphics to paint to x - X coordinate of the area to paint to y - Y coordinate of the area to paint to w - Width of the area to paint to h - Height of the area to paint to",1,0,0,0,0,0,0,0,0,0,0,1
"Paints the border of a scrollbar.  Parameters: context - SynthContext identifying the JComponent and Region to paint to g - Graphics to paint to x - X coordinate of the area to paint to y - Y coordinate of the area to paint to w - Width of the area to paint to h - Height of the area to paint to",0,0,0,0,0,0,0,0,0,0,0,1
"Paints the background of a split pane.  Parameters: context - SynthContext identifying the JComponent and Region to paint to g - Graphics to paint to x - X coordinate of the area to paint to y - Y coordinate of the area to paint to w - Width of the area to paint to h - Height of the area to paint to",1,0,0,0,0,0,0,0,0,0,0,0
"Paints the border of the area behind the tabs of a tabbed pane.  Parameters: context - SynthContext identifying the JComponent and Region to paint to g - Graphics to paint to x - X coordinate of the area to paint to y - Y coordinate of the area to paint to w - Width of the area to paint to h - Height of the area to paint to",1,0,0,0,0,0,0,0,0,0,0,1
"Sets the String object for the cell being rendered to value.  Parameters: value - the string value for this cell; if value is null it sets the text value to an empty string See Also: JLabel.setText(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,0
"This is an implementation of TableModel that uses a Vector of Vectors to  store the cell value objects.  Warning: DefaultTableModel returns a column class of Object. When  DefaultTableModel is used with a TableRowSorter this will result in  extensive use of toString, which for non-String data types is expensive. If  you use DefaultTableModel with a TableRowSorter you are strongly encouraged  to override getColumnClass to return the appropriate type.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     TableModel, getDataVector()",0,0,0,0,1,0,1,0,0,1,0,0
"Returns true regardless of parameter values.  Specified by: isCellEditable in interface TableModel Overrides: isCellEditable in class AbstractTableModel Parameters: row - the row whose value is to be queried column - the column whose value is to be queried Returns: true See Also: setValueAt(java.lang.Object, int, int)",1,0,0,0,0,0,0,0,0,0,0,0
"This class provides an implementation of the Java Accessibility API  appropropriate for JTableHeader entries.",0,0,0,0,0,0,1,0,0,0,0,0
"Returns the suffix used to construct the name of the look and feel (L&F) class used to render this component.  Overrides: getUIClassID in class JComponent Returns: the string TableHeaderUI See Also: JComponent.getUIClassID(), UIDefaults.getUI(javax.swing.JComponent)",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the width of the TableColumn. The default width is 75.  Returns: the width property See Also: setWidth(int)",1,0,1,0,0,0,0,0,0,0,0,1
"Deprecated. as of Java 2 platform v1.3  This field was not used in previous releases and there are currently no plans to support it in the future.",0,0,0,0,0,0,0,0,0,0,0,0
"As of Java 2 platform v1.3, this method is not called by the TableColumn constructor. Previously this method was used by the TableColumn to create a default header renderer. As of Java 2 platform v1.3, the default header renderer is null. JTableHeader now provides its own shared default renderer, just as the JTable does for its cell renderers.  Returns: the default header renderer See Also: JTableHeader.createDefaultRenderer()",1,0,0,0,0,0,0,0,0,0,0,0
"An implementation of RowSorter that provides sorting and filtering using a  TableModel. The following example shows adding sorting to a JTable:   TableModel myModel = createMyTableModel(); JTable table = new JTable(myModel); table.setRowSorter(new TableRowSorter(myModel));   This will do all the wiring such that when the user does the appropriate  gesture, such as clicking on the column header, the table will visually  sort.  JTable's row-based methods and JTable's selection model refer to the view  and not the underlying model. Therefore, it is necessary to convert between  the two. For example, to get the selection in terms of myModel you need to  convert the indices:   int[] selection = table.getSelectedRows(); for (int i = 0; i < selection.length; i++) { selection[i] = table.convertRowIndexToModel(selection[i]); }   Similarly to select a row in JTable based on a coordinate from the  underlying model do the inverse:   table.setRowSelectionInterval(table.convertRowIndexToView(row), table.convertRowIndexToView(row));   The previous example assumes you have not enabled filtering. If you have  enabled filtering convertRowIndexToView will return -1 for locations that  are not visible in the view.  TableRowSorter uses Comparators for doing comparisons. The following  defines how a Comparator is chosen for a column:     1. If a Comparator has been specified for the column by the        setComparator method, use it.    2. If the column class as returned by getColumnClass is String, use the        Comparator returned by Collator.getInstance().    3. If the column class implements Comparable, use a Comparator that       invokes the compareTo method.    4. If a TableStringConverter has been specified, use it to convert the       values to Strings and then use the Comparator returned by        Collator.getInstance().    5. Otherwise use the Comparator returned by Collator.getInstance() on       the results from calling toString on the objects.  In addition to sorting TableRowSorter provides the ability to filter. A  filter is specified using the setFilter method. The following example will  only show rows containing the string foo:   TableModel myModel = createMyTableModel(); TableRowSorter sorter = new TableRowSorter(myModel); sorter.setRowFilter(RowFilter.regexFilter(.*foo.*)); JTable table = new JTable(myModel); table.setRowSorter(sorter);   If the underlying model structure changes (the modelStructureChanged  method is invoked) the following are reset to their default values:  Comparators by column, current sort order, and whether each column is  sortable. The default sort order is natural (the same as the model), and  columns are sortable by default.  TableRowSorter has one formal type parameter: the type of the model.  Passing in a type that corresponds exactly to your model allows you to  filter based on your model without casting. Refer to the documentation of  RowFilter for an example of this.  WARNING: DefaultTableModel returns a column class of Object. As such all  comparisons will be done using toString. This may be unnecessarily  expensive. If the column only contains one type of value, such as an  Integer, you should override getColumnClass and return the appropriate  Class. This will dramatically increase the performance of this class.  Since:     1.6 See Also:     JTable, RowFilter, DefaultTableModel, Collator, Comparator",1,0,0,0,0,1,1,0,1,0,0,0
"Returns the object responsible for converting values from the model to strings.  Returns: object responsible for converting values to strings.",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the string representation of the value at the specified location.  Parameters: model - the TableModel to fetch the value from row - the row the string is being requested for column - the column the string is being requested for Returns: the string representation. This should never return null. Throws: NullPointerException - if model is null IndexOutOfBoundsException - if the arguments are outside the bounds of the model",1,0,0,0,0,0,0,0,0,0,0,0
"Gets the element name.  Specified by: getName in interface Element Overrides: getName in class AbstractDocument.AbstractElement Returns: the element name",0,0,0,0,0,0,0,0,0,0,0,1
"Interface to describe a sequence of character content that can be edited.  Implementations may or may not support a history mechanism which will be  reflected by whether or not mutations return an UndoableEdit  implementation.  See Also:     AbstractDocument",1,0,0,0,0,0,1,0,0,0,0,0
"Current length of the sequence of character content.  Returns: the length >= 0",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs a change record.  Parameters: offs - the offset into the document of the change >= 0 len - the length of the change >= 0 type - the type of event (DocumentEvent.EventType) Since: 1.4",1,0,0,0,0,0,0,0,0,0,0,0
"An implementation of the document interface to serve as a basis for  implementing various kinds of documents. At this level there is very little  policy, so there is a corresponding increase in difficulty of use.  This class implements a locking mechanism for the document. It allows  multiple readers or one writer, and writers must wait until all observers  of the document have been notified of a previous change before beginning  another mutation to the document. The read lock is acquired and released  using the render method. A write lock is aquired by the methods that mutate  the document, and are held for the duration of the method call.  Notification is done on the thread that produced the mutation, and the  thread has full read access to the document for the duration of the  notification, but other readers are kept out until the notification has  finished. The notification is a beans event notification which does not  allow any further mutations until all listeners have been notified.  Any models subclassed from this class and used in conjunction with a text  component that has a look and feel implementation that is derived from  BasicTextUI may be safely updated asynchronously, because all access to the  View hierarchy is serialized by BasicTextUI if the document is of type  AbstractDocument. The locking assumes that an independent thread will  access the View hierarchy only from the DocumentListener methods, and that  there will be only one event thread active at a time.  If concurrency support is desired, there are the following additional  implications. The code path for any DocumentListener implementation and any  UndoListener implementation must be threadsafe, and not access the  component lock if trying to be safe from deadlocks. The repaint and  revalidate methods on JComponent are safe.  AbstractDocument models an implied break at the end of the document. Among  other things this allows you to position the caret after the last  character. As a result of this, getLength returns one less than the length  of the Content. If you create your own Content, be sure and initialize it  to have an additional character. Refer to StringContent and GapContent for  examples of this. Another implication of this is that Elements that model  the implied end character will have an endOffset == (getLength() + 1). For  example, in DefaultStyledDocument  getParagraphElement(getLength()).getEndOffset() == getLength() + 1 .  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,1,1,0,1,1,1,0,1,0,0,0
"Supports managing a set of properties. Callers can use the documentProperties dictionary to annotate the document with document-wide properties.  Returns: a non-null Dictionary See Also: setDocumentProperties(java.util.Dictionary<java.lang.Object, java.lang.Object>)",0,0,0,1,0,0,0,0,0,0,0,0
"Acquires a lock to begin mutating the document this lock protects. There can be no writing, notification of changes, or reading going on in order to gain the lock. Additionally a thread is allowed to gain more than one writeLock, as long as it doesn't attempt to gain additional writeLocks from within document notification. Attempting to gain a writeLock from within a DocumentListener notification will result in an IllegalStateException. The ability to obtain more than one writeLock per thread allows subclasses to gain a writeLock, perform a number of operations, then release the lock.  Calls to writeLock must be balanced with calls to writeUnlock, else the Document will be left in a locked state so that no reading or writing can be done.  Throws: IllegalStateException - thrown on illegal lock attempt. If the document is implemented properly, this can only happen if a document listener attempts to mutate the document. This situation violates the bean event model where order of delivery is not guaranteed and all listeners should be notified before further mutations are allowed.",1,0,1,0,0,0,0,0,0,0,0,0
"Returns the first offset to be output.  Since: 1.3",1,0,0,0,0,0,0,0,0,0,0,0
"This interface is the type signature that is expected to be present on any  attribute key that contributes to character level presentation. This would  be any attribute that applies to a so-called run of style.  Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",0,1,0,0,0,0,0,0,0,0,0,0
"Computes the location and extent of each child view in this BoxView given the targetSpan, which is the width (or height) of the region we have to work with.  Parameters: targetSpan - the total span given to the view, which would be used to layout the children axis - the axis being studied, either View.X_AXIS or View.Y_AXIS offsets - an empty array filled by this method with values specifying the location of each child view spans - an empty array filled by this method with values specifying the extent of each child view",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the next visual position for the cursor, in either the north or south direction.  Parameters: pos - the position to convert >= 0 b - a bias value of either Position.Bias.Forward or Position.Bias.Backward a - the allocated region to render into direction - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard; this may be one of the following: * SwingConstants.NORTH * SwingConstants.SOUTH biasRet - an array containing the bias that was checked Returns: the location within the model that best represents the next north or south location Throws: BadLocationException IllegalArgumentException - if direction is invalid See Also: getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[])",1,0,0,0,0,0,0,0,0,0,0,0
"Copies the selected region and place its contents into the system  clipboard.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     DefaultEditorKit.copyAction, DefaultEditorKit.getActions()",1,0,0,0,0,0,0,0,0,1,0,0
"Cuts the selected region and place its contents into the system clipboard.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     DefaultEditorKit.cutAction, DefaultEditorKit.getActions()",1,0,0,0,0,0,0,0,0,0,0,0
"The operation to perform when this action is triggered.  Parameters: e - the action event",1,0,0,0,0,0,0,0,0,0,0,1
"Places content into the associated document. If there is a selection, it is  removed before the new content is added.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     DefaultEditorKit.insertContentAction, DefaultEditorKit.getActions()",1,0,0,0,0,0,0,0,0,1,0,0
"Places a tab character into the document. If there is a selection, it is  removed before the tab is added.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     DefaultEditorKit.insertTabAction, DefaultEditorKit.getActions()",1,0,0,0,0,0,0,0,0,0,0,0
"This is the set of things needed by a text component to be a reasonably  functioning editor for some type of text document. This implementation  provides a default implementation which treats text as plain text and  provides a minimal set of actions for a simple editor.  Newlines     There are two properties which deal with newlines. The system property,      line.separator, is defined to be platform-dependent, either  n,  r,     or  r n. There is also a property defined in DefaultEditorKit, called      EndOfLineStringProperty, which is defined automatically when a document     is loaded, to be the first occurrence of any of the newline characters.     When a document is loaded, EndOfLineStringProperty is set     appropriately, and when the document is written back out, the      EndOfLineStringProperty is used. But while the document is in memory,     the  n character is used to define a newline, regardless of how the     newline is defined when the document is on disk. Therefore, for     searching purposes,  n should always be used. When a new document is     created, and the EndOfLineStringProperty has not been defined, it will     use the System property when writing out the document.      Note that EndOfLineStringProperty is set on the Document using the      get/setProperty methods. Subclasses may override this behavior.",1,0,0,0,0,0,1,0,0,0,0,0
" Name of the Action for moving the caret logically backward one position.  See Also: getActions(), Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Implements the Highlighter interfaces. Implements a simple highlight  painter that renders in a solid color.  See Also:     Highlighter",1,0,0,0,0,0,0,0,0,0,0,1
"An UndoableEdit used to remember AttributeSet changes to an Element.",1,0,0,0,0,0,0,0,0,0,0,0
" A possible value for getType. This specifies that this record type is a end tag and represents markup that specifies the end of an element.  See Also: Constant Field Values ",0,0,0,1,0,0,0,0,0,0,0,0
"Fetches a named style previously added.  Specified by: getStyle in interface StyledDocument Parameters: nm - the name of the style Returns: the style",1,0,0,0,0,0,0,0,0,0,0,1
"Gets a character element based on a position.  Specified by: getCharacterElement in interface StyledDocument Parameters: pos - the position in the document >= 0 Returns: the element",0,0,0,0,0,0,0,0,0,0,0,1
"Creates a copy of the editor kit. This is implemented to use Object.clone. If the kit cannot be cloned, null is returned.  Overrides: clone in class Object Returns: the copy See Also: Cloneable",0,0,0,1,0,0,0,0,0,0,1,0
"Strategy for maintaining the physical form of the flow. The default  implementation is completely stateless, and recalculates the entire flow if  the layout is invalid on the given FlowView. Alternative strategies can be  implemented by subclassing, and might perform incrementatal repair to the  layout or alternative breaking behavior.  Since:     1.3",1,0,0,0,0,0,1,1,0,0,0,0
"A View that tries to flow it's children into some partially constrained  space. This can be used to build things like paragraphs, pages, etc. The  flow is made up of the following pieces of functionality.      * A logical set of child views, which as used as a layout pool from       which a physical view is formed.     * A strategy for translating the logical view to a physical (flowed)       view.     * Constraints for the strategy to work against.     * A physical structure, that represents the flow. The children of this       view are where the pieces of of the logical views are placed to       create the flow.  Since:     1.3 See Also:     View",1,0,0,1,0,0,0,0,0,0,0,0
"An implementation of the AbstractDocument.Content interface implemented  using a gapped buffer similar to that used by emacs. The underlying storage  is a array of unicode characters with a gap somewhere. The gap is moved to  the location of changes to take advantage of common behavior where most  changes are in the same location. Changes that occur at a gap boundary are  generally cheap and moving the gap is generally cheaper than moving the  array contents directly to accomodate the change.  The positions tracking change are also generally cheap to maintain. The  Position implementations (marks) store the array index and can easily  calculate the sequential position from the current gap location. Changes  only require update to the the marks between the old and new gap boundaries  when the gap is moved, so generally updating the marks is pretty cheap. The  marks are stored sorted so they can be located quickly with a binary  search. This increases the cost of adding a mark, and decreases the cost of  keeping the mark updated.",1,0,0,1,0,0,1,0,0,0,0,0
"Resets the location for all the UndoPosRef instances in positions.  This is meant for internal usage, and is generally not of interest to subclasses.  Parameters: positions - the UndoPosRef instances to reset",1,0,0,1,0,0,0,0,0,0,0,0
"Access to the end of the gap.",0,0,0,0,0,0,0,0,0,0,0,1
"Constructs a new view wrapped on an element.  Parameters: elem - the element",1,0,0,0,0,0,0,0,0,0,0,1
"Determine if the glyphs should be underlined. If true, an underline should be drawn through the baseline.",0,0,0,0,0,0,0,0,0,0,0,0
"Creates a new icon view that represents an element.  Parameters: elem - the element to create a view for",1,0,0,0,0,0,0,0,0,0,0,0
"InternationalFormatter extends DefaultFormatter, using an instance of  java.text.Format to handle the conversion to a String, and the conversion  from a String.  If getAllowsInvalid() is false, this will ask the Format to format the  current text on every edit.  You can specify a minimum and maximum value by way of the setMinimum and  setMaximum methods. In order for this to work the values returned from  stringToValue must be comparable to the min/max values by way of the  Comparable interface.  Be careful how you configure the Format and the InternationalFormatter, as  it is possible to create a situation where certain values can not be input.  Consider the date format 'M/d/yy', an InternationalFormatter that is always  valid (setAllowsInvalid(false)), is in overwrite mode ( setOverwriteMode(true)) and the date 7/1/99. In this case the user will not  be able to enter a two digit month or day of month. To avoid this, the  format should be 'MM/dd/yy'.  If InternationalFormatter is configured to only allow valid values ( setAllowsInvalid(false)), every valid edit will result in the text of the  JFormattedTextField being completely reset from the Format. The cursor  position will also be adjusted as literal characters are added/removed from  the resulting String.  InternationalFormatter's behavior of stringToValue is slightly different  than that of DefaultTextFormatter, it does the following:     1. parseObject is invoked on the Format specified by setFormat    2. If a Class has been set for the values (setValueClass), supers       implementation is invoked to convert the value returned from        parseObject to the appropriate class.    3. If a ParseException has not been thrown, and the value is outside the       min/max a ParseException is thrown.    4. The value is returned. InternationalFormatter implements stringToValue in this manner so that you  can specify an alternate Class than Format may return.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  Since:     1.4 See Also:     Format, Comparable",1,0,0,0,0,0,0,0,0,0,0,0
"Returns a string representation of this drop location. This method is intended to be used for debugging purposes, and the content and format of the returned string may vary between implementations.  Overrides: toString in class TransferHandler.DropLocation Returns: a string representation of this drop location",1,0,0,1,0,0,0,0,0,0,0,1
" The name of the action for the key. ",0,0,0,0,0,0,0,0,0,0,0,1
"Returns an array of all the caret listeners registered on this text component.  Returns: all of this component's CaretListeners or an empty array if no caret listeners are currently registered Since: 1.4 See Also: addCaretListener(javax.swing.event.CaretListener), removeCaretListener(javax.swing.event.CaretListener)",0,0,0,0,0,0,0,0,0,0,0,0
"Sets the caret to be used. By default this will be set by the UI that gets installed. This can be changed to a custom caret if desired. Setting the caret results in a PropertyChange event (caret) being fired.  Parameters: c - the caret See Also: getCaret()",1,0,0,0,0,0,0,1,0,0,0,1
"Moves the caret to a new position, leaving behind a mark defined by the last time setCaretPosition was called. This forms a selection. If the document is null, does nothing. The position must be between 0 and the length of the component's text or else an exception is thrown.  Parameters: pos - the position Throws: IllegalArgumentException - if the value supplied for position is less than zero or greater than the component's text length See Also: setCaretPosition(int)",1,0,1,0,0,0,0,0,0,0,0,1
"Description copied from class: JComponent Notifies this component that it no longer has a parent component. When this method is invoked, any KeyboardActions set up in the the chain of parent components are removed.  Overrides: removeNotify in class JComponent See Also: JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)",0,0,0,0,0,0,0,0,0,0,0,0
"A collection of bindings of KeyStrokes to actions. The bindings are  basically name-value pairs that potentially resolve in a hierarchy.",1,0,0,0,0,0,0,0,0,0,0,0
"Used as a way to circumvent calling back into the caret to position the  cursor. Caret implementations that wish to support a NavigationFilter must  provide an implementation that will not callback into the NavigationFilter.  Since:     1.4",0,0,1,1,0,1,0,0,0,0,0,0
"Invoked prior to the Caret moving the dot. The default implementation calls directly into the FilterBypass with the passed in arguments. Subclasses may wish to conditionally call super with a different location, or invoke the necessary methods on the FilterBypass.  Parameters: fb - FilterBypass that can be used to mutate caret position dot - the position >= 0 bias - Bias for new location",1,0,0,0,0,1,0,1,0,0,0,0
"A straightforward implementation of MutableAttributeSet using a hash table.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,1,1,0,1,0,0,1,0,0
"Checks whether the set of attributes is empty.  Returns: true if the set is empty else false",1,0,0,0,0,0,0,0,0,0,0,1
" Name of elements used to represent components.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,1
" Gets the BidiLevel setting.  Parameters: a - the attribute set Returns: the value ",0,0,0,0,0,0,0,0,0,0,0,1
" Gets the icon setting from the attribute list.  Parameters: a - the attribute set Returns: the icon, null if none ",0,0,0,0,0,0,0,0,0,0,0,1
" Gets the TabSet.  Parameters: a - the attribute set Returns: the TabSet ",0,0,0,0,0,0,0,0,0,0,0,1
"Gets the foreground color setting from the attribute list.  Parameters: a - the attribute set Returns: the color, Color.black as the default",1,0,0,0,0,0,0,0,0,0,0,1
"Gets the background color setting from the attribute list.  Parameters: a - the attribute set Returns: the color, Color.black as the default",0,0,0,0,0,0,0,0,0,0,0,1
"This class holds a small number of attributes in an array. The storage  format is key, value, key, value, etc. The size of the set is the length of  the array divided by two. By default, this is the class that will be used  to store attributes when held in the compact sharable form.",1,0,0,1,0,0,1,0,0,0,0,0
"Returns a string showing the key/value pairs  Overrides: toString in class Object Returns: a string representation of the object.",1,0,0,0,0,0,0,0,0,0,0,0
"Checks whether two attribute sets are equal.  Specified by: isEqual in interface AttributeSet Parameters: attr - the attribute set to check against Returns: true if the same See Also: AttributeSet.isEqual(javax.swing.text.AttributeSet)",0,0,0,0,0,0,0,0,0,0,0,0
"A pool of styles and their associated resources. This class determines the  lifetime of a group of resources by being a container that holds caches for  various resources such as font and color that get reused by the various  style definitions. This can be shared by multiple documents if desired to  maximize the sharing of related resources.  This class also provides efficient support for small sets of attributes and  compresses them by sharing across uses and taking advantage of their  immutable nature. Since many styles are replicated, the potential for  sharing is significant, and copies can be extremely cheap. Larger sets  reduce the possibility of sharing, and therefore revert automatically to a  less space-efficient implementation.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,1,0,1,1,0,0,0,0,0,0,0
"Interface for a generic styled document.",0,0,0,0,0,0,0,0,0,0,0,0
"An action to set paragraph alignment. This sets the  StyleConstants.Alignment attribute for the currently selected range of the  target JEditorPane. This is done by calling  StyledDocument.setParagraphAttributes on the styled document associated  with the target JEditorPane.  If the target text component is specified as the source of the ActionEvent  and there is a command string, the command string will be interpreted as an  integer that should be one of the legal values for the  StyleConstants.Alignment attribute.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,1,1,1,0,0,0,0
"An action to toggle the bold attribute.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,0,0,0,0,0,0,0,0,0
"This is the set of things needed by a text component to be a reasonably  functioning editor for some type of text document. This implementation  provides a default implementation which treats text as styled text and  provides a minimal set of actions for editing styled text.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the index of the Tab to be used after location. This will return -1 if there are no tabs after location.",1,0,0,0,0,0,1,0,0,0,0,0
"View of a row in a row-centric table.",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs a TableView for the given element.  Parameters: elem - the element that this view is responsible for Since: 1.4",1,0,0,0,0,0,0,0,0,0,0,1
"Implements View interface for a table, that is composed of an element  structure where the child elements of the element this view is responsible  for represent rows and the child elements of the row elements are cells.  The cell elements can have an arbitrary element structure under them, which  will be built with the ViewFactory returned by the getViewFactory method.       TABLE      ROW        CELL        CELL      ROW        CELL        CELL    This is implemented as a hierarchy of boxes, the table itself is a vertical  box, the rows are horizontal boxes, and the cells are vertical boxes. The  cells are allowed to span multiple columns and rows. By default, the table  can be thought of as being formed over a grid (i.e. somewhat like one would  find in gridbag layout), where table cells can request to span more than  one grid cell. The default horizontal span of table cells will be based  upon this grid, but can be changed by reimplementing the requested span of  the cell (i.e. table cells can have independant spans if desired).  See Also:     View",1,0,0,0,0,0,1,0,0,0,0,0
"Calculate the requirements for the minor axis. This is called by the superclass whenever the requirements need to be updated (i.e. a preferenceChanged was messaged through this view).  This is implemented to calculate the requirements as the sum of the requirements of the columns.  Overrides: calculateMinorAxisRequirements in class BoxView Parameters: axis - the axis being studied r - the SizeRequirements object; if null one will be created Returns: the newly initialized SizeRequirements object See Also: SizeRequirements",1,0,0,1,0,1,0,0,0,0,0,1
"Takes one list of commands and augments it with another list of commands. The second list takes precedence over the first list; that is, when both lists contain a command with the same name, the command from the second list is used.  Parameters: list1 - the first list, may be empty but not null list2 - the second list, may be empty but not null Returns: the augmented list",0,0,1,0,0,0,0,0,0,0,0,0
"Fetches the attributes to use when rendering. By default this simply returns the attributes of the associated element. This method should be used rather than using the element directly to obtain access to the attributes to allow view-specific attributes to be mixed in or to allow the view to have view-specific conversion of attributes by subclasses. Each view should document what attributes it recognizes for the purpose of rendering or layout, and should always access them through the AttributeSet returned by this method.",1,0,0,1,0,0,0,0,0,0,0,0
"Gives notification from the document that attributes were changed in a location that this view is responsible for.  Overrides: changedUpdate in class View Parameters: e - the change information from the associated document a - the current allocation of the view f - the factory to use to rebuild if the view has children See Also: View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)",1,0,0,0,0,0,0,0,0,0,0,0
"Determine if a zone is in the loaded state. The zones are expected to represent a subset of the child elements of the element this view is responsible for. Therefore, the default implementation is to return true if the view has children.",1,0,0,1,0,0,0,0,0,0,0,1
"Determines the maximum span for this view along an axis.  Overrides: getMaximumSpan in class BoxView Parameters: axis - may be either View.X_AXIS or View.Y_AXIS Returns: the span the view would like to be rendered into >= 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view Throws: IllegalArgumentException - for an invalid axis type See Also: View.getPreferredSpan(int)",1,0,0,1,0,0,0,0,0,0,0,1
"An HTML reader to load an HTML document with an HTML element structure.  This is a set of callbacks from the parser, implemented to create a set of  elements tagged with attributes. The parse builds up tokens (ElementSpec)  that describe the element subtree desired, and burst it into the document  under the protection of a write lock using the insert method on the  document outer class.  The reader can be configured by registering actions (of type  HTMLDocument.HTMLReader.TagAction) that describe how to handle the action.  The idea behind the actions provided is that the most natural text editing  operations can be provided if the element structure boils down to  paragraphs with runs of some kind of style in them. Some things are more  naturally specified structurally, so arbitrary structure should be allowed  above the paragraphs, but will need to be edited with structural actions.  The implication of this is that some of the HTML elements specified in the  stream being parsed will be collapsed into attributes, and in some cases  paragraphs will be synthesized. When HTML elements have been converted to  attributes, the attribute key will be of type HTML.Tag, and the value will  be of type AttributeSet so that no information is lost. This enables many  of the existing actions to work so that the user can type input, hit the  return key, backspace, delete, etc and have a reasonable result. Selections  can be created, and attributes applied or removed, etc. With this in mind,  the work done by the reader can be categorized into the following kinds of  tasks:  Block     Build the structure like it's specified in the stream. This produces     elements that contain other elements. Paragraph     Like block except that it's expected that the element will be used with     a paragraph view so a paragraph element won't need to be synthesized. Character     Contribute the element as an attribute that will start and stop at     arbitrary text locations. This will ultimately be mixed into a run of     text, with all of the currently flattened HTML character elements. Special     Produce an embedded graphical element. Form     Produce an element that is like the embedded graphical element, except     that it also has a component model associated with it. Hidden     Create an element that is hidden from view when the document is being     viewed read-only, and visible when the document is being edited. This     is useful to keep the model from losing information, and used to store     things like comments and unrecognized tags.  Currently, <APPLET>, <PARAM>, <MAP>, <AREA>, <LINK>, <SCRIPT> and <STYLE>  are unsupported.  The assignment of the actions described is shown in the following table for  the tags defined in HTML.Tag.  Tag 	Action HTML.Tag.A 	CharacterAction HTML.Tag.ADDRESS 	CharacterAction HTML.Tag.APPLET 	HiddenAction HTML.Tag.AREA 	AreaAction HTML.Tag.B 	CharacterAction HTML.Tag.BASE 	BaseAction HTML.Tag.BASEFONT 	CharacterAction HTML.Tag.BIG 	CharacterAction HTML.Tag.BLOCKQUOTE 	BlockAction HTML.Tag.BODY 	BlockAction HTML.Tag.BR 	SpecialAction HTML.Tag.CAPTION 	BlockAction HTML.Tag.CENTER 	BlockAction HTML.Tag.CITE 	CharacterAction HTML.Tag.CODE 	CharacterAction HTML.Tag.DD 	BlockAction HTML.Tag.DFN 	CharacterAction HTML.Tag.DIR 	BlockAction HTML.Tag.DIV 	BlockAction HTML.Tag.DL 	BlockAction HTML.Tag.DT 	ParagraphAction HTML.Tag.EM 	CharacterAction HTML.Tag.FONT 	CharacterAction HTML.Tag.FORM 	As of 1.4 a BlockAction HTML.Tag.FRAME 	SpecialAction HTML.Tag.FRAMESET 	BlockAction HTML.Tag.H1 	ParagraphAction HTML.Tag.H2 	ParagraphAction HTML.Tag.H3 	ParagraphAction HTML.Tag.H4 	ParagraphAction HTML.Tag.H5 	ParagraphAction HTML.Tag.H6 	ParagraphAction HTML.Tag.HEAD 	HeadAction HTML.Tag.HR 	SpecialAction HTML.Tag.HTML 	BlockAction HTML.Tag.I 	CharacterAction HTML.Tag.IMG 	SpecialAction HTML.Tag.INPUT 	FormAction HTML.Tag.ISINDEX 	IsndexAction HTML.Tag.KBD 	CharacterAction HTML.Tag.LI 	BlockAction HTML.Tag.LINK 	LinkAction HTML.Tag.MAP 	MapAction HTML.Tag.MENU 	BlockAction HTML.Tag.META 	MetaAction HTML.Tag.NOFRAMES 	BlockAction HTML.Tag.OBJECT 	SpecialAction HTML.Tag.OL 	BlockAction HTML.Tag.OPTION 	FormAction HTML.Tag.P 	ParagraphAction HTML.Tag.PARAM 	HiddenAction HTML.Tag.PRE 	PreAction HTML.Tag.SAMP 	CharacterAction HTML.Tag.SCRIPT 	HiddenAction HTML.Tag.SELECT 	FormAction HTML.Tag.SMALL 	CharacterAction HTML.Tag.STRIKE 	CharacterAction HTML.Tag.S 	CharacterAction HTML.Tag.STRONG 	CharacterAction HTML.Tag.STYLE 	StyleAction HTML.Tag.SUB 	CharacterAction HTML.Tag.SUP 	CharacterAction HTML.Tag.TABLE 	BlockAction HTML.Tag.TD 	BlockAction HTML.Tag.TEXTAREA 	FormAction HTML.Tag.TH 	BlockAction HTML.Tag.TITLE 	TitleAction HTML.Tag.TR 	BlockAction HTML.Tag.TT 	CharacterAction HTML.Tag.U 	CharacterAction HTML.Tag.UL 	BlockAction HTML.Tag.VAR 	CharacterAction  Once </html> is encountered, the Actions are no longer notified.",1,1,0,1,0,0,0,0,0,0,0,0
"An iterator to iterate over a particular type of tag. The iterator is not  thread safe. If reliable access to the document is not already ensured by  the context under which the iterator is being used, its use should be  performed under the protection of Document.render.",1,0,0,0,1,0,1,0,0,0,0,0
"A factory to build views for HTML. The following table describes what this  factory will build by default.  Tag 	View created HTML.Tag.CONTENT 	InlineView HTML.Tag.IMPLIED 	javax.swing.text.html.ParagraphView HTML.Tag.P 	javax.swing.text.html.ParagraphView HTML.Tag.H1 	javax.swing.text.html.ParagraphView HTML.Tag.H2 	javax.swing.text.html.ParagraphView HTML.Tag.H3 	javax.swing.text.html.ParagraphView HTML.Tag.H4 	javax.swing.text.html.ParagraphView HTML.Tag.H5 	javax.swing.text.html.ParagraphView HTML.Tag.H6 	javax.swing.text.html.ParagraphView HTML.Tag.DT 	javax.swing.text.html.ParagraphView HTML.Tag.MENU 	ListView HTML.Tag.DIR 	ListView HTML.Tag.UL 	ListView HTML.Tag.OL 	ListView HTML.Tag.LI 	BlockView HTML.Tag.DL 	BlockView HTML.Tag.DD 	BlockView HTML.Tag.BODY 	BlockView HTML.Tag.HTML 	BlockView HTML.Tag.CENTER 	BlockView HTML.Tag.DIV 	BlockView HTML.Tag.BLOCKQUOTE 	BlockView HTML.Tag.PRE 	BlockView HTML.Tag.BLOCKQUOTE 	BlockView HTML.Tag.PRE 	BlockView HTML.Tag.IMG 	ImageView HTML.Tag.HR 	HRuleView HTML.Tag.BR 	BRView HTML.Tag.TABLE 	javax.swing.text.html.TableView HTML.Tag.INPUT 	FormView HTML.Tag.SELECT 	FormView HTML.Tag.TEXTAREA 	FormView HTML.Tag.OBJECT 	ObjectView HTML.Tag.FRAMESET 	FrameSetView HTML.Tag.FRAME 	FrameView",1,0,0,0,0,0,0,0,0,0,0,0
"Class to watch the associated component and fire hyperlink events on it  when appropriate.",1,0,0,0,0,0,0,0,0,0,0,0
" Align images at the bottom.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" Align images at the border.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,1
"Creates a new HTMLWriter.  Parameters: w - a Writer doc - an HTMLDocument pos - the document location from which to fetch the content len - the amount to write out",1,0,0,0,0,0,0,0,0,0,0,1
"Set the cached properties from the attributes.  Overrides: setPropertiesFromAttributes in class LabelView",1,0,0,0,0,0,0,0,0,0,0,0
"MinimalHTMLWriter is a fallback writer used by the HTMLEditorKit to write  out HTML for a document that is a not produced by the EditorKit. The format  for the document is:   <html> <head> <style> <!-- list of named styles p.normal { font-family: SansSerif; margin-height: 0; font-size: 14 } --> </style> </head> <body> <p style=normal> Bold, italic, and underline attributes of the run are emitted as HTML tags. The remaining attributes are emitted as part of the style attribute of a <span> tag. The syntax is similar to inline styles. </p> </body> </html>",0,1,0,1,0,0,0,0,1,0,0,0
"Responsible for handling Icon Elements; deliberately unimplemented. How to implement this method is an issue of policy. For example, if you're generating an <img> tag, how should you represent the src attribute (the location of the image)? In certain cases it could be a URL, in others it could be read from a stream.  Parameters: elem - element of type StyleConstants.IconElementName Throws: IOException",1,0,0,0,0,0,0,0,0,0,0,0
"Determines the maximum span for this view along an axis. Returns 0 if the view is not visible, otherwise it calls the superclass method ot get the maximum span.  Overrides: getMaximumSpan in class BoxView Parameters: axis - may be either View.X_AXIS or View.Y_AXIS Returns: the maximum span the view can be rendered into See Also: BoxView.getMaximumSpan(int)",1,1,0,0,0,0,0,0,0,0,0,0
"Support for defining the visual characteristics of HTML views being  rendered. The StyleSheet is used to translate the HTML model into visual  characteristics. This enables views to be customized by a look-and-feel,  multiple views over the same model can be rendered differently, etc. This  can be thought of as a CSS rule repository. The key for CSS attributes is  an object of type CSS.Attribute. The type of the value is up to the  StyleSheet implementation, but the toString method is required to return a  string representation of CSS value.  The primary entry point for HTML View implementations to get their  attributes is the getViewAttributes method. This should be implemented to  establish the desired policy used to associate attributes with the view.  Each HTMLEditorKit (i.e. and therefore each associated JEditorPane) can  have its own StyleSheet, but by default one sheet will be shared by all of  the HTMLEditorKit instances. HTMLDocument instance can also have a  StyleSheet, which holds the document-specific CSS specifications.  In order for Views to store less state and therefore be more lightweight,  the StyleSheet can act as a factory for painters that handle some of the  rendering tasks. This allows implementations to determine what they want to  cache and have the sharing potentially at the level that a selector is  common to multiple views. Since the StyleSheet may be used by views over  multiple documents and typically the HTML attributes don't effect the  selector being used, the potential for sharing is significant.  The rules are stored as named styles, and other information is stored to  translate the context of an element to a rule quickly. The following code  fragment will display the named styles, and therefore the CSS rules  contained.       import java.util.*;   import javax.swing.text.*;   import javax.swing.text.html.*;     public class ShowStyles {         public static void main(String[] args) {           HTMLEditorKit kit = new HTMLEditorKit();           HTMLDocument doc = (HTMLDocument) kit.createDefaultDocument();           StyleSheet styles = doc.getStyleSheet();             Enumeration rules = styles.getStyleNames();           while (rules.hasMoreElements()) {               String name = (String) rules.nextElement();               Style rule = styles.getStyle(name);               System.out.println(rule.toString());           }           System.exit(0);       }   }     The semantics for when a CSS style should overide visual attributes defined  by an element are not well defined. For example, the html <body  bgcolor=red> makes the body have a red background. But if the html file  also contains the CSS rule body { background: blue } it becomes less clear  as to what color the background of the body should be. The current  implemention gives visual attributes defined in the element the highest  precedence, that is they are always checked before any styles. Therefore,  in the previous example the background would have a red color as the body  element defines the background color to be red.  As already mentioned this supports CSS. We don't support the full CSS spec.  Refer to the javadoc of the CSS class to see what properties we support.  The two major CSS parsing related concepts we do not currently support are  pseudo selectors, such as A:link { color: red }, and the important  modifier.  Note: This implementation is currently incomplete. It can be replaced with  alternative implementations that are complete. Future versions of this  class will provide better CSS support.",1,1,1,1,0,0,1,0,1,0,0,1
"Create an attribute list element.",0,0,0,0,0,0,0,0,0,0,0,1
"A representation of a content model. A content model is basically a  restricted BNF expression. It is restricted in the sense that it must be  deterministic. This means that you don't have to represent it as a finite  state automata.  See Annex H on page 556 of the SGML handbook for more information.",1,1,0,0,0,0,0,0,0,0,0,1
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"An element as described in a DTD using the ELEMENT construct. This is  essentiall the description of a tag. It describes the type, content model,  attributes, attribute types etc. It is used to correctly parse a document  by the Parser.  See Also:     DTD, AttributeList",1,0,0,1,0,0,0,0,0,0,0,0
" Get content model ",0,0,0,0,0,0,0,0,0,0,0,1
"This is the default implementation of RTF editing functionality. The RTF  support was not written by the Swing team. In the future we hope to improve  the support provided.",1,0,0,0,0,0,0,0,0,0,0,1
"Get the MIME type of the data that this kit represents support for. This kit supports the type text/rtf.  Overrides: getContentType in class DefaultEditorKit Returns: the type",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the path from the root, to get to this node. The last element in the path is this node.  Returns: an array of TreeNode objects giving the path, where the first element in the path is the root and the last element is this node.",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs an EditorContainer object.",0,0,0,0,0,0,0,0,0,0,0,1
"A TreeCellEditor. You need to supply an instance of  DefaultTreeCellRenderer so that the icons can be obtained. You can  optionally supply a TreeCellEditor that will be layed out according to the  icon in the DefaultTreeCellRenderer. If you do not supply a TreeCellEditor , a TextField will be used. Editing is started on a triple mouse click, or  after a click, pause, click and a delay of 1200 miliseconds.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     JTree",1,0,0,0,0,0,0,1,0,1,0,1
" Renderer, used to get border and offsets from. ",1,0,0,0,0,0,0,0,0,0,0,0
"This is invoked if a TreeCellEditor is not supplied in the constructor. It returns a TextField editor.  Returns: a new TextField editor",1,0,0,0,0,0,0,0,0,0,0,1
" Icon used to show non-leaf nodes that are expanded. ",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are expanded.",1,0,0,0,0,0,0,0,0,0,0,0
"Sets the icon used to represent non-leaf nodes that are not expanded.",1,0,0,0,0,0,0,0,0,0,0,0
"Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.  Parameters: source - the node where new elements are being inserted path - the path to the root node childIndices - the indices of the new elements children - the new elements See Also: EventListenerList",1,0,0,0,0,0,0,0,0,0,0,1
"Default implementation of TreeSelectionModel. Listeners are notified  whenever the paths in the selection change, not the rows. In order to be  able to track row changes you may wish to become a listener for expansion  events on the tree and test for changes from there.  resetRowSelection is called from any of the methods that update the  selected paths. If you subclass any of these methods to filter what is  allowed to be selected, be sure and message resetRowSelection if you do not  message super.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     JTree",1,0,1,0,0,1,0,1,0,1,0,1
"Returns the last path that was added. This may differ from the leadSelectionPath property maintained by the JTree.  Specified by: getLeadSelectionPath in interface TreeSelectionModel",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the path to the node that is closest to x,y. If there is nothing currently visible this will return null, otherwise it'll always return a valid path. If you need to test if the returned object is exactly at x, y you should get the bounds for the returned path and test x, y against that.  Specified by: getPathClosestTo in class AbstractLayoutCache Parameters: x - the horizontal component of the desired location y - the vertical component of the desired location Returns: the TreePath closest to the specified point",1,0,0,0,0,0,0,1,0,0,0,0
"Adds to CellEditor the extensions necessary to configure an editor in a  tree.  See Also:     JTree",1,0,0,0,0,0,0,0,0,0,0,0
"Represents a path to a node. A TreePath is an array of Objects that are  vended from a TreeModel. The elements of the array are ordered such that  the root is always the first element (index 0) of the array. TreePath is  Serializable, but if any components of the path are not serializable, it  will not be written out.  For further information and examples of using tree paths, see How to Use  Trees in The Java Tutorial.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,0,0,0,0,0,1,0,0,1,1,0
"Returns true if the row identified by row is selected.",1,0,0,0,0,0,0,0,0,0,0,1
"Sends redo to all contained UndoableEdits in the order in which they were added.  Specified by: redo in interface UndoableEdit Overrides: redo in class AbstractUndoableEdit Throws: CannotRedoException - if canRedo returns false See Also: AbstractUndoableEdit.canRedo()",1,0,0,0,0,0,0,0,0,0,0,1
"StateEdit is a general edit for objects that change state. Objects being  edited must conform to the StateEditable interface.  This edit class works by asking an object to store it's state in Hashtables  before and after editing occurs. Upon undo or redo the object is told to  restore it's state from these Hashtables.  A state edit is used as follows:   // Create the edit during the before state of the object StateEdit newEdit = new StateEdit(myObject); // Modify the object myObject.someStateModifyingMethod(); // end the edit when you are done modifying the object newEdit.end();   Note that when a StateEdit ends, it removes redundant state from the  Hashtables - A state Hashtable is not guaranteed to contain all keys/values  placed into it when the state is stored!  See Also:     StateEditable",1,0,1,1,0,0,0,1,1,0,0,0
"StateEditable defines the interface for objects that can have their state  undone/redone by a StateEdit.  See Also:     StateEdit",1,0,0,0,0,0,0,0,0,0,0,0
"Upon receiving this message the receiver should place any relevant state into state.",0,0,0,0,0,0,0,0,0,0,0,0
"Reduces the number of queued edits to a range of size limit, centered on the index of the next edit.",1,0,0,0,0,0,0,0,0,0,0,0
"Interface for diagnostics from tools. A diagnostic usually reports a  problem at a specific position in a source file. However, not all  diagnostics are associated with a position or a file.  A position is a zero-based character offset from the beginning of a file.  Negative values (except NOPOS) are not valid positions.  Line and column numbers begin at 1. Negative values (except NOPOS) and 0  are not valid line or column numbers.  Since:     1.6",1,0,0,1,0,0,0,0,0,0,0,0
"Gets the source object associated with this diagnostic.  Returns: the source object associated with this diagnostic. null if no source object is associated with the diagnostic.",1,0,0,0,0,0,0,0,0,0,0,0
"Provides an easy way to collect diagnostics in a list.  Since:     1.6",0,0,0,1,0,0,0,0,0,0,0,0
"Determines if this is an output location. An output location is a location that is conventionally used for output.  Returns: true if this is an output location, false otherwise",0,1,0,0,0,0,0,0,0,0,0,1
" Any other kind. ",0,0,0,0,0,0,0,0,0,0,0,1
"Provides simple implementations for most methods in JavaFileObject. This  class is designed to be subclassed and used as a basis for JavaFileObject  implementations. Subclasses can override the implementation and  specification of any method of this class as long as the general contract  of JavaFileObject is obeyed.  Since:     1.6",1,0,0,0,0,0,0,0,0,0,0,0
"Provides methods for locating tool providers, for example, providers of  compilers. This class complements the functionality of ServiceLoader.  Since:     1.6",1,0,0,1,0,0,1,0,0,0,0,0
"Returns the class loader for tools provided with this platform. This does not include user-installed tools. Use the service provider mechanism for locating user installed tools.  Returns: the class loader for tools provided with this platform or null if no tools are provided",1,0,1,0,0,0,0,0,0,0,0,1
"This exception indicates that the request carried an invalid transaction  context. For example, this exception could be raised if an error occured  when trying to register a resource.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"The XAException is thrown by the Resource Manager (RM) to inform the  Transaction Manager of an error encountered by the involved transaction.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Create an XAException.",0,0,0,0,0,0,0,0,0,0,0,1
"Utility class to contain basic XML values as constants.  Since:     1.5 See Also:     Extensible Markup Language (XML) 1.1, Extensible Markup Language (XML)     1.0 (Second Edition), XML 1.0 Second Edition Specification Errata,      Namespaces in XML 1.1, Namespaces in XML, Namespaces in XML Errata,      XML Schema Part 1: Structures",1,0,0,0,0,0,0,0,0,0,1,0
" Namespace URI to use to represent that there is no Namespace.  Defined by the Namespace specification to be .  See Also: Namespaces in XML, 5.2 Namespace Defaulting, Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Gets the JAXB object associated with the given XML element.  Once a JAXB object tree is associated with an XML fragment, this method enables navigation between the two trees.  An association between an XML element and a JAXB object is established by the unmarshal, marshal and update methods. Note that this association is partial; not all XML elements have associated JAXB objects, and not all JAXB objects have associated XML elements.  Returns: null if the specified XML node is not known to this Binder, or if it is not associated with a JAXB object. Throws: IllegalArgumentException - If the node parameter is null",1,1,0,0,0,0,1,0,0,0,0,0
"Allow an application to register a ValidationEventHandler.  The ValidationEventHandler will be called by the JAXB Provider if any validation errors are encountered during calls to any of the Binder unmarshal, marshal and update methods.  Calling this method with a null parameter will cause the Binder to revert back to the default default event handler.  Parameters: handler - the validation event handler Throws: JAXBException - if an error was encountered while setting the event handler",1,0,0,0,0,0,0,1,0,0,0,1
"Converts the string argument into a float value.  Parameters: lexicalXSDFloat - A string containing lexical representation of xsd:float. Returns: A float value represented by the string argument. Throws: NumberFormatException - lexicalXSDFloat is not a valid string representation of a float value.",1,0,0,0,0,0,0,0,0,0,0,1
"This is the root exception class for all JAXB exceptions.  Since:     JAXB1.0 See Also:     JAXBContext, Marshaller, Unmarshaller, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Returns a short description of this JAXBException.  Overrides: toString in class Throwable Returns: a string representation of this throwable.",1,0,0,0,0,0,0,0,0,0,0,0
"Provide access to JAXB xml binding data for a JAXB object.  Intially, the intent of this class is to just conceptualize how a JAXB  application developer can access xml binding information, independent if  binding model is java to schema or schema to java. Since accessing the XML  element name related to a JAXB element is a highly requested feature,  demonstrate access to this binding information. The factory method to get a  JAXBIntrospector instance is JAXBContext.createJAXBIntrospector().  Since:     JAXB2.0 See Also:     JAXBContext.createJAXBIntrospector()",0,0,0,1,0,1,0,0,0,0,0,0
"This event indicates that a problem was encountered resolving an ID/IDREF.  Since:     JAXB1.0 See Also:     Validator, ValidationEventHandler",1,0,0,0,0,0,0,0,0,0,0,0
"This exception indicates that an error was encountered while getting or  setting a property.  Since:     JAXB1.0 See Also:     JAXBContext, Validator, Unmarshaller, Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
"Construct a PropertyException with the specified detail message, vendor specific errorCode, and linkedException.  Parameters: message - a description of the exception errorCode - a string specifying the vendor specific error code exception - the linked exception",1,0,0,0,0,0,0,0,0,0,0,0
"Register an instance of an implementation of this class with Unmarshaller  to externally listen for unmarshal events.  This class enables pre and post processing of an instance of a JAXB mapped  class as XML data is unmarshalled into it. The event callbacks are called  when unmarshalling XML content into a JAXBElement instance or a JAXB mapped  class that represents a complex type definition. The event callbacks are  not called when unmarshalling to an instance of a Java datatype that  represents a simple type definition.  External listener is one of two different mechanisms for defining unmarshal  event callbacks. See Unmarshal Event Callbacks for an overview.  (@link \#setListener(Listener)} (@link \#getListener()}  Since:     JAXB2.0",1,0,0,0,0,1,0,0,0,0,0,0
"Unmarshal XML data from the specified XML Source by declaredType and return the resulting content tree.  Implements Unmarshal by Declared Type  See SAX 2.0 Parser Pluggability  Parameters: source - the XML Source to unmarshal XML data from (providers are only required to support SAXSource, DOMSource, and StreamSource) declaredType - appropriate JAXB mapped class to hold source's xml root element Returns: Java content rooted by JAXB Element Throws: JAXBException - If any unexpected errors occur while unmarshalling UnmarshalException - If the ValidationEventHandler returns false from its handleEvent method or the Unmarshaller is unable to perform the XML to Java binding. See Unmarshalling XML Data IllegalArgumentException - If any parameter is null Since: JAXB2.0",1,0,0,0,0,0,0,0,0,0,0,1
"Unmarshal root element to JAXB mapped declaredType and return the resulting content tree.  This method implements unmarshal by declaredType.  This method assumes that the parser is on a START_DOCUMENT or START_ELEMENT event. Unmarshalling will be done from this start event to the corresponding end event. If this method returns successfully, the reader will be pointing at the token right after the end event.  Parameters: reader - The parser to be read. declaredType - appropriate JAXB mapped class to hold reader's START_ELEMENT XML data. Returns: content tree rooted by JAXB Element representation Throws: JAXBException - If any unexpected errors occur while unmarshalling UnmarshalException - If the ValidationEventHandler returns false from its handleEvent method or the Unmarshaller is unable to perform the XML to Java binding. See Unmarshalling XML Data IllegalArgumentException - If any parameter is null Since: JAXB2.0",1,0,0,0,0,0,1,0,0,0,0,0
"Associates a configured instance of XmlAdapter with this unmarshaller.  This is a convenience method that invokes setAdapter(adapter.getClass(),adapter);.  Throws: IllegalArgumentException - if the adapter parameter is null. UnsupportedOperationException - if invoked agains a JAXB 1.0 implementation. Since: JAXB2.0 See Also: setAdapter(Class,XmlAdapter)",1,0,0,0,0,0,0,0,0,0,0,0
"Converts an element (and its descendants) from/to DOM (or similar)  representation.  Implementations of this interface will be used in conjunction with  XmlAnyElement annotation to map an element of XML into a representation of  infoset such as W3C DOM.  Implementations hide how a portion of XML is converted into/from such  DOM-like representation, allowing JAXB providers to work with arbitrary  such library.  This interface is intended to be implemented by library writers and  consumed by JAXB providers. None of those methods are intended to be called  from applications.  Since:     JAXB2.0",1,0,0,1,0,0,0,0,0,1,0,0
"This method is called when a JAXB provider needs to marshal an element to XML.  If non-null, the returned Source must contain a whole document rooted at one element, which will then be weaved into a bigger document that the JAXB provider is marshalling.  Parameters: errorHandler - Receives any errors happened during the process of converting an element into a Source. The caller must provide a non-null error handler. Returns: null if there was an error. The error should have been reported to the handler.",1,0,1,0,0,0,0,0,0,0,0,0
"Controls the ordering of fields and properties in a class.   Usage  @XmlAccessorOrder annotation can be used with the following program  elements:      * package     * a top level class  See Package Specification in javax.xml.bind package javadoc for  additional common information.  The effective XmlAccessOrder on a class is determined as follows:      * If there is a @XmlAccessorOrder on a class, then it is used.     * Otherwise, if a @XmlAccessorOrder exists on one of its super classes,       then it is inherited (by the virtue of Inherited)     * Otherwise, the @XmlAccessorOrder on the package of the class is used,       if it's there.     * Otherwise XmlAccessOrder.UNDEFINED.  This annotation can be used with the following annotations: XmlType,  XmlRootElement, XmlAccessorType, XmlSchema, XmlSchemaType, XmlSchemaTypes,  , XmlJavaTypeAdapter. It can also be used with the following annotations at  the package level: XmlJavaTypeAdapter.  Since:     JAXB2.0 See Also:     XmlAccessOrder  Optional Element Summary  XmlAccessOrder 	value                 value   public abstract XmlAccessOrder value      Default:         javax.xml.bind.annotation.XmlAccessOrder.UNDEFINED Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,1,0,0,0,0,0,1,0,0,0
"Controls whether fields or Javabean properties are serialized by default.  Usage  @XmlAccessorType annotation can be used with the following program  elements:      * package     * a top level class  See Package Specification in javax.xml.bind.package javadoc for  additional common information.  This annotation provides control over the default serialization of  properties and fields in a class.  The annotation @XmlAccessorType on a package applies to all classes in the  package. The following inheritance semantics apply:      * If there is a @XmlAccessorType on a class, then it is used.     * Otherwise, if a @XmlAccessorType exists on one of its super classes,       then it is inherited.     * Otherwise, the @XmlAccessorType on a package is inherited.  Defaulting Rules:  By default, if @XmlAccessorType on a package is absent, then the following  package level annotation is assumed.   @XmlAccessorType(XmlAccessType.PUBLIC_MEMBER)   By default, if @XmlAccessorType on a class is absent, and none of its super  classes is annotated with @XmlAccessorType, then the following default on  the class is assumed:   @XmlAccessorType(XmlAccessType.PUBLIC_MEMBER)   This annotation can be used with the following annotations: XmlType,  XmlRootElement, XmlAccessorOrder, XmlSchema, XmlSchemaType, XmlSchemaTypes , , XmlJavaTypeAdapter. It can also be used with the following annotations  at the package level: XmlJavaTypeAdapter.  Since:     JAXB2.0 See Also:     XmlAccessType  Optional Element Summary  XmlAccessType 	value           Specifies whether fields or properties are serialized.     value   public abstract XmlAccessType value      Specifies whether fields or properties are serialized.      See Also:         XmlAccessType     Default:         javax.xml.bind.annotation.XmlAccessType.PUBLIC_MEMBER Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,1,0,0,0,0,0,0,0,1
"Maps a JavaBean property to XML infoset representation and/or JAXB element.  This annotation serves as a catch-all property while unmarshalling xml  content into a instance of a JAXB annotated class. It typically annotates a  multi-valued JavaBean property, but it can occur on single value JavaBean  property. During unmarshalling, each xml element that does not match a  static @XmlElement or @XmlElementRef annotation for the other JavaBean  properties on the class, is added to this catch-all property.   Usages:   @XmlAnyElement public Element[] others;  // Collection of Element or JAXB elements. @XmlAnyElement(lax=true) public Object[] others;  @XmlAnyElement private List<Element> nodes;  @XmlAnyElement private Element node;    Restriction usage constraints  This annotation is mutually exclusive with XmlElement, XmlAttribute,  XmlValue, XmlElements, XmlID, and XmlIDREF.  There can be only one XmlAnyElement annotated JavaBean property in a class  and its super classes.   Relationship to other annotations  This annotation can be used with XmlJavaTypeAdapter, so that users can map  their own data structure to DOM, which in turn can be composed into XML.  This annotation can be used with XmlMixed like this:   // List of java.lang.String or DOM nodes. @XmlAnyElement @XmlMixed List<Object> others;    Schema To Java example  The following schema would produce the following Java class:             class Foo { int a; int b; @XmlAnyElement List<Element> any; }   It can unmarshal instances like    1   // this will be bound to DOM, because unmarshalling is orderless 3  5     // this will be bound to DOM, because the annotation doesn't remember namespaces.    The following schema would produce the following Java class:               class Bar extends Foo { int c; // Foo.getAny() also represents wildcard content for type definition bar. }   It can unmarshal instances like    1   // this will be bound to DOM, because unmarshalling is orderless 3  5     // this now goes to Bar.c   // this will go to Foo.any     Using XmlAnyElement with XmlElementRef  The XmlAnyElement annotation can be used with XmlElementRefs to designate  additional elements that can participate in the content tree.  The following schema would produce the following Java class:             class Foo { @XmlAnyElement(lax=true) @XmlElementRefs({ @XmlElementRef(name=a, type=JAXBElement.class) @XmlElementRef(name=b, type=JAXBElement.class) }) List<Object> others; }  @XmlRegistry class ObjectFactory { ... @XmlElementDecl(name = a, namespace = , scope = Foo.class) JAXBElement<Integer> createFooA( Integer i ) { ... }  @XmlElementDecl(name = b, namespace = , scope = Foo.class) JAXBElement<Integer> createFooB( Integer i ) { ... }   It can unmarshal instances like    1     // this will unmarshal to a JAXBElement instance whose value is 1.   // this will unmarshal to a DOM Element. 3     // this will unmarshal to a JAXBElement instance whose value is 1.     W3C XML Schema lax wildcard emulation  The lax element of the annotation enables the emulation of the lax  wildcard semantics. For example, when the Java source code is annotated  like this:   @XmlRootElement class Foo { @XmlAnyElement(lax=true) public Object[] others; }   then the following document will unmarshal like this:        Foo foo = unmarshal(); // 1 for 'unknown', another for 'foo' assert foo.others.length==2; // 'unknown' unmarshals to a DOM element assert foo.others[0] instanceof Element; // because of lax=true, the 'foo' element eagerly // unmarshals to a Foo object. assert foo.others[1] instanceof Foo;   Since:     JAXB2.0  Optional Element Summary  boolean 	lax           Controls the unmarshaller behavior when it sees elements known to  the current JAXBContext.  Class<? extends DomHandler> 	value           Specifies the DomHandler which is responsible for actually  converting XML from/to a DOM-like data structure.     lax   public abstract boolean lax      Controls the unmarshaller behavior when it sees elements known to the     current JAXBContext.       When false      If false, all the elements that match the property will be unmarshalled     to DOM, and the property will only contain DOM elements.       When true      If true, when an element matches a property marked with XmlAnyElement      is known to JAXBContext (for example, there's a class with      XmlRootElement that has the same tag name, or there's XmlElementDecl      that has the same tag name), the unmarshaller will eagerly unmarshal     this element to the JAXB object, instead of unmarshalling it to DOM.     Additionally, if the element is unknown but it has a known xsi:type,     the unmarshaller eagerly unmarshals the element to a JAXBElement, with     the unknown element name and the JAXBElement value is set to an     instance of the JAXB mapping of the known xsi:type.      As a result, after the unmarshalling, the property can become     heterogeneous; it can have both DOM nodes and some JAXB objects at the     same time.      This can be used to emulate the lax wildcard semantics of the W3C XML     Schema.      Default:         false   value   public abstract Class<? extends DomHandler> value      Specifies the DomHandler which is responsible for actually converting     XML from/to a DOM-like data structure.      Default:         javax.xml.bind.annotation.W3CDomHandler.class Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,1,1,0,0,1,0,1,0,0,0
"Used in XmlElement.type() to signal that the type be inferred from the  signature of the property.",1,0,0,0,0,0,1,0,0,0,0,0
"Maps a JavaBean property to a XML element derived from property's type.  Usage  @XmlElementRef annotation can be used with a JavaBean property or from  within XmlElementRefs  This annotation dynamically associates an XML element name with the  JavaBean property. When a JavaBean property is annotated with XmlElement,  the XML element name is statically derived from the JavaBean property name.  However, when this annotation is used, the XML element name is derived from  the instance of the type of the JavaBean property at runtime.   XML Schema substitution group support  XML Schema allows a XML document author to use XML element names that were  not statically specified in the content model of a schema using  substitution groups. Schema derived code provides support for substitution  groups using an element property, (section 5.5.5, Element Property of  JAXB 2.0 specification). An element property method signature is of the  form:   public void setTerm(JAXBElement<? extends Operator>); public JAXBElement<? extends Operator> getTerm();   An element factory method annotated with XmlElementDecl is used to create a  JAXBElement instance, containing an XML element name. The presence of  @XmlElementRef annotation on an element property indicates that the element  name from JAXBElement instance be used instead of deriving an XML element  name from the JavaBean property name.  The usage is subject to the following constraints:      * If the collection item type (for collection property) or property       type (for single valued property) is JAXBElement, then        @XmlElementRef}.name() and @XmlElementRef.namespace() must point an       element factory method with an @XmlElementDecl annotation in a class       annotated with @XmlRegistry (usually ObjectFactory class generated by       the schema compiler) :           o @XmlElementDecl.name() must equal @XmlElementRef.name()           o @XmlElementDecl.namespace() must equal             @XmlElementRef.namespace().     * If the collection item type (for collection property) or property       type (for single valued property) is not JAXBElement, then the type       referenced by the property or field must be annotated with        XmlRootElement.     * This annotation can be used with the following annotations:        XmlElementWrapper, XmlJavaTypeAdapter.  See Package Specification in javax.xml.bind.package javadoc for  additional common information.  Example 1: Ant Task Example  The following Java class hierarchy models an Ant build script. An Ant task  corresponds to a class in the class hierarchy. The XML element name of an  Ant task is indicated by the @XmlRootElement annotation on its  corresponding class.   @XmlRootElement(name=target) class Target { // The presence of @XmlElementRef indicates that the XML // element name will be derived from the @XmlRootElement // annotation on the type (for e.g. jar for JarTask). @XmlElementRef List<Task> tasks; }  abstract class Task { }  @XmlRootElement(name=jar) class JarTask extends Task { ... }  @XmlRootElement(name=javac) class JavacTask extends Task { ... }  <!-- XML Schema fragment --> <xs:element name=target type=Target> <xs:complexType name=Target> <xs:sequence> <xs:choice maxOccurs=unbounded> <xs:element ref=jar> <xs:element ref=javac> </xs:choice> </xs:sequence> </xs:complexType>    Thus the following code fragment:   Target target = new Target(); target.tasks.add(new JarTask()); target.tasks.add(new JavacTask()); marshal(target);   will produce the following XML output:     ....   ....     It is not an error to have a class that extends Task that doesn't have  XmlRootElement. But they can't show up in an XML instance (because they  don't have XML element names).  Example 2: XML Schema Susbstitution group support  The following example shows the annotations for XML Schema substitution  groups. The annotations and the ObjectFactory are derived from the schema.   @XmlElement class Math { //  The value of type()is //  JAXBElement.class , which indicates the XML //  element name ObjectFactory - in general a class marked //  with @XmlRegistry. (See ObjectFactory below) // //  The name() is operator, a pointer to a // factory method annotated with a //  XmlElementDecl with the name operator. Since //  operator is the head of a substitution group that //  contains elements add and sub elements, operator //  element can be substituted in an instance document by //  elements add or sub. At runtime, JAXBElement //  instance contains the element name that has been //  substituted in the XML document. // @XmlElementRef(type=JAXBElement.class,name=operator) JAXBElement<? extends Operator> term; }  @XmlRegistry class ObjectFactory { @XmlElementDecl(name=operator) JAXBElement<Operator> createOperator(Operator o) {...} @XmlElementDecl(name=add,substitutionHeadName=operator) JAXBElement<Operator> createAdd(Operator o) {...} @XmlElementDecl(name=sub,substitutionHeadName=operator) JAXBElement<Operator> createSub(Operator o) {...} }  class Operator { ... }   Thus, the following code fragment   Math m = new Math(); m.term = new ObjectFactory().createAdd(new Operator()); marshal(m);   will produce the following XML output:   <math> <add>...</add> </math>   Since:     JAXB2.0 See Also:     XmlElementRefs  Optional Element Summary  String 	name              String 	namespace           This parameter and name() are used to determine the XML element  for the JavaBean property.  Class 	type           The Java type being referenced.     type   public abstract Class type      The Java type being referenced.      If the value is DEFAULT.class, the type is inferred from the the type     of the JavaBean property.      Default:         javax.xml.bind.annotation.XmlElementRef.DEFAULT.class   namespace   public abstract String namespace      This parameter and name() are used to determine the XML element for the     JavaBean property.      If type() is JAXBElement.class , then namespace() and name() point to a     factory method with XmlElementDecl. The XML element name is the element     name from the factory method's XmlElementDecl annotation or if an     element from its substitution group (of which it is a head element) has     been substituted in the XML document, then the element name is from the      XmlElementDecl on the substituted element.      If type() is not JAXBElement.class, then the XML element name is the     XML element name statically associated with the type using the     annotation XmlRootElement on the type. If the type is not annotated     with an XmlElementDecl, then it is an error.      If type() is not JAXBElement.class, then this value must be .      Default:            name   public abstract String name      See Also:         namespace()     Default:         \#\#default Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,1,1,0,0,0,1,1,1,0,1,0
"Used in XmlSchemaType.type() to signal that the type be inferred from the  signature of the property.",1,0,0,1,0,0,0,0,0,0,0,0
"Maps a Java type to a simple schema built-in type.  Usage  @XmlSchemaType annotation can be used with the following program elements:      * a JavaBean property     * field     * package  @XmlSchemaType annotation defined for Java type applies to all references  to the Java type from a property/field. A @XmlSchemaType annotation  specified on the property/field overrides the @XmlSchemaType annotation  specified at the package level.  This annotation can be used with the following annotations: XmlElement,  XmlAttribute.  Example 1: Customize mapping of XMLGregorianCalendar on the field.   //Example: Code fragment public class USPrice { @XmlElement @XmlSchemaType(name=date) public XMLGregorianCalendar date; }  <!-- Example: Local XML Schema element --> <xs:complexType name=USPrice/> <xs:sequence> <xs:element name=date type=xs:date/> </sequence> </xs:complexType>   Example 2: Customize mapping of XMLGregorianCalendar at package level   package foo; @javax.xml.bind.annotation.XmlSchemaType( name=date, type=javax.xml.datatype.XMLGregorianCalendar.class) }   Since:     JAXB2.0  Required Element Summary  String 	name               Optional Element Summary  String 	namespace              Class 	type           If this annotation is used at the package level, then value of  the type() must be specified.    Element Detail   name   public abstract String name   namespace   public abstract String namespace      Default:         http://www.w3.org/2001/XMLSchema   type   public abstract Class type      If this annotation is used at the package level, then value of the     type() must be specified.      Default:         javax.xml.bind.annotation.XmlSchemaType.DEFAULT.class Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",0,0,0,1,0,0,0,0,1,0,0,0
"Used in XmlJavaTypeAdapter.type() to signal that the type be inferred from  the signature of the field, property, parameter or the class.",1,0,0,0,0,0,1,0,0,0,0,0
"Add MIME data as an attachment and return attachment's content-id, cid.  This method is called by JAXB marshal process for each element/attribute typed as {http://ws-i.org/profiles/basic/1.1/xsd}swaRef. The MIME-based package processor implementing this method is responsible for attaching the specified data to a MIME attachment, and generating a content-id, cid, that uniquely identifies the attachment within the MIME-based package.  Caller inserts the returned content-id, cid, into the XML content being marshalled.  Parameters: data - represents the data to be attached. Must be non-null. Returns: must be a valid URI used as cid. Must satisfy Conformance Requirement R2928 from WS-I Attachments Profile Version 1.0.",1,0,0,0,0,1,1,1,0,0,1,0
"Description copied from interface: Marshaller Marshal the content tree rooted at jaxbElement into a XMLStreamWriter.  Specified by: marshal in interface Marshaller Parameters: obj - The content tree to be marshalled. writer - XML will be sent to this writer. Throws: JAXBException - If any unexpected problem occurs during the marshalling. MarshalException - If the ValidationEventHandler returns false from its handleEvent method or the Marshaller is unable to marshal obj (or any object reachable from obj). See Marshalling a JAXB element .",1,0,0,0,0,0,0,0,0,0,1,0
"Description copied from interface: Unmarshaller Unmarshal XML data from the specified SAX InputSource and return the resulting content tree.  Implements Unmarshal Global Root Element.  Specified by: unmarshal in interface Unmarshaller Parameters: source - the input source to unmarshal XML data from Returns: the newly created root object of the java content tree Throws: JAXBException - If any unexpected errors occur while unmarshalling UnmarshalException - If the ValidationEventHandler returns false from its handleEvent method or the Unmarshaller is unable to perform the XML to Java binding. See Unmarshalling XML Data",1,0,0,0,0,1,0,0,0,0,0,1
"Return the current event handler or the default event handler if one hasn't been set.  Specified by: getEventHandler in interface Unmarshaller Returns: the current ValidationEventHandler or the default event handler if it hasn't been set Throws: JAXBException - if an error was encountered while getting the current event handler",1,0,0,0,0,0,0,0,0,0,0,1
"Description copied from interface: Unmarshaller Unmarshal XML data from the specified XML Source by declaredType and return the resulting content tree.  Implements Unmarshal by Declared Type  See SAX 2.0 Parser Pluggability  Specified by: unmarshal in interface Unmarshaller Parameters: source - the XML Source to unmarshal XML data from (providers are only required to support SAXSource, DOMSource, and StreamSource) expectedType - appropriate JAXB mapped class to hold source's xml root element Returns: Java content rooted by JAXB Element Throws: JAXBException - If any unexpected errors occur while unmarshalling UnmarshalException - If the ValidationEventHandler returns false from its handleEvent method or the Unmarshaller is unable to perform the XML to Java binding. See Unmarshalling XML Data",0,0,0,0,0,0,1,0,0,0,0,0
"JAXB 1.0 only default validation event handler. This is the default handler  for all objects created from a JAXBContext that is managing schema-derived  code generated by a JAXB 1.0 binding compiler.  This handler causes the unmarshal and validate operations to fail on the  first error or fatal error.  This handler is not the default handler for JAXB mapped classes following  JAXB 2.0 or later versions. Default validation event handling has changed  and is specified in Unmarshaller and Marshaller.  Since:     JAXB1.0 See Also:     Unmarshaller, Validator, ValidationEventHandler",0,0,0,0,0,0,0,0,0,0,0,1
"Default implementation of the ValidationEvent interface.  JAXB providers are allowed to use whatever class that implements the  ValidationEvent interface. This class is just provided for a convenience.  Since:     JAXB1.0 See Also:     Validator, ValidationEventHandler, ValidationEvent,      ValidationEventLocator",0,0,0,1,0,0,0,0,0,0,0,0
"Creates an object with all fields unavailable.",1,0,0,0,0,0,0,0,0,0,0,0
"Creates a new instance that uses the specified Unmarshaller to unmarshal an object.  This JAXBResult object will use the specified Unmarshaller instance. It is the caller's responsibility not to use the same Unmarshaller for other purposes while it is being used by this object.  The primary purpose of this method is to allow the client to configure Unmarshaller. Unless you know what you are doing, it's easier and safer to pass a JAXBContext.  Parameters: _unmarshaller - the unmarshaller. This parameter must not be null. Throws: JAXBException - if an error is encountered while creating the JAXBResult or the Unmarshaller parameter is null.",1,0,1,1,0,0,1,1,0,0,0,0
"Returns the algorithm URI of this AlgorithmMethod.  Returns: the algorithm URI of this AlgorithmMethod",1,0,0,0,0,0,0,0,0,0,0,1
"The purpose of the key that is to be selected.",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the cause of this KeySelectorException or null if the cause is nonexistent or unknown. (The cause is the throwable that caused this KeySelectorException to get thrown.)  Overrides: getCause in class Throwable Returns: the cause of this KeySelectorException or null if the cause is nonexistent or unknown.",1,1,0,0,0,0,0,0,0,0,0,1
"Indicates an exceptional condition thrown while dereferencing a  URIReference.  A URIReferenceException can contain a cause: another throwable that caused  this URIReferenceException to get thrown.  Since:     1.6 See Also:     URIDereferencer.dereference(URIReference, XMLCryptoContext),      RetrievalMethod.dereference(XMLCryptoContext), Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Contains common context information for XML cryptographic operations.  This interface contains methods for setting and retrieving properties that  affect the processing of XML signatures or XML encrypted structures.  Note that XMLCryptoContext instances can contain information and state  specific to the XML cryptographic structure it is used with. The results  are unpredictable if an XMLCryptoContext is used with multiple structures  (for example, you should not use the same XMLValidateContext instance to  validate two different XMLSignature objects).  Since:     1.6",0,0,0,0,0,0,0,0,0,0,0,0
"Registers the element's attribute specified by the namespace URI and local name to be of type ID. The attribute must have a non-empty value.  This implementation uses an internal HashMap to map the attribute's value to the specified element.  Parameters: element - the element namespaceURI - the namespace URI of the attribute (specify null if not applicable) localName - the local name of the attribute Throws: IllegalArgumentException - if localName is not an attribute of the specified element or it does not contain a specific value NullPointerException - if element or localName is null See Also: getElementById(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,1
"A DOM-specific XMLStructure. The purpose of this class is to allow a DOM  node to be used to represent extensible content (any elements or mixed  content) in XML Signature structures.  If a sequence of nodes is needed, the node contained in the DOMStructure  is the first node of the sequence and successive nodes can be accessed by  invoking Node.getNextSibling().  If the owner document of the DOMStructure is different than the target  document of an XMLSignature, the XMLSignature.sign(XMLSignContext) method  imports the node into the target document before generating the signature.  Since:     1.6",1,0,0,0,0,0,1,0,0,0,0,0
"Indicates an exceptional condition that occured while executing a transform  algorithm.  A TransformException can contain a cause: another throwable that caused  this TransformException to get thrown.  Since:     1.6 See Also:     Transform.transform(javax.xml.crypto.Data,     javax.xml.crypto.XMLCryptoContext), Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"Returns the Id of this XMLObject.  Returns: the Id (or null if not specified)",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the mime type of this XMLObject. The mime type is an optional attribute which describes the data within this XMLObject (independent of its encoding).  Returns: the mime type (or null if not specified)",1,1,0,0,0,0,0,0,0,0,0,1
"A representation of the XML SignatureValue element as defined in the W3C  Recommendation for XML-Signature Syntax and Processing. The XML Schema  Definition is defined as:   <element name=SignatureValue type=ds:SignatureValueType/> <complexType name=SignatureValueType> <simpleContent> <extension base=base64Binary> <attribute name=Id type=ID use=optional/> </extension> </simpleContent> </complexType>",0,0,0,0,0,0,0,0,1,0,1,0
"A representation of the XML Signature element as defined in the W3C  Recommendation for XML-Signature Syntax and Processing. This class contains  methods for signing and validating XML signatures with behavior as defined  by the W3C specification. The XML Schema Definition is defined as:   <element name=Signature type=ds:SignatureType/> <complexType name=SignatureType> <sequence> <element ref=ds:SignedInfo/> <element ref=ds:SignatureValue/> <element ref=ds:KeyInfo minOccurs=0/> <element ref=ds:Object minOccurs=0 maxOccurs=unbounded/> </sequence> <attribute name=Id type=ID use=optional/> </complexType>   An XMLSignature instance may be created by invoking one of the  newXMLSignature methods of the XMLSignatureFactory class.  If the contents of the underlying document containing the XMLSignature are  subsequently modified, the behavior is undefined.  Note that this class is named XMLSignature rather than Signature to avoid  naming clashes with the existing java.security.Signature class.  Since:     1.6 See Also:     XMLSignatureFactory.newXMLSignature(SignedInfo, KeyInfo),      XMLSignatureFactory.newXMLSignature(SignedInfo, KeyInfo, List, String,     String)",1,0,0,0,0,0,0,1,1,0,1,0
"Returns the optional Id of this XMLSignature.  Returns: the Id (may be null if not specified)",1,0,0,0,0,0,0,0,0,0,0,0
"Contains context information for validating XML Signatures. This interface  is primarily intended for type-safety.  Note that XMLValidateContext instances can contain information and state  specific to the XML signature structure it is used with. The results are  unpredictable if an XMLValidateContext is used with different signature  structures (for example, you should not use the same XMLValidateContext  instance to validate two different XMLSignature objects).  Supported Properties  The following properties can be set by an application using the  setProperty method.      * javax.xml.crypto.dsig.cacheReference: value must be a Boolean. This       property controls whether or not the Reference.validate method will       cache the dereferenced content and pre-digested input for subsequent       retrieval via the Reference.getDereferencedData and        Reference.getDigestInputStream methods. The default value if not       specified is Boolean.FALSE.  Since:     1.6 See Also:     XMLSignature.validate(XMLValidateContext),      Reference.validate(XMLValidateContext)",1,0,1,1,0,0,1,0,0,0,0,0
"Creates a DOMSignContext with the specified key selector, parent and next sibling nodes. The marshalled XMLSignature will be inserted as a child element of the specified parent node and immediately before the specified next sibling node.  Parameters: ks - the key selector parent - the parent node nextSibling - the next sibling node Throws: NullPointerException - if ks, parent or nextSibling is null",1,0,0,0,0,0,1,0,0,0,0,0
"A DOM-specific XMLValidateContext. This class contains additional methods  to specify the location in a DOM tree where an XMLSignature is to be  unmarshalled and validated from.  Note that the behavior of an unmarshalled XMLSignature is undefined if the  contents of the underlying DOM tree are modified by the caller after the  XMLSignature is created.  Also, note that DOMValidateContext instances can contain information and  state specific to the XML signature structure it is used with. The results  are unpredictable if a DOMValidateContext is used with different signature  structures (for example, you should not use the same DOMValidateContext  instance to validate two different XMLSignature objects).  Since:     1.6 See Also:     XMLSignatureFactory.unmarshalXMLSignature(XMLValidateContext)",1,0,0,1,0,0,0,0,0,0,0,0
"Returns a KeyInfoFactory that supports the requested XML processing mechanism and representation type (ex: DOM), as supplied by the specified provider. Note that the specified Provider object does not have to be registered in the provider list.  Parameters: mechanismType - the type of the XML processing mechanism and representation. See the Service Providers section of the API overview for a list of standard mechanism types. provider - the Provider object Returns: a new KeyInfoFactory Throws: NullPointerException - if mechanismType or provider are null NoSuchMechanismException - if a KeyInfoFactory implementation for the specified mechanism is not available from the specified Provider object See Also: Provider",1,0,0,0,0,0,0,0,0,0,0,1
"A representation of the XML KeyName element as defined in the W3C  Recommendation for XML-Signature Syntax and Processing. A KeyName object  contains a string value which may be used by the signer to communicate a  key identifier to the recipient. The XML Schema Definition is defined as:   <element name=KeyName type=string/>   A KeyName instance may be created by invoking the newKeyName method of the  KeyInfoFactory class, and passing it a String representing the name of the  key; for example:   KeyInfoFactory factory = KeyInfoFactory.getInstance(DOM); KeyName keyName = factory.newKeyName(Alice);   Since:     1.6 See Also:     KeyInfoFactory.newKeyName(String)",0,0,0,0,0,0,0,1,1,0,1,0
"A representation of the XML PGPData element as defined in the W3C  Recommendation for XML-Signature Syntax and Processing. A PGPData object is  used to convey information related to PGP public key pairs and signatures  on such keys. The XML Schema Definition is defined as:   <element name=PGPData type=ds:PGPDataType/> <complexType name=PGPDataType> <choice> <sequence> <element name=PGPKeyID type=base64Binary/> <element name=PGPKeyPacket type=base64Binary minOccurs=0/> <any namespace=\#\#other processContents=lax minOccurs=0 maxOccurs=unbounded/> </sequence> <sequence> <element name=PGPKeyPacket type=base64Binary/> <any namespace=\#\#other processContents=lax minOccurs=0 maxOccurs=unbounded/> </sequence> </choice> </complexType>   A PGPData instance may be created by invoking one of the newPGPData  methods of the KeyInfoFactory class, and passing it byte arrays  representing the contents of the PGP public key identifier and/or PGP key  material packet, and an optional list of elements from an external  namespace.  Since:     1.6 See Also:     KeyInfoFactory.newPGPData(byte[]), KeyInfoFactory.newPGPData(byte[],     byte[], List), KeyInfoFactory.newPGPData(byte[], List)",0,0,0,1,0,0,1,0,1,0,0,0
"Parameters for the XML Signature HMAC Algorithm. The parameters include an  optional output length which specifies the MAC truncation length in bits.  The resulting HMAC will be truncated to the specified number of bits. If  the parameter is not specified, then this implies that all the bits of the  hash are to be output. The XML Schema Definition of the HMACOutputLength  element is defined as:   <element name=HMACOutputLength minOccurs=0 type=ds:HMACOutputLengthType/> <simpleType name=HMACOutputLengthType> <restriction base=integer/> </simpleType>   Since:     1.6 See Also:     SignatureMethod, RFC 2104",0,0,0,0,0,0,0,0,1,0,1,0
"Creates an XPathFilter2ParameterSpec.  Parameters: xPathList - a list of one or more XPathType objects. The list is defensively copied to protect against subsequent modification. Throws: ClassCastException - if xPathList contains any entries that are not of type XPathType IllegalArgumentException - if xPathList is empty NullPointerException - if xPathList is null",0,0,0,1,0,0,0,0,0,0,0,1
"Represents the filter set operation.",0,0,0,0,0,0,0,0,0,0,0,1
"Type-safe enum class that represents six fields of the Duration class.  Since:     1.5",1,0,0,0,0,0,1,0,0,0,0,0
" A constant that represents the days field. ",0,0,0,0,0,0,0,0,0,0,0,1
"Set hours.  Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED.  Parameters: hour - value constraints summarized in hour field of date/time field mapping table. Throws: IllegalArgumentException - if hour parameter is outside value constraints for the field as specified in date/time field mapping table.",0,0,0,1,0,0,0,1,0,0,0,0
"Return timezone offset in minutes or DatatypeConstants.FIELD_UNDEFINED if this optional field is not defined.  Value constraints for this value are summarized in timezone field of date/time field mapping table.  See Also: setTimezone(int)",1,0,0,0,0,0,0,0,0,0,1,0
"Compare two instances of W3C XML Schema 1.0 date/time datatypes according to partial order relation defined in W3C XML Schema 1.0 Part 2, Section 3.2.7.3, Order relation on dateTime.  xsd:dateTime datatype field mapping to accessors of this class are defined in date/time field mapping table.  Parameters: xmlGregorianCalendar - Instance of XMLGregorianCalendar to compare Returns: The relationship between this XMLGregorianCalendar and the specified xmlGregorianCalendar as DatatypeConstants.LESSER, DatatypeConstants.EQUAL, DatatypeConstants.GREATER or DatatypeConstants.INDETERMINATE. Throws: NullPointerException - if xmlGregorianCalendar is null.",1,0,0,0,0,0,0,0,0,0,0,1
"Interface for read only XML Namespace context processing.  An XML Namespace has the properties:      * Namespace URI: Namespace name expressed as a URI to which the prefix       is bound     * prefix: syntactically, this is the part of the attribute name       following the XMLConstants.XMLNS_ATTRIBUTE (xmlns) in the Namespace       declaration  example: <element xmlns:prefix=http://Namespace-name-URI>  All get*(*) methods operate in the current scope for Namespace URI and  prefix resolution.  Note that a Namespace URI can be bound to multiple prefixes in the current  scope. This can occur when multiple XMLConstants.XMLNS_ATTRIBUTE (xmlns)  Namespace declarations occur in the same Start-Tag and refer to the same  Namespace URI. e.g.   <element xmlns:prefix1=http://Namespace-name-URI xmlns:prefix2=http://Namespace-name-URI>   This can also occur when the same Namespace URI is used in multiple  XMLConstants.XMLNS_ATTRIBUTE (xmlns) Namespace declarations in the  logical parent element hierarchy. e.g.   <parent xmlns:prefix1=http://Namespace-name-URI> <child xmlns:prefix2=http://Namespace-name-URI> ... </child> </parent>   A prefix can only be bound to a single Namespace URI in the current scope.  Since:     1.5 See Also:     javax.xml.XMLConstants for declarations of common XML values, XML     Schema Part2: Datatypes, Namespaces in XML, Namespaces in XML Errata",1,0,0,0,0,0,1,0,1,0,0,0
"QName constructor specifying the Namespace URI, local part and prefix.  If the Namespace URI is null, it is set to XMLConstants.NULL_NS_URI. This value represents no explicitly defined Namespace as defined by the Namespaces in XML specification. This action preserves compatible behavior with QName 1.0. Explicitly providing the XMLConstants.NULL_NS_URI value is the preferred coding style.  If the local part is null an IllegalArgumentException is thrown. A local part of  is allowed to preserve compatible behavior with QName 1.0.  If the prefix is null, an IllegalArgumentException is thrown. Use XMLConstants.DEFAULT_NS_PREFIX to explicitly indicate that no prefix is present or the prefix is not relevant.  The Namespace URI is not validated as a URI reference. The local part and prefix are not validated as a NCName as specified in Namespaces in XML.  Parameters: namespaceURI - Namespace URI of the QName localPart - local part of the QName prefix - prefix of the QName Throws: IllegalArgumentException - When localPart or prefix is null",1,1,0,0,0,0,0,1,0,1,1,1
"Reset this DocumentBuilder to its original configuration.  DocumentBuilder is reset to the same state as when it was created with DocumentBuilderFactory.newDocumentBuilder(). reset() is designed to allow the reuse of existing DocumentBuilders thus saving resources associated with the creation of new DocumentBuilders.  The reset DocumentBuilder is not guaranteed to have the same EntityResolver or ErrorHandler Objects, e.g. Object.equals(Object obj) . It is guaranteed to have a functionally equal EntityResolver and ErrorHandler.  Throws: UnsupportedOperationException - When implementation does not override this method. Since: 1.5",1,0,0,0,1,0,1,0,0,0,0,1
"Defines the API that wraps an XMLReader implementation class. In JAXP 1.0,  this class wrapped the Parser interface, however this interface was  replaced by the XMLReader. For ease of transition, this class continues to  support the same name and interface as well as supporting new methods. An  instance of this class can be obtained from the  SAXParserFactory.newSAXParser() method. Once an instance of this class is  obtained, XML can be parsed from a variety of input sources. These input  sources are InputStreams, Files, URLs, and SAX InputSources.  This static method creates a new factory instance based on a system  property setting or uses the platform default if no property has been  defined.  The system property that controls which Factory implementation to create is  named javax.xml.parsers.SAXParserFactory. This property names a class  that is a concrete subclass of this abstract class. If no property is  defined, a platform default will be used.  As the content is parsed by the underlying parser, methods of the given  HandlerBase or the DefaultHandler are called.  Implementors of this class which wrap an underlaying implementation can  consider using the ParserAdapter class to initially adapt their SAX1  implementation to work under this revised class.",1,0,0,0,0,1,1,1,0,0,0,0
"Parse the content described by the giving Uniform Resource Identifier (URI) as XML using the specified DefaultHandler.  Parameters: uri - The location of the content to be parsed. dh - The SAX DefaultHandler to use. Throws: IllegalArgumentException - If the uri is null. IOException - If any IO errors occur. SAXException - If any SAX errors occur during processing. See Also: DocumentHandler",0,0,0,0,0,0,0,0,0,0,0,0
"Gets the content of this AttachmentPart object as an InputStream as if a call had been made to getContent and no DataContentHandler had been registered for the content-type of this AttachmentPart.  Note that reading from the returned InputStream would result in consuming the data in the stream. It is the responsibility of the caller to reset the InputStream appropriately before calling a Subsequent API. If a copy of the raw attachment content is required then the getRawContentBytes() API should be used instead.  Returns: an InputStream from which the raw data contained by the AttachmentPart can be accessed. Throws: SOAPException - if there is no content set into this AttachmentPart object or if there was a data transformation error. Since: SAAJ 1.3 See Also: getRawContentBytes()",1,0,1,0,0,1,1,0,0,0,0,1
"A container for DetailEntry objects. DetailEntry objects give detailed  error information that is application-specific and related to the SOAPBody  object that contains it.  A Detail object, which is part of a SOAPFault object, can be retrieved  using the method SOAPFault.getDetail. The Detail interface provides two  methods. One creates a new DetailEntry object and also automatically adds  it to the Detail object. The second method gets a list of the DetailEntry  objects contained in a Detail object.  The following code fragment, in which sf is a SOAPFault object, gets its  Detail object (d), adds a new DetailEntry object to d, and then gets a list  of all the DetailEntry objects in d. The code also creates a Name object to  pass to the method addDetailEntry. The variable se, used to create the  Name object, is a SOAPEnvelope object.   Detail d = sf.getDetail(); Name name = se.createName(GetLastTradePrice, WOMBAT, http://www.wombat.org/trader); d.addDetailEntry(name); Iterator it = d.getDetailEntries();",1,1,0,0,0,1,1,1,1,0,0,0
"A representation of an XML name. This interface provides methods for  getting the local and namespace-qualified names and also for getting the  prefix associated with the namespace for the name. It is also possible to  get the URI of the namespace.  The following is an example of a namespace declaration in an element.   <wombat:GetLastTradePrice xmlns:wombat=http://www.wombat.org/trader>   (xmlns stands for XML namespace.) The following shows what the methods  in the Name interface will return.     * getQualifiedName will return prefix:LocalName =       WOMBAT:GetLastTradePrice     * getURI will return http://www.wombat.org/trader     * getLocalName will return GetLastTracePrice     * getPrefix will return WOMBAT  XML namespaces are used to disambiguate SOAP identifiers from  application-specific identifiers.  Name objects are created using the method SOAPEnvelope.createName, which  has two versions. One method creates Name objects with a local name, a  namespace prefix, and a namespace URI. and the second creates Name objects  with just a local name. The following line of code, in which se is a  SOAPEnvelope object, creates a new Name object with all three.   Name name = se.createName(GetLastTradePrice, WOMBAT, http://www.wombat.org/trader);   The following line of code gives an example of how a Name object can be  used. The variable element is a SOAPElement object. This code creates a new  SOAPElement object with the given name and adds it to element.   element.addChildElement(name);   The Name interface may be deprecated in a future release of SAAJ in favor  of javax.xml.namespace.QName  See Also:     SOAPEnvelope.createName, SOAPFactory.createName",1,1,1,0,0,0,1,1,1,0,0,0
"Returns: the resulting Tree that was created under the specified root Node. Since: SAAJ 1.3",1,0,0,0,0,0,0,0,0,0,0,0
"A factory for creating SOAPConnection objects. Implementation of this class  is optional. If SOAPConnectionFactory.newInstance() throws an  UnsupportedOperationException then the implementation does not support the  SAAJ communication infrastructure. Otherwise SOAPConnection objects can be  created by calling createConnection() on the newly created  SOAPConnectionFactory object.",1,0,0,0,0,0,0,1,0,0,0,0
" The default protocol: SOAP 1.1 for backwards compatibility.  Since: SAAJ 1.3 See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"An object representing an element of a SOAP message that is allowed but not  specifically prescribed by a SOAP specification. This interface serves as  the base interface for those objects that are specifically prescribed by a  SOAP specification.  Methods in this interface that are required to return SAAJ specific objects  may silently replace nodes in the tree as required to successfully return  objects of the correct type. See getChildElements() and javax.xml.soap for  details.",0,0,0,0,0,0,1,0,0,0,0,0
"Creates a new SOAPElement object initialized with the specified local name and prefix and adds the new element to this SOAPElement object.  Parameters: localName - a String giving the local name for the new element prefix - a String giving the namespace prefix for the new element Returns: the new SOAPElement object that was created Throws: SOAPException - if the prefix is not valid in the context of this SOAPElement or if there is an error in creating the SOAPElement object",1,0,0,0,0,0,0,0,0,0,0,0
"public class SOAPElementFactory      extends Object   SOAPElementFactory is a factory for XML fragments that will eventually end  up in the SOAP part. These fragments can be inserted as children of the  SOAPHeader or SOAPBody or SOAPEnvelope.  Elements created using this factory do not have the properties of an  element that lives inside a SOAP header document. These elements are copied  into the XML document tree when they are inserted.  See Also:     SOAPFactory",0,0,0,1,0,0,1,1,0,0,0,0
"Returns the SOAPHeader object for this SOAPEnvelope object.  A new SOAPMessage object is by default created with a SOAPEnvelope object that contains an empty SOAPHeader object. As a result, the method getHeader will always return a SOAPHeader object unless the header has been removed and a new one has not been added.  Returns: the SOAPHeader object or null if there is none Throws: SOAPException - if there is a problem obtaining the SOAPHeader object",1,0,0,0,0,0,0,0,0,0,0,1
"Retrieves the value of the MIME header whose name is Content-Location.  Returns: a String giving the value of the MIME header whose name is Content-Location See Also: setContentLocation(java.lang.String)",0,0,0,0,0,0,0,0,0,0,0,1
"A representation of a node whose value is text. A Text object may represent  text that is content or text that is a comment.",0,0,0,0,0,0,0,0,0,0,0,0
"An error class for reporting factory configuration errors.  Since:     1.6 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.  Parameters: reporter - the resolver to use to report non fatal errors",1,0,0,0,0,0,0,0,0,0,0,0
"Create a new XMLStreamWriter that writes to a writer  Parameters: stream - the writer to write to Throws: XMLStreamException",0,0,0,0,0,0,0,0,0,0,0,0
"This interface is used to report non-fatal errors. Only warnings should be  echoed through this interface.  Since:     1.6",0,0,1,0,0,0,0,0,0,0,0,0
"Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event. If the namespaceURI is null it is not checked for equality, if the localName is null it is not checked for equality.  Parameters: type - the event type namespaceURI - the uri of the event, may be null localName - the localName of the event, may be null Throws: XMLStreamException - if the required values are not matched.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns true if the cursor points to a character data event  Returns: true if the cursor points to character data, false otherwise",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE. This count excludes namespace definitions. Attribute indices are zero-based.  Returns: returns the number of attributes Throws: IllegalStateException - if this is not a START_ELEMENT or ATTRIBUTE",1,0,0,0,0,0,1,0,0,0,0,0
"The XMLStreamWriter interface specifies how to write XML. The  XMLStreamWriter does not perform well formedness checking on its input.  However the writeCharacters method is required to escape & , < and > For  attribute values the writeAttribute method will escape the above characters  plus  to ensure that all character content and attribute values are well  formed. Each NAMESPACE and ATTRIBUTE must be individually written.  XML Namespaces, javax.xml.stream.isRepairingNamespaces and write method  behaviour Method 	isRepairingNamespaces == true 	isRepairingNamespaces == false namespaceURI bound 	namespaceURI unbound 	namespaceURI bound 	namespaceURI  unbound writeAttribute(namespaceURI, localName, value) 	 prefix:localName=value  [1] 	 xmlns:{generated}=namespaceURI {generated}:localName=value 	  prefix:localName=value [1] 	 XMLStreamException writeAttribute(prefix, namespaceURI, localName, value) 	 bound to same  prefix: prefix:localName=value [1]  bound to different prefix: xmlns:{generated}=namespaceURI {generated}:localName=value 	  xmlns:prefix=namespaceURI prefix:localName=value [3] 	 bound to same  prefix: prefix:localName=value [1][2]  bound to different prefix: XMLStreamException[2] 	 xmlns:prefix=namespaceURI  prefix:localName=value [2][5] writeStartElement(namespaceURI, localName)  writeEmptyElement(namespaceURI, localName) 	 <prefix:localName> [1] 	  <{generated}:localName xmlns:{generated}=namespaceURI> 	  <prefix:localName> [1] 	 XMLStreamException writeStartElement(prefix, localName, namespaceURI)  writeEmptyElement(prefix, localName, namespaceURI) 	 bound to same prefix: <prefix:localName> [1]  bound to different prefix: <{generated}:localName xmlns:{generated}=namespaceURI> 	  <prefix:localName xmlns:prefix=namespaceURI> [4] 	 bound to same prefix: <prefix:localName> [1]  bound to different prefix: XMLStreamException 	 <prefix:localName>  Notes:     * [1] if namespaceURI == default Namespace URI, then no prefix is       written     * [2] if prefix ==  || null && namespaceURI == , then no prefix or       Namespace declaration is generated or written     * [3] if prefix ==  || null, then a prefix is randomly generated     * [4] if prefix ==  || null, then it is treated as the default       Namespace and no prefix is generated or written, an xmlns declaration       is generated and written if the namespaceURI is unbound     * [5] if prefix ==  || null, then it is treated as an invalid attempt       to define the default Namespace and an XMLStreamException is thrown  Since:     1.6 See Also:     XMLOutputFactory, XMLStreamReader",1,1,1,0,0,0,0,1,1,0,0,0
"Writes an attribute to the output stream  Parameters: prefix - the prefix for this attribute namespaceURI - the uri of the prefix for this attribute localName - the local name of the attribute value - the value of the attribute Throws: IllegalStateException - if the current state does not allow Attribute writing XMLStreamException - if the namespace URI has not been bound to a prefix and javax.xml.stream.isRepairingNamespaces has not been set to true",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the QName for this attribute",1,0,0,0,0,0,0,0,0,0,0,0
"This describes the interface to Characters events. All text events get  reported as Characters events. Content, CData and whitespace are all  reported as Characters events. IgnorableWhitespace, in most cases, will be  set to false unless an element declaration of element content is present  for the current element.  Since:     1.6",1,1,0,0,0,0,0,0,0,0,0,0
"An interface for comment events  Since:     1.6",0,0,0,0,0,0,0,0,0,0,0,1
"An interface for handling Entity events. This event reports entities that  have not been resolved and reports their replacement text unprocessed (if  available). This event will be reported if  javax.xml.stream.isReplacingEntityReferences is set to false. If  javax.xml.stream.isReplacingEntityReferences is set to true entity  references will be resolved transparently. Entities are handled in two  possible ways: (1) If javax.xml.stream.isReplacingEntityReferences is set  to true all entity references are resolved and reported as markup  transparently. (2) If javax.xml.stream.isReplacingEntityReferences is set  to false Entity references are reported as an EntityReference Event.  Since:     1.6",1,0,0,0,0,1,1,0,0,0,0,0
"The notation name.",0,0,0,0,0,0,0,0,0,0,0,0
"Construct an empty filter with no parent.",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: XMLStreamReader Returns the XML type of the attribute at the provided index  Specified by: getAttributeType in interface XMLStreamReader Parameters: index - the position of the attribute Returns: the XML type of the attribute",1,0,0,0,0,0,0,0,0,0,0,0
"This interface defines an event consumer interface. The contract of the of  a consumer is to accept the event. This interface can be used to mark an  object as able to receive events. Add may be called several times in  immediate succession so a consumer must be able to cache events it hasn't  processed yet.  Since:     1.6",1,1,1,1,0,0,0,0,0,0,0,1
" cdata-section-elements = expanded names.  cdata-section-elements specifies a whitespace delimited list of the names of elements whose text node children should be output using CDATA sections. Note that these names must use the format described in the section Qualfied Name Representation in javax.xml.transform.  See Also: section 16 of the XSL Transformations (XSLT) W3C Recommendation., Constant Field Values ",1,0,1,0,0,0,0,0,0,0,1,0
"An object that implements this interface is the runtime representation of  processed transformation instructions.  Templates must be threadsafe for a given instance over multiple threads  running concurrently, and may be used multiple times in a given session.",0,1,1,0,0,0,0,0,0,0,0,0
"Set an object that will be used to resolve URIs used in document().  If the resolver argument is null, the URIResolver value will be cleared and the transformer will no longer have a resolver.  Parameters: resolver - An object that implements the URIResolver interface, or null.",1,0,0,0,0,0,0,0,0,0,0,0
"A TransformerFactory instance can be used to create Transformer and  Templates objects.  The system property that determines which Factory implementation to create  is named javax.xml.transform.TransformerFactory. This property names a  concrete subclass of the TransformerFactory abstract class. If the property  is not defined, a platform default is be used.",1,0,0,0,0,0,1,0,0,0,0,0
"An object that implements this interface that can be called by the  processor to turn a URI used in document(), xsl:import, or xsl:include into  a Source object.",1,0,0,0,0,0,0,0,0,0,0,0
"Indicates the position of a node in a source DOM, intended primarily for  error reporting. To use a DOMLocator, the receiver of an error must  downcast the SourceLocator object returned by an exception. A Transformer  may use this object for purposes other than error reporting, for instance,  to indicate the source node that originated a result node.",1,0,0,1,0,0,0,0,0,0,0,0
"Set the node that will contain the result DOM tree.  In practice, the node should be a Document node, a DocumentFragment node, or a Element node. In other words, a node that accepts children.  An IllegalStateException is thrown if nextSibling is not null and node is not a parent of nextSibling. An IllegalStateException is thrown if node is null and nextSibling is not null.  Parameters: node - The node to which the transformation will be appended. Throws: IllegalStateException - If nextSibling is not null and nextSibling is not a child of node or node is null and nextSibling is not null .",1,0,1,0,0,0,1,0,0,0,0,0
"Set the SAX InputSource to be used for the Source.  Parameters: inputSource - A valid InputSource reference.",0,0,0,0,0,0,0,0,0,0,0,1
"A TransformerHandler listens for SAX ContentHandler parse events and  transforms them to a Result.",1,0,0,0,0,0,0,0,0,0,0,0
"Acts as a holder for an XML Source in the form of a StAX reader,i.e.  XMLStreamReader or XMLEventReader. StAXSource can be used in all cases that  accept a Source, e.g. Transformer, Validator which accept Source as input.  StAXSources are consumed during processing and are not reusable.  Since:     1.6 See Also:     JSR 173: Streaming API for XML, XMLStreamReader, XMLEventReader",1,0,0,1,0,0,0,0,0,0,0,0
"Get the XMLEventReader used by this StAXSource.  XMLEventReader will be null. if this StAXSource was created with a XMLStreamReader.  Returns: XMLEventReader used by this StAXSource.",1,0,0,0,0,0,1,0,0,0,0,1
"Acts as an holder for a transformation Source in the form of a stream of  XML markup.  Note: Due to their internal use of either a Reader or InputStream  instance, StreamSource instances may only be used once.",1,0,1,0,0,0,0,0,0,0,0,0
"Get the character stream that was set with setReader.  Returns: The character stream that was set with setReader, or null if setReader or the Reader constructor was not called.",0,0,0,0,0,0,0,0,0,0,0,0
"Factory that creates SchemaFactory.  DO NOT USE THIS CLASS  This class was introduced as a part of an early proposal during the JSR-206  standardization process. The proposal was eventually abandoned but this  class accidentally remained in the source tree, and made its way into the  final version.  This class does not participate in any JAXP 1.3 or JAXP 1.4 processing. It  must not be used by users or JAXP implementations.  Since:     1.5",0,0,1,0,0,0,0,0,0,1,0,1
"Constructor for derived classes.  The constructor does nothing.  Derived classes must create Validator objects that have null ErrorHandler and null LSResourceResolver.",1,0,1,0,0,0,0,0,0,0,0,1
"The Action annotation allows explicit association of a WS-Addressing  Action message addressing property with input, output, and fault messages  of the mapped WSDL operation.  In this version of JAX-WS there is no standard way to specify Action  values in a WSDL and there is no standard default value. It is intended  that, after the W3C WG on WS-Addressing has defined these items in a  recommendation, a future version of JAX-WS will require the new standards.  Since:     JAX-WS 2.1 See Also:     Addressing, FaultAction  Optional Element Summary  FaultAction[] 	fault           Explicit value of the WS-Addressing Action message addressing  property for the fault message(s) of the operation.  String 	input           Explicit value of the WS-Addressing Action message addressing  property for the input message of the operation.  String 	output           Explicit value of the WS-Addressing Action message addressing  property for the output message of the operation.     input   public abstract String input      Explicit value of the WS-Addressing Action message addressing property     for the input message of the operation.      Default:            output   public abstract String output      Explicit value of the WS-Addressing Action message addressing property     for the output message of the operation.      Default:            fault   public abstract FaultAction[] fault      Explicit value of the WS-Addressing Action message addressing property     for the fault message(s) of the operation. Each exception that is     mapped to a fault and requires an explicit WS-Addressing Action      message addressing property, needs to be specified as a value in this     property using FaultAction annotation.      Default:         {} Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,0,0,0,1,0,0,1,0,0
"Invoke a service operation synchronously. The client is responsible for ensuring that the msg object when marshalled is formed according to the requirements of the protocol binding in use.  Parameters: msg - An object that will form the message or payload of the message used to invoke the operation. Returns: The response message or message payload to the operation invocation. Throws: WebServiceException - If a fault occurs during communication with the service WebServiceException - If there is any error in the configuration of the Dispatch instance",1,1,0,0,0,0,0,0,0,0,0,0
"Factory method to read an EndpointReference from the infoset contained in eprInfoset. This method delegates to the vendor specific implementation of the Provider.readEndpointReference(javax.xml.transform.Source) method.  Parameters: eprInfoset - The EndpointReference infoset to be unmarshalled Returns: the EndpointReference unmarshalled from eprInfoset never null Throws: WebServiceException - if an error occurs while creating the EndpointReference from the eprInfoset IllegalArgumentException - if the null eprInfoset value is given.",1,0,0,0,0,1,0,0,0,0,0,1
"Used to annotate methods in the Service Endpoint Interface with the request  wrapper bean to be used at runtime. The default value of the localName is  the operationName, as defined in WebMethod annotation and the  targetNamespace is the target namespace of the SEI.  When starting from Java this annotation is used resolve overloading  conflicts in document literal mode. Only the className is required in this  case.  Since:     JAX-WS 2.0  Optional Element Summary  String 	className           Request wrapper bean name.  String 	localName           Element's local name.  String 	targetNamespace           Element's namespace name.     localName   public abstract String localName      Element's local name.      Default:            targetNamespace   public abstract String targetNamespace      Element's namespace name.      Default:            className   public abstract String className      Request wrapper bean name.      Default:          Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,1,0,1,0,0,0,0,0,0,0,1
"This feature clarifies the use of the wsdl:binding in a JAX-WS runtime.  This feature is only useful with web services that have an associated WSDL.  Enabling this feature requires that a JAX-WS implementation inspect the  wsdl:binding for an endpoint at runtime to make sure that all  wsdl:extensions that have the required attribute set to true are understood  and are being used.  The following describes the affects of this feature with respect to be  enabled or disabled:      * ENABLED: In this Mode, a JAX-WS runtime MUST assure that all required        wsdl:binding extensions are either understood and used by the       runtime, or explicitly disabled by the web service application. A web       service application can disable a particular extension that has a       known WebServiceFeature using either the appropriate annotation       associated with that WebServiceFeature on the server, or one of the       following methods on the client:           o Service.getPort(QName,Class,WebServiceFeature...)           o Service.getPort(Class,WebServiceFeature...)           o Service.getPort(EndpointReference,Class,WebServiceFeature...)           o Service.createDispatch(QName,Class,Service.Mode             mode,WebServiceFeature...)           o              Service.createDispatch(EndpointReference,Class,Service.Mode,WebServiceFeature...)           o              Service.createDispatch(QName,JAXBContext,Service.Mode,WebServiceFeature...)           o              Service.createDispatch(EndpointReference,JAXBContext,Service.Mode,WebServiceFeature...)           o EndpointReference.getPort(Class,WebServiceFeature...)           o One of the getXXXPort(WebServiceFeatures...) methods on a             generated Service.       The runtime MUST also make sure that binding of SEI parameters/return       values respect the wsdl:binding. With this feature enabled, if a       required (wsdl:required=true) wsdl:binding extension is in the WSDL       and it is not supported by a JAX-WS runtime and it has not been       explicitly turned off by the web service developer, then that JAX-WS       runtime MUST behave appropriately based on whether it is on the       client or server:           o Client: runtime MUST throw a WebServiceException no sooner than             when one of the methods above is invoked but no later than the             first invocation of an endpoint operation.           o Server: throw a WebServiceException and the endpoint MUST fail             to deploy     * DISABLED: In this Mode, an implementation may choose whether to       inspect the wsdl:binding or not and to what degree the wsdl:binding        will be inspected. For example, one implementation may choose to       behave as if this feature is enabled, another implementation may only       choose to verify the SEI's parameter/return type bindings.  Since:     JAX-WS 2.1 See Also:     AddressingFeature",1,0,1,1,0,0,1,1,1,0,0,0
"Constructs a new exception with the specified detail message and cause.  Parameters: message - The detail message which is later retrieved using the getMessage method cause - The cause which is saved for the later retrieval throw by the getCause method",1,0,0,0,0,0,0,0,0,0,0,1
"A WebServiceFeature is used to represent a feature that can be enabled or  disabled for a web service.  The JAX-WS specification will define some standard features and JAX-WS  implementors are free to define additional features if necessary. Vendor  specific features may not be portable so caution should be used when using  them. Each Feature definition MUST define a public static final String ID  that can be used in the Feature annotation to refer to the feature. This ID  MUST be unique across all features of all vendors. When defining a vendor  specific feature ID, use a vendor specific namespace in the ID string.  Since:     2.1 See Also:     RespectBindingFeature, AddressingFeature, MTOMFeature",1,0,1,0,0,0,0,1,0,0,0,0
"The Handler interface is the base interface for JAX-WS handlers.  Since:     JAX-WS 2.0",0,0,0,0,0,0,1,0,0,0,0,0
"The interface MessageContext abstracts the message context that is  processed by a handler in the handle method.  The MessageContext interface provides methods to manage a property set.  MessageContext properties enable handlers in a handler chain to share  processing related state.  Since:     JAX-WS 2.0",1,0,0,0,0,0,0,0,0,0,0,0
" Standard property: servlet context object.  Type: javax.servlet.ServletContext  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
"The PortInfo interface is used by a HandlerResolver to query information  about the port it is being asked to create a handler chain for.  This interface is never implemented by an application, only by a JAX-WS  implementation.  Since:     JAX-WS 2.0",0,0,1,1,0,0,0,0,0,0,0,0
"The interface SOAPMessageContext provides access to the SOAP message for  either RPC request or response. The javax.xml.soap.SOAPMessage specifies  the standard Java API for the representation of a SOAP 1.1 message with  attachments.  Since:     JAX-WS 2.0 See Also:     SOAPMessage",1,0,0,0,0,0,0,0,0,0,0,0
"The HTTPException exception represents a XML/HTTP fault.  Since there is no standard format for faults or exceptions in XML/HTTP  messaging, only the HTTP status code is captured.  Since:     JAX-WS 2.0 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"This feature represents the use of WS-Addressing with either the SOAP  1.1/HTTP or SOAP 1.2/HTTP binding. Using this feature with any other  binding is NOT required.  Enabling this feature on the client will cause the JAX-WS runtime to  include WS-Addressing headers in SOAP messages.  If the web service developer has not explicitly enabled this feature, it  MAY be automatically enabled if the associated WSDL enables WS-Addressing  with an implementation recognized WSDL extension element. However, in this  version of JAX-WS, there is no standard WSDL extension that a client can  rely on to automatically enable WS-Addressing, nor is there a standard  default value specified for WS-Addressing Action headers.  To write a portable endpoint and its corresponding client with this version  of JAX-WS, an endpoint MUST explicitly specify what WS-Addressing Actions  are to be used via the Action and FaultAction annotations. The client MUST  explicitly enable addresssing via this AddressingFeature, and for each  invocation, the client MUST explicitly set the  BindingProvider.SOAPACTION_URI_PROPERTY. After the W3C WG on WS-Addressing  has specified how the use of WS-Addressing is specified in the WSDL, and  what the default value must be for Action headers, a future version of  JAX-WS will remove these requirements.  See RespectBindingFeature for more information on required WSDL extensions.  The following describes the effects of this feature with respect to be  enabled or disabled:      * ENABLED: In this Mode, WS-Addressing will be enabled. At runtime,       WS-Addressing headers MUST be consumed by the receiver and produced       by the sender even if the WSDL declares otherwise. The       mustUnderstand=0 attribute MUST be used on the WS-Addressing       headers.     * DISABLED: In this Mode, WS-Addressing will be disabled even if an       associated WSDL specifies otherwise. At runtime, WS-Addressing       headers MUST NOT be used. WS-Addressing may be explicitly disabled to       prevent a JAX-WS implementation from consuming and producing       WS-Addressing headers. If an application has implemented       WS-Addressing itself, it MUST explicitly disable this feature. Not       doing so may break compatibility with future versions of JAX-WS.  The required property can be used to specify if WS-Addressing headers MUST  be present on incoming messages. This property only has meaning when used  on the endpoint and has no affect when used on the client. By default the  required property is false.  See Web Services Addressing - Core and Web Services Addressing 1.0 - SOAP  Binding for more information on WS-Addressing.  Since:     JAX-WS 2.1",1,0,1,1,0,1,1,1,0,1,1,0
"This feature represents the use of MTOM with a web service.  The following describes the affects of this feature with respect to being  enabled or disabled:      * ENABLED: In this Mode, MTOM will be enabled.     * DISABLED: In this Mode, MTOM will be disabled  The threshold property can be used to set the threshold value used to  determine when binary data should be XOP encoded.  Since:     JAX-WS 2.1",1,0,0,0,0,0,0,1,0,0,0,1
"Creates a Dispatch instance for use with objects of the user's choosing.  Parameters: portName - Qualified name for the target service endpoint type - The class of object used for messages or message payloads. Implementations are required to support javax.xml.transform.Source and javax.xml.soap.SOAPMessage. mode - Controls whether the created dispatch instance is message or payload oriented, i.e. whether the user will work with complete protocol messages or message payloads. E.g. when using the SOAP protocol, this parameter controls whether the user will work with SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE when type is SOAPMessage. Returns: Dispatch instance Throws: WebServiceException - If any error in the creation of the Dispatch object See Also: Source, SOAPMessage",1,0,0,1,0,0,0,0,0,0,1,0
"Annotation used to identify other annotations as a WebServiceFeature. Each  WebServiceFeature annotation annotated with this annotation MUST contain an  enabled property of type boolean with a default value of true. JAX-WS  defines the following WebServiceFeature annotations (Addressing, MTOM,  RespectBinding), however, an implementation may define vendors specific  annotations for other features. If a JAX-WS implementation encounters an  annotation annotated with the WebServiceFeatureAnnotation that it does not  recognize/support an error MUST be given.  Since:     JAX-WS 2.1 See Also:     Addressing, MTOM, RespectBinding  Required Element Summary  Class<? extends WebServiceFeature> 	bean           The WebServiceFeature bean that is associated with the  WebServiceFeature annotation  String 	id           Unique identifier for the WebServiceFeature.    Element Detail   id   public abstract String id      Unique identifier for the WebServiceFeature. This identifier MUST be     unique across all implementations of JAX-WS.   bean   public abstract Class<? extends WebServiceFeature> bean      The WebServiceFeature bean that is associated with the      WebServiceFeature annotation  Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,1,0,0,0,1,0,0,0,1,0
"Sets the serviceName of the endpoint to be targeted by the returned W3CEndpointReference.  Parameters: serviceName - The service name of the endpoint to be targeted by the returned W3CEndpointReference. This property may also be used with the endpointName (portName) property to lookup the address of a web service endpoint that is published by the same Java EE application. Returns: A W3CEndpointReferenceBuilder instance with the serviceName property set.",1,0,0,0,0,0,0,1,0,0,0,0
"XPath provides access to the XPath evaluation environment and expressions.  Evaluation of XPath Expressions. context 	 If a request is made to evaluate the expression in the absence of  a context item, an empty document node will be used for the context. For  the purposes of evaluating XPath expressions, a DocumentFragment is treated  like a Document node. variables 	 If the expression contains a variable reference, its value will  be found through the XPathVariableResolver set with  setXPathVariableResolver(XPathVariableResolver resolver). An  XPathExpressionException is raised if the variable resolver is undefined or  the resolver returns null for the variable. The value of a variable must be  immutable through the course of any single evaluation. functions 	 If the expression contains a function reference, the function  will be found through the XPathFunctionResolver set with  setXPathFunctionResolver(XPathFunctionResolver resolver). An  XPathExpressionException is raised if the function resolver is undefined or  the function resolver returns null for the function. QNames 	 QNames in the expression are resolved against the XPath namespace  context set with setNamespaceContext(NamespaceContext nsContext). result 	 This result of evaluating an expression is converted to an  instance of the desired return type. Valid return types are defined in  XPathConstants. Conversion to the return type follows XPath conversion  rules.  An XPath object is not thread-safe and not reentrant. In other words, it is  the application's responsibility to make sure that one XPath object is not  used from more than one thread at any given time, and while the evaluate  method is invoked, applications may not recursively call the evaluate  method.  Since:     1.5 See Also:     XML Path Language (XPath) Version 1.0",1,0,0,0,1,0,0,0,0,0,1,0
"Constructs a new XPathException with the specified detail message.  The cause is not initialized.  If message is null, then a NullPointerException is thrown.  Parameters: message - The detail message. Throws: NullPointerException - When message is null.",0,0,0,0,0,0,0,0,0,0,0,1
"XPathVariableResolver provides access to the set of user defined XPath  variables.  The XPathVariableResolver and the XPath evaluator must adhere to a contract  that cannot be directly enforced by the API. Although variables may be  mutable, that is, an application may wish to evaluate the same XPath  expression more than once with different variable values, in the course of  evaluating any single XPath expression, a variable's value must not change.  Since:     1.5",1,0,1,0,0,0,0,0,0,0,0,0
"Get the application specified data for this channel binding.  Returns: the application data being used as part of the ChannelBinding. null is returned if no application data has been specified for the channel binding.",1,0,0,0,0,0,0,0,0,0,0,0
"This interface encapsulates the GSS-API security context and provides the  security services that are available over the context. Security contexts  are established between peers using locally acquired credentials. Multiple  contexts may exist simultaneously between a pair of peers, using the same  or different set of credentials. GSS-API functions in a manner independent  of the underlying transport protocol and depends on its calling application  to transport the tokens that are generated by the security context between  the peers.  If the caller instantiates the context using the default GSSManager  instance, then the Kerberos v5 GSS-API mechanism is guaranteed to be  available for context establishment. This mechanism is identified by the  Oid 1.2.840.113554.1.2.2 and is defined in RFC 1964.  Before the context establishment phase is initiated, the context initiator  may request specific characteristics desired of the established context.  Not all underlying mechanisms support all characteristics that a caller  might desire. After the context is established, the caller can check the  actual characteristics and services offered by that context by means of  various query methods. When using the Kerberos v5 GSS-API mechanism offered  by the default GSSManager instance, all optional services will be available  locally. They are mutual authentication, credential delegation,  confidentiality and integrity protection, and per-message replay detection  and sequencing. Note that in the GSS-API, message integrity is a  prerequisite for message confidentiality.  The context establishment occurs in a loop where the initiator calls  initSecContext and the acceptor calls acceptSecContext until the context is  established. While in this loop the initSecContext and acceptSecContext  methods produce tokens that the application sends over to the peer. The  peer passes any such token as input to its acceptSecContext or  initSecContext as the case may be.  During the context establishment phase, the isProtReady method may be  called to determine if the context can be used for the per-message  operations of wrap and getMIC. This allows applications to use per-message  operations on contexts which aren't yet fully established.  After the context has been established or the isProtReady method returns  true, the query routines can be invoked to determine the actual  characteristics and services of the established context. The application  can also start using the per-message methods of wrap and getMIC to obtain  cryptographic operations on application supplied data.  When the context is no longer needed, the application should call dispose  to release any system resources the context may be using.  A security context typically maintains sequencing and replay detection  information about the tokens it processes. Therefore, the sequence in which  any tokens are presented to this context for processing can be important.  Also note that none of the methods in this interface are synchronized.  Therefore, it is not advisable to share a GSSContext among several threads  unless some application level synchronization is in place.  Finally, different mechanism providers might place different security  restrictions on using GSS-API contexts. These will be documented by the  mechanism provider. The application will need to ensure that it has the  appropriate permissions if such checks are made in the mechanism layer.  The example code presented below demonstrates the usage of the GSSContext  interface for the initiating peer. Different operations on the GSSContext  object are presented, including: object instantiation, setting of desired  flags, context establishment, query of actual context flags, per-message  operations on application data, and finally context deletion.   // Create a context using default credentials // and the implementation specific default mechanism GSSManager manager ... GSSName targetName ... GSSContext context = manager.createContext(targetName, null, null, GSSContext.INDEFINITE_LIFETIME);  // set desired context options prior to context establishment context.requestConf(true); context.requestMutualAuth(true); context.requestReplayDet(true); context.requestSequenceDet(true);  // establish a context between peers  byte []inToken = new byte[0];  // Loop while there still is a token to be processed  while (!context.isEstablished()) {  byte[] outToken = context.initSecContext(inToken, 0, inToken.length);  // send the output token if generated if (outToken != null) sendToken(outToken);  if (!context.isEstablished()) { inToken = readToken(); }  // display context information System.out.println(Remaining lifetime in seconds =  + context.getLifetime()); System.out.println(Context mechanism =  + context.getMech()); System.out.println(Initiator =  + context.getSrcName()); System.out.println(Acceptor =  + context.getTargName());  if (context.getConfState()) System.out.println(Confidentiality (i.e., privacy) is available);  if (context.getIntegState()) System.out.println(Integrity is available);  // perform wrap on an application supplied message, appMsg, // using QOP = 0, and requesting privacy service byte [] appMsg ...  MessageProp mProp = new MessageProp(0, true);  byte []tok = context.wrap(appMsg, 0, appMsg.length, mProp);  sendToken(tok);  // release the local-end of the context context.dispose();    Since:     1.4",1,0,0,0,1,1,0,1,1,0,1,0
"Called by the context initiator to start the context creation phase and process any tokens generated by the peer's acceptSecContext method using streams. This method may write an output token to the OutpuStream, which the application will need to send to the peer for processing by its acceptSecContext call. Typically, the application would ensure this by calling the flush method on an OutputStream that encapsulates the connection between the two peers. The application can determine if a token is written to the OutputStream from the return value of this method. A return value of 0 indicates that no token was written. The application can call isEstablished to determine if the context establishment phase is complete on this side of the context. A return value of false from isEstablished indicates that more tokens are expected to be supplied to initSecContext. Upon completion of the context establishment, the available context options may be queried through the get methods.  Note that it is possible that the initSecContext method return a token for the peer, and isEstablished return true also. This indicates that the token needs to be sent to the peer, but the local end of the context is now fully established.  The GSS-API authentication tokens contain a definitive start and end. This method will attempt to read one of these tokens per invocation, and may block on the stream if only part of the token is available. In all other respects this method is equivalent to the byte array based initSecContext.  Some mechanism providers might require that the caller be granted permission to initiate a security context. A failed permission check might cause a SecurityException to be thrown from this method.  The following example code demonstrates how this method might be used:  InputStream is ... OutputStream os ... GSSContext context ...  // Loop while there is still a token to be processed  while (!context.isEstablished()) {  context.initSecContext(is, os);  // send output token if generated os.flush(); }  Parameters: inStream - an InputStream that contains the token generated by the peer. This parameter is ignored on the first call since no token has been or will be received from the peer at that point. outStream - an OutputStream where the output token will be written. During the final stage of context establishment, there may be no bytes written. Returns: the number of bytes written to the OutputStream as part of the token to be sent to the peer. A value of 0 indicates that no token needs to be sent. Throws: GSSException - containing the following major error codes: GSSException.DEFECTIVE_TOKEN, GSSException.BAD_MIC, GSSException.NO_CRED, GSSException.CREDENTIALS_EXPIRED, GSSException.BAD_BINDINGS, GSSException.OLD_TOKEN, GSSException.DUPLICATE_TOKEN, GSSException.BAD_NAMETYPE, GSSException.BAD_MECH, GSSException.FAILURE",1,1,0,1,0,1,1,1,1,0,0,0
"Used to process tokens generated by the wrap method on the other side of the context. The method will return the message supplied by the peer application to its wrap call, while at the same time verifying the embedded MIC for that message.  The MessageProp object is instantiated by the application and is used by the underlying mechanism to return information to the caller such as the QOP, whether confidentiality was applied to the message, and other supplementary message state information.  Since some application-level protocols may wish to use tokens emitted by wrap to provide secure framing, implementations should support the wrapping and unwrapping of zero-length messages.  Parameters: inBuf - a byte array containing the wrap token received from peer. offset - the offset where the token begins. len - the length of the token msgProp - upon return from the method, this object will contain the applied QOP, the privacy state of the message, and supplementary information stating if the token was a duplicate, old, out of sequence or arriving after a gap. Returns: a byte[] containing the message unwrapped from the input token. Throws: GSSException - containing the following major error codes: GSSException.DEFECTIVE_TOKEN, GSSException.BAD_MIC, GSSException.CONTEXT_EXPIRED, GSSException.FAILURE",1,0,0,0,0,0,1,0,0,0,0,0
"This class serves as a factory for other important GSS-API classes and also  provides information about the mechanisms that are supported. It can create  instances of classes implementing the following three GSS-API interfaces:  GSSName, GSSCredential, and GSSContext. It also has methods to query for  the list of available mechanisms and the nametypes that each mechanism  supports.  An instance of the default GSSManager subclass may be obtained through the  static method getInstance, but applications are free to instantiate other  subclasses of GSSManager. The default GSSManager instance will support the  Kerberos v5 GSS-API mechanism in addition to any others. This mechanism is  identified by the Oid 1.2.840.113554.1.2.2 and is defined in RFC 1964.  A subclass extending the GSSManager abstract class may be implemented as a  modular provider based layer that utilizes some well known service provider  specification. The GSSManager API allows the application to set provider  preferences on such an implementation. These methods also allow the  implementation to throw a well-defined exception in case provider based  configuration is not supported. Applications that expect to be portable  should be aware of this and recover cleanly by catching the exception.  It is envisioned that there will be three most common ways in which  providers will be used:     1. The application does not care about what provider is used (the       default case).    2. The application wants a particular provider to be used       preferentially, either for a particular mechanism or all the time,       irrespective of mechanism.    3. The application wants to use the locally configured providers as far       as possible but if support is missing for one or more mechanisms then       it wants to fall back on its own provider.  The GSSManager class has two methods that enable these modes of usage:  addProviderAtFront and addProviderAtEnd. These methods have the effect of  creating an ordered list of <provider, oid> pairs where each pair indicates  a preference of provider for a given oid.  It is important to note that there are certain interactions between the  different GSS-API objects that are created by a GSSManager, where the  provider that is used for a particular mechanism might need to be  consistent across all objects. For instance, if a GSSCredential contains  elements from a provider p for a mechanism m, it should generally be passed  in to a GSSContext that will use provider p for the mechanism m. A simple  rule of thumb that will maximize portability is that objects created from  different GSSManager's should not be mixed, and if possible, a different  GSSManager instance should be created if the application wants to invoke  the addProviderAtFront method on a GSSManager that has already created an  object.  Here is some sample code showing how the GSSManager might be used:   GSSManager manager = GSSManager.getInstance();  Oid krb5Mechanism = new Oid(1.2.840.113554.1.2.2); Oid krb5PrincipalNameType = new Oid(1.2.840.113554.1.2.2.1);  // Identify who the client wishes to be GSSName userName = manager.createName(duke, GSSName.NT_USER_NAME);  // Identify the name of the server. This uses a Kerberos specific // name format. GSSName serverName = manager.createName(nfs/foo.sun.com, krb5PrincipalNameType);  // Acquire credentials for the user GSSCredential userCreds = manager.createCredential(userName, GSSCredential.DEFAULT_LIFETIME, krb5Mechanism, GSSCredential.INITIATE_ONLY);  // Instantiate and initialize a security context that will be // established with the server GSSContext context = manager.createContext(serverName, krb5Mechanism, userCreds, GSSContext.DEFAULT_LIFETIME);   The server side might use the following variation of this source:   // Acquire credentials for the server GSSCredential serverCreds = manager.createCredential(serverName, GSSCredential.DEFAULT_LIFETIME, krb5Mechanism, GSSCredential.ACCEPT_ONLY);  // Instantiate and initialize a security context that will // wait for an establishment request token from the client GSSContext context = manager.createContext(serverCreds);   Since:     1.4 See Also:     GSSName, GSSCredential, GSSContext",1,0,0,0,0,1,0,0,1,0,0,0
"Creates an Oid object from its ASN.1 DER encoding. This refers to the full encoding including tag and length. The structure and encoding of Oids is defined in ISOIEC-8824 and ISOIEC-8825. This method is identical in functionality to its byte array counterpart.  Parameters: derOid - stream containing the DER encoded oid Throws: GSSException - may be thrown when the DER encoding does not follow the prescribed format.",1,0,0,0,0,0,0,0,0,0,1,1
"Extracts the long in this Any object's value field.  Returns: the long stored in this Any object Throws: BAD_OPERATION - if this Any object contains something other than a long or the value field has not yet been set",1,0,0,0,0,0,0,0,0,0,0,1
"Extracts the char in this Any object's value field.  Returns: the char stored in this Any object Throws: BAD_OPERATION - if this Any object contains something other than a char or the value field has not yet been set",1,0,0,0,0,0,0,0,0,0,0,0
"Extracts the String object in this Any object's value field.  Returns: the String object stored in this Any object Throws: BAD_OPERATION - if this Any object contains something other than a String object or the value field has not yet been set",1,0,0,0,0,0,0,0,0,0,0,1
"The Helper for AnySeq. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/AnySeqHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from streams.idl 13 May 1999 22:41:36 o'clock  GMT+00:00 The class definition has been modified to conform to the  following OMG specifications :      * ORB core as defined by CORBA 2.3.1 (formal/99-10-07)     * IDL/Java Language Mapping as defined in ptc/00-01-08",1,0,0,0,0,0,0,0,0,0,0,1
"The Holder for AnySeq. For more information on Holder files, see  Generated Files: Holder Files.  org/omg/CORBA/AnySeqHolder.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from streams.idl 13 May 1999 22:41:36 o'clock  GMT+00:00",0,0,0,0,0,0,0,0,0,0,1,1
"A PolicyErrorCode which would be filled in the PolicyError exception.",0,0,0,1,0,0,0,0,0,0,0,0
"This exception is raised whenever meaningful communication is not possible  between client and server native code sets.  Since:     J2SE 1.5 See Also:     documentation on Java IDL exceptions",0,0,0,0,0,0,0,0,0,0,1,0
"Constructs a COMM_FAILURE exception with the specified minor code and completion status.  Parameters: minor - the minor code completed - the completion status, which must be one of COMPLETED_YES, COMPLETED_NO, or COMPLETED_MAYBE.",1,0,0,0,0,0,0,0,0,0,0,0
"An object containing a modifiable list of String objects that represent  property names. This class is used in Request operations to describe the  contexts that need to be resolved and sent with the invocation. (A context  is resolved by giving a property name and getting back the value associated  with it.) This is done by calling the Context method get_values and  supplying a string from a ContextList object as the third parameter. The  method get_values returns an NVList object containing the NamedValue  objects that hold the value(s) identified by the given string.  A ContextList object is created by the ORB, as illustrated here:   ORB orb = ORB.init(args, null); org.omg.CORBA.ContextList ctxList = orb.create_context_list();   The variable ctxList represents an empty ContextList object. Strings are  added to the list with the method add, accessed with the method item, and  removed with the method remove.  Since:     JDK1.2 See Also:     Context",1,0,0,1,0,0,0,1,1,0,0,0
"The Helper for Current. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/CurrentHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from  ../../../../../src/share/classes/org/omg/PortableServer/corba.idl Saturday,  July 17, 1999 12:26:21 AM PDT",0,0,0,0,0,0,0,0,0,0,0,1
"Constructs a DATA_CONVERSION exception with the specified detail.  Parameters: s - the String containing a detail message",1,0,0,0,0,0,0,0,0,0,0,0
" The static instance of DefinitionKind indicating that an Interface Repository object is a constant. ",0,0,0,0,0,0,0,0,0,0,0,0
"Provides mechanisms for establishing and navigating relationships to  superior and subordinate domains, as well as for creating and accessing  policies. The DomainManager has associated with it the policy objects for a  particular domain. The domain manager also records the membership of the  domain and provides the means to add and remove members. The domain manager  is itself a member of a domain, possibly the domain it manages. The domain  manager provides mechanisms for establishing and navigating relationships  to superior and subordinate domains and creating and accessing policies.",1,0,0,0,0,0,1,0,0,0,0,0
"@Deprecated public interface DynAny      extends Object   Enables org.omg.CORBA.Any values to be dynamically interpreted (traversed)  and constructed. A DynAny object is associated with a data value which may  correspond to a copy of the value inserted in",1,0,0,1,0,0,0,0,0,0,0,0
"Deprecated. Inserts the given long as the value for this DynAny object.  If this method is called on a constructed DynAny object, it initializes the next component of the constructed data value associated with this DynAny object.  Parameters: value - the long to insert into this DynAny object Throws: InvalidValue - if the value inserted is not consistent with the type of the accessed component in this DynAny object",1,0,0,0,0,0,0,0,0,0,0,0
"Deprecated. Retrieves the org.omg.CORBA.Any contained in this DynAny object.  Returns: the org.omg.CORBA.Any that is the value for this DynAny object Throws: TypeMismatch - if the type code of the accessed component in this DynAny object is not equivalent to the type code for an org.omg.CORBA.Any",1,0,0,0,0,0,0,0,0,0,0,1
"The InvalidSeq exception is thrown by all operations on dynamic anys that  take a sequence (Java array) as an argument, when that sequence is invalid.",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs an InvalidSeq object.",0,0,0,0,0,0,0,0,0,0,0,1
"Deprecated. Set a particular enum in this DynEnum.  Parameters: arg - the string corresponding to the value.",0,0,0,0,0,0,0,0,0,0,0,1
"@Deprecated public interface DynStruct      extends Object, DynAny   The representation of a DynAny object that is associated with an IDL  struct.",0,0,0,0,0,0,0,0,0,0,0,0
"Deprecated. Allows for the assignment of the name of this union member.  Parameters: arg - the new name of this union member",1,0,0,0,0,0,0,0,0,0,0,0
"@Deprecated public interface DynValue      extends Object, DynAny   The representation of a DynAny object that is associated with an IDL value  type.",1,0,0,0,0,0,0,0,0,0,0,0
"Exception thrown when the ORB failed in an attempt to free dynamic memory,  for example because of heap corruption or memory segments being locked.  It contains a minor code, which gives more detailed information about what  caused the exception, and a completion status. It may also contain a string  describing the exception.  Since:     JDK1.2 See Also:     documentation on Java IDL exceptions",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs an INV_IDENT exception with the specified detail message, a minor code of 0, and a completion state of COMPLETED_NO.  Parameters: s - the String containing a detail message",1,0,0,0,0,0,0,0,0,0,0,1
"Constructs a new LongHolder object with its value field initialized to 0.",1,0,0,0,0,0,0,0,0,0,0,0
"The Helper for LongLongSeq. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/LongLongSeqHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from streams.idl 13 May 1999 22:41:37 o'clock  GMT+00:00 The class definition has been modified to conform to the  following OMG specifications :      * ORB core as defined by CORBA 2.3.1 (formal/99-10-07)     * IDL/Java Language Mapping as defined in ptc/00-01-08",0,0,0,0,0,0,1,0,0,0,0,1
"The Holder for LongSeq. For more information on Holder files, see  Generated Files: Holder Files.  org/omg/CORBA/LongSeqHolder.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from streams.idl 13 May 1999 22:41:36 o'clock  GMT+00:00",0,0,0,0,0,0,0,0,0,0,0,1
"This exception indicates that even though the operation that was invoked  exists (it has an IDL definition), no implementation for that operation  exists. NO_IMPLEMENT can, for example, be raised by an ORB if a client asks  for an object's type definition from the interface repository, but no  interface repository is provided by the ORB.  It contains a minor code, which gives more detailed information about what  caused the exception, and a completion status. It may also contain a string  describing the exception.  See the section Minor Code Meanings to see the minor codes for this  exception.  Since:     JDK1.2",1,0,0,0,0,0,1,0,0,0,0,0
"Constructs a NO_MEMORY exception with a default minor code of 0, a completion state of CompletionStatus.COMPLETED_NO, and a null description.",1,0,0,0,0,0,0,0,0,0,0,0
"Exception thrown when the ORB has encountered some general resource  limitation. For example, the run time may have reached the maximum  permissible number of open connections.  It contains a minor code, which gives more detailed information about what  caused the exception, and a completion status. It may also contain a string  describing the exception.  Since:     JDK1.2 See Also:     documentation on Java IDL exceptions",1,0,0,0,0,0,0,0,0,0,0,0
"Associates a name with a value that is an attribute of an IDL struct, and  is used in the DynStruct APIs.",0,0,0,1,0,0,0,0,0,0,0,0
"An object used in the DII and DSI to describe arguments and return values.  NamedValue objects are also used in the Context object routines to pass  lists of property names and values.  A NamedValue object contains:      * a name -- If the NamedValue object is used to describe arguments to a       request, the name will be an argument identifier specified in the OMG       IDL interface definition for the operation being described.     * a value -- an Any object     * an argument mode flag -- one of the following:           o ARG_IN.value           o ARG_OUT.value           o ARG_INOUT.value           o zero -- if this NamedValue object represents a property in a              Context object rather than a parameter or return value  The class NamedValue has three methods, which access its fields. The  following code fragment demonstrates creating a NamedValue object and then  accessing its fields:   ORB orb = ORB.init(args, null); String s = argument_1; org.omg.CORBA.Any myAny = orb.create_any(); myAny.insert_long(12345); int in = org.omg.CORBA.ARG_IN.value;  org.omg.CORBA.NamedValue nv = orb.create_named_value( s, myAny, in); System.out.println(This nv name is  + nv.name()); try { System.out.println(This nv value is  + nv.value().extract_long()); System.out.println(This nv flag is  + nv.flags()); } catch (org.omg.CORBA.BAD_OPERATION b) { System.out.println(extract failed); }   If this code fragment were put into a main method, the output would be  something like the following:   This nv name is argument_1 This nv value is 12345 This nv flag is 1   Note that the method value returns an Any object. In order to access the  long contained in the Any object, we used the method extract_long.  Since:     JDK1.2 See Also:     Any, ARG_IN, ARG_INOUT, ARG_OUT",1,0,0,1,0,0,1,0,1,0,0,0
"The vendor minor code ID reserved for OMG. Minor codes for the standard  exceptions are prefaced by the VMCID assigned to OMG, defined as the  constant OMGVMCID, which, like all VMCIDs, occupies the high order 20 bits.",0,0,0,1,0,0,1,0,0,0,0,0
"A class providing APIs for the CORBA Object Request Broker features. The  ORB class also provides pluggable ORB implementation APIs that allow  another vendor's ORB implementation to be used.  An ORB makes it possible for CORBA objects to communicate with each other  by connecting objects making requests (clients) with objects servicing  requests (servers).  The ORB class, which encapsulates generic CORBA functionality, does the  following: (Note that items 5 and 6, which include most of the methods in  the class ORB, are typically used with the Dynamic Invocation Interface  (DII) and the Dynamic Skeleton Interface (DSI). These interfaces may be  used by a developer directly, but most commonly they are used by the ORB  internally and are not seen by the general programmer.)     1. initializes the ORB implementation by supplying values for predefined       properties and environmental parameters    2. obtains initial object references to services such as the NameService       using the method resolve_initial_references    3. converts object references to strings and back    4. connects the ORB to a servant (an instance of a CORBA object       implementation) and disconnects the ORB from a servant    5. creates objects such as           o TypeCode           o Any           o NamedValue           o Context           o Environment           o lists (such as NVList) containing these objects    6. sends multiple messages in the DII  The ORB class can be used to obtain references to objects implemented  anywhere on the network.  An application or applet gains access to the CORBA environment by  initializing itself into an ORB using one of three init methods. Two of the  three methods use the properties (associations of a name with a value)  shown in the table below.  Property Name 	Property Value Standard Java CORBA Properties: org.omg.CORBA.ORBClass 	class name of an ORB implementation org.omg.CORBA.ORBSingletonClass 	class name of the ORB returned by init()  These properties allow a different vendor's ORB implementation to be  plugged in.  When an ORB instance is being created, the class name of the ORB  implementation is located using the following standard search order:     1. check in Applet parameter or application string array, if any    2. check in properties parameter, if any    3. check in the System properties    4. check in the orb.properties file located in the user.home directory       (if any)    5. check in the orb.properties file located in the java.home/lib       directory (if any)    6. fall back on a hardcoded default behavior (use the Java IDL       implementation)  Note that Java IDL provides a default implementation for the  fully-functional ORB and for the Singleton ORB. When the method init is  given no parameters, the default Singleton ORB is returned. When the method  init is given parameters but no ORB class is specified, the Java IDL ORB  implementation is returned.  The following code fragment creates an ORB object initialized with the  default ORB Singleton. This ORB has a restricted implementation to prevent  malicious applets from doing anything beyond creating typecodes. It is  called a singleton because there is only one instance for an entire virtual  machine.   ORB orb = ORB.init();   The following code fragment creates an ORB object for an application. The  parameter args represents the arguments supplied to the application's main  method. Since the property specifies the ORB class to be  SomeORBImplementation, the new ORB will be initialized with that ORB  implementation. If p had been null, and the arguments had not specified an  ORB class, the new ORB would have been initialized with the default Java  IDL implementation.   Properties p = new Properties(); p.put(org.omg.CORBA.ORBClass, SomeORBImplementation); ORB orb = ORB.init(args, p);   The following code fragment creates an ORB object for the applet supplied  as the first parameter. If the given applet does not specify an ORB class,  the new ORB will be initialized with the default Java IDL implementation.   ORB orb = ORB.init(myApplet, null);   An application or applet can be initialized in one or more ORBs. ORB  initialization is a bootstrap call into the CORBA world.  Since:     JDK1.2",1,1,0,1,0,1,1,1,1,0,0,0
"Resolves a specific object reference from the set of available initial service names.  Parameters: object_name - the name of the initial service as a string Returns: the object reference associated with the given name Throws: InvalidName - if the given name is not associated with a known service",1,0,0,0,0,0,0,0,0,0,0,1
"InconsistentTypeCode is thrown when an attempt is made to create a dynamic  any with a type code that does not match the particular subclass of DynAny .",0,0,0,0,0,1,0,0,0,0,0,0
"Constructs an InconsistentTypeCode user exception with no reason message.",1,0,0,0,0,0,0,0,0,0,0,0
" The Object value held by this ObjectHolder object. ",0,0,0,0,0,0,0,0,0,0,0,1
"This exception indicates a persistent storage failure, for example, failure  to establish a database connection or corruption of a database.  It contains a minor code, which gives more detailed information about what  caused the exception, and a completion status. It may also contain a string  describing the exception.  See Also:     documentation on Java IDL exceptions",1,0,0,0,0,0,0,0,0,0,0,0
"Enumeration of parameter modes for Parameter. Possible vaues:      * PARAM_IN - Represents an in parameter.     * PARAM_OUT - Represents an out parameter.     * PARAM_INOUT - Represents an inout parameter.",0,0,0,0,0,0,0,0,0,0,0,0
"A user exception thrown when a policy error occurs. A PolicyError  exception may include one of the following policy error reason codes  defined in the org.omg.CORBA package: BAD_POLICY, BAD_POLICY_TYPE,  BAD_POLICY_VALUE, UNSUPPORTED_POLICY, UNSUPPORTED_POLICY_VALUE.",1,0,0,0,0,0,1,0,0,0,0,0
"@Deprecated public final class PrincipalHolder      extends Object implements Streamable   The Holder for Principal. For more information on Holder files, see  Generated Files: Holder Files.  A container class for values of type Principal that is used to ",0,0,1,0,0,0,0,0,0,0,0,0
"The Helper for RepositoryId. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/RepositoryIdHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from ir.idl 03 June 1999 11:33:43 o'clock  GMT+00:00",0,0,0,0,0,0,0,0,0,0,1,1
"An object that captures the explicit state of a request for the Dynamic  Skeleton Interface (DSI). This class, the cornerstone of the DSI, is  analogous to the Request object in the DII.  The ORB is responsible for creating this embodiment of a request, and  delivering it to a Dynamic Implementation Routine (DIR). A dynamic servant  (a DIR) is created by implementing the DynamicImplementation class, which  has a single invoke method. This method accepts a ServerRequest object. The  abstract class ServerRequest defines methods for accessing the method name,  the arguments and the context of the request, as well as methods for  setting the result of the request either as a return value or an exception.  A subtlety with accessing the arguments of the request is that the DIR  needs to provide type information about the expected arguments, since there  is no compiled information about these. This information is provided  through an NVList, which is a list of NamedValue objects. Each NamedValue  object contains an Any object, which in turn has a TypeCode object  representing the type of the argument.  Similarly, type information needs to be provided for the response, for  either the expected result or for an exception, so the methods result and  except take an Any object as a parameter.  See Also:     DynamicImplementation, NVList, NamedValue",1,0,1,0,0,0,1,0,0,0,0,0
"Throws an org.omg.CORBA.NO_IMPLEMENT exception.  Specifies any return value for the call. Unless the method set_exception is called, if the invoked method has a non-void result type, the method set_result must be called exactly once before the DIR returns. If the operation has a void result type, the method set_result may optionally be called once with an Any object whose type is tk_void. Calling the method set_result before the method arguments has been called or after the method set_result or set_exception has been called will result in a BAD_INV_ORDER exception. Calling the method set_result without having previously called the method ctx when the IDL operation contains a context expression, or when the NVList passed to arguments did not describe all parameters passed by the client, may result in a MARSHAL system exception.  Parameters: any - an Any object containing the return value to be set See Also: CORBA package comments for unimplemented features",1,0,1,0,0,1,0,0,0,0,0,1
"Throws an org.omg.CORBA.NO_IMPLEMENT exception.  Returns the given exception to the client. This method is invoked by the DIR, which may call it at any time. The Any object passed to this method must contain either a system exception or one of the user exceptions specified in the invoked operation's IDL definition. Passing in an Any object that does not contain an exception will cause a BAD_PARAM system exception to be thrown. Passing in an unlisted user exception will result in either the DIR receiving a BAD_PARAM system exception or in the client receiving an UNKNOWN_EXCEPTION system exception.  Parameters: any - the Any object containing the exception Throws: BAD_PARAM - if the given Any object does not contain an exception or the exception is an unlisted user exception UNKNOWN_EXCEPTION - if the given exception is an unlisted user exception and the DIR did not receive a BAD_PARAM exception See Also: CORBA package comments for unimplemented features",1,0,1,0,0,0,0,0,0,0,0,0
"Marshals the value in this ServiceInformationHolder object's value field to the output stream out.  Specified by: _write in interface Streamable Parameters: out - the OutputStream object that will contain the CDR formatted data",1,1,0,0,0,0,0,0,0,0,0,0
"The Helper for SetOverrideType. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/SetOverrideTypeHelper.java Generated by the IDL-to-Java  compiler (portable), version 3.0 03 June 1999 11:52:03 o'clock GMT+00:00",0,0,0,0,0,0,0,0,0,0,1,1
"The Holder for Short. For more information on Holder files, see Generated  Files: Holder Files.<P A Holder class for a short that is used to store  out and inout parameters in IDL operations. If an IDL operation  signature has an IDL short as an out or inout parameter, the programmer  must pass an instance of ShortHolder as the corresponding parameter in the  method invocation; for inout parameters, the programmer must also fill  the in value to be sent to the server. Before the method invocation  returns, the ORB will fill in the value corresponding to the out value  returned from the server.  If myShortHolder is an instance of ShortHolder, the value stored in its  value field can be accessed with myShortHolder.value.  Since:     JDK1.2",1,0,1,0,0,0,0,0,1,0,0,1
"The Holder for String. For more information on Holder files, see  Generated Files: Holder Files.  A Holder class for a String that is used to store out and inout  parameters in IDL operations. If an IDL operation signature has an IDL  string as an out or inout parameter, the programmer must pass an  instance of StringHolder as the corresponding parameter in the method  invocation; for inout parameters, the programmer must also fill the in  value to be sent to the server. Before the method invocation returns, the  ORB will fill in the value corresponding to the out value returned from  the server.  If myStringHolder is an instance of StringHolder, the value stored in its  value field can be accessed with myStringHolder.value.  Since:     JDK1.2",1,0,1,1,0,0,1,0,0,0,0,1
"The Helper for StringValue. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/StringValueHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from orb.idl 31 May 1999 22:27:30 o'clock  GMT+00:00 The class definition has been modified to conform to the  following OMG specifications :      * ORB core as defined by CORBA 2.3.1 (formal/99-10-07)     * IDL/Java Language Mapping as defined in ptc/00-01-08",1,0,0,0,0,0,0,0,0,0,0,1
"Constructs a default StructMember object.",0,0,0,0,0,0,0,0,0,0,0,1
"The Java mapping of the IDL enum TCKind, which specifies the kind of a  TypeCode object. There is one kind for each primitive and essential IDL  data type.  The class TCKind consists of:      * a set of int constants, one for each kind of IDL data type. These        int constants make it possible to use a switch statement.     * a set of TCKind constants, one for each kind of IDL data type. The        value field for each TCKind instance is initialized with the int        constant that corresponds with the IDL data type that the instance       represents.     * the method from_intfor converting an int to its corresponding TCKind        instance        Example:         org.omg.CORBA.TCKind k = org.omg.CORBA.TCKind.from_int( org.omg.CORBA.TCKind._tk_string);         The variable k represents the TCKind instance for the IDL type        string, which is tk_string.      * the method value for accessing the _value field of a TCKind constant        Example:         int i = org.omg.CORBA.TCKind.tk_char.value();         The variable i represents 9, the value for the IDL data type char.  The value field of a TCKind instance is the CDR encoding used for a  TypeCode object in an IIOP message.",1,0,0,0,0,0,1,0,1,0,0,0
" The TCKind constant whose value field is initialized with TCKind._tk_null. ",1,0,0,0,0,0,0,0,0,0,0,0
"A container for information about a specific CORBA data type.  TypeCode objects are used:      * in the Dynamic Invocation Interface -- to indicate the types of the       actual arguments or the type of the return value.       NamedValue objects are used to represent arguments and return values.       One of their components is an Any object, which in turn has as one of       its components a TypeCode object.     * by an Interface Repository to represent the type specifications that       are part of many OMG IDL declarations  The representation of a TypeCode object is opaque, but abstractly, a  TypeCode object consists of:      * a kind field, which is set to an instance of the class TCKind     * zero or more additional fields appropriate for the particular kind.       For example, the TypeCode object describing the OMG IDL type 1ong        has kind TCKind.tk_long and no additional fields. The TypeCode        describing OMG IDL type sequence<boolean, 10> has a kind field with       the value TCKind.tk_sequence and also fields with the values boolean        and 10 for the type of sequence elements and the length of the       sequence.  TypeCode objects can be obtained in various ways:    1. from a call to the method Any.insert_X, where X is a basic IDL type.       This method creates a TypeCode object for type X and assigns it to       the Any object's type field.    2. from invocations of methods in the ORB class        For example, the following creates a TypeCode object for a string        with a maximum of 30 characters:         org.omg.CORBA.TypeCode tcString = orb.create_string_tc(30);         The following creates a TypeCode object for an array of five string       s:         org.omg.CORBA.TypeCode tcArray = orb.create_array_tc( 5, TCKind.tk_string);         The following creates a TypeCode object for an interface named       Account:         org.omg.CORBA.TypeCode tcInterface = orb.create_interface_tc( thisId, Account);      3. as the return value from the _type method in Holder classes for       user-defined IDL types. These Holder classes are generated by the        idltojava compiler.    4. from a CORBA Interface Repository  Most of the methods in the class TypeCode are accessors, and the  information contained in a TypeCode object is specific to a particular  type. Therefore, methods must be invoked only on the kind of type codes to  which they apply. If an accessor method tries to access information from an  inappropriate kind of type code, it will throw the exception  TypeCodePackage.BadKind. For example, if the method discriminator_type is  called on anything other than a union, it will throw BadKind because only  unions have a discriminator. The following list shows which methods apply  to which kinds of type codes:  These methods may be invoked on all TypeCode kinds:      * equal     * kind  These methods may be invoked on objref, struct, union, enum, alias,  exception, value, value_box, native, and abstract_interface:      * id     * name  These methods may be invoked on struct, union, enum, and exception:      * member_count     * member_name  These methods may be invoked on struct, union, and exception:      * member_type(int index)  These methods may be invoked on union:      * member_label     * discriminator_type     * default_index  These methods may be invoked on string, sequence, and array:      * length  These methods may be invoked on alias, sequence, array, and value_box:      * content_type  Unlike other CORBA pseudo-objects, TypeCode objects can be passed as  general IDL parameters.  The methods parameter and param_count, which are deprecated, are not  mapped.  Java IDL extends the CORBA specification to allow all operations permitted  on a struct TypeCode to be permitted on an exception TypeCode as well.",1,0,1,1,0,0,1,1,1,0,0,0
"Returns the number of digits in the fixed type described by this TypeCode object. For example, the typecode for the number 3000.275d could be fixed<7,3>, where 7 is the precision and 3 is the scale.  Returns: the total number of digits Throws: BadKind - if this method is invoked on an inappropriate kind of TypeCode object",1,0,0,0,0,0,0,0,0,0,0,0
"Provides the TypeCode operations member_name(), member_type(), and  member_label. These methods raise Bounds when the index parameter is  greater than or equal to the number of members constituting the type.  Since:     JDK1.2",1,0,0,0,0,0,1,0,0,0,0,0
"Constructs a Bounds exception with no reason message.",0,0,0,0,0,0,0,0,0,0,0,1
"The Helper for ULongLongSeq. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/ULongLongSeqHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from streams.idl 13 May 1999 22:41:37 o'clock  GMT+00:00 The class definition has been modified to conform to the  following OMG specifications :      * ORB core as defined by CORBA 2.3.1 (formal/99-10-07)     * IDL/Java Language Mapping as defined in ptc/00-01-08",0,0,0,0,0,0,0,0,0,0,1,1
"A class that contains user exceptions returned by the server. When the  client uses the DII to make an invocation, any user exception returned from  the server is enclosed in an Any object contained in the  UnknownUserException object. This is available from the Environment object  returned by the method Request.env.  See Also:     documentation on Java IDL exceptions, Request",0,0,0,0,0,1,1,0,0,0,0,0
"The root class for CORBA IDL-defined user exceptions. All CORBA user  exceptions are checked exceptions, which means that they need to be  declared in method signatures.  See Also:     documentation on Java IDL exceptions",1,1,0,0,0,0,0,0,0,0,0,0
"Defines the code used to represent a custom marshalled value type in a  typecode. This is one of the possible results of the type_modifier method  on the TypeCode interface.  See Also:     TypeCode",1,0,0,0,0,0,0,0,0,0,0,0
"The Helper for ValueMember. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/ValueMemberHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from ir.idl 03 June 1999 11:33:44 o'clock  GMT+00:00",0,0,0,0,0,0,0,0,0,0,1,1
"The Helper for VersionSpec. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/VersionSpecHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from ir.idl 03 June 1999 11:33:43 o'clock  GMT+00:00",0,0,0,0,0,0,0,0,0,0,0,1
"The Helper for WCharSeq. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/WCharSeqHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from streams.idl 13 May 1999 22:41:36 o'clock  GMT+00:00 The class definition has been modified to conform to the  following OMG specifications :      * ORB core as defined by CORBA 2.3.1 (formal/99-10-07)     * IDL/Java Language Mapping as defined in ptc/00-01-08",1,0,0,0,0,0,0,0,0,0,1,0
"An array of WStrings",0,1,0,0,0,0,0,0,0,0,0,1
"The CORBA WrongTransaction user-defined exception. This exception is thrown  only by the methods Request.get_response and ORB.get_next_response when  they are invoked from a transaction scope that is different from the one in  which the client originally sent the request. See the OMG Transaction  Service Specification for details.  See Also:     documentation on Java IDL exceptions",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: IRObjectOperations Destroys this object. If the object is a Container, this method is applied to all its contents. If the object contains an IDLType attribute for an anonymous type, that IDLType is destroyed. If the object is currently contained in some other object, it is removed. If the method is invoked on a Repository or on a PrimitiveDef then the BAD_INV_ORDER exception is raised with minor value 2. An attempt to destroy an object that would leave the repository in an incoherent state causes BAD_INV_ORDER exception to be raised with the minor code 1.  Specified by: destroy in interface IRObjectOperations",1,0,0,0,0,0,1,0,0,0,0,0
"Specifies a portable API for ORB-vendor-specific implementation of the  org.omg.CORBA.Object methods. Each stub (proxy) contains a delegate object,  to which all org.omg.CORBA.Object methods are forwarded. This allows a stub  generated by one vendor's ORB to work with the delegate from another  vendor's ORB.  See Also:     Object",0,0,0,0,1,0,1,1,0,0,0,0
"Retrieves the DomainManagers of this object. This allows administration services (and applications) to retrieve the domain managers, and hence the security and other policies applicable to individual objects that are members of the domain.  Parameters: self - The object reference which delegated to this delegate. Returns: The list of immediately enclosing domain managers of this object. At least one domain manager is always returned in the list since by default each object is associated with at least one domain manager at creation. See Also: portable package comments for unimplemented features",1,0,0,1,0,0,0,0,0,0,0,0
"The Indirection exception is a Java specific system exception. It is thrown  when the ORB's input stream is called to demarshal a value that is encoded  as an indirection that is in the process of being demarshaled. This can  occur when the ORB input stream calls the ValueHandler to demarshal an RMI  value whose state contains a recursive reference to itself. Because the  top-level ValueHandler.read_value() call has not yet returned a value, the  ORB input stream's indirection table does not contain an entry for an  object with the stream offset specified by the indirection tag. The stream  offset is returned in the exception's offset field.  See Also:     InputStream, OutputStream",0,1,0,0,0,0,0,0,0,0,0,0
"Returns the ORB that created this InputStream.  Returns: the ORB object that created this stream See Also: portable package comments for unimplemented features",1,0,0,0,0,0,0,0,0,0,0,1
"Creates a Request object that contains the given context, method, argument list, container for the result, exceptions, and list of property names to be used in resolving the context strings. This Request object is for use in the Dynamic Invocation Interface.  Specified by: _create_request in interface Object Parameters: ctx - the Context object that contains the context strings that must be resolved before they are sent along with the request operation - the method that the new Request object will invoke arg_list - the arguments for the method; an NVList in which each argument is a NamedValue object result - a NamedValue object to be used for returning the result of executing the request's method exceptions - a list of the exceptions that the given method throws contexts - a list of the properties that are needed to resolve the contexts in ctx; the strings in contexts are used as arguments to the method Context.get_values, which returns the value associated with the given property Returns: a new Request object initialized with the given context strings to resolve, method, argument list, container for the result, exceptions, and list of property names to be used in resolving the context strings See Also: Request, NVList, NamedValue, ExceptionList, ContextList",1,0,0,1,0,0,0,0,0,0,0,1
"Returns an input stream with the same buffer.  Returns: an input stream with the same buffer.",1,0,0,0,0,0,0,0,0,0,0,1
"The generated Java classes corresponding to valuetype IDL types implement  this interface. In other words, the Java mapping of valuetype objects  implement the ValueBase interface. The generated Java class for valuetype's  shall provide an implementation of the ValueBase interface for the  corresponding value type. For value types that are streamable (i.e.  non-custom), the generated Java class shall also provide an implementation  for the org.omg.CORBA.portable.Streamable interface. (CORBA::ValueBase is  mapped to java.io.Serializable.)",1,0,1,0,0,0,1,0,0,0,0,0
"A class extending org.omg.CORBA.ORB to make the ORB portable under the OMG  CORBA version 2.3 specification.",0,0,0,1,0,0,1,0,0,0,0,0
"See Also: CORBA_2_3 package comments for unimplemented features",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the codebase for object reference provided.  Parameters: self - the object reference whose codebase needs to be returned. Returns: the codebase as a space delimited list of url strings or null if none.",1,0,0,0,0,0,0,0,0,0,0,0
"ObjectImpl class is the base class for all stubs. It provides the basic  delegation mechanism. It extends org.omg.CORBA.portable.ObjectImpl and  provides new methods defined by CORBA 2.3.  Since:     JDK1.2 See Also:     ObjectImpl",1,0,0,0,0,0,0,0,0,0,0,0
"org/omg/CosNaming/Binding.java . Generated by the IDL-to-Java compiler  (portable), version 3.2 from  ../../../../src/share/classes/org/omg/CosNaming/nameservice.idl Monday,  April 4, 2011 1:26:23 PM GMT-08:00  See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: Streamable Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.  Specified by: _read in interface Streamable Parameters: i - the InputStream that represents the CDR data from the wire.",1,0,0,0,0,0,0,0,0,0,0,0
"The BindingIterator interface allows a client to iterate through the  bindings using the next_one or next_n operations. The bindings iterator is  obtained by using the list method on the NamingContext.  See Also:     NamingContextOperations.list(int, org.omg.CosNaming.BindingListHolder,     org.omg.CosNaming.BindingIteratorHolder)",1,0,0,0,0,0,0,1,0,0,0,0
"List of Bindings.",0,0,0,0,0,0,0,0,0,0,0,1
"Description copied from interface: Streamable Marshals to ostream the value in the value field of the Holder.  Specified by: _write in interface Streamable Parameters: o - the CDR OutputStream",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: Streamable Retrieves the TypeCode object corresponding to the value in the value field of the Holder.  Specified by: _type in interface Streamable Returns: the TypeCode object for the value held in the holder",1,0,0,0,0,0,0,0,0,0,0,1
"NamingContextExt is the extension of NamingContext which contains a set of  name bindings in which each name is unique and is part of Interoperable  Naming Service. Different names can be bound to an object in the same or  different contexts at the same time. Using NamingContextExt, you can use  URL-based names to bind and resolve.  See CORBA COS Naming Specification.",1,0,0,0,0,0,0,1,0,0,0,0
"StringName is the Stringified Name, Array of Name Components represented as  a String.",0,1,0,0,0,0,0,0,0,0,0,0
"A naming context is an object that contains a set of name bindings in which  each name is unique. Different names can be bound to an object in the same  or different contexts at the same time.  See CORBA COS Naming Specification.",0,1,0,0,0,0,0,0,0,0,0,0
"A naming context is an object that contains a set of name bindings in which  each name is unique. Different names can be bound to an object in the same  or different contexts at the same time.  See CORBA COS Naming Specification.",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: Streamable Retrieves the TypeCode object corresponding to the value in the value field of the Holder.  Specified by: _type in interface Streamable Returns: the TypeCode object for the value held in the holder",1,0,0,0,0,0,0,0,0,0,0,1
"org/omg/CosNaming/NamingContextPackage/InvalidNameHelper.java . Generated  by the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/CosNaming/nameservice.idl Monday,  April 4, 2011 1:26:24 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"org/omg/CosNaming/NamingContextPackage/InvalidNameHolder.java . Generated  by the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/CosNaming/nameservice.idl Monday,  April 4, 2011 1:26:24 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/CosNaming/NamingContextPackage/NotEmptyHolder.java . Generated by  the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/CosNaming/nameservice.idl Monday,  April 4, 2011 1:26:24 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"Indicates the reason for not able to resolve.",1,0,0,0,0,0,0,0,0,0,0,0
"Creates a binding of a name and an object in the naming context. Naming contexts that are bound using bind do not participate in name resolution when compound names are passed to be resolved.  Specified by: bind in interface NamingContextOperations Parameters: n - Name of the object  obj - The Object to bind with the given name  Throws: NotFound - Indicates the name does not identify a binding.  CannotProceed - Indicates that the implementation has given up for some reason. The client, however, may be able to continue the operation at the returned naming context.  InvalidName - Indicates that the name is invalid.  AlreadyBound - Indicates an object is already bound to the specified name.",1,0,0,0,0,0,0,0,0,0,0,1
"A naming context is an object that contains a set of name bindings in which  each name is unique. Different names can be bound to an object in the same  or different contexts at the same time.  See CORBA COS Naming Specification.  See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,1,0
"org/omg/Dynamic/Parameter.java . Generated by the IDL-to-Java compiler  (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:21 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"DynAny objects can be created by invoking operations on the DynAnyFactory  object. Generally there are only two ways to create a DynAny object:      * invoking an operation on an existing DynAny object     * invoking an operation on a DynAnyFactory object A constructed DynAny object supports operations that enable the creation of  new DynAny objects encapsulating access to the value of some constituent.  DynAny objects also support the copy operation for creating new DynAny  objects. A reference to the DynAnyFactory object is obtained by calling  ORB.resolve_initial_references() with the identifier parameter set to the  string constant DynAnyFactory.  Dynamic interpretation of an any usually involves creating a DynAny object  using create_dyn_any() as the first step. Depending on the type of the any,  the resulting DynAny object reference can be narrowed to a DynFixed,  DynStruct, DynSequence, DynArray, DynUnion, DynEnum, or DynValue object  reference.  Dynamic creation of an any involves creating a DynAny object using  create_dyn_any_from_type_code(), passing the TypeCode associated with the  value to be created. The returned reference is narrowed to one of the  complex types, such as DynStruct, if appropriate. Then, the value can be  initialized by means of invoking operations on the resulting object.  Finally, the to_any operation can be invoked to create an any value from  the constructed DynAny.",1,0,0,0,0,0,1,1,0,0,0,0
"DynAny objects can be created by invoking operations on the DynAnyFactory  object. Generally there are only two ways to create a DynAny object:      * invoking an operation on an existing DynAny object     * invoking an operation on a DynAnyFactory object A constructed DynAny object supports operations that enable the creation of  new DynAny objects encapsulating access to the value of some constituent.  DynAny objects also support the copy operation for creating new DynAny  objects. A reference to the DynAnyFactory object is obtained by calling  ORB.resolve_initial_references() with the identifier parameter set to the  string constant DynAnyFactory.  Dynamic interpretation of an any usually involves creating a DynAny object  using create_dyn_any() as the first step. Depending on the type of the any,  the resulting DynAny object reference can be narrowed to a DynFixed,  DynStruct, DynSequence, DynArray, DynUnion, DynEnum, or DynValue object  reference.  Dynamic creation of an any involves creating a DynAny object using  create_dyn_any_from_type_code(), passing the TypeCode associated with the  value to be created. The returned reference is narrowed to one of the  complex types, such as DynStruct, if appropriate. Then, the value can be  initialized by means of invoking operations on the resulting object.  Finally, the to_any operation can be invoked to create an any value from  the constructed DynAny.",1,0,0,0,0,0,1,1,0,0,0,0
"DynAny objects can be created by invoking operations on the DynAnyFactory  object. Generally there are only two ways to create a DynAny object:      * invoking an operation on an existing DynAny object     * invoking an operation on a DynAnyFactory object A constructed DynAny object supports operations that enable the creation of  new DynAny objects encapsulating access to the value of some constituent.  DynAny objects also support the copy operation for creating new DynAny  objects. A reference to the DynAnyFactory object is obtained by calling  ORB.resolve_initial_references() with the identifier parameter set to the  string constant DynAnyFactory.  Dynamic interpretation of an any usually involves creating a DynAny object  using create_dyn_any() as the first step. Depending on the type of the any,  the resulting DynAny object reference can be narrowed to a DynFixed,  DynStruct, DynSequence, DynArray, DynUnion, DynEnum, or DynValue object  reference.  Dynamic creation of an any involves creating a DynAny object using  create_dyn_any_from_type_code(), passing the TypeCode associated with the  value to be created. The returned reference is narrowed to one of the  complex types, such as DynStruct, if appropriate. Then, the value can be  initialized by means of invoking operations on the resulting object.  Finally, the to_any operation can be invoked to create an any value from  the constructed DynAny.",1,0,0,0,0,0,1,1,0,0,0,0
"org/omg/DynamicAny/DynAnyFactoryPackage/InconsistentTypeCodeHelper.java .  Generated by the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/DynamicAny/DynamicAny.idl Monday,  April 4, 2011 1:26:26 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"Initializes the value associated with a DynAny object with the value associated with another DynAny object. The current position of the target DynAny is set to zero for values that have components and to -1 for values that do not have components.  Parameters: dyn_any - Throws: TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny",1,0,0,0,0,0,0,0,0,0,0,1
"org/omg/DynamicAny/DynAnyPackage/InvalidValueHelper.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/DynamicAny/DynamicAny.idl Monday,  April 4, 2011 1:26:25 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"DynArray objects support the manipulation of IDL arrays. Note that the  dimension of the array is contained in the TypeCode which is accessible  through the type attribute. It can also be obtained by calling the  component_count operation.",1,0,0,0,0,0,1,1,0,0,0,0
"Initializes the struct data value associated with a DynStruct object from a sequence of NameValuePairs. The operation sets the current position to zero if the passed sequences has non-zero length. Otherwise, if an empty sequence is passed, the current position is set to -1.  Members must appear in the NameValuePairs in the order in which they appear in the IDL specification of the struct as indicated by the DynStruct's TypeCode or they must be empty strings. The operation makes no attempt to assign member values based on member names.  Throws: TypeMismatch - if the member names supplied in the passed sequence do not match the corresponding member name in the DynStruct's TypeCode and they are not empty strings InvalidValue - if the passed sequence has a number of elements that disagrees with the number of members as indicated by the DynStruct's TypeCode",1,0,1,0,1,0,1,0,0,0,0,0
"DynUnion objects support the manipulation of IDL unions. A union can have  only two valid current positions:      * zero, which denotes the discriminator     * one, which denotes the active member The component_count value for a union depends on the current discriminator:  it is 2 for a union whose discriminator indicates a named member, and 1  otherwise.",1,0,0,0,0,0,0,0,0,0,0,0
"DynUnion objects support the manipulation of IDL unions. A union can have  only two valid current positions:      * zero, which denotes the discriminator     * one, which denotes the active member The component_count value for a union depends on the current discriminator:  it is 2 for a union whose discriminator indicates a named member, and 1  otherwise.",1,0,0,0,1,0,0,0,0,0,0,0
"DynValueBox objects support the manipulation of IDL boxed value types. The  DynValueBox interface can represent both null and non-null value types. For  a DynValueBox representing a non-null value type, the DynValueBox has a  single component of the boxed type. A DynValueBox representing a null value  type has no components and a current position of -1.",1,0,1,0,0,0,1,0,0,0,0,0
"Initializes the value type's members from a sequence of NameValuePairs. The operation sets the current position to zero if the passed sequences has non-zero length. Otherwise, if an empty sequence is passed, the current position is set to -1. A null value type can be initialized to a non-null value type using this method.  Members must appear in the NameValuePairs in the order in which they appear in the IDL specification of the value type as indicated by the DynValue's TypeCode or they must be empty strings. The operation makes no attempt to assign member values based on member names.  Throws: TypeMismatch - if the member names supplied in the passed sequence do not match the corresponding member name in the DynValue's TypeCode and they are not empty strings InvalidValue - if the passed sequence has a number of elements that disagrees with the number of members as indicated by the DynValue's TypeCode",1,0,1,0,0,0,1,0,0,0,0,0
"org/omg/DynamicAny/FieldNameHelper.java . Generated by the IDL-to-Java  compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/DynamicAny/DynamicAny.idl Monday,  April 4, 2011 1:26:25 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/DynamicAny/NameValuePairHelper.java . Generated by the IDL-to-Java  compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/DynamicAny/DynamicAny.idl Monday,  April 4, 2011 1:26:25 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"Sets the DynArray to contain the passed elements.  Specified by: set_elements in interface DynArrayOperations Throws: TypeMismatch - if one or more elements have a type that is inconsistent with the DynArrays TypeCode InvalidValue - if the sequence does not contain the same number of elements as the array dimension",1,0,0,0,0,0,0,0,0,0,0,0
"Inserts a reference to a Serializable object into this DynAny. The IDL ValueBase type is mapped to the Java Serializable type.  Specified by: insert_val in interface DynAnyOperations Throws: InvalidValue - if this DynAny has components but has a current position of -1 TypeMismatch - if called on a DynAny whose current component itself has components",1,0,0,0,0,0,1,0,0,0,0,0
"Extracts the char value from this DynAny.  Specified by: get_char in interface DynAnyOperations Throws: TypeMismatch - if the accessed component in the DynAny is of a type that is not equivalent to the requested type. TypeMismatch - if called on a DynAny whose current component itself has components InvalidValue - if this DynAny has components but has a current position of -1",1,0,0,0,0,0,0,0,0,0,0,1
"Initializes the value associated with a DynAny object with the value associated with another DynAny object. The current position of the target DynAny is set to zero for values that have components and to -1 for values that do not have components.  Specified by: assign in interface DynAnyOperations Parameters: dyn_any - Throws: TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny",1,0,0,0,0,0,0,0,0,0,0,0
"DynFixed objects support the manipulation of IDL fixed values. Because IDL  does not have a generic type that can represent fixed types with arbitrary  number of digits and arbitrary scale, the operations use the IDL string  type.",1,1,0,0,0,0,0,0,0,0,0,0
"Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.  Specified by: get_octet in interface DynAnyOperations Throws: TypeMismatch - if the accessed component in the DynAny is of a type that is not equivalent to the requested type. TypeMismatch - if called on a DynAny whose current component itself has components InvalidValue - if this DynAny has components but has a current position of -1",1,0,0,0,0,0,0,0,0,0,0,0
"Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked. The operation is polymorphic, that is, invoking it on one of the types derived from DynAny, such as DynStruct, creates the derived type but returns its reference as the DynAny base type.  Specified by: copy in interface DynAnyOperations Returns: a deep copy of the DynAny object",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the number of components of a DynAny. For a DynAny without components, it returns zero. The operation only counts the components at the top level. For example, if component_count is invoked on a DynStruct with a single member, the return value is 1, irrespective of the type of the member. * For sequences, the operation returns the current number of elements. * For structures, exceptions, and value types, the operation returns the number of members. * For arrays, the operation returns the number of elements. * For unions, the operation returns 2 if the discriminator indicates that a named member is active, otherwise, it returns 1. * For DynFixed and DynEnum, the operation returns zero.  Specified by: component_count in interface DynAnyOperations",1,0,0,0,0,0,0,1,0,0,0,0
"Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.  Specified by: get_ulong in interface DynAnyOperations Throws: TypeMismatch - if the accessed component in the DynAny is of a type that is not equivalent to the requested type. TypeMismatch - if called on a DynAny whose current component itself has components InvalidValue - if this DynAny has components but has a current position of -1",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the DynAny for the component at the current position. It does not advance the current position, so repeated calls to current_component without an intervening call to rewind, next, or seek return the same component. The returned DynAny object reference can be used to get/set the value of the current component. If the current component represents a complex type, the returned reference can be narrowed based on the TypeCode to get the interface corresponding to the to the complex type. Calling current_component on a DynAny that cannot have components, such as a DynEnum or an empty exception, raises TypeMismatch. Calling current_component on a DynAny whose current position is -1 returns a nil reference. The iteration operations, together with current_component, can be used to dynamically compose an any value. After creating a dynamic any, such as a DynStruct, current_component and next can be used to initialize all the components of the value. Once the dynamic value is completely initialized, to_any creates the corresponding any value.  Specified by: current_component in interface DynAnyOperations Throws: TypeMismatch - If called on a DynAny that cannot have components, such as a DynEnum or an empty exception",1,0,0,1,0,0,0,1,0,0,0,0
"Inserts a reference to a CORBA object into the DynAny.  Specified by: insert_reference in interface DynAnyOperations Throws: InvalidValue - if this DynAny has components but has a current position of -1 TypeMismatch - if called on a DynAny whose current component itself has components",1,0,0,0,0,0,0,0,0,0,0,0
"org/omg/IOP/CodeSets.java . Generated by the IDL-to-Java compiler  (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/IOP.idl Monday,  April 4, 2011 1:26:19 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"Codecs are obtained from the CodecFactory. The CodecFactory is obtained  through a call to ORB.resolve_initial_references( CodecFactory ).",0,0,0,0,0,0,1,1,1,0,0,0
"Codecs are obtained from the CodecFactory. The CodecFactory is obtained  through a call to ORB.resolve_initial_references( CodecFactory ).",0,0,0,0,0,0,0,1,0,0,0,0
"org/omg/IOP/CodecFactoryPackage/UnknownEncoding.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/IOP.idl Monday,  April 4, 2011 1:26:20 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"Decodes the given byte array into an Any based on the given TypeCode and the encoding format effective for this Codec.  Parameters: data - The data, in the form of a byte array, to be decoded into an Any. tc - The TypeCode to be used to decode the data. Returns: An Any containing the data from the decoded byte array. Throws: FormatMismatch - thrown if the byte array cannot be decoded into an Any. TypeMismatch",1,0,0,0,0,0,0,0,0,0,0,1
"org/omg/IOP/CodecPackage/FormatMismatchHelper.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/IOP.idl Monday,  April 4, 2011 1:26:19 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/IOP/IOR.java . Generated by the IDL-to-Java compiler (portable),  version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/IOP.idl Monday,  April 4, 2011 1:26:19 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"A service id, represented as an int",0,0,0,0,0,0,0,0,0,0,0,1
"org/omg/IOP/TAG_INTERNET_IOP.java . Generated by the IDL-to-Java compiler  (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/IOP.idl Monday,  April 4, 2011 1:26:19 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"org/omg/IOP/TAG_JAVA_CODEBASE.java . Generated by the IDL-to-Java compiler  (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/IOP.idl Monday,  April 4, 2011 1:26:19 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"Description copied from interface: Streamable Marshals to ostream the value in the value field of the Holder.  Specified by: _write in interface Streamable Parameters: o - the CDR OutputStream",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: Streamable Marshals to ostream the value in the value field of the Holder.  Specified by: _write in interface Streamable Parameters: o - the CDR OutputStream",1,0,0,0,0,0,0,0,0,0,0,0
"org/omg/IOP/TransactionService.java . Generated by the IDL-to-Java compiler  (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/IOP.idl Monday,  April 4, 2011 1:26:19 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"Synchronization scope",0,0,0,0,0,0,0,0,0,0,0,1
"Client-side request interceptor.  A request Interceptor is designed to intercept the flow of a request/reply  sequence through the ORB at specific points so that services can query the  request information and manipulate the service contexts which are  propagated between clients and servers. The primary use of request  Interceptors is to enable ORB services to transfer context information  between clients and servers. There are two types of request Interceptors:  client-side and server-side.  To write a client-side Interceptor, implement the ClientRequestInterceptor  interface.  See Also:     ClientRequestInfo",1,0,0,1,0,0,1,1,0,0,0,0
"org/omg/PortableInterceptor/DISCARDING.java . Generated by the IDL-to-Java  compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:22 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"org/omg/PortableInterceptor/ForwardRequest.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:21 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableInterceptor/INACTIVE.java . Generated by the IDL-to-Java  compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:22 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"org/omg/PortableInterceptor/IORInterceptor_3_0.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:22 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableInterceptor/IORInterceptor_3_0Holder.java . Generated by  the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:22 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"org/omg/PortableInterceptor/ORBIdHelper.java . Generated by the IDL-to-Java  compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:22 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableInterceptor/ORBInitInfoPackage/InvalidNameHelper.java .  Generated by the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:22 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"Facilitates interceptor registration and ORB initialization.  Interceptors are intended to be a means by which ORB services gain access  to ORB processing, effectively becoming part of the ORB. Since Interceptors  are part of the ORB, when ORB.init returns an ORB, the Interceptors shall  have been registered. Interceptors cannot be registered on an ORB after it  has been returned by a call to ORB.init.  An Interceptor is registered by registering an associated ORBInitializer  object which implements the ORBInitializer interface. When an ORB is  initializing, it shall call each registered ORBInitializer, passing it an  ORBInitInfo object which is used to register its Interceptor.  Registering ORB Initializers in Java  ORBInitializers are registered via Java ORB properties.  The property names are of the form:      org.omg.PortableInterceptor.ORBInitializerClass.<Service>  where <Service> is the string name of a class which implements      org.omg.PortableInterceptor.ORBInitializer  To avoid name collisions, the reverse DNS name convention should be used.  For example, if company X has three initializers, it could define the  following properties:     * org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init1     * org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init2     * org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init3 During ORB.init, these ORB properties which begin with  org.omg.PortableInterceptor.ORBInitializerClass shall be collected, the  <Service> portion of each property shall be extracted, an object shall be  instantiated with the <Service> string as its class name, and the pre_init  and post_init methods shall be called on that object. If there are any  exceptions, the ORB shall ignore them and proceed.  Example  A client-side logging service written by company X, for example, may have  the following ORBInitializer implementation:   package com.x.logging; import org.omg.PortableInterceptor.Interceptor; import org.omg.PortableInterceptor.ORBInitializer; import org.omg.PortableInterceptor.ORBInitInfo; public class LoggingService implements ORBInitializer { void pre_init( ORBInitInfo info ) { // Instantiate the Logging Service s Interceptor. Interceptor interceptor = new LoggingInterceptor(); // Register the Logging Service s Interceptor. info.add_client_request_interceptor( interceptor ); } void post_init( ORBInitInfo info ) { // This service does not need two init points. } }   To run a program called MyApp using this logging service, the user could  type:      java     -Dorg.omg.PortableInterceptor.ORBInitializerClass.com.x.Logging.LoggingService     MyApp  Notes about Registering Interceptors  Request Interceptors are registered on a per-ORB basis.  To achieve virtual per-object Interceptors, query the policies on the  target from within the interception points to determine whether they should  do any work.  To achieve virtual per-POA Interceptors, instantiate each POA with a  different ORB. While Interceptors may be ordered administratively, there is  no concept of order with respect to the registration of Interceptors.  Request Interceptors are concerned with service contexts. Service contexts  have no order, so there is no purpose for request Interceptors to have an  order. IOR Interceptors are concerned with tagged components. Tagged  components also have no order, so there is no purpose for IOR Interceptors  to have an order.  Registration code should avoid using the ORB (i.e., calling ORB.init with  the provided orb_id). Since registration occurs during ORB initialization,  results of invocations on this ORB while it is in this state are undefined.  See Also:     ORBInitInfo",1,1,1,1,0,0,1,0,1,0,0,0
"Called during ORB initialization. If it is expected that initial services registered by an interceptor will be used by other interceptors, then those initial services shall be registered at this point via calls to ORBInitInfo.register_initial_reference.  Parameters: info - provides initialization attributes and operations by which Interceptors can be registered.",0,0,0,0,0,1,0,0,0,0,0,0
"The object reference factory. This provides the capability of creating an  object reference.",0,0,0,1,0,0,0,0,0,0,0,0
"Sequence of object reference templates is used for reporting state changes  that do not occur on the adapter manager.",0,1,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableInterceptor/SYSTEM_EXCEPTION.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:21 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableInterceptor/UNKNOWN.java . Generated by the IDL-to-Java  compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:22 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
" Indicates a UserException reply status. One possible value for RequestInfo.reply_status.  See Also: RequestInfoOperations.reply_status(), SUCCESSFUL, SYSTEM_EXCEPTION, LOCATION_FORWARD, TRANSPORT_RETRY, Constant Field Values ",1,0,1,0,0,0,0,0,0,0,0,0
"An adapter activator supplies a POA with the ability to create child POAs  on demand, as a side-effect of receiving a request that names the child POA  (or one of its children), or when find_POA is called with an activate  parameter value of TRUE.",1,0,0,0,0,0,1,0,0,0,0,0
"The PortableServer::Current interface, derived from CORBA::Current,  provides method implementations with access to the identity of the object  on which the method was invoked. The Current interface is provided to  support servants that implement multiple objects, but can be used within  the context of POA-dispatched method invocations on any servant. To provide  location transparency, ORBs are required to support use of Current in the  context of both locally and remotely invoked operations. An instance of  Current can be obtained by the application by issuing the  CORBA::ORB::resolve_initial_references(POACurrent) operation. Thereafter,  it can be used within the context of a method dispatched by the POA to  obtain the POA and ObjectId that identify the object on which that  operation was invoked.",0,0,0,1,0,0,0,1,0,0,0,0
"org/omg/PortableServer/CurrentPackage/NoContextHelper.java . Generated by  the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:18 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableServer/ForwardRequest.java . Generated by the IDL-to-Java  compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:17 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableServer/IMPLICIT_ACTIVATION_POLICY_ID.java . Generated by  the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:17 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"ImplicitActivationPolicyValue has the following semantics.  IMPLICIT_ACTIVATION to indicate implicit activation of servants. This  requires SYSTEM_ID and RETAIN policies to be set. NO_IMPLICIT_ACTIVATION to  indicate no implicit servant activation.",1,0,0,0,0,0,1,0,0,0,0,0
"org/omg/PortableServer/LIFESPAN_POLICY_ID.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:17 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"A POA object manages the implementation of a collection of objects. The POA  supports a name space for the objects, which are identified by Object Ids.  A POA also provides a name space for POAs. A POA is created as a child of  an existing POA, which forms a hierarchy starting with the root POA. A POA  object must not be exported to other processes, or externalized with  ORB::object_to_string.",1,0,1,0,0,0,1,1,0,0,0,0
"Each POA object has an associated POAManager object. A POA manager may be  associated with one or more POA objects. A POA manager encapsulates the  processing state of the POAs it is associated with.",0,0,0,0,0,0,1,0,0,0,0,0
"org/omg/PortableServer/POAManagerPackage/AdapterInactive.java . Generated  by the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:18 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"These operations each return a reference to a policy object with the specified value.  Parameters: value - policy type Returns: ThreadPolcy Object",1,0,0,0,0,0,0,0,0,0,0,1
"org/omg/PortableServer/POAPackage/AdapterNonExistent.java . Generated by  the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:18 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableServer/POAPackage/NoServant.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:18 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"org/omg/PortableServer/POAPackage/ObjectNotActive.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:18 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableServer/POAPackage/WrongAdapterHelper.java . Generated by  the IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:18 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0
"The RequestProcessingPolicyValue can have the following values.  USE_ACTIVE_OBJECT_MAP_ONLY - If the Object Id is not found in the Active  Object Map, an OBJECT_NOT_EXIST exception is returned to the client. The  RETAIN policy is also required. USE_DEFAULT_SERVANT - If the Object Id is  not found in the Active Object Map or the NON_RETAIN policy is present, and  a default servant has been registered with the POA using the set_servant  operation, the request is dispatched to the default servant.  USE_SERVANT_MANAGER - If the Object Id is not found in the Active Object  Map or the NON_RETAIN policy is present, and a servant manager has been  registered with the POA using the set_servant_manager operation, the  servant manager is given the opportunity to locate a servant or raise an  exception.",1,0,0,0,0,0,0,0,0,0,0,0
"org/omg/PortableServer/SERVANT_RETENTION_POLICY_ID.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableServer/poa.idl Monday, April  4, 2011 1:26:17 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,1
"Checks to see if the specified repository_id is present on the list returned by _all_interfaces() or is the repository_id for the generic CORBA Object.  Parameters: repository_id - the repository_id to be checked in the repository list or against the id of generic CORBA objects. Returns: is_a boolean indicating whether the specified repository_id is in the repository list or is same as a generic CORBA object.",0,0,0,0,0,0,0,0,0,0,0,0
"This operation is invoked by the POA whenever the POA receives a request for an object that is not currently active, assuming the POA has the USE_SERVANT_MANAGER and RETAIN policies.  Parameters: oid - object Id associated with the object on the request was made. adapter - object reference for the POA in which the object is being activated. Returns: Servant corresponding to oid is created or located by the user supplied servant manager. Throws: ForwardRequest - to indicate to the ORB that it is responsible for delivering the current request and subsequent requests to the object denoted in the forward_reference member of the exception.",1,0,0,0,0,0,1,0,0,0,0,0
"The native type PortableServer::ServantLocator::Cookie is mapped to  java.lang.Object. A CookieHolder class is provided for passing the Cookie  type as an out parameter. The CookieHolder class follows exactly the same  pattern as the other holder classes for basic types.",1,0,0,1,0,0,0,0,0,0,0,0
" See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"The ThreadPolicy specifies the threading model used with the created POA.  The default is ORB_CTRL_MODEL.",1,0,0,0,0,0,0,0,0,0,0,0
"The ThreadPolicy specifies the threading model used with the created POA.  The default is ORB_CTRL_MODEL.",0,0,0,0,0,0,0,0,0,0,0,0
"The portability package contains interfaces and classes that are designed  for and intended to be used by ORB implementor. It exposes the publicly  defined APIs that are used to connect stubs and skeletons to the ORB. The  Delegate interface provides the ORB vendor specific implementation of  PortableServer::Servant. Conformant to spec CORBA V2.3.1, ptc/00-01-08.pdf",1,0,0,0,0,0,0,0,0,0,0,0
"The method _object_id() is equivalent to calling PortableServer::Current::get_object_id.  Parameters: Self - the servant. Returns: ObjectId associated with this servant.",0,0,0,0,0,0,1,0,0,0,0,1
"Defines the base class that represents the Sending Context of a request.  The sending context provides access to information about the runtime  environment of the originator of a GIOP message. For example, when a value  type is marshalled on a GIOP Request message, the receiver of the value  type may need to ask the sender about the CodeBase for the implementation  of the value type.",1,1,0,0,0,0,0,0,0,0,0,0
"This class provides the Stub for the Remote Type. The class is generated by  the rmic compiler, and is still under works at OMG. It's contents are  subject to change without notice as the specification evolves.",0,0,0,0,0,0,0,0,0,0,0,1
"The DOMConfiguration interface represents the configuration of a document  and maintains a table of recognized parameters. Using the configuration, it  is possible to change Document.normalizeDocument() behavior, such as  replacing the CDATASection nodes with Text nodes or specifying the type of  the schema that must be used when the validation of the Document is  requested. DOMConfiguration objects are also used in [DOM Level 3 Load and  Save] in the DOMParser and DOMSerializer interfaces.  The parameter names used by the DOMConfiguration object are defined  throughout the DOM Level 3 specifications. Names are case-insensitive. To  avoid possible conflicts, as a convention, names referring to parameters  defined outside the DOM specification should be made unique. Because  parameters are exposed as properties in names are recommended to follow the  section 5.16 Identifiers of [Unicode] with the addition of the character  '-' (HYPHEN-MINUS) but it is not enforced by the DOM implementation. DOM  Level 3 Core Implementations are required to recognize all parameters  defined in this specification. Some parameter values may also be required  to be supported by the implementation. Refer to the definition of the  parameter to know if a value must be supported or not.  Note: Parameters are similar to features and properties used in SAX2 [SAX ].  The following list of parameters defined in the DOM:  canonical-form     true         [optional] Canonicalize the document according to the rules         specified in [Canonical XML], such as removing the DocumentType          node (if any) from the tree, or removing superfluous namespace         declarations from each element. Note that this is limited to what         can be represented in the DOM; in particular, there is no way to         specify the order of the attributes in the DOM. In addition,         Setting this parameter to true will also set the state of the         parameters listed below. Later changes to the state of one of those         parameters will revert canonical-form back to false. Parameters         set to false: entities,  normalize-characters,         cdata-sections. Parameters set to true: namespaces,         namespace-declarations, well-formed,         element-content-whitespace. Other parameters are not changed         unless explicitly specified in the description of the parameters.     false         [required] (default)Do not canonicalize the document. cdata-sections     true         [required] (default)Keep CDATASection nodes in the document.     false         [required]Transform CDATASection nodes in the document into Text          nodes. The new Text node is then combined with any adjacent Text          node. check-character-normalization     true         [optional] Check if the characters in the document are fully         normalized, as defined in appendix B of [XML 1.1]. When a sequence         of characters is encountered that fails normalization checking, an         error with the DOMError.type equals to         check-character-normalization-failure is issued.     false         [required] (default)Do not check if characters are normalized. comments     true         [required] (default)Keep Comment nodes in the document.     false         [required]Discard Comment nodes in the document. datatype-normalization     true         [optional] Expose schema normalized values in the tree, such as          XML Schema normalized values in the case of XML Schema. Since this         parameter requires to have schema information, the validate         parameter will also be set to true. Having this parameter activated         when validate is false has no effect and no schema-normalization         will happen.          Note: Since the document contains the result of the XML 1.0         processing, this parameter does not apply to attribute value         normalization as defined in section 3.3.3 of [XML 1.0] and is only         meant for schema languages other than Document Type Definition         (DTD).      false         [required] (default) Do not perform schema normalization on the         tree. element-content-whitespace     true         [required] (default)Keep all whitespaces in the document.     false         [optional] Discard all Text nodes that contain whitespaces in         element content, as described in [element content whitespace]. The         implementation is expected to use the attribute          Text.isElementContentWhitespace to determine if a Text node should         be discarded or not. entities     true         [required] (default)Keep EntityReference nodes in the document.     false         [required] Remove all EntityReference nodes from the document,         putting the entity expansions directly in their place. Text nodes         are normalized, as defined in Node.normalize. Only unexpanded         entity references are kept in the document.      Note: This parameter does not affect Entity nodes.  error-handler     [required] Contains a DOMErrorHandler object. If an error is     encountered in the document, the implementation will call back the      DOMErrorHandler registered using this parameter. The implementation may     provide a default DOMErrorHandler object. When called,      DOMError.relatedData will contain the closest node to where the error     occurred. If the implementation is unable to determine the node where     the error occurs, DOMError.relatedData will contain the Document node.     Mutations to the document from within an error handler will result in     implementation dependent behavior. infoset     true         [required]Keep in the document the information defined in the XML         Information Set [XML Information Set] .This forces the following         parameters to false:  validate-if-schema, entities,         datatype-normalization, cdata-sections .This forces the         following parameters to true:  namespace-declarations,         well-formed, element-content-whitespace,  comments,         namespaces.Other parameters are not changed unless explicitly         specified in the description of the parameters. Note that querying         this parameter with getParameter returns true only if the         individual parameters specified above are appropriately set.     false         Setting infoset to false has no effect. namespaces     true         [required] (default) Perform the namespace processing as defined in         .     false         [optional] Do not perform the namespace processing. namespace-declarations     This parameter has no effect if the parameter namespaces is set to      false.     true         [required] (default) Include namespace declaration attributes,         specified or defaulted from the schema, in the document. See also         the sections Declaring Namespaces in [XML Namespaces] and [XML         Namespaces 1.1] .     false         [required]Discard all namespace declaration attributes. The         namespace prefixes ( Node.prefix) are retained even if this         parameter is set to false. normalize-characters     true         [optional] Fully normalized the characters in the document as         defined in appendix B of [XML 1.1].     false         [required] (default)Do not perform character normalization. schema-location     [optional] Represent a DOMString object containing a list of URIs,     separated by whitespaces (characters matching the nonterminal     production S defined in section 2.3 [XML 1.0]), that represents the     schemas against which validation should occur, i.e. the current schema.     The types of schemas referenced in this list must match the type     specified with schema-type, otherwise the behavior of an implementation     is undefined. The schemas specified using this property take precedence     to the schema information specified in the document itself. For     namespace aware schema, if a schema specified using this property and a     schema specified in the document instance (i.e. using the      schemaLocation attribute) in a schema document (i.e. using schema      import mechanisms) share the same targetNamespace, the schema specified     by the user using this property will be used. If two schemas specified     using this property share the same targetNamespace or have no     namespace, the behavior is implementation dependent. If no location has     been provided, this parameter is null.      Note: The schema-location parameter is ignored unless the     schema-type parameter value is set. It is strongly recommended that      Document.documentURI will be set so that an implementation can     successfully resolve any external entities referenced.  schema-type     [optional] Represent a DOMString object containing an absolute URI and     representing the type of the schema language used to validate a     document against. Note that no lexical checking is done on the absolute     URI. If this parameter is not set, a default value may be provided by     the implementation, based on the schema languages supported and on the     schema language used at load time. If no value is provided, this     parameter is null.      Note: For XML Schema [XML Schema Part 1] , applications must use the     value http://www.w3.org/2001/XMLSchema. For XML DTD [XML 1.0],     applications must use the value http://www.w3.org/TR/REC-xml. Other     schema languages are outside the scope of the W3C and therefore should     recommend an absolute URI in order to use this method.  split-cdata-sections     true         [required] (default)Split CDATA sections containing the CDATA         section termination marker ']]>'. When a CDATA section is split a         warning is issued with a DOMError.type equals to          cdata-sections-splitted and DOMError.relatedData equals to the         first CDATASection node in document order resulting from the split.     false         [required]Signal an error if a CDATASection contains an         unrepresentable character. validate     true         [optional] Require the validation against a schema (i.e. XML         schema, DTD, any other type or representation of schema) of the         document as it is being normalized as defined by [XML 1.0]. If         validation errors are found, or no schema was found, the error         handler is notified. Schema-normalized values will not be exposed         according to the schema in used unless the parameter         datatype-normalization is true. This parameter will reevaluate:             * Attribute nodes with Attr.specified equals to false, as               specified in the description of the Attr interface;             * The value of the attribute Text.isElementContentWhitespace                for all Text nodes;             * The value of the attribute Attr.isId for all Attr nodes;             * The attributes Element.schemaTypeInfo and                Attr.schemaTypeInfo.          Note: validate-if-schema and validate are mutually exclusive,         setting one of them to true will set the other one to false.         Applications should also consider setting the parameter         well-formed to true, which is the default for that option, when         validating the document.      false         [required] (default) Do not accomplish schema processing, including         the internal subset processing. Default attribute values         information are kept. Note that validation might still happen if         validate-if-schema is true . validate-if-schema     true         [optional]Enable validation only if a declaration for the document         element can be found in a schema (independently of where it is         found, i.e. XML schema, DTD, or any other type or representation of         schema). If validation is enabled, this parameter has the same         behavior as the parameter validate set to true.          Note: validate-if-schema and validate are mutually exclusive,         setting one of them to true will set the other one to false.      false         [required] (default) No schema processing should be performed if         the document has a schema, including internal subset processing.         Default attribute values information are kept. Note that validation         must still happen if validate  is true. well-formed     true         [required] (default) Check if all nodes are XML well formed         according to the XML version in use in Document.xmlVersion:             * check if the attribute Node.nodeName contains invalid               characters according to its node type and generate a                DOMError of type wf-invalid-character-in-node-name, with a                DOMError.SEVERITY_ERROR severity, if necessary;             * check if the text content inside Attr, Element, Comment,                Text, CDATASection nodes for invalid characters and generate               a DOMError of type wf-invalid-character, with a                DOMError.SEVERITY_ERROR severity, if necessary;             * check if the data inside ProcessingInstruction nodes for               invalid characters and generate a DOMError of type                wf-invalid-character, with a DOMError.SEVERITY_ERROR                severity, if necessary;     false         [optional] Do not check for XML well-formedness.  The resolution of the system identifiers associated with entities is done  using Document.documentURI. However, when the feature LS defined in [DOM  Level 3 Load and Save] is supported by the DOM implementation, the  parameter resource-resolver can also be used on DOMConfiguration objects  attached to Document nodes. If this parameter is set,  Document.normalizeDocument() will invoke the resource resolver instead of  using Document.documentURI.  See also the Document Object Model (DOM) Level 3 Core Specification.  Since:     DOM Level 3",1,0,1,1,0,0,1,0,0,0,1,0
" If an invalid or illegal string is specified.  Since: DOM Level 2 See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,1,0
"The DOMImplementation interface provides a number of methods for performing  operations that are independent of any particular instance of the document  object model.  See also the Document Object Model (DOM) Level 3 Core Specification.",1,0,0,0,0,0,0,0,0,0,1,0
"The DOMImplementationList interface provides the abstraction of an ordered  collection of DOM implementations, without defining or constraining how  this collection is implemented. The items in the DOMImplementationList are  accessible via an integral index, starting from 0.  See also the Document Object Model (DOM) Level 3 Core Specification.  Since:     DOM Level 3",0,0,0,0,0,0,0,0,0,0,1,0
"The Document interface represents the entire HTML or XML document.  Conceptually, it is the root of the document tree, and provides the primary  access to the document's data.  Since elements, text nodes, comments, processing instructions, etc. cannot  exist outside the context of a Document, the Document interface also  contains the factory methods needed to create these objects. The Node  objects created have a ownerDocument attribute which associates them with  the Document within whose context they were created.  See also the Document Object Model (DOM) Level 3 Core Specification.",1,1,0,1,0,0,1,0,0,0,1,0
"The Document Type Declaration (see DocumentType) associated with this document. For XML documents without a document type declaration this returns null. For HTML documents, a DocumentType object may be returned, independently of the presence or absence of document type declaration in the HTML document. This provides direct access to the DocumentType node, child node of this Document. This node can be set at document creation time and later changed through the use of child nodes manipulation methods, such as Node.insertBefore, or Node.replaceChild. Note, however, that while some implementations may instantiate different types of Document objects supporting additional features than the Core, such as HTML [DOM Level 2 HTML] , based on the DocumentType specified at creation time, changing it afterwards is very unlikely to result in a change of the features supported.  Since: DOM Level 3",1,0,0,0,0,0,0,0,0,0,1,0
"The location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument. No lexical checking is performed when setting this attribute; this could result in a null value returned when using Node.baseURI . Beware that when the Document supports the feature HTML [DOM Level 2 HTML] , the href attribute of the HTML BASE element takes precedence over this attribute when computing Node.baseURI.  Since: DOM Level 3",1,0,0,0,0,0,0,0,0,0,1,0
"Retrieves a node specified by name.  Parameters: name - The nodeName of a node to retrieve. Returns: A Node (of any type) with the specified nodeName, or null if it does not identify any node in this map.",1,0,0,0,0,0,0,0,0,0,0,0
"The name of this node, depending on its type; see the table above.",0,0,0,0,0,0,0,0,0,0,0,1
"This method checks if the specified namespaceURI is the default namespace or not.  Parameters: namespaceURI - The namespace URI to look for. Returns: Returns true if the specified namespaceURI is the default namespace, false otherwise. Since: DOM Level 3",1,0,0,0,0,0,0,0,0,0,0,0
"The ProcessingInstruction interface represents a processing instruction,  used in XML as a way to keep processor-specific information in the text of  the document.  No lexical check is done on the content of a processing instruction and it  is therefore possible to have the character sequence ?> in the content,  which is illegal a processing instruction per section 2.6 of [XML 1.0]. The  presence of this character sequence must generate a fatal error during  serialization.  See also the Document Object Model (DOM) Level 3 Core Specification.",1,0,0,0,0,0,0,0,0,0,1,0
"The TypeInfo interface represents a type referenced from Element or Attr  nodes, specified in the schemas associated with the document. The type is a  pair of a namespace URI and name properties, and depends on the document's  schema.  If the document's schema is an XML DTD [XML 1.0], the values are computed  as follows:      * If this type is referenced from an Attr node, typeNamespace is        http://www.w3.org/TR/REC-xml and typeName represents the        [attribute type] property in the [XML Information Set] . If there is       no declaration for the attribute, typeNamespace and typeName are        null.     * If this type is referenced from an Element node, typeNamespace and        typeName are null.  If the document's schema is an XML Schema [XML Schema Part 1] , the values  are computed as follows using the post-schema-validation infoset  contributions (also called PSVI contributions):      * If the [validity] property exists AND is invalid or notKnown: the       {target namespace} and {name} properties of the declared type if       available, otherwise null.        Note: At the time of writing, the XML Schema specification does not       require exposing the declared type. Thus, DOM implementations might       choose not to provide type information if validity is not valid.      * If the [validity] property exists and is valid:          1. If [member type definition] exists:                1. If {name} is not absent, then expose {name} and {target                   namespace} properties of the [member type definition]                    property;                2. Otherwise, expose the namespace and local name of the                   corresponding anonymous type name.          2. If the [type definition] property exists:                1. If {name} is not absent, then expose {name} and {target                   namespace} properties of the [type definition] property;                2. Otherwise, expose the namespace and local name of the                   corresponding anonymous type name.          3. If the [member type definition anonymous] exists:                1. If it is false, then expose [member type definition name]                    and [member type definition namespace] properties;                2. Otherwise, expose the namespace and local name of the                   corresponding anonymous type name.          4. If the [type definition anonymous] exists:                1. If it is false, then expose [type definition name] and                    [type definition namespace] properties;                2. Otherwise, expose the namespace and local name of the                   corresponding anonymous type name.  Note: Other schema languages are outside the scope of the W3C and therefore  should define how to represent their type systems using TypeInfo.  See also the Document Object Model (DOM) Level 3 Core Specification.  Since:     DOM Level 3",1,1,1,0,0,0,1,0,0,1,1,0
"A factory that enables applications to obtain instances of  DOMImplementation.  Example:   // get an instance of the DOMImplementation registry DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance(); // get a DOM implementation the Level 3 XML module DOMImplementation domImpl = registry.getDOMImplementation(XML 3.0);   This provides an application with an implementation-independent starting  point. DOM implementations may modify this class to meet new security  standards or to provide *additional* fallbacks for the list of  DOMImplementationSources.  Since:     DOM Level 3 See Also:     DOMImplementation, DOMImplementationSource",1,0,0,1,0,0,0,1,1,0,0,0
"Return a list of implementations that support the desired features.  Parameters: features - A string that specifies which features are required. This is a space separated list in which each feature is specified by its name optionally followed by a space and a version number. This is something like: XML 1.0 Traversal +Events 2.0 Returns: A list of DOMImplementations that support the desired features.",1,0,0,0,0,0,0,0,0,0,0,1
"The EventListener interface is the primary method for handling events.  Users implement the EventListener interface and register their listener on  an EventTarget using the AddEventListener method. The users should also  remove their EventListener from its EventTarget after they have completed  using the listener.  When a Node is copied using the cloneNode method the EventListeners  attached to the source Node are not attached to the copied Node. If the  user wishes the same EventListeners to be added to the newly created copy  the user must add them manually.  See also the Document Object Model (DOM) Level 2 Events Specification.  Since:     DOM Level 2",1,0,1,1,0,0,0,0,0,0,1,0
"The MouseEvent interface provides specific contextual information  associated with Mouse events.  The detail attribute inherited from UIEvent indicates the number of times a  mouse button has been pressed and released over the same screen location  during a user action. The attribute value is 1 when the user begins this  action and increments by 1 for each full sequence of pressing and  releasing. If the user moves the mouse between the mousedown and mouseup  the value will be set to 0, indicating that no click is occurring.  In the case of nested elements mouse events are always targeted at the most  deeply nested element. Ancestors of the targeted element may use bubbling  to obtain notification of mouse events which occur within its descendent  elements.  See also the Document Object Model (DOM) Level 2 Events Specification.  Since:     DOM Level 2",1,0,0,1,0,0,1,0,0,0,1,0
"The horizontal coordinate at which the event occurred relative to the DOM implementation's client area.",1,0,0,0,0,0,0,0,0,0,0,0
"An attribute of a language and binding dependent type that represents a stream of bytes. If the application knows the character encoding of the byte stream, it should set the encoding attribute. Setting the encoding in this way will override any encoding specified in an XML declaration in the data.",0,0,0,0,0,0,0,0,0,0,0,0
"The base URI to be used (see section 5.1.4 in [IETF RFC 2396]) for resolving a relative systemId to an absolute URI. If, when used, the base URI is itself a relative URI, an empty string, or null, the behavior is implementation dependent.",1,0,0,0,0,0,0,0,0,0,1,0
"This interface represents an output destination for data.  This interface allows an application to encapsulate information about an  output destination in a single object, which may include a URI, a byte  stream (possibly with a specified encoding), a base URI, and/or a character  stream.  The exact definitions of a byte stream and a character stream are binding  dependent.  The application is expected to provide objects that implement this  interface whenever such objects are needed. The application can either  provide its own objects that implement this interface, or it can use the  generic factory method DOMImplementationLS.createLSOutput() to create  objects that implement this interface.  The LSSerializer will use the LSOutput object to determine where to  serialize the output to. The LSSerializer will look at the different  outputs specified in the LSOutput in the following order to know which one  to output to, the first one that is not null and not an empty string will  be used:     1. LSOutput.characterStream    2. LSOutput.byteStream    3. LSOutput.systemId  LSOutput objects belong to the application. The DOM implementation will  never modify them (though it may make copies and modify the copies, if  necessary).  See also the Document Object Model (DOM) Level 3 Load and Save  Specification.",1,0,1,1,1,1,1,1,0,0,0,0
"LSResourceResolver provides a way for applications to redirect references  to external resources.  Applications needing to implement custom handling for external resources  can implement this interface and register their implementation by setting  the resource-resolver parameter of DOMConfiguration objects attached to  LSParser and LSSerializer. It can also be register on DOMConfiguration  objects attached to Document if the LS feature is supported.  The LSParser will then allow the application to intercept any external  entities, including the external DTD subset and external parameter  entities, before including them. The top-level document entity is never  passed to the resolveResource method.  Many DOM applications will not need to implement this interface, but it  will be especially useful for applications that build XML documents from  databases or other specialized input sources, or for applications that use  URNs.  Note: LSResourceResolver is based on the SAX2 [SAX] EntityResolver  interface.  See also the Document Object Model (DOM) Level 3 Load and Save  Specification.",1,0,0,1,0,0,0,1,0,0,1,0
"public interface AttributeList   Interface for an element's attribute specifications.      This module, both source code and documentation, is in the Public     Domain, and comes with NO WARRANTY. See http://www.saxproject.org for     further information.  This is the original SAX1 interface for reporting an element's attributes.  Unlike the new Attributes interface, it does not support Namespace-related  information.  When an attribute list is supplied as part of a startElement event, the  list will return valid results only during the scope of the event; once the  event handler returns control to the parser, the attribute list is invalid.  To save a persistent copy of the attribute list, use the SAX1  AttributeListImpl helper class.  An attribute list includes only attributes that have been specified or  defaulted: \#IMPLIED attributes will not be included.  There are two ways for the SAX application to obtain information from the  AttributeList. First, it can iterate through the entire list:   public void startElement (String name, AttributeList atts) { for (int i = 0; i < atts.getLength(); i++) { String name = atts.getName(i); String type = atts.getType(i); String value = atts.getValue(i); [...] } }   (Note that the result of getLength() will be zero if there are no  attributes.)  As an alternative, the application can request the value or type of  specific attributes:   public void startElement (String name, AttributeList atts) { String identifier = atts.getValue(id); String label = atts.getValue(label); [...] }   Since:     SAX 1.0 See Also:     startElement, AttributeListImpl",0,0,0,0,0,0,1,1,1,0,0,0
"Receive notification of basic DTD-related events.      This module, both source code and documentation, is in the Public     Domain, and comes with NO WARRANTY. See http://www.saxproject.org for     further information.  If a SAX application needs information about notations and unparsed  entities, then the application implements this interface and registers an  instance with the SAX parser using the parser's setDTDHandler method. The  parser uses the instance to report notation and unparsed entity  declarations to the application.  Note that this interface includes only those DTD events that the XML  recommendation requires processors to report: notation and unparsed entity  declarations.  The SAX parser may report these events in any order, regardless of the  order in which the notations and unparsed entities were declared; however,  all DTD events must be reported after the document handler's startDocument  event, and before the first startElement event. (If the LexicalHandler is  used, these events must also be reported before the endDTD event.)  It is up to the application to store the information for future use  (perhaps in a hash table or object tree). If the application encounters  attributes of type NOTATION, ENTITY, or ENTITIES, it can use the  information that it obtained through this interface to find the entity  and/or notation corresponding with the attribute value.  Since:     SAX 1.0 See Also:     XMLReader.setDTDHandler(org.xml.sax.DTDHandler)",1,0,0,0,0,0,1,1,0,0,0,0
"Basic interface for resolving entities.      This module, both source code and documentation, is in the Public     Domain, and comes with NO WARRANTY. See http://www.saxproject.org for     further information.  If a SAX application needs to implement customized handling for external  entities, it must implement this interface and register an instance with  the SAX driver using the setEntityResolver method.  The XML reader will then allow the application to intercept any external  entities (including the external DTD subset and external parameter  entities, if any) before including them.  Many SAX applications will not need to implement this interface, but it  will be especially useful for applications that build XML documents from  databases or other specialised input sources, or for applications that use  URI types other than URLs.  The following resolver would provide the application with a special  character stream for the entity with the system identifier  http://www.myhost.com/today:   import org.xml.sax.EntityResolver; import org.xml.sax.InputSource;  public class MyResolver implements EntityResolver { public InputSource resolveEntity (String publicId, String systemId) { if (systemId.equals(http://www.myhost.com/today)) { // return a special input source MyReader reader = new MyReader(); return new InputSource(reader); } else { // use the default behaviour return null; } } }   The application can also use this interface to redirect system identifiers  to local URIs or to look up replacements in a catalog (possibly by using  the public identifier).  Since:     SAX 1.0 See Also:     XMLReader.setEntityResolver(org.xml.sax.EntityResolver), InputSource",1,0,1,1,0,1,0,1,1,0,0,0
"Deprecated. Resolve an external entity.  Always return null, so that the parser will use the system identifier provided in the XML document. This method implements the SAX default behaviour: application writers can override it in a subclass to do special translations such as catalog lookups or URI redirection.  Specified by: resolveEntity in interface EntityResolver Parameters: publicId - The public identifer, or null if none is available. systemId - The system identifier provided in the XML document. Returns: The new input source, or null to require the default behaviour. Throws: SAXException - Any SAX exception, possibly wrapping another exception. See Also: EntityResolver.resolveEntity(java.lang.String, java.lang.String)",1,0,0,0,0,0,0,1,0,0,0,1
"Set the character stream for this input source.  If there is a character stream specified, the SAX parser will ignore any byte stream and will not attempt to open a URI connection to the system identifier.  Parameters: characterStream - The character stream containing the XML document or other entity. See Also: getCharacterStream(), Reader",1,0,0,0,0,0,0,0,0,0,0,0
"Interface for associating a SAX event with a document location.      This module, both source code and documentation, is in the Public     Domain, and comes with NO WARRANTY. See http://www.saxproject.org for     further information.  If a SAX parser provides location information to the SAX application, it  does so by implementing this interface and then passing an instance to the  application using the content handler's setDocumentLocator method. The  application can use the object to obtain the location of any other SAX  event in the XML source document.  Note that the results returned by the object will be valid only during the  scope of each callback method: the application will receive unpredictable  results if it attempts to use the locator at any other time, or after  parsing completes.  SAX parsers are not required to supply a locator, but they are very  strongly encouraged to do so. If the parser supplies a locator, it must do  so before reporting any other document events. If no locator has been set  by the time the application receives the startDocument event, the  application should assume that a locator is not available.  Since:     SAX 1.0 See Also:     ContentHandler.setDocumentLocator(org.xml.sax.Locator)",1,0,0,1,0,0,0,1,0,1,1,0
"Return the column number where the current document event ends. This is one-based number of Java char values since the last line end.  Warning: The return value from the method is intended only as an approximation for the sake of diagnostics; it is not intended to provide sufficient information to edit the character content of the original XML document. For example, when lines contain combining character sequences, wide characters, surrogate pairs, or bi-directional text, the value may not correspond to the column in a text editor's display.  The return value is an approximation of the column number in the document entity or external parsed entity where the markup triggering the event appears.  If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first column in each line is column 1.  Returns: The column number, or -1 if none is available. See Also: getLineNumber()",1,0,0,0,0,0,0,0,0,0,0,0
"SAX2 extension handler for DTD declaration events.      This module, both source code and documentation, is in the Public     Domain, and comes with NO WARRANTY. See http://www.saxproject.org for     further information.  This is an optional extension handler for SAX2 to provide more complete  information about DTD declarations in an XML document. XML readers are not  required to recognize this handler, and it is not part of core-only SAX2  distributions.  Note that data-related DTD declarations (unparsed entities and notations)  are already reported through the DTDHandler interface.  If you are using the declaration handler together with a lexical handler,  all of the events will occur between the startDTD and the endDTD events.  To set the DeclHandler for an XML reader, use the setProperty method with  the property name http://xml.org/sax/properties/declaration-handler and an  object implementing this interface (or null) as the value. If the reader  does not report declaration events, it will throw a  SAXNotRecognizedException when you attempt to register the handler.  Since:     SAX 2.0 (extensions 1.0)",1,0,0,0,0,0,0,1,0,0,1,0
"Description copied from interface: LexicalHandler Report the beginning of some internal and external XML entities.  The reporting of parameter entities (including the external DTD subset) is optional, and SAX2 drivers that report LexicalHandler events may not implement it; you can use the http://xml.org/sax/features/lexical-handler/parameter-entities feature to query or control the reporting of parameter entities.  General entities are reported with their regular names, parameter entities have '%' prepended to their names, and the external DTD subset has the pseudo-entity name [dtd].  When a SAX2 driver is providing these events, all other events must be properly nested within start/end entity events. There is no additional requirement that events from DeclHandler or DTDHandler be properly ordered.  Note that skipped entities will be reported through the skippedEntity event, which is part of the ContentHandler interface.  Because of the streaming event model that SAX uses, some entity boundaries cannot be reported under any circumstances:  * general entities within attribute values * parameter entities within declarations  These will be silently expanded, with no indication of where the original entity boundaries were.  Note also that the boundaries of character references (which are not really entities anyway) are not reported.  All start/endEntity events must be properly nested.  Specified by: startEntity in interface LexicalHandler Parameters: name - The name of the entity. If it is a parameter entity, the name will begin with '%', and if it is the external DTD subset, it will be [dtd]. Throws: SAXException - The application may raise an exception. See Also: LexicalHandler.endEntity(java.lang.String), DeclHandler.internalEntityDecl(java.lang.String, java.lang.String) , DeclHandler.externalEntityDecl(java.lang.String, java.lang.String, java.lang.String)",1,0,0,0,0,1,1,0,0,0,0,0
"SAX2 extension to augment the entity information provided though a Locator . If an implementation supports this extension, the Locator provided in  ContentHandler.setDocumentLocator() will implement this interface, and the  http://xml.org/sax/features/use-locator2 feature flag will have the value  true.      This module, both source code and documentation, is in the Public     Domain, and comes with NO WARRANTY.  XMLReader implementations are not required to support this information, and  it is not part of core-only SAX2 distributions.  Since:     SAX 2.0 (extensions 1.1 alpha)",1,0,0,1,0,0,1,0,0,0,0,0
"Copy an existing Locator or Locator2 object. If the object implements Locator2, values of the encoding and versionstrings are copied, otherwise they set to null.  Parameters: locator - The existing Locator object.",1,0,0,0,0,0,0,0,0,0,0,0
"Default implementation of the Attributes interface.      This module, both source code and documentation, is in the Public     Domain, and comes with NO WARRANTY. See http://www.saxproject.org for     further information.  This class provides a default implementation of the SAX2 Attributes  interface, with the addition of manipulators so that the list can be  modified or reused.  There are two typical uses of this class:     1. to take a persistent snapshot of an Attributes object in a        startElement event; or    2. to construct or modify an Attributes object in a SAX2 driver or       filter.  This class replaces the now-deprecated SAX1 AttributeListImpl class; in  addition to supporting the updated Attributes interface rather than the  deprecated AttributeList interface, it also includes a much more efficient  implementation using a single array rather than a set of Vectors.  Since:     SAX 2.0",1,0,0,0,0,0,1,1,0,0,1,0
"Return the saved public identifier.  Specified by: getPublicId in interface Locator Returns: The public identifier as a string, or null if none is available. See Also: Locator.getPublicId(), setPublicId(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,0
"Adapt a SAX1 Parser as a SAX2 XMLReader.      This module, both source code and documentation, is in the Public     Domain, and comes with NO WARRANTY. See http://www.saxproject.org for     further information.  This class wraps a SAX1 Parser and makes it act as a SAX2 XMLReader, with  feature, property, and Namespace support. Note that it is not possible to  report skippedEntity events, since SAX1 does not make that information  available.  This adapter does not test for duplicate Namespace-qualified attribute  names.  Since:     SAX 2.0 See Also:     XMLReaderAdapter, XMLReader, Parser",0,1,0,1,0,0,0,0,0,0,1,0
"Create a new adapter.  Create a new adapter, wrapped around a SAX2 XMLReader. The adapter will make the XMLReader act like a SAX1 Parser.  Parameters: xmlReader - The SAX2 XMLReader to wrap. Throws: NullPointerException - If the argument is null.",1,0,0,0,0,0,1,0,0,0,0,1
"Register the SAX1 document event handler.  Note that the SAX1 document handler has no Namespace support.  Specified by: setDocumentHandler in interface Parser Parameters: handler - The new SAX1 document event handler. See Also: Parser.setDocumentHandler(org.xml.sax.DocumentHandler)",0,1,0,0,0,0,0,0,0,0,0,0
"Parse the document.  This method will throw an exception if the embedded XMLReader does not support the http://xml.org/sax/features/namespace-prefixes property.  Specified by: parse in interface Parser Parameters: input - An input source for the document. Throws: IOException - If there is a problem reading the raw content of the document. SAXException - If there is a problem processing the document. See Also: parse(java.lang.String), Parser.parse(org.xml.sax.InputSource)",1,0,0,0,0,0,0,0,0,0,0,0
"Adapt a SAX2 skipped entity event.  Specified by: skippedEntity in interface ContentHandler Parameters: name - The name of the skipped entity. Throws: SAXException - Throwable by subclasses. See Also: ContentHandler.skippedEntity(java.lang.String)",1,0,0,0,0,0,0,0,0,0,0,0
"The PreDestroy annotation is used on methods as a callback notification to  signal that the instance is in the process of being removed by the  container. The method annotated with PreDestroy is typically used to  release resources that it has been holding. This annotation MUST be  supported by all container managed objects that support PostConstruct  except the application client container in Java EE 5. The method on which  the PreDestroy annotation is applied MUST fulfill all of the following  criteria - - The method MUST NOT have any parameters except in the case of  EJB interceptors in which case it takes an InvocationContext object as  defined by the EJB specification. - The return type of the method MUST be  void. - The method MUST NOT throw a checked exception. - The method on  which PreDestroy is applied MAY be public, protected, package private or  private. - The method MUST NOT be static. - The method MAY be final. - If  the method throws an unchecked exception it is ignored except in the case  of EJBs where the EJB can handle exceptions.  Since:     Common Annotations 1.0 See Also:     PostConstruct, Resource  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,1,1,0,0,0,0,0,1,1,0
"The Resource annotation marks a resource that is needed by the application.  This annotation may be applied to an application component class, or to  fields or methods of the component class. When the annotation is applied to  a field or method, the container will inject an instance of the requested  resource into the application component when the component is initialized.  If the annotation is applied to the component class, the annotation  declares a resource that the application will look up at runtime.  Even though this annotation is not marked Inherited, deployment tools are  required to examine all superclasses of any component class to discover all  uses of this annotation in all superclasses. All such annotation instances  specify resources that are needed by the application component. Note that  this annotation may appear on private fields and methods of superclasses;  the container is required to perform injection in these cases as well.  Since:     Common Annotations 1.0  Optional Element Summary  Resource.AuthenticationType 	authenticationType           The authentication type to use for this resource.  java.lang.String 	description           Description of this resource.  java.lang.String 	lookup           The name of the resource that the reference points to.  java.lang.String 	mappedName           A product specific name that this resource should be mapped to.  java.lang.String 	name           The JNDI name of the resource.  boolean 	shareable           Indicates whether this resource can be shared between this  component and other components.  java.lang.Class 	type           The Java type of the resource.     name   public abstract java.lang.String name      The JNDI name of the resource. For field annotations, the default is     the field name. For method annotations, the default is the JavaBeans     property name corresponding to the method. For class annotations, there     is no default and this must be specified.      Default:            lookup   public abstract java.lang.String lookup      The name of the resource that the reference points to. It can link to     any compatible resource using the global JNDI names.      Since:         Common Annotations 1.1     Default:            type   public abstract java.lang.Class type      The Java type of the resource. For field annotations, the default is     the type of the field. For method annotations, the default is the type     of the JavaBeans property. For class annotations, there is no default     and this must be specified.      Default:         java.lang.Object.class   authenticationType   public abstract Resource.AuthenticationType authenticationType      The authentication type to use for this resource. This may be specified     for resources representing a connection factory of any supported type,     and must not be specified for resources of other types.      Default:         javax.annotation.Resource.AuthenticationType.CONTAINER   shareable   public abstract boolean shareable      Indicates whether this resource can be shared between this component     and other components. This may be specified for resources representing     a connection factory of any supported type, and must not be specified     for resources of other types.      Default:         true   mappedName   public abstract java.lang.String mappedName      A product specific name that this resource should be mapped to. The     name of this resource, as defined by the name element or defaulted, is     a name that is local to the application component using the resource.     (It's a name in the JNDI java:comp/env namespace.) Many application     servers provide a way to map these local names to names of resources     known to the application server. This mapped name is often a global      JNDI name, but may be a name of any form.      Application servers are not required to support any particular form or     type of mapped name, nor the ability to use mapped names. The mapped     name is product-dependent and often installation-dependent. No use of a     mapped name is portable.      Default:            description   public abstract java.lang.String description      Description of this resource. The description is expected to be in the     default language of the system on which the application is deployed.     The description can be presented to the Deployer to help in choosing     the correct resource.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,1,0,0,0,0,0
"This class is used to allow multiple resources declarations.  Since:     Common Annotations 1.0 See Also:     Resource  Required Element Summary  Resource[] 	value           Array used for multiple resource declarations.    Element Detail   value   public abstract Resource[] value      Array used for multiple resource declarations.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,1,0,0,0,0,0,0,0,0
"Specifies that all security roles are allowed to invoke the specified  method(s) i.e that the specified method(s) are unchecked. It can be  specified on a class or on methods. Specifying it on the class means that  it applies to all methods of the class. If specified at the method level,  it only affects that method. If the RolesAllowed is specified at the class  level and this annotation is applied at the method level, the PermitAll  annotation overrides the RolesAllowed for the specified method.  Since:     Common Annotations 1.0 See Also:     RolesAllowed, DenyAll  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,0,0,0,0,0,0,0,0,0,0
"Annotation used to define a container DataSource and be registered with  JNDI. The DataSource may be configured by setting the annotation elements  for commonly used DataSource properties. Additional standard and  vendor-specific properties may be specified using the properties element.  The data source will be registered under the name specified in the name  element. It may be defined to be in any valid Java EE namespace, and will  determine the accessibility of the data source from other components.  A JDBC driver implementation class of the appropriate type, either  DataSource, ConnectionPoolDataSource, or XADataSource, must be indicated by  the className element. The availability of the driver class will be assumed  at runtime.  The url property should not be specified in conjunction with other standard  properties for defining the connectivity to the database. If the url  property is specified along with other standard DataSource properties such  as serverName and portNumber, the more specific properties will take  precedence and url will be ignored.  Vendors are not required to support properties that do not normally apply  to a specific data source type. For example, specifying the transactional  property to be true but supplying a value for className that implements a  data source class other than XADataSource may not be supported.  Vendor-specific properties may be combined with or used to override  standard data source properties defined using this annotation.  DataSource properties that are specified and are not supported in a given  configuration or cannot be mapped to a vendor specific configuration  property may be ignored.  Examples:   @DataSourceDefinition(name=java:global/MyApp/MyDataSource, className=com.foobar.MyDataSource, portNumber=6689, serverName=myserver.com, user=lance, password=secret )    Using a URL:   @DataSourceDefinition(name=java:global/MyApp/MyDataSource, className=org.apache.derby.jdbc.ClientDataSource, url=jdbc:derby://localhost:1527/myDB, user=lance, password=secret )   An example lookup of the DataSource from an EJB:   @Stateless public class MyStatelessEJB { @Resource(lookup=java:global/MyApp/myDataSource) DataSource myDB; ... }   Since:     Common Annotations 1.1 See Also:     DataSource, XADataSource, ConnectionPoolDataSource  Required Element Summary  java.lang.String 	className           DataSource implementation class name which implements:  javax.sql.DataSource or javax.sql.XADataSource or  javax.sql.ConnectionPoolDataSource.  java.lang.String 	name           JNDI name by which the data source will be registered.   Optional Element Summary  java.lang.String 	databaseName           Name of a database on a server.  java.lang.String 	description           Description of this data source  int 	initialPoolSize           Number of connections that should be created when a connection  pool is initialized.  int 	isolationLevel           Isolation level for connections.  int 	loginTimeout           Sets the maximum time in seconds that this data source will wait  while attempting to connect to a database.  int 	maxIdleTime           The number of seconds that a physical connection should remain  unused in the pool before the connection is closed for a connection pool.  int 	maxPoolSize           Maximum number of connections that should be concurrently  allocated for a connection pool.  int 	maxStatements           The total number of statements that a connection pool should keep  open.  int 	minPoolSize           Minimum number of connections that should be allocated for a  connection pool.  java.lang.String 	password           Password to use for connection authentication.  int 	portNumber           Port number where a server is listening for requests.  java.lang.String[] 	properties           Used to specify Vendor specific properties and less commonly used  DataSource properties such as:  java.lang.String 	serverName           Database server name.  boolean 	transactional           Set to false if connections should not participate in  transactions.  java.lang.String 	url           A JDBC URL.  java.lang.String 	user           User name to use for connection authentication.    Element Detail   name   public abstract java.lang.String name      JNDI name by which the data source will be registered.      Since:         1.1   className   public abstract java.lang.String className      DataSource implementation class name which implements:      javax.sql.DataSource or javax.sql.XADataSource or      javax.sql.ConnectionPoolDataSource.      Since:         1.1   description   public abstract java.lang.String description      Description of this data source      Since:         1.1     Default:            url   public abstract java.lang.String url      A JDBC URL. If the url property is specified along with other standard      DataSource properties such as serverName and portNumber, the more     specific properties will take precedence and url will be ignored.      Since:         1.1     Default:            user   public abstract java.lang.String user      User name to use for connection authentication.      Since:         1.1     Default:            password   public abstract java.lang.String password      Password to use for connection authentication.      Since:         1.1     Default:            databaseName   public abstract java.lang.String databaseName      Name of a database on a server.      Since:         1.1     Default:            portNumber   public abstract int portNumber      Port number where a server is listening for requests.      Since:         1.1     Default:         -1   serverName   public abstract java.lang.String serverName      Database server name.      Since:         1.1     Default:         localhost   isolationLevel   public abstract int isolationLevel      Isolation level for connections. The Isolation level must be one of the     following:          * Connection.TRANSACTION_NONE,         * Connection.TRANSACTION_READ_ UNCOMMITTED,         * Connection.TRANSACTION_READ_COMMITTED,         * Connection.TRANSACTION_REPEATABLE_READ,         * Connection.TRANSACTION_SERIALIZABLE      Default is vendor-specific.      Since:         1.1     Default:         -1   transactional   public abstract boolean transactional      Set to false if connections should not participate in transactions.      Default is to enlist in a transaction when one is active or becomes     active.      Since:         1.1     Default:         true   initialPoolSize   public abstract int initialPoolSize      Number of connections that should be created when a connection pool is     initialized.      Default is vendor-specific      Since:         1.1     Default:         -1   maxPoolSize   public abstract int maxPoolSize      Maximum number of connections that should be concurrently allocated for     a connection pool.      Default is vendor-specific.      Since:         1.1     Default:         -1   minPoolSize   public abstract int minPoolSize      Minimum number of connections that should be allocated for a connection     pool.      Default is vendor-specific.      Since:         1.1     Default:         -1   maxIdleTime   public abstract int maxIdleTime      The number of seconds that a physical connection should remain unused     in the pool before the connection is closed for a connection pool.      Default is vendor-specific      Since:         1.1     Default:         -1   maxStatements   public abstract int maxStatements      The total number of statements that a connection pool should keep open.     A value of 0 indicates that the caching of statements is disabled for a     connection pool.      Default is vendor-specific      Since:         1.1     Default:         -1   properties   public abstract java.lang.String[] properties      Used to specify Vendor specific properties and less commonly used      DataSource properties such as:          * dataSourceName         * networkProtocol         * propertyCycle         * roleName      Properties are specified using the format: propertyName=propertyValue      with one property per array element.      Since:         1.1     Default:         {}   loginTimeout   public abstract int loginTimeout      Sets the maximum time in seconds that this data source will wait while     attempting to connect to a database. A value of zero specifies that the     timeout is the default system timeout if there is one; otherwise, it     specifies that there is no timeout.      Default is vendor-specific.      Since:         1.1     Default:         0 Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,1,0,0,0
"Identifies the delegate injection point of a decorator. May be applied to a  field, bean constructor parameter or initializer method parameter of a  decorator bean class.   @Decorator class TimestampLogger implements Logger { @Inject @Delegate @Any Logger logger; ... }    @Decorator class TimestampLogger implements Logger { private Logger logger;  @Inject public TimestampLogger(@Delegate @Debug Logger logger) { this.logger=logger; } ... }   A decorator must have exactly one delegate injection point. The delegate  injection point must be an injected field, initializer method parameter or  bean constructor method parameter.  The container injects a delegate object to the delegate injection point.  The delegate object implements the delegate type and delegates method  invocations along the decorator stack. When the container calls a decorator  during business method interception, the decorator may invoke any method of  the delegate object. If a decorator invokes the delegate object at any  other time, the invoked method throws an IllegalStateException.   @Decorator class TimestampLogger implements Logger { @Inject @Delegate @Any Logger logger;  void log(String message) { logger.log( timestamp() + :  + message ); } ... }   Author:     Gavin King, Pete Muir See Also:     @Decorator specifies that a class is a decorator.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,1,1,0,1,0,0,0
"Designate a stateful session bean method to receive the after begin session  synchronization callback.  The after begin callback notifies a stateful session bean instance that a  new transaction has started and that the subsequent business methods on the  instance will be invoked in the context of the transaction.  This method executes in the proper transaction context. A bean must have at  most one AfterBegin method. The signature of this method must observe the  following rules:      * The method must not be declared as final or static.     * The method may have any access type.     * The return type must be void.     * The method must take no arguments.  This method executes with no transaction context.  A stateful session bean class may use either the SessionSynchronization  interface or the session synchronization annotations, but not both.  Since:     EJB 3.1 See Also:     SessionSynchronization, BeforeCompletion, AfterCompletion  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,1,0,0,0,0,0
"This method should not be called. See Class-level comments.  Specified by: isDone in interface java.util.concurrent.Future<V>",0,0,1,0,0,0,0,0,0,0,0,0
"This exception indicates that an attempt to concurrently access a stateful  session or singleton bean method resulted in a timeout.  Since:     EJB 3.1 See Also:     AccessTimeout, Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Used to express an initialization dependency between singleton components.  The container ensures that all singleton beans with which a singleton has a  DependsOn relationship have been initialized before the singleton's  PostConstruct method is called.  During application shutdown the container ensures that all singleton beans  on with which the singleton has a DependsOn relationship are still  available during the singleton's PreDestroy method.  Since:     EJB 3.1  Required Element Summary  java.lang.String[] 	value           The ejb-names of singleton components whose initialization must  occur before this singleton.    Element Detail   value   public abstract java.lang.String[] value      The ejb-names of singleton components whose initialization must occur     before this singleton. The order in which these names are listed is not     significant.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,0,0,0,1,0,0,0,0,0,0
"Obtain the exception that caused the EJBException to be thrown. It is recommended that the inherited Throwable.getCause() method be used to retrieve the cause instead of this method.",1,0,0,0,0,0,0,0,0,0,0,0
"The EJBHome interface must be extended by all enterprise beans' remote home  interfaces. An enterprise bean's remote home interface defines the methods  that allow a remote client to create, find, and remove EJB objects.  The remote home interface is defined by the enterprise bean provider and  implemented by the enterprise bean container.  Enterprise beans written to the EJB 3.0 and later APIs do not require a  home interface.  Since:     EJB 1.0",1,0,1,0,0,0,0,0,0,1,0,0
"Obtain the enterprise bean's local home interface. The local home interface defines the enterprise bean's create, finder, remove, and home business methods that are available to local clients.  Returns: A reference to the enterprise bean's local home interface. Throws: EJBException - Thrown when the method failed due to a system-level failure.",1,0,0,0,0,0,1,0,0,0,0,1
"The EntityBean interface is implemented by every entity bean class. The  container uses the EntityBean methods to notify the entity bean instances  of the instance's life cycle events.  Applications written to the EJB 3.0 and later APIs should use the  facilities of the Java Persistence API (javax.persistence) to model  persistent entities.  Since:     EJB 1.0",1,0,1,1,0,0,0,0,0,0,0,0
"The Handle interface is implemented by all EJB object handles. A handle is  an abstraction of a network reference to an EJB object. A handle is  intended to be used as a robust persistent reference to an EJB object.  Since:     EJB 1.0",1,0,0,1,0,0,0,0,0,0,0,0
"This exception indicates that an attempt was made to perform an illegal  loopback invocation. One possible cause is a loopback call to a singleton  bean's container-managed concurrency Lock(WRITE) method where the current  thread does not already hold a WRITE lock.  Since:     EJB 3.1 See Also:     Serialized Form",0,1,0,0,0,0,0,0,0,0,0,1
"Declares the local business interface(s) for a session bean.  The Local annotation is applied to the session bean class or local business  interface to designate a local interface of the bean.  When used on the bean class, declares the local business interface(s) for a  session bean. When used on an interface, designates that interface as a  local business interface. In this case, no value element should be  provided.  The Local annotation applies only to session beans and their interfaces.  Use of the Local annotation is only required when the bean class does not  implement only a single interface other than any of the following:  java.io.Serializable; java.io.Externalizable; any of the interfaces defined  in javax.ejb.  Since:     EJB 3.0  Optional Element Summary  java.lang.Class[] 	value           Specifies the local business interface(s) of the bean.     value   public abstract java.lang.Class[] value      Specifies the local business interface(s) of the bean. The value      element is specified only when the annotation is applied to the bean     class. It is only required to be specified if the bean class implements     more than one interface (excluding java.io.Serializable,      java.io.Externalizable, and any of the interfaces defined by the      javax.ejb package).      Default:         {} Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,1,0,0,0,0
"Designates that a session bean exposes a no-interface view.  Since:     EJB 3.1  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
"Concurrency lock type for singleton beans with container-managed  concurrency.  Since:     EJB 3.1",1,0,0,0,0,0,0,0,0,0,0,0
"Component-defining annotation for a message driven bean.  The message driven bean must implement the appropriate message listener  interface for the messaging type that the message-driven bean supports or  specify the message listener interface using the messageListenerInterface  element of this annotation.  Since:     EJB 3.0 See Also:     ActivationConfigProperty  Optional Element Summary  ActivationConfigProperty[] 	activationConfig           Activation config properties.  java.lang.String 	description           A string describing the message driven bean.  java.lang.String 	mappedName           A product specific name(e.g.  java.lang.Class 	messageListenerInterface           Message-listener interface.  java.lang.String 	name           The ejb-name for this bean.     name   public abstract java.lang.String name      The ejb-name for this bean. Defaults to the unqualified name of the     message driven bean class.      Default:            messageListenerInterface   public abstract java.lang.Class messageListenerInterface      Message-listener interface. If the message-driven bean class implements     more than one interface other than java.io.Serializable,      java.io.Externalizable, or any of the interfaces defined by the      javax.ejb package, the message listener interface must be specified.      Default:         java.lang.Object.class   activationConfig   public abstract ActivationConfigProperty[] activationConfig      Activation config properties.      Default:         {}   mappedName   public abstract java.lang.String mappedName      A product specific name(e.g. global JNDI name of a queue) that this     message-driven bean should be mapped to. Application servers are not     required to support any particular form or type of mapped name, nor the     ability to use mapped names. The mapped name is product-dependent and     often installation-dependent. No use of a mapped name is portable.      Default:            description   public abstract java.lang.String description      A string describing the message driven bean.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,0,0,0,0,0,1
"Constructs a NoSuchEJBException with no detail message.",1,0,0,0,0,0,0,0,0,0,0,0
"The NoSuchEntityException exception is thrown by an entity bean instance to  its container to report that the invoked business method or callback method  could not be completed because of the underlying entity was removed from  the database.  This exception may be thrown by the bean class methods that implement the  business methods defined in the bean's component interface and by the  ejbLoad and ejbStore methods.  Since:     EJB 1.1 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Designates a method to receive a callback after a stateful session bean has  been activated.  The method to which this annotation is applied must have the following  signature.   void <METHOD>()   The method can have public, private, protected, or package level access. It  must not be declared as final or static.  Since:     EJB 3.0  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,0,0,1,0,0,0
"Declares the remote business interface(s) for a session bean.  The Remote annotation is applied to the session bean class or remote  business interface to designate a remote business interface of the bean.  When used on an interface, designates that interface as a remote business  interface. In this case, no value element should be provided.  The Remote annotation applies only to session beans and their interfaces.  Since:     EJB 3.0  Optional Element Summary  java.lang.Class[] 	value           Specifies the remote business interface(s) of the bean.     value   public abstract java.lang.Class[] value      Specifies the remote business interface(s) of the bean. The value      element is specified only when the annotation is applied to the bean     class. It is only required to be specified if the bean class implements     more than one interface (excluding java.io.Serializable,      java.io.Externalizable, and any of the interfaces defined by the      javax.ejb package).      Default:         {} Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,1,0,0,1,0,0,0,0,0
"The SessionBean interface defines methods that the EJB container uses to  notify a session bean instance of the instance's life cycle events.  As of EJB 3.0 it is no longer required that a session bean class implement  this interface.  Since:     EJB 1.0",0,0,1,1,0,0,0,0,0,1,0,0
"The activate method is called when a stateful session bean instance is activated from its passive state. The instance should acquire any resource that it has released earlier in the ejbPassivate method.  This method is called with no transaction context.  Throws: EJBException - Thrown by the method to indicate a failure caused by a system-level error. RemoteException - This exception is defined in the method signature to provide backward compatibility for enterprise beans written for the EJB 1.0 specification. Enterprise beans written for the EJB 1.1 specification should throw the javax.ejb.EJBException instead of this exception. Enterprise beans written for the EJB2.0 and higher specifications must throw the javax.ejb.EJBException instead of this exception.",0,0,1,0,0,1,1,0,0,0,0,0
"Component-defining annotation for a singleton session bean.  Since:     EJB 3.1  Optional Element Summary  java.lang.String 	description           A string describing the singleton session bean.  java.lang.String 	mappedName           A product specific name(for example, global JNDI name) that this  session bean should be mapped to.  java.lang.String 	name           The ejb-name for this bean.     name   public abstract java.lang.String name      The ejb-name for this bean. Defaults to the unqualified name of the     singleton session bean class.      Default:            mappedName   public abstract java.lang.String mappedName      A product specific name(for example, global JNDI name) that this     session bean should be mapped to. Application servers are not required     to support any particular form or type of mapped name, nor the ability     to use mapped names. The mapped name is product-dependent and often     installation-dependent. No use of a mapped name is portable.      Default:            description   public abstract java.lang.String description      A string describing the singleton session bean.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,0,0,0,0,0,0,0,0,0
"Component-defining annotation for a stateful session bean.  Since:     EJB 3.0  Optional Element Summary  java.lang.String 	description           A string describing the stateful session bean.  java.lang.String 	mappedName           A product specific name(e.g.  java.lang.String 	name           The ejb-name for this bean.     name   public abstract java.lang.String name      The ejb-name for this bean. Defaults to the unqualified name of the     stateful session bean class.      Default:            mappedName   public abstract java.lang.String mappedName      A product specific name(e.g. global JNDI name) that this session bean     should be mapped to. Application servers are not required to support     any particular form or type of mapped name, nor the ability to use     mapped names. The mapped name is product-dependent and often     installation-dependent. No use of a mapped name is portable.      Default:            description   public abstract java.lang.String description      A string describing the stateful session bean.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
"Used to execute an EJB application in an embeddable container.  Since:     EJB 3.1",1,0,0,0,0,0,0,0,0,0,0,0
"Shutdown an embeddable EJBContainer instance. Embeddable applications should always call close() in order to free up the resources associated with the embeddable container.",1,0,0,0,0,1,0,0,0,0,0,0
"The HandleDelegate interface is implemented by the EJB container. It is  used by portable implementations of javax.ejb.Handle and  javax.ejb.HomeHandle. It is not used by EJB components or by client  components. It provides methods to serialize and deserialize EJBObject and  EJBHome references to streams.  The HandleDelegate object is obtained by JNDI lookup at the reserved name  java:comp/HandleDelegate.  Since:     EJB 2.0",1,0,0,1,0,0,1,1,0,0,0,0
"Deserialize the EJBObject reference corresponding to a Handle.  The readEJBObject method is called from the readObject method of portable Handle implementation classes. The istream object is the same object that was passed in to the Handle class's readObject method. When readEJBObject is called, istream must point to the location in the stream at which the EJBObject reference can be read. The container must ensure that the EJBObject reference is capable of performing invocations immediately after deserialization.  Parameters: istream - The input stream. Returns: The deserialized EJBObject reference. Throws: java.io.IOException - The EJBObject could not be deserialized because of a system-level failure. java.lang.ClassNotFoundException - The EJBObject could not be deserialized because some class could not be found.",1,0,1,0,1,1,0,0,0,0,0,1
"If the base object is an array, returns the most general acceptable type for a value in this array.  If the base is a array, the propertyResolved property of the ELContext object must be set to true by this resolver, before returning. If this property is not true after this method is called, the caller should ignore the return value.  Assuming the base is an array, this method will always return base.getClass().getComponentType(), which is the most general type of component that can be stored at any given index in the array.  Specified by: getType in class ELResolver Parameters: context - The context of this evaluation. base - The array to analyze. Only bases that are Java language arrays are handled by this resolver. property - The index of the element in the array to return the acceptable type for. Will be coerced into an integer, but otherwise ignored by this resolver. Returns: If the propertyResolved property of ELContext was set to true, then the most general acceptable type; otherwise undefined. Throws: PropertyNotFoundException - if the given index is out of bounds for this array. java.lang.NullPointerException - if context is null ELException - if an exception was thrown while performing the property or variable resolution. The thrown exception must be included as the cause property of this exception, if available.",1,0,1,0,0,0,0,0,1,0,0,0
"Associates a context object with this ELContext.  The ELContext maintains a collection of context objects relevant to the evaluation of an expression. These context objects are used by ELResolvers. This method is used to add a context object to that collection.  By convention, the contextObject will be of the type specified by the key. However, this is not required and the key is used strictly as a unique identifier.  Parameters: key - The key used by an @{link ELResolver} to identify this context object. contextObject - The context object to add to the collection. Throws: java.lang.NullPointerException - if key is null or contextObject is null.",1,0,0,0,0,0,0,0,0,0,0,0
"Enables customization of variable, property and method call resolution  behavior for EL expression evaluation.  While evaluating an expression, the ELResolver associated with the  ELContext is consulted to do the initial resolution of the first variable  of an expression. It is also consulted when a . or [] operator is  encountered.  For example, in the EL expression ${employee.lastName}, the ELResolver  determines what object employee refers to, and what it means to get the  lastName property on that object.  Most methods in this class accept a base and property parameter. In the  case of variable resolution (e.g. determining what employee refers to in  ${employee.lastName}), the base parameter will be null and the property  parameter will always be of type String. In this case, if the property is  not a String, the behavior of the ELResolver is undefined.  In the case of property resolution, the base parameter identifies the base  object and the property object identifies the property on that base. For  example, in the expression ${employee.lastName}, base is the result of the  variable resolution for employee and property is the string lastName. In  the expression ${y[x]}, base is the result of the variable resolution for  y and property is the result of the variable resolution for x.  In the case of method call resolution, the base parameter indentifies the  base object and the method parameter identifies a method on that base. In  the case of overloaded methods, the paramTypes parameter can be optionally  used to identify a method. The paramsparameter are the parameters for the  method call, and can also be used for resolving overloaded methods when the  paramTypes parameter is not specified.  Though only a single ELResolver is associated with an ELContext, there are  usually multiple resolvers considered for any given variable or property  resolution. ELResolvers are combined together using CompositeELResolvers,  to define rich semantics for evaluating an expression.  For the getValue(javax.el.ELContext, java.lang.Object, java.lang.Object),  getType(javax.el.ELContext, java.lang.Object, java.lang.Object),  setValue(javax.el.ELContext, java.lang.Object, java.lang.Object,  java.lang.Object) and isReadOnly(javax.el.ELContext, java.lang.Object,  java.lang.Object) methods, an ELResolver is not responsible for resolving  all possible (base, property) pairs. In fact, most resolvers will only  handle a base of a single type. To indicate that a resolver has  successfully resolved a particular (base, property) pair, it must set the  propertyResolved property of the ELContext to true. If it could not handle  the given pair, it must leave this property alone. The caller must ignore  the return value of the method if propertyResolved is false.  The getFeatureDescriptors(javax.el.ELContext, java.lang.Object) and  getCommonPropertyType(javax.el.ELContext, java.lang.Object) methods are  primarily designed for design-time tool support, but must handle invocation  at runtime as well. The Beans.isDesignTime() method can be used to  determine if the resolver is being consulted at design-time or runtime.  Since:     JSP 2.1 See Also:     CompositeELResolver, ELContext\#getELResolver",1,0,1,1,0,0,1,0,1,0,0,0
"Creates a new ListELResolver whose read-only status is determined by the given parameter.  Parameters: isReadOnly - true if this resolver cannot modify lists; false otherwise.",1,0,0,0,0,0,0,0,0,0,0,0
"Defines property resolution behavior on instances of ResourceBundle.  This resolver handles base objects of type java.util.ResourceBundle. It  accepts any object as a property and coerces it to a java.lang.String for  invoking ResourceBundle.getObject(java.lang.String).  This resolver is read only and will throw a PropertyNotWritableException  if setValue is called.  ELResolvers are combined together using CompositeELResolvers, to define  rich semantics for evaluating an expression. See the javadocs for  ELResolver for details.  Since:     JSP 2.1 See Also:     CompositeELResolver, ELResolver, ResourceBundle",1,0,0,1,0,0,1,1,0,0,0,0
"Returns the type the result of the expression will be coerced to after evaluation.  Returns: the expectedType passed to the ExpressionFactory.createValueExpression method that created this ValueExpression.",1,0,0,0,0,0,0,0,0,0,0,1
"This encapsulates a base model object and one of its properties.  Since:     EL 2.2 See Also:     Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
"Specifies that a bean is conversation scoped.  The conversation scope is active:      * during all standard lifecycle phases of any JSF faces or non-faces       request.  The conversation context provides access to state associated with a  particular conversation. Every JSF request has an associated conversation.  This association is managed automatically by the container according to the  following rules:      * Any JSF request has exactly one associated conversation.     * The conversation associated with a JSF request is determined at the       beginning of the restore view phase and does not change during the       request.  Any conversation is in one of two states: transient or long-running.      * By default, a conversation is transient     * A transient conversation may be marked long-running by calling        Conversation.begin()     * A long-running conversation may be marked transient by calling        Conversation.end()  All long-running conversations have a string-valued unique identifier,  which may be set by the application when the conversation is marked  long-running, or generated by the container.  If the conversation associated with the current JSF request is in the  transient state at the end of a JSF request, it is destroyed, and the  conversation context is also destroyed.  If the conversation associated with the current JSF request is in the  long-running state at the end of a JSF request, it is not destroyed.  Instead, it may be propagated to other requests according to the following  rules:      * The long-running conversation context associated with a request that       renders a JSF view is automatically propagated to any faces request       (JSF form submission) that originates from that rendered page.     * The long-running conversation context associated with a request that       results in a JSF redirect (a redirect resulting from a navigation       rule or JSF NavigationHandler) is automatically propagated to the       resulting non-faces request, and to any other subsequent request to       the same URL. This is accomplished via use of a GET request parameter       named cid containing the unique identifier of the conversation.     * The long-running conversation associated with a request may be       propagated to any non-faces request via use of a GET request       parameter named cid containing the unique identifier of the       conversation. In this case, the application must manage this request       parameter.  When no conversation is propagated to a JSF request, the request is  associated with a new transient conversation. All long-running  conversations are scoped to a particular HTTP servlet session and may not  cross session boundaries. In the following cases, a propagated long-running  conversation cannot be restored and reassociated with the request:      * When the HTTP servlet session is invalidated, all long-running       conversation contexts created during the current session are       destroyed, after the servlet service() method completes.     * The container is permitted to arbitrarily destroy any long-running       conversation that is associated with no current JSF request, in order       to conserve resources.  Author:     Gavin King, Pete Muir See Also:     Conversation, NonexistentConversationException,      BusyConversationException  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,1,0,0,1,1,0,0,0,0
"Specifies that a bean belongs to the dependent pseudo-scope.  Beans declared with scope @Dependent behave differently to beans with other  built-in scope types. When a bean is declared to have scope @Dependent:      * No injected instance of the bean is ever shared between multiple       injection points.     * Any instance of the bean injected into an object that is being       created by the container is bound to the lifecycle of the newly       created object.     * When a Unified EL expression in a JSF or JSP page that refers to the       bean by its EL name is evaluated, at most one instance of the bean is       instantiated. This instance exists to service just a single       evaluation of the EL expression. It is reused if the bean EL name       appears multiple times in the EL expression, but is never reused when       the EL expression is evaluated again, or when another EL expression       is evaluated.     * Any instance of the bean that receives a producer method, producer       field, disposer method or observer method invocation exists to       service that invocation only.     * Any instance of the bean injected into method parameters of a       disposer method or observer method exists to service the method       invocation only.  Every invocation of the Context.get(Contextual, CreationalContext)  operation of the context object for the @Dependent scope returns a new  instance of the given bean.  Every invocation of the Context.get(Contextual) operation of the context  object for the @Dependent scope returns a null value.  The @Dependent scope is always active.  Many instances of beans with scope @Dependent belong to some other bean or  Java EE component class instance and are called dependent objects.      * Instances of decorators and interceptors are dependent objects of the       bean instance they decorate.     * An instance of a bean with scope @Dependent injected into a field,       bean constructor or initializer method is a dependent object of the       bean or Java EE component class instance into which it was injected.     * An instance of a bean with scope @Dependent injected into a producer       method is a dependent object of the producer method bean instance       that is being produced.     * An instance of a bean with scope @Dependent obtained by direct       invocation of an Instance is a dependent object of the instance of        Instance.  When the container destroys an instance of a bean or of any Java EE  component class supporting injection, the container destroys all its  dependent objects, after the @PreDestroy callback completes and after the  servlet destroy() method is called.  Author:     Gavin King, Pete Muir  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,1,1,0,0,0,0,0
"Get the scope type of the context object.  Returns: the scope",1,0,0,0,0,0,0,0,0,0,0,1
"Provides operations that are used by the Contextual implementation during  instance creation and destruction.  Author:     Gavin King, Pete Muir",1,0,0,0,0,0,1,0,0,0,0,0
"An interface for beans that represent a fragment of a standard deployment  descriptor. A link is provided to the Java EE application that includes  this bean.",0,0,0,0,0,0,1,0,0,0,0,0
"Returns the InputStream for the given entry name The file name must be relative to the root of the module.  Parameters: name - the file name relative to the root of the module. Returns: the InputStream for the given entry name or null if not found.",0,0,1,0,0,0,0,0,0,0,0,0
"This exception reports errors in generating a DDBean.  Author:     gfink See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs an DDBeanCreateException with the specified detail message.  Parameters: msg - the detail message.",0,0,0,0,0,0,0,0,0,0,0,0
"Construct a new enumeration value with the given integer value.  Parameters: value - Integer value.",1,0,0,0,0,0,0,0,0,0,0,1
"Class ModuleTypes defines enumeration values for the Java EE module types.  Author:     Rebecca Searls",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the lowest integer value used by this enumeration value's enumeration class.  The default implementation returns 0. If the enumeration class (a subclass of class EnumSyntax) uses integer values starting at other than 0, override this method in the subclass.  Returns: the offset of the lowest enumeration value.",0,0,0,0,0,0,0,0,0,0,0,0
"The DeploymentFactoryManager class is a central registry for Java EE  DeploymentFactory objects. The DeploymentFactoryManager retains references  to DeploymentFactory objects loaded by a tool. A DeploymentFactory object  provides a reference to a DeploymentManager. The DeploymentFactoryManager  has been implemented as a singleton. A tool gets a reference to the  DeploymentFactoryManager via the getInstance method. The  DeploymentFactoryManager can return two types of DeploymentManagers, a  connected DeploymentManager and a disconnected DeploymentManager. The  connected DeploymentManager provides access to any product resources that  may be required for configurations and deployment. The method to retrieve a  connected DeploymentManager is getDeploymentManager. This method provides  parameters for user name and password that the product may require for user  authentication. A disconnected DeploymentManager does not provide access to  a running Java EE product. The method to retrieve a disconnected  DeploymentManager is getDisconnectedDeploymentManager. A disconnected  DeploymentManager does not need user authentication information.",1,0,1,0,0,0,1,1,0,0,0,0
"Return a disconnected DeploymentManager instance.  Parameters: uri - identifier of the disconnected DeploymentManager to return. Returns: A DeploymentManager instance. Throws: DeploymentDriverException - occurs if the DeploymentManager could not be created. DeploymentManagerCreationException",1,0,0,0,0,0,0,0,0,0,0,1
"A Java EE component module consists of one or more deployment descriptor  files and zero or more non-deployment descriptor XML instance documents. A  module must contain a component-specific deployment descriptor file (see  the component specification for details). It may contain one or more  secondary deployment descriptor files that define extra functionality on  the component and zero or more non-deployment descriptor XML instance  documents (see the Web Services specification).  The DConfigBeanRoot object is a deployment configuration bean (DConfigBean)  that is associated with the root of the component's deployment descriptor.  It must be created by calling the  DeploymentConfiguration.getDConfigBean(DDBeanRoot) method, where DDBeanRoot  represents the component's deployment descriptor.  A DConfigBean object is associated with a deployment descriptor that  extends a component's functionality. It must be created by calling the  DConfigBeanRoot.getDConfigBean(DDBeanRoot) method. This DConfigBean object  is a child of the compontent's DConfigBeanRoot object. The DDBeanRoot  argument represents the secondary deployment descriptor. Deployment  descriptor files such as webservice.xml and webserviceclient.xml are  examples of secondary deployment descriptor files.  The server plugin must request a DDBeanRoot object for any non-deployment  descriptor XML instance document data it requires. The plugin must call  method DeployableObject.getDDBeanRoot(String) where String is the full path  name from the root of the module to the file to be represented. A WSDL file  is an example of a non-deployment descriptor XML instance document.  Author:     gfink",0,0,1,1,0,1,1,0,1,0,0,0
"This method designates whether this platform vendor provides application redeployment functionality. A value of true means it is supported. False means it is not.  Returns: A value of true means redeployment is supported by this vendor's DeploymentManager. False means it is not.",1,0,0,0,0,0,0,0,0,0,0,1
"This exception is to report that the bean is not a child of the parent  bean.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Creates an new DConfigBeanVersionUnsupportedException object.  Parameters: s - a string indicating what was wrong with the version request.",0,0,0,1,0,0,0,0,0,0,0,1
"This exception is to report an invalid Java EE deployment module type.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"The DeploymentFactory interface is a deployment driver for a Java EE  plaform product. It returns a DeploymentManager object which represents a  connection to a specific Java EE platform product.  Each application server vendor must provide an implementation of this class  in order for the Java EE Deployment API to work with their product.  The class implementing this interface should have a public no-argument  constructor, and it should be stateless (two instances of the class should  always behave the same). It is suggested but not required that the class  have a static initializer that registers an instance of the class with the  DeploymentFactoryManager class.  A connected or disconnected DeploymentManager can be requested. A  DeploymentManager that runs connected to the platform can provide access to  Java EE resources. A DeploymentManager that runs disconnected only provides  module deployment configuration support.  See Also:     DeploymentFactoryManager",1,0,0,0,0,1,1,0,0,1,0,0
"Tests whether this factory can create a DeploymentManager object based on the specificed URI. This does not indicate whether such an attempt will be successful, only whether the factory can handle the uri.  Parameters: uri - The uri to check Returns: true if the factory can handle the uri.",1,0,0,0,0,0,1,0,0,0,0,1
"The ProgressObject interface tracks and reports the progress of the  deployment activities, distribute, start, stop, undeploy.  This class has an optional cancel method. The support of the cancel  function can be tested by the isCancelSupported method.  The ProgressObject structure allows the user the option of polling for  status or to provide a callback.",1,0,0,1,0,0,1,1,0,0,0,0
"(optional) A cancel request on an in-process operation stops all further processing of the operation and returns the environment to it original state before the operation was executed. An operation that has run to completion cannot be cancelled.  Throws: OperationUnsupportedException - this optional command is not supported by this implementation.",1,0,1,0,0,0,0,0,0,0,0,0
"Allows the application to fire events of a particular type.  Beans fire events via an instance of the Event interface, which may be  injected:   @Inject @Any Event<LoggedInEvent> loggedInEvent;   The fire() method accepts an event object:   public void login() { ... loggedInEvent.fire( new LoggedInEvent(user) ); }   Any combination of qualifiers may be specified at the injection point:   @Inject @Admin Event<LoggedInEvent> adminLoggedInEvent;   Or, the @Any qualifier may be used, allowing the application to specify  qualifiers dynamically:   @Inject @Any Event<LoggedInEvent> loggedInEvent;   For an injected Event:      * the specified type is the type parameter specified at the injection       point, and     * the specified qualifiers are the qualifiers specified at the       injection point.  Author:     Gavin King, Pete Muir, David Allen",1,0,0,0,0,0,0,1,1,0,0,1
"Identifies the disposed parameter of a disposer method. May be applied to a  parameter of a method of a bean class.   public class UserDatabaseEntityManager {  @Produces @ConversationScoped @UserDatabase public EntityManager create(EntityManagerFactory emf) { return emf.createEntityManager(); }  public void close(@Disposes @UserDatabase EntityManager em) { em.close(); }  }   A disposer method allows the application to perform customized cleanup of  an object returned by a producer method.  A disposer method must be a non-abstract method of a managed bean class or  session bean class. A disposer method may be either static or non-static.  If the bean is a session bean, the disposer method must be a business  method of the EJB or a static method of the bean class.  A bean may declare multiple disposer methods.  Each disposer method must have exactly one disposed parameter, of the same  type as the corresponding producer method return type. When searching for  disposer methods for a producer method, the container considers the type  and qualifiers of the disposed parameter. If a disposed parameter resolves  to a producer method declared by the same bean class, the container must  call this method when destroying any instance returned by that producer  method.  In addition to the disposed parameter, a disposer method may declare  additional parameters, which may also specify qualifiers. These additional  parameters are injection points.   public void close(@Disposes @UserDatabase EntityManager em, Logger log) { ... }   A disposer method may resolve to multiple producer methods declared by the  bean class, in which case the container must call it when destroying any  instance returned by any of these producer methods.  Disposer methods are not inherited by bean subclasses.  Interceptors and decorators may not declare disposer methods.  Author:     Gavin King, Pete Muir See Also:     @Produces  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,1,0,1,0,0,0
"The built-in stereotype intended for use with beans that define the model  layer of an MVC web application architecture such as JSF.  Author:     Gavin King See Also:     Stereotype  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
"The built-in qualifier type.  The @New qualifier allows the application to obtain a new instance of a  bean which is not bound to the declared scope, but has had dependency  injection performed.   @Produces @ConversationScoped @Special Order getSpecialOrder(@New(Order.class) Order order) { ... return order; }   When the @New qualifier is specified at an injection point and no value  member is explicitly specified, the container defaults the value to the  declared type of the injection point. So the following injection point has  qualifier @New(Order.class):   @Produces @ConversationScoped @Special Order getSpecialOrder(@New Order order) { ... }   Author:     Gavin King, Pete Muir  Optional Element Summary  java.lang.Class<?> 	value           Specifies the bean class of the new instance.     value   public abstract java.lang.Class<?> value      Specifies the bean class of the new instance. The class must be the     bean class of an enabled or disabled bean. The bean class need not be     deployed in a bean archive.      Defaults to the declared type of the injection point if not specified.      Returns:         the bean class of the new instance     Default:         javax.enterprise.inject.New.class Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,0,0,1,0,0,1,1,0,0,0
"Identifies a producer method or field. May be applied to a method or field  of a bean class.  A producer method must be a non-abstract method of a managed bean class or  session bean class. A producer method may be either static or non-static.  If the bean is a session bean, the producer method must be either a  business method of the EJB or a static method of the bean class.   public class Shop { @Produces @ApplicationScoped @Catalog @Named(catalog) List<Product> getProducts() { ... } ... }   A producer field must be a field of a managed bean class or session bean  class. A producer field may be either static or non-static. If the bean is  a session bean, the producer field must be a static field of the bean  class.   public class Shop { @Produces @ApplicationScoped @Catalog @Named(catalog) List<Product> products = ...; ... }   If a producer method sometimes returns a null value, or if a producer field  sometimes contains a null value when accessed, then the producer method or  field must have scope @Dependent.  A producer method return type or producer field type may not be a type  variable.  If the producer method return type or producer field type is a  parameterized type, it must specify an actual type parameter or type  variable for each type parameter.  If the producer method return type or producer field type is a  parameterized type with a type variable, it must have scope @Dependent.  A producer method may have any number of parameters. All producer method  parameters are injection points.  public class OrderFactory {  @Produces @ConversationScoped public Order createCurrentOrder(@New(Order.class) Order order, @Selected Product product) { order.setProduct(product); return order; }  }  A bean may declare multiple producer methods or fields.  Producer methods and fields are not inherited by bean subclasses.  Interceptors and decorators may not declare producer methods or fields.  Author:     Gavin King, Pete Muir See Also:     @Disposes  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,1,0,1,0,0,0
"The event type of the third event fired by the container after it has  validated that there are no deployment problems and before creating  contexts or processing requests. If any observer method of the  AfterDeploymentValidation event throws an exception, the exception is  treated as a deployment problem by the container.  No requests will be processed by the deployment until all observers of this  event return.  Author:     David Allen",0,1,0,0,0,1,0,0,0,0,0,0
"Get all annotations of the program element.  Returns: all annotations of the program element, or an empty set if no annotations are present",1,0,0,0,0,0,0,0,0,0,0,1
"Represents a callable member of a Java type.  Author:     Gavin King, Pete Muir",0,0,0,0,0,0,0,0,0,0,0,0
"Represents a field of a Java class.  Author:     Gavin King, Pete Muir See Also:     Field",1,0,0,0,0,0,0,0,0,0,0,1
"Allows a portable extension to interact directly with the container.  Provides operations for obtaining contextual references for beans, along  with many other operations of use to portable extensions.  Any bean may obtain an instance of BeanManager by injecting it:   @Inject BeanManager manager;   Java EE components may obtain an instance of BeanManager from JNDI by  looking up the name java:comp/BeanManager.  Any operation of BeanManager may be called at any time during the execution  of the application.  Author:     Gavin King, Pete Muir, Clint Popetz, David Allen",1,0,0,0,0,0,0,1,1,0,0,0
" Intercepts bean passivation ",0,0,0,0,0,0,0,0,0,0,0,1
"Represents an enabled interceptor.  Author:     Gavin King, Pete Muir, David Allen",0,0,0,0,0,0,0,0,0,0,0,0
"Represents an observer method of an enabled bean. Defines everything the  container needs to know about an observer method.  Author:     Gavin King, David Allen",1,0,0,0,0,0,0,0,0,0,0,0
"The container fires an event of this type for each Java class or interface  it discovers in a bean archive, before it reads the declared annotations.  Any observer of this event is permitted to wrap and/or replace the  AnnotatedType. The container must use the final value of this property,  after all observers have been called, to discover the types and read the  annotations of the program elements.  For example, the following observer decorates the AnnotatedType for every  class that is discovered by the container.   public <T> void decorateAnnotatedType(@Observes ProcessAnnotatedType<T> pat) { pat.setAnnotatedType(decorate(pat.getAnnotatedType())); }   If any observer method of a ProcessAnnotatedType event throws an exception,  the exception is treated as a definition error by the container.  Author:     David Allen See Also:     AnnotatedType",0,0,0,0,0,0,1,0,1,0,0,0
"Registers a definition error with the container, causing the container to abort deployment after bean discovery is complete.  Parameters: t - The definition error to register as a Throwable",1,0,0,0,0,0,0,0,0,0,0,0
"Registers a definition error with the container, causing the container to abort deployment after bean discovery is complete.  Parameters: t - The definition error to register as a Throwable",1,0,0,0,0,0,0,0,0,0,0,0
"Excludes a member of an annotation type (such as a qualifier type or  interceptor binding type) from consideration when the container compares  two annotation instances.   @Qualifier @Retention(RUNTIME) @Target({METHOD, FIELD, PARAMETER, TYPE}) public @interface PayBy { PaymentMethod value(); @Nonbinding String comment(); }   Author:     Gavin King See Also:     @Qualifier, @InterceptorBinding  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,1,0,0,0
"Returns: the actual type represented by this object",0,0,0,0,0,0,0,0,0,0,0,1
"Construct a new exception with the specified detail message and no root cause.  Parameters: message - The detail message for this exception",0,0,0,0,0,0,0,0,0,0,0,0
"FactoryFinder implements the standard discovery algorithm for all factory  objects specified in the JavaServer Faces APIs. For a given factory class  name, a corresponding implementation class is searched for based on the  following algorithm. Items are listed in order of decreasing search  precedence:      * If the JavaServer Faces configuration file bundled into the WEB-INF        directory of the webapp contains a factory entry of the given factory       class name, that factory is used.      * If the JavaServer Faces configuration files named by the        javax.faces.CONFIG_FILES ServletContext init parameter contain any        factory entries of the given factory class name, those factories are       used, with the last one taking precedence.      * If there are any JavaServer Faces configuration files bundled into       the META-INF directory of any jars on the ServletContext's resource       paths, the factory entries of the given factory class name in those       files are used, with the last one taking precedence.      * If a META-INF/services/{factory-class-name} resource is visible to       the web application class loader for the calling application       (typically as a result of being present in the manifest of a JAR       file), its first line is read and assumed to be the name of the       factory implementation class to use.      * If none of the above steps yield a match, the JavaServer Faces       implementation specific class is used.  If any of the factories found on any of the steps above happen to have a  one-argument constructor, with argument the type being the abstract factory  class, that constructor is invoked, and the previous match is passed to the  constructor. For example, say the container vendor provided an  implementation of FacesContextFactory, and identified it in  META-INF/services/javax.faces.context.FacesContextFactory in a jar on the  webapp ClassLoader. Also say this implementation provided by the container  vendor had a one argument constructor that took a FacesContextFactory  instance. The FactoryFinder system would call that one-argument  constructor, passing the implementation of FacesContextFactory provided by  the JavaServer Faces implementation.  If a Factory implementation does not provide a proper one-argument  constructor, it must provide a zero-arguments constructor in order to be  successfully instantiated.  Once the name of the factory implementation class is located, the web  application class loader for the calling application is requested to load  this class, and a corresponding instance of the class will be created. A  side effect of this rule is that each web application will receive its own  instance of each factory class, whether the JavaServer Faces implementation  is included within the web application or is made visible through the  container's facilities for shared libraries.",1,0,1,0,1,1,1,1,0,0,0,0
"Application represents a per-web-application singleton object where  applications based on JavaServer Faces (or implementations wishing to  provide extended functionality) can register application-wide singletons  that provide functionality required by JavaServer Faces. Default  implementations of each object are provided for cases where the application  does not choose to customize the behavior.  The instance of Application is created by calling the getApplication()  method of ApplicationFactory. Because this instance is shared, it must be  implemented in a thread-safe manner.  The application also acts as a factory for several types of Objects  specified in the Faces Configuration file. Please see  Application\#createComponent, Application\#createConverter, and  Application\#createValidator.",1,0,0,1,1,1,1,1,0,0,0,0
"Return the StateManager instance that will be utilized during the Restore View and Render Response phases of the request processing lifecycle. If not explicitly set, a default implementation must be provided that performs the functions described in the StateManager description in the JavaServer Faces Specification.",0,0,1,0,0,0,0,0,0,0,0,0
"The default behavior of this method is to call Application\#createValidator(String) on the wrapped Application object.  Specified by: createValidator in class Application Parameters: validatorId - The validator id for which to create and return a new Validator instance Throws: FacesException - if a Validator of the specified id cannot be created",1,0,0,0,0,0,0,0,0,0,0,0
"Set the localized summary text.  Parameters: summary - The new localized summary text",0,0,0,0,0,0,0,0,0,0,0,1
"Returns: true if rendered() has been called, otherwise false Since: 2.0",0,0,0,0,0,0,0,0,0,0,0,0
"Return the parameters to be included for navigation cases requiring a redirect. If no parameters are defined, null will be returned. The keys in the Map are parameter names. For each key, the corresponding value is a List of unconverted values.",1,0,0,0,0,0,0,0,0,0,0,0
"Set the MIME content-type for this resource. The default implementation performs no validation on the argument.  Parameters: contentType - the MIME content-type for this resource. The default implementation must accept null as a parameter.",1,0,1,0,0,0,0,0,0,0,0,1
"Return the libraryName for this resource. May be null. The libraryName for a resource is an optional String that indicates membership in a resource library. All resources with the same libraryName belong to the same resource library. The resource library concept allows disambiguating resources that have the same resourceName. See ResourceHandler for more information.  Returns: Return the libraryName for this resource. May be null.",1,0,0,1,0,0,0,0,0,0,0,1
"Provides a simple implementation of ResourceHandler that can be subclassed  by developers wishing to provide specialized behavior to an existing  ResourceHandler instance. The default implementation of all methods is to  call through to the wrapped ResourceHandler.  Usage: extend this class and override getWrapped() to return the instance  we are wrapping.  Since:     2.0",1,0,0,0,0,0,0,1,0,0,0,0
"Provides a simple implementation of Resource that can be subclassed by  developers wishing to provide specialized behavior to an existing Resource  instance. The default implementation of all methods is to call through to  the wrapped Resource.  Usage: extend this class and override getWrapped() to return the instance  we are wrapping.  Since:     2.0",1,0,0,1,0,0,0,1,0,0,0,0
"Implementations must throw this FacesException when attempting to restore  the view StateManager\#restoreView(javax.faces.context.FacesContext, String,  String) results in failure on postback.  Since:     1.2 See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"The default behavior of this method is to call ViewHandler\#renderView(javax.faces.context.FacesContext, javax.faces.component.UIViewRoot) on the wrapped ViewHandler object.  Specified by: renderView in class ViewHandler Parameters: context - FacesContext for the current request viewToRender - the view to render Throws: java.io.IOException - if an input/output error occurs FacesException - if a servlet error occurs Since: 1.2 See Also: ViewHandler\#renderView(javax.faces.context.FacesContext, javax.faces.component.UIViewRoot)",0,0,0,0,0,0,1,0,0,0,0,1
"The presence of this annotation on a class automatically registers the  class with the runtime as a managed bean class. Classes must be scanned for  the presence of this annotation at application startup, before any requests  have been serviced.  The value of the name() attribute is taken to be the managed-bean-name. If  the value of the name attribute is unspecified or is the empty String, the  managed-bean-name is derived from taking the unqualified class name portion  of the fully qualified class name and converting the first character to  lower case. For example, if the ManagedBean annotation is on a class with  the fully qualified class name com.foo.Bean, and there is no name  attribute on the annotation, the managed-bean-name is taken to be bean. The  fully qualified class name of the class to which this annotation is  attached is taken to be the managed-bean-class.  The scope of the managed bean is declared using one of NoneScoped,  RequestScoped, ViewScoped, SessionScoped, ApplicationScoped, or  CustomScoped annotations. If the scope annotations are omitted, the bean  must be handled as if the RequestScoped annotation is present.  If the value of the eager() attribute is true, and the managed-bean-scope  value is application, the runtime must instantiate this class when the  application starts. This instantiation and storing of the instance must  happen before any requests are serviced. If eager is unspecified or false,  or the managed-bean-scope is something other than application, the  default lazy instantiation and scoped storage of the managed bean  happens.  When the runtime processes this annotation, if a managed bean exists whose  name is equal to the derived managed-bean-name, a FacesException must be  thrown and the application must not be placed in service.  A class tagged with this annotation must have a public zero-argument  constructor. If such a constructor is not defined on the class, a  FacesException must be thrown and the application must not be placed in  service.  Since:     2.0  Optional Element Summary  boolean 	 eager             Taken to be the value of the eager attribute of the managed-bean.   java.lang.String 	 name             Taken to be the managed-bean-name.      name   public abstract java.lang.String name      Taken to be the managed-bean-name. See class documentation for details.      Default:            eager   public abstract boolean eager      Taken to be the value of the eager attribute of the managed-bean. See     class documentation for details.      Default:         false Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,1,1,0,0,0,1
"When this annotation, along with ManagedBean is found on a class, the  runtime must act as if a <managed-bean-scope>request<managed-bean-scope>  element was declared for the corresponding managed bean.  Since:     2.0  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,0,0,0,1,0,1,0,0,0
"Set the required field state for this component.  Parameters: required - The new required field state",0,0,0,0,0,0,0,0,0,0,0,1
"Remove an existing ValueChangeListener (if any) from the set of listeners interested in being notified when ValueChangeEvents occur.  Parameters: listener - The ValueChangeListener to be removed Throws: java.lang.NullPointerException - if listener is null",1,0,0,0,0,0,0,0,0,0,0,0
"This interface is implemented by classes that need to save their state  between requests.  An implementor must implement both  saveState(javax.faces.context.FacesContext) and  restoreState(javax.faces.context.FacesContext, java.lang.Object) methods in  this class, since these two methods have a tightly coupled contract between  themselves. In other words, if there is an ineritance hierarchy, it is not  permissable to have the saveState(javax.faces.context.FacesContext) and  restoreState(javax.faces.context.FacesContext, java.lang.Object) methods  reside at different levels of the hierarchy.  An implementor must have a public no-args constructor.",1,0,1,0,0,0,0,0,0,0,0,0
"This interface is implemented by classes that need to save state that is  expected to be available only within the scope of the current request.  An implementor must implement both  saveTransientState(javax.faces.context.FacesContext) and  restoreTransientState(javax.faces.context.FacesContext, java.lang.Object)  methods in this class, since these two methods have a tightly coupled  contract between themselves. In other words, if there is an inheritance  hierarchy, it is not permissible to have the  saveTransientState(javax.faces.context.FacesContext) and  restoreTransientState(javax.faces.context.FacesContext, java.lang.Object)  methods reside at different levels of the hierarchy.  An example of transient state is the submitted property on forms.  Since:     2.1",1,0,1,0,0,0,0,0,0,0,0,0
"Description copied from interface: ActionSource2  Set the MethodExpression pointing at the appication action to be invoked, if this UIComponent is activated by the user, during the Apply Request Values or Invoke Application phase of the request processing lifecycle, depending on the value of the immediate property.  Any method referenced by such an expression must be public, with a return type of String, and accept no parameters.  Specified by: setActionExpression in interface ActionSource2 Parameters: actionExpression - The new method expression",1,0,1,0,0,0,1,0,0,0,0,0
"UIComponent is the base class for all user interface components in  JavaServer Faces. The set of UIComponent instances associated with a  particular request and response are organized into a component tree under a  UIViewRoot that represents the entire content of the request or response.  For the convenience of component developers, UIComponentBase provides the  default behavior that is specified for a UIComponent, and is the base class  for all of the concrete UIComponent base implementations. Component  writers are encouraged to subclass UIComponentBase, instead of directly  implementing this abstract class, to reduce the impact of any future  changes to the method signatures.  If the ListenerFor annotation is attached to the class definition of a  Component, that class must also implement ComponentSystemEventListener.",1,0,1,0,0,0,0,0,0,0,0,0
" The key to which the UIComponent currently being processed will be associated with within the FacesContext attributes map.  Since: 2.0 See Also: FacesContext.getAttributes(), Constant Field Values ",1,0,0,0,0,0,1,0,0,0,0,0
" This constant enables one to quickly discover the names of the declared composite component attributes that have been given default values by the composite component author. The information is exposed as a Collection<String> returned from the getValue() method on the composite component BeanDescriptor, when this constant is passed as the argument.  Since: 2.1 See Also: Constant Field Values ",1,0,0,1,0,0,0,0,0,0,1,0
"Updates the status as to whether or not this component is currently within the view hierarchy. This method must never be called by developers; a UIComponent's internal implementation will call it as components are added to or removed from a parent's child List or facet Map.  Parameters: isInView - flag indicating whether or not this component is within the view hierachy Since: 2.0",1,0,1,0,0,0,0,0,0,0,0,0
"If this component returns true from isRendered(), take the following action.  Render this component and all its children that return true from isRendered(), regardless of the value of the getRendersChildren() flag.  Throws: java.io.IOException - if an input/output error occurs while rendering java.lang.NullPointerException - if context is null Since: 1.2",1,0,0,0,1,0,0,0,0,0,0,0
"Perform the component tree processing required by the Update Model Values phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows.  * If the rendered property of this UIComponent is false, skip further processing. * Call pushComponentToEL(javax.faces.context.FacesContext, javax.faces.component.UIComponent). * Call the processUpdates() method of all facets and children of this UIComponent, in the order determined by a call to getFacetsAndChildren(). After returning from the processUpdates() method on a child or facet, call UIComponent\#popComponentFromEL  Parameters: context - FacesContext for the request we are processing Throws: java.lang.NullPointerException - if context is null",1,0,0,0,0,0,1,0,0,0,0,0
"Description copied from interface: StateHolder  Perform any processing required to restore the state from the entries in the state Object.  If the class that implements this interface has references to instances that also implement StateHolder (such as a UIComponent with event handlers, validators, etc.) this method must call the StateHolder.restoreState(javax.faces.context.FacesContext, java.lang.Object) method on all those instances as well.  If the state argument is null, take no action and return.",1,0,0,0,0,0,0,0,0,0,0,0
"This method is called by UIComponent subclasses that need to restore the objects they saved using saveAttachedState(javax.faces.context.FacesContext, java.lang.Object). This method is tightly coupled with saveAttachedState(javax.faces.context.FacesContext, java.lang.Object).  This method supports restoring all attached objects types supported by saveAttachedState(javax.faces.context.FacesContext, java.lang.Object).  Parameters: context - the FacesContext for this request stateObj - the opaque object returned from saveAttachedState(javax.faces.context.FacesContext, java.lang.Object) Throws: java.lang.NullPointerException - if context is null. IllegalStateException - if the object is not previously returned by saveAttachedState(javax.faces.context.FacesContext, java.lang.Object).",1,0,1,1,0,0,1,0,0,0,0,0
"UIData is a UIComponent that supports data binding to a collection of data  objects represented by a DataModel instance, which is the current value of  this component itself (typically established via a ValueExpression). During  iterative processing over the rows of data in the data model, the object  for the current row is exposed as a request attribute under the key  specified by the var property.  Only children of type UIColumn should be processed by renderers associated  with this component.  By default, the rendererType property is set to javax.faces.Table. This  value can be changed by calling the setRendererType() method.",1,0,1,0,1,0,1,1,0,0,0,0
"Set the ValueExpression used to calculate the value for the specified attribute or property name, if any. In addition, if a ValueExpression is set for the value property, remove any synthesized DataModel for the data previously bound to this component.  Overrides: setValueExpression in class UIComponent Parameters: name - Name of the attribute or property for which to set a ValueExpression binding - The ValueExpression to set, or null to remove any currently set ValueExpression Throws: IllegalArgumentException - if name is one of id, parent, var, or rowIndex java.lang.NullPointerException - if name is null Since: 1.2",1,0,0,0,0,0,0,0,0,0,0,0
"UIGraphic is a UIComponent that displays a graphical image to the user. The  user cannot manipulate this component; it is for display purposes only.  By default, the rendererType property must be set to javax.faces.Image.  This value can be changed by calling the setRendererType() method.",1,0,0,0,0,0,0,0,0,0,0,0
"Set the valid property according to the below algorithm.  1. If the valid property on this component is still true, and the required property is also true, ensure that the local value is not empty (where empty is defined as null or a zero-length String). If the local value is empty:  * Enqueue an appropriate error message by calling the addMessage() method on the FacesContext instance for the current request. If the getRequiredMessage() returns non-null, use the value as the summary and detail in the FacesMessage that is enqueued on the FacesContext, otherwise use the message for the REQUIRED_MESSAGE_ID.  * Set the valid property on this component to false. * If calling ValidatorException\#getFacesMessages returns non-null, each message should be added to the FacesContext. Otherwise the single message returned from ValidatorException\#getFacesMessage should be added.  2. Otherwise, if the valid property on this component is still true, take the following action to determine if validation of this component should proceed.  * If the value is not empty, validation should proceed.  * If the value is empty, but the system has been directed to validate empty fields, validation should proceed. The implementation must obtain the init parameter Map from the ExternalContext and inspect the value for the key given by the value of the symbolic constant VALIDATE_EMPTY_FIELDS_PARAM_NAME. If there is no value under that key, use the same key and look in the application map from the ExternalContext. If the value is null or equal to the string auto\" (without the quotes) take appropriate action to determine if Bean Validation is present in the runtime environment. If not",1,0,0,0,1,0,1,0,0,0,0,0
"This component is paired with the javax.faces.Button or javax.faces.Link  renderers and encapsulates properties relating to the rendering of outcomes  directly to the response. This enables bookmarkability in JSF applications.  Since:     2.0",1,0,0,1,0,0,1,0,0,0,0,0
"Create a new UIOutcomeTarget instance with default property values.",1,0,0,0,0,0,0,0,0,0,0,0
"UIOutput is a UIComponent that has a value, optionally retrieved from a  model tier bean via a value expression, that is displayed to the user. The  user cannot directly modify the rendered value; it is for display purposes  only.  During the Render Response phase of the request processing lifecycle, the  current value of this component must be converted to a String (if it is not  already), according to the following rules:      * If the current value is not null, and is not already a String, locate       a Converter (if any) to use for the conversion, as follows:           o If getConverter() returns a non-null Converter, use that one,             otherwise           o If Application.createConverter(Class), passing the current             value's class, returns a non-null Converter, use that one.     * If the current value is not null and a Converter was located, call       its getAsString() method to perform the conversion.     * If the current value is not null but no Converter was located, call        toString() on the current value to perform the conversion.  By default, the rendererType property must be set to javax.faces.Text.  This value can be changed by calling the setRendererType() method.",1,0,1,0,1,0,1,0,0,0,0,0
"Create a new UISelectMany instance with default property values.",1,0,0,0,0,0,0,0,0,0,0,1
"UIViewParameter represents a binding between a request parameter and a  model property or UIViewRoot property. This is a bi-directional binding.  The ViewDeclarationLanguage implementation must cause an instance of this  component to appear in the view for each occurrence of an <f:viewParam />  element placed inside of an <f:metadata /> element. The user must place  this facet within the UIViewRoot.  Because this class extends UIInput any actions that one would normally take  on a UIInput instance are valid for instances of this class. Instances of  this class participate in the regular JSF lifecycle, including on Ajax  requests.  Since:     2.0",1,0,1,0,0,0,1,0,0,0,0,0
"BehaviorBase is a convenience base class that provides a default  implementation of the Behavior contract. It also provides behavior listener  registration and state saving support.  Since:     2.0",1,0,0,0,0,0,1,0,0,0,0,0
"Return the script that implements this ClientBehavior's client-side logic.  ClientBehavior.getScript() implementations are allowed to return null to indicate that no script is required for this particular getScript() call. For example, a ClientBehavior implementation may return null if the Behavior is disabled.  Parameters: behaviorContext - the ClientBehaviorContext that provides properties that might influence this getScript() call. Note that ClientBehaviorContext instances are short-lived objects that are only valid for the duration of the call to getScript(). ClientBehavior implementations must not hold onto references to ClientBehaviorContexts. Returns: script that provides the client-side behavior, or null if no script is required. Throws: java.lang.NullPointerException - if behaviorContext is null Since: 2.0",1,1,1,0,0,0,0,0,0,0,0,0
"Returns the Parameter's value.  Since: 2.0",0,0,0,0,0,0,0,0,0,0,0,1
"An enum that specifies hints that describes the behavior of ClientBehavior  implementations.  Since:     2.0 See Also:     ClientBehavior.getHints()",1,0,0,0,0,0,0,0,0,0,0,0
"NONE  By default, the rendererType property must be set to javax.faces.Body.  This value can be changed by calling the setRendererType() method.",0,0,1,0,0,0,0,1,0,0,0,0
" The standard component type for this component.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the dir property.  Contents: Direction indication for text that does not inherit directionality. Valid values are LTR (left-to-right) and RTL (right-to-left).",1,0,1,0,0,0,0,0,0,0,0,1
"Represents a column that will be rendered in an HTML table element.",0,0,0,0,0,0,0,0,0,0,0,0
"Set the value of the onmouseout property.",0,0,0,0,0,0,0,0,0,0,0,0
" The standard component type for this component.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the lang property.  Contents: Code describing the language used in the generated markup for this component.",0,0,0,0,0,0,0,0,0,0,0,0
"Return the value of the type property.  Contents: The content type of the resource designated by this hyperlink.",1,0,0,0,0,0,0,0,0,0,0,1
"Overrides: toString in class java.lang.Enum<HtmlForm.PropertyKeys>",0,0,0,0,0,0,0,0,0,0,0,0
"Return the value of the target property.  Contents: Name of a frame where the response retrieved after this form submit is to be displayed.",1,0,0,0,0,0,0,0,0,0,0,1
"Represents an HTML img element, used to retrieve and render a graphical  image.  By default, the rendererType property must be set to javax.faces.Image.  This value can be changed by calling the setRendererType() method.",1,0,1,0,0,0,0,1,0,0,0,0
"Set the value of the style property.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the accesskey property.  Contents: Access key that, when pressed, transfers focus to this element.",0,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the onmousemove property.",0,0,0,0,0,0,0,0,0,0,0,0
"Return the value of the styleClass property.  Contents: Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the class attribute on generated markup.",1,0,0,0,0,0,0,0,0,0,0,0
"Set the value of the rows property.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the tooltip property.  Contents: Flag indicating whether the detail portion of the message should be displayed as a tooltip.",1,0,0,1,0,0,0,0,0,0,0,1
"Set the value of the tooltip property.",0,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the onkeypress property.",0,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the onkeyup property.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the ondblclick property.  Contents: Javascript code executed when a pointer button is double clicked over this element.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the styleClass property.  Contents: Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the class attribute on generated markup.",0,0,1,0,0,0,0,0,0,0,0,1
"Return the value of the tabindex property.  Contents: Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.",0,0,1,0,0,0,0,0,0,0,0,1
"Set the value of the onkeyup property.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the onmousedown property.  Contents: Javascript code executed when a pointer button is pressed down over this element.",0,0,0,0,0,0,0,0,0,0,0,0
"Set the value of the accesskey property.",0,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the tabindex property.",0,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the columns property.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the onkeyup property.  Contents: Javascript code executed when a key is released over this element.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null",1,0,1,0,0,0,0,0,0,0,0,1
"Set the value of the onkeydown property.",1,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the onclick property.",0,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the styleClass property.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the onmouseup property.  Contents: Javascript code executed when a pointer button is released over this element.",1,0,0,0,0,1,0,0,0,0,0,1
"Set the value of the onclick property.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the onmouseup property.  Contents: Javascript code executed when a pointer button is released over this element.",0,0,0,1,0,0,0,0,0,0,0,1
"Return the value of the onblur property.  Contents: Javascript code executed when this element loses focus.",0,0,0,0,0,0,0,0,0,0,0,1
"Return the value of the readonly property.  Contents: Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=readonly.",1,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the style property.",0,0,0,0,0,0,0,0,0,0,0,1
"Set the value of the tabindex property.",0,0,0,0,0,0,0,0,0,0,0,1
"Called by UIComponent.visitTree() to visit a single component.  Parameters: component - the component to visit callback - the VisitCallback to call Returns: a VisitResult value that indicates whether to continue visiting the component's subtree, skip visiting the component's subtree or abort the visit altogether.",1,0,0,0,0,1,0,0,0,0,0,1
"Provides a simple implementation of VisitContext that can be subclassed by  developers wishing to provide specialized behavior to an existing  VisitContext instance. The default implementation of all methods is to call  through to the wrapped VisitContext instance.  Usage: extend this class and override getWrapped() to return the instance  we are wrapping.  Since:     2.0",1,0,1,1,0,0,1,1,0,0,0,0
"ExceptionHandlerFactory is a factory object that creates (if needed) and  returns a new ExceptionHandler instance.  There must be one ExceptionHandlerFactory instance per web application that  is utilizing JavaServer Faces. This instance can be acquired, in a portable  manner, by calling:   ExceptionHandlerFactory factory = (ExceptionHandlerFactory) FactoryFinder.getFactory(FactoryFinder.EXCEPTION_HANDLER_FACTORY);   Since:     2.0",1,0,0,0,0,0,0,1,1,0,0,0
"Return an immutable Map whose keys are the set of cookie names included in the current request, and whose values (of type javax.servlet.http.Cookie) are the first (or only) cookie for each cookie name returned by the underlying request. The returned Map must implement the entire contract for an unmodifiable map as described in the JavaDocs for java.util.Map.  Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method getCookies(), unless null was returned, in which case this must be a zero-length array.",1,0,1,0,0,0,1,0,0,0,0,0
"Return the buffer size for the current response.  Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse getBufferSize method.  The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.  Since: 2.0",1,0,1,1,0,0,0,0,0,0,0,0
"If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.  Specified by: getWrapped in interface FacesWrapper<ExternalContextFactory> Since: 2.0",1,0,1,0,0,0,1,0,0,0,0,0
"The default behavior of this method is to call ExternalContext\#getInitParameterMap on the wrapped ExternalContext object.  Specified by: getInitParameterMap in class ExternalContext See Also: ExternalContext.getInitParameterMap()",1,0,0,0,0,0,0,0,0,0,0,0
"The default behavior of this method is to call ExternalContext\#setRequest(Object) on the wrapped ExternalContext object.  Overrides: setRequest in class ExternalContext See Also: ExternalContext.setRequest(Object)",1,0,0,0,0,0,0,0,0,0,0,0
"The default behavior of this method is to call ExternalContext\#getResponseCharacterEncoding on the wrapped ExternalContext object.  Overrides: setResponseCharacterEncoding in class ExternalContext See Also: ExternalContext.getResponseCharacterEncoding()",1,0,0,0,0,0,1,0,0,0,0,0
"FacesContext contains all of the per-request state information related to  the processing of a single JavaServer Faces request, and the rendering of  the corresponding response. It is passed to, and potentially modified by,  each phase of the request processing lifecycle.  A FacesContext instance is associated with a particular request at the  beginning of request processing, by a call to the getFacesContext() method  of the FacesContextFactory instance associated with the current web  application. The instance remains active until its release() method is  called, after which no further references to this instance are allowed.  While a FacesContext instance is active, it must not be referenced from any  thread other than the one upon which the servlet container executing this  web application utilizes for the processing of this request.",1,0,0,0,0,1,0,0,0,0,0,0
"FacesContextFactory is a factory object that creates (if needed) and  returns new FacesContext instances, initialized for the processing of the  specified request and response objects. Implementations may take advantage  of the calls to the release() method of the allocated FacesContext  instances to pool and recycle them, rather than creating a new instance  every time.  There must be one FacesContextFactory instance per web application that is  utilizing JavaServer Faces. This instance can be acquired, in a portable  manner, by calling:   FacesContextFactory factory = (FacesContextFactory) FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);",1,0,1,0,0,0,0,1,1,0,0,0
"PartialViewContext contains methods and properties that pertain to partial  request processing and partial response rendering on a view.  The PartialViewContext instance is used to determine if the current request  indicates the requirement to perform partial processing and/or partial  rendering. Partial processing is the processing of selected components  through the execute portion of the request processing lifecycle. Partial  rendering is the rendering of specified components in the Render Response  Phase of the request processing lifecycle.",1,1,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: FacesWrapper  A class that implements this interface uses this method to return an instance of the class being wrapped.  Specified by: getWrapped in interface FacesWrapper<PartialViewContextFactory> See Also: FacesWrapper.getWrapped()",0,0,0,0,0,0,0,0,0,0,0,0
"The default behavior of this method is to call PartialViewContext\#getPartialResponseWriter() on the wrapped PartialViewContext object.  Specified by: getPartialResponseWriter in class PartialViewContext See Also: PartialViewContext\#getPartialResponseWriter()",1,0,0,0,0,0,0,0,0,0,0,0
" The message identifier of the FacesMessage to be created if the conversion of the BigDecimal value to String fails. The message format string for this message may optionally include the following placeholders:  * {0} relaced by the unconverted value. * {1} replaced by a String whose value is the label of the input component that produced this message.  See Also: Constant Field Values ",1,0,0,0,0,0,1,0,0,0,0,0
"Converter implementation for java.math.BigInteger values.",1,0,0,0,0,0,0,0,0,0,0,0
"Converter implementation for java.lang.Character (and char primitive)  values.",1,0,0,0,0,0,0,0,0,0,0,0
"Converter is an interface describing a Java class that can perform  Object-to-String and String-to-Object conversions between model data  objects and a String representation of those objects that is suitable for  rendering.  Converter implementations must have a zero-arguments public constructor. In  addition, if the Converter class wishes to have configuration property  values saved and restored with the component tree, the implementation must  also implement StateHolder.  Starting with version 1.2 of the specification, an exception to the above  zero-arguments constructor requirement has been introduced. If a converter  has a single argument constructor that takes a Class instance and the  Class of the data to be converted is known at converter instantiation time,  this constructor must be used to instantiate the converter instead of the  zero-argument version. This enables the per-class conversion of Java  enumerated types.  If any Converter implementation requires a java.util.Locale to perform its  job, it must obtain that Locale from the UIViewRoot of the current  FacesContext, unless the Converter maintains its own Locale as part of its  state.  If the class implementing Converter has a ResourceDependency annotation,  the action described in ResourceDependency must be taken when  ValueHolder.setConverter(javax.faces.convert.Converter) is called. If the  class implementing Converter has a ResourceDependencies annotation, the  action described in ResourceDependencies must be taken when  ValueHolder.setConverter(javax.faces.convert.Converter) is called.",1,0,1,0,0,0,1,0,0,0,0,0
" The message identifier of the FacesMessage to be created if the conversion to Date fails. The message format string for this message may optionally include the following placeholders:  * {0} replaced by the unconverted value. * {1} replaced by an example value. * {2} replaced by a String whose value is the label of the input component that produced this message.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: PartialStateHolder  Reset the PartialStateHolder to a non-delta tracking state.  Specified by: clearInitialState in interface PartialStateHolder",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from interface: Converter  Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.  Specified by: getAsObject in interface Converter Parameters: context - FacesContext for the request being processed component - UIComponent with which this model object value is associated value - String value to be converted (may be null) Returns: null if the value to convert is null, otherwise the result of the conversion Throws: ConverterException - if conversion cannot be successfully performed java.lang.NullPointerException - if context or component is null",1,1,0,1,0,0,0,0,0,0,1,0
"public abstract class MethodBinding      extends java.lang.Object   MethodBinding is an object that can be used to call an arbitrary public  method, on an instance that is acquired by evaluatng the leading portion of  a method binding expression via a ValueBinding. An immutable MethodBinding  for a particular method binding expression can be acquired by calling the  createMethodBinding() method of the Application instance for this web  application.",0,0,0,0,0,0,0,1,0,0,0,0
"public class PropertyNotFoundException      extends EvaluationException   An exception caused by a property name that cannot be resolved against a  base object.  See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"Deprecated.  Construct a new exception with the specified root cause. The detail message will be set to (cause == null ? null : cause.toString()  Parameters: cause - The root cause for this exception",1,0,0,0,0,0,0,0,0,0,0,1
"An exception that may be thrown by event listeners to terminate the  processing of the current event.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Construct a new exception with the specified detail message and root cause.  Parameters: message - The detail message for this exception cause - The root cause for this exception",0,0,0,0,0,0,0,0,0,0,0,0
"An ActionEvent represents the activation of a user interface component  (such as a UICommand).  See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"A listener interface for receiving ActionEvents. An implementation of this  interface must be thread-safe. A class that is interested in receiving such  events implements this interface, and then registers itself with the source  UIComponent of interest, by calling addActionListener().",0,0,1,0,0,0,1,1,0,0,0,0
"AjaxBehaviorEvent represents the component behavior specific to Ajax).  Since:     2.0 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Container annotation to specify multiple ListenerFor annotations on a  single class. Example:    @ListenersFor({ @ListenerFor(systemEventClass=PostAddToViewEvent.class), @ListenerFor(systemEventClass=BeforeRenderEvent.class, sourceClass=CustomOutput.class) })    The action described in ListenerFor must be taken for each @ListenerFor  present in the container annotation.  Since:     2.0  Required Element Summary  ListenerFor[] 	value                Element Detail   value   public abstract ListenerFor[] value  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,0,0,1,0,0,1
"This event must be published by the runtime after all configuration  resources have been parsed and processed.  This event is useful for listeners that need to perform custom  post-configuration processing without having to rely on  ServletContextListeners which may be invoked before the JavaServer Faces  runtime has started it's configuration process.  Since:     2.0 See Also:     Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"Return the ScopeContext for this event.",1,0,0,0,0,0,0,0,0,0,0,1
"This event must be published by a call to  {javax.faces.application.Application\#publishEvent} when the view map is  first created. This must happen on the first time a call is made to  UIViewRoot\#getViewMap on a UIViewRoot instance. The source for this event  is the UIViewRoot.  Since:     2.0 See Also:     Serialized Form",1,0,1,0,0,0,1,0,0,0,0,0
"When an instance of this event is passed to  SystemEventListener\#processEvent or  ComponentSystemEventListener\#processEvent, the listener implementation may  assume that the source of this event instance is the UIViewRoot instance  that is about to be rendered.  It is valid for a listener for this event to change the UIViewRoot in the  current FacesContext, but the listener must ensure that the new UIViewRoot  was created with a call to  ViewHandler.createView(javax.faces.context.FacesContext, java.lang.String) , and that the view is fully populated with the children to be traversed  during render. The listener implementation may call  ViewDeclarationLanguage.buildView(javax.faces.context.FacesContext,  javax.faces.component.UIViewRoot) to populate the UIViewRoot.  Since:     2.0 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"A structure that contains the name of the scope and the scope itself  exposed as a Map<String, Object>.  Since:     2.0",0,0,0,0,0,0,0,0,0,0,0,1
"Execute the Render Response phase of the request processing lifecycle, unless the responseComplete() method has been called on the FacesContext instance associated with the current request.  Parameters: context - FacesContext for the request being processed Throws: FacesException - if an exception is thrown during the execution of the request processing lifecycle java.lang.NullPointerException - if context is null",1,0,0,0,0,0,0,0,0,0,0,1
"LifecycleFactory is a factory object that creates (if needed) and returns  Lifecycle instances. Implementations of JavaServer Faces must provide at  least a default implementation of Lifecycle. Advanced implementations (or  external third party libraries) MAY provide additional Lifecycle  implementations (keyed by lifecycle identifiers) for performing different  types of request processing on a per-request basis.  There must be one LifecycleFactory instance per web application that is  utilizing JavaServer Faces. This instance can be acquired, in a portable  manner, by calling:   LifecycleFactory factory = (LifecycleFactory) FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);",1,0,0,0,0,0,0,1,1,0,0,0
"Return the object representing the data wrapped by this DataModel, if any.",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from class: DataModel  Return the object representing the data wrapped by this DataModel, if any.  Specified by: getWrappedData in class DataModel<E>",1,0,0,0,0,0,0,0,0,0,0,0
"ResultDataModel is a convenience implementation of DataModel that wraps a  JSTL Result object, typically representing the results of executing an SQL  query via JSTL tags.",0,1,0,0,0,0,0,0,0,0,0,0
"SelectItem represents a single item in the list of supported items  associated with a UISelectMany or UISelectOne component.  See Also:     Serialized Form",0,1,0,0,0,0,1,0,0,0,0,0
"A Renderer converts the internal representation of UIComponents into the  output stream (or writer) associated with the response we are creating for  a particular request. Each Renderer knows how to render one or more  UIComponent types (or classes), and advertises a set of render-dependent  attributes that it recognizes for each supported UIComponent.  Families of Renderers are packaged as a RenderKit, and together support the  rendering of all of the UIComponents in a view associated with a  FacesContext. Within the set of Renderers for a particular RenderKit, each  must be uniquely identified by the rendererType property.  Individual Renderer instances will be instantiated as requested during the  rendering process, and will remain in existence for the remainder of the  lifetime of a web application. Because each instance may be invoked from  more than one request processing thread simultaneously, they MUST be  programmed in a thread-safe manner.  If the ListenerFor annotation is attached to the class definition of a  Renderer, that class must also implement ComponentSystemEventListener, and  the action pertaining to the processing of ResourceDependency on a  Renderer described in ListenerFor must be taken.  If the ResourceDependency annotation is attached to the class definition of  a Renderer, the action pertaining to the processing of ResourceDependency  on a Renderer described in UIComponent\#getChildren must be taken.",1,0,0,0,0,0,0,0,0,0,0,0
"ResponseStateManager is the helper class to StateManager that knows the  specific rendering technology being used to generate the response. It is a  singleton abstract class, vended by the RenderKit. This class knows the  mechanics of saving state, whether it be in hidden fields, session, or some  combination of the two.",1,1,0,0,0,0,0,0,0,0,0,0
" Implementations must use this value as the name and id of the client parameter in which to save the state between requests.  It is strongly recommend that implementations guard against cross site scripting attacks by at least making the value of this parameter difficult to predict.  Since: 1.2 See Also: Constant Field Values ",0,0,1,0,0,0,0,0,0,0,0,0
"LengthValidator is a Validator that checks the number of characters in the  String representation of the value of the associated component. The  following algorithm is implemented:      * Convert the passed value to a String, if necessary, by calling its        toString() method.     * If a maximum property has been configured on this Validator, check       the length of the converted String against this limit. If the String       length is larger than the specified maximum, throw a        ValidatorException containing a a MAXIMUM_MESSAGE_ID message.     * If a minimum property has been configured on this Validator, check       the length of the converted String against this limit. If the String       length is less than the specified minimum, throw a        ValidatorException containing a a MINIMUM_MESSAGE_ID message.  For all of the above cases that cause a ValidatorException to be thrown, if  there are parameters to the message that match up with validator  parameters, the values of these parameters must be converted using the  Converter registered in the application under the converter id  javax.faces.Number. This allows the values to be localized according to the  current Locale.",1,0,1,0,0,0,1,0,0,0,0,0
" The message identifier of the FacesMessage to be created if the maximum length check fails. The message format string for this message may optionally include the following placeholders:  * {0} replaced by the configured maximum length. * {1} replaced by a String whose value is the label of the input component that produced this message.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"LongRangeValidator is a Validator that checks the value of the  corresponding component against specified minimum and maximum values. The  following algorithm is implemented:      * If the passed value is null, exit immediately.     * If the current component value is not a floating point type, or a       String that is convertible to long, throw a ValidatorException        containing a TYPE_MESSAGE_ID message.     * If both a maximum and minimum property has been configured on this        Validator, check the component value against both limits. If the       component value is not within this specified range, throw a        ValidatorException containing a NOT_IN_RANGE_MESSAGE_ID message.     * If a maximum property has been configured on this Validator, check       the component value against this limit. If the component value is       greater than the specified maximum, throw a ValidatorException        containing a MAXIMUM_MESSAGE_ID message.     * If a minimum property has been configured on this Validator, check       the component value against this limit. If the component value is       less than the specified minimum, throw a ValidatorException        containing a MINIMUM_MESSAGE_ID message.  For all of the above cases that cause a ValidatorException to be thrown, if  there are parameters to the message that match up with validator  parameters, the values of these parameters must be converted using the  Converter registered in the application under the converter id  javax.faces.Number. This allows the values to be localized according to the  current Locale.",1,0,1,0,0,1,1,0,0,0,0,0
" The message identifier of the FacesMessage to be created if the act of matching the value against the pattern returned from getPattern() fails because the value does not match the pattern.  See Also: Constant Field Values ",0,0,0,0,0,0,1,0,0,0,0,0
"Construct a new exception with the specified detail message and root cause.  Parameters: message - The detail message for this exception cause - The root cause for this exception",0,0,0,0,0,0,0,0,0,0,0,1
"A VDL handler that exposes ActionListener to a page author. The default  implementation of Facelets must provide an implemention of this in the  handler for the <f:actionListener> tag.  Since:     2.0",0,0,1,0,0,0,0,0,0,0,0,0
"Represent a BehaviorHolder attached object target in a VDL page.",1,0,0,0,0,0,0,0,0,0,0,0
"A marker interface for VDL tags that represent  <composite:editableValueHolder/> for use by the composite component page  author.  Since:     2.0",0,0,0,1,0,0,1,0,0,0,0,0
"Return the ViewDeclarationLanguage instance suitable for handling the VDL contained in the page referenced by the argument viewId. The default implementation must return a valid ViewDeclarationLanguage instance for views written in either JSP, Faces XML Views, or Facelets for JSF 2.  Parameters: viewId - the viewId to be inspected for an appropriate ViewDeclarationLanguage implementation for the VDL used in the view. Throws: java.lang.NullPointerException - if viewId is null. Since: 2.0",0,0,1,0,0,0,0,0,0,0,0,0
"Returns the resolved literal String value of the attribute name after evaluating EL.  Parameters: ctx - the FaceletContext for this view execution",1,0,0,0,0,0,0,0,0,0,0,1
"Handles setting a Converter instance on a ValueHolder parent. Will wire all  attributes set to the Converter instance created/fetched. Uses the  binding attribute for grabbing instances to apply attributes to.  Will only set/create Converter if the passed UIComponent's parent is null,  signifying that it wasn't restored from an existing tree.",1,0,0,0,0,0,1,0,0,0,0,0
"Factory interface for creating Facelet or View Metadata Facelet instances.",1,0,0,0,0,0,0,0,0,0,0,0
"An interface that allows other code to identify FaceletHandlers that  correspond to component facets.  Since:     2.0",0,0,0,1,0,0,0,1,0,0,0,0
"Information used with MetaRule for determining how and what Metadata  should be wired.  Since:     2.0",1,0,0,0,0,0,0,0,0,0,0,0
"Return an object encapsulating the TagAttributes specified on this element in the view.",1,0,0,0,0,0,0,0,0,0,0,0
"A set of TagAttributes, usually representing all attributes on a Tag.  Since:     2.0",0,0,0,0,0,0,0,0,0,0,0,0
"A list of Namespaces found in this set  Returns: a list of Namespaces found in this set",0,0,0,0,0,0,0,0,0,0,0,1
"Passed to the constructor of TagHandler subclass, it defines the document  definition of the handler we are instantiating.  Since:     2.0",1,0,0,0,0,0,0,0,0,0,0,0
"Provides the ability to completely change the Tag before it's processed for  compiling with the associated TagHandler.  You could take <input type=text /> and convert it to <h:inputText />  before compiling.",1,0,0,0,0,0,0,0,1,0,0,0
"Foundation class for FaceletHandlers associated with a markup element in a  Facelet document. This class introduces the concept of XML attributes to  Facelets. See the constructor documentation for more details.  Since:     2.0",1,0,0,0,0,0,1,0,0,0,0,0
"public class AttributeTag      extends TagSupport   Tag implementation that adds an attribute with a specified name and String  value to the component whose tag it is nested inside, if the component does  not already contain an attribute with the same name. This tag creates no  output to the page currently being created.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"FacesServlet is a servlet that manages the request processing lifecycle for  web applications that are utilizing JavaServer Faces to construct the user  interface.  If the application is running in a Servlet 3.0 (and beyond) container, the  runtime must provide an implementation of the ServletContainerInitializer  interface that declares the following classes in its HandlesTypes  annotation.      * ResourceDependencies     * ResourceDependency     * javax.faces.bean.ManagedBean     * FacesComponent     * UIComponent     * Converter     * FacesConverter     * ListenerFor     * ListenersFor     * FacesBehaviorRenderer     * Renderer     * FacesValidator     * Validator  This servlet must automatically be mapped if it is not explicitly mapped in  web.xml or web-fragment.xml and one or more of the following conditions are  true.      * A faces-config.xml file is found in WEB-INF      * A faces-config.xml file is found in the META-INF directory of a jar       in the application's classpath.      * A filename ending in .faces-config.xml is found in the META-INF        directory of a jar in the application's classpath.      * The javax.faces.CONFIG_FILES context param is declared in web.xml or        web-fragment.xml.      * The Set of classes passed to the onStartup() method of the        ServletContainerInitializer implementation is not empty.  If the runtime determines that the servlet must be automatically mapped, it  must be mapped to the following <url-pattern> entries.      * /faces     * *.jsf     * *.faces",1,0,1,0,0,0,0,0,0,1,0,0
"FacetTag is the JSP mechanism for denoting a UIComponent is to be added as  a facet to the component associated with its parent.  A FacetTag must have one and only one child. This child must be a  UIComponentTag instance representing a single UIComponent instance.  See Also:     Serialized Form",0,0,1,0,0,0,1,0,0,0,0,0
"Perform any processing necessary to handle the content implications of CASE 4 in the class description.  Return result from getDoAfterBodyValue()  Specified by: doAfterBody in interface IterationTag Returns: whether additional evaluations of the body are desired Throws: JspException - if an error is encountered",1,0,0,0,0,0,1,0,0,0,0,1
"If this method has been called before on this tag's useful lifetime (before release() was called), return the previously returned value. Otherwise, if getJspId() returns non-null, prepend UNIQUE_ID_PREFIX to the jspId and return the result.",0,0,0,0,0,1,0,0,0,0,0,0
"Defined on JspIdConsumer. This method is called by the container before doStartTag(). The argument is guaranteed to be unique within the page.  IMPLEMENTATION NOTE: This method will detect where we are in an include and assign a unique ID for each include in a particular 'logical page'. This allows us to avoid possible duplicate ID situations for included pages that have components without explicit IDs.  Specified by: setJspId in interface JspIdConsumer Parameters: id - the container generated id for this tag, guaranteed to be unique within the page.",1,0,0,0,0,1,0,0,0,0,0,0
"String-based qualifier.  Example usage:   public class Car { @Inject @Named(driver) Seat driverSeat; @Inject @Named(passenger) Seat passengerSeat; ... }  Optional Element Summary  java.lang.String 	value           The name.     value   public abstract java.lang.String value      The name.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,1,0,0,0,0,0,0,1,0,0,1
"Provides a fully-constructed and injected instance of T.  Throws: java.lang.RuntimeException - if the injector encounters an error while providing an instance. For example, if an injectable member on T throws an exception, the injector may wrap the exception and throw it to the caller of get(). Callers should not try to handle such exceptions as the behavior may vary across injector implementations and even different configurations of the same injector.",1,0,1,0,0,0,0,0,0,0,0,0
"Specifies that a class is an interceptor.   @Interceptor public class ValidationInterceptor { ... }   This annotation is optional if the Interceptors annotation or the EJB  deployment descriptor are used to associate the interceptor with the target  class. It is required when an interceptor binding is used.  Since:     Interceptors 1.1 See Also:     Interceptors  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,1,0,1,0,0,0
"Exposes context information about the intercepted invocation and operations  that enable interceptor methods to control the behavior of the invocation  chain.    @AroundInvoke public Object logInvocation(InvocationContext ctx) throws Exception { String class = ctx.getMethod().getDeclaringClass().getName(); String method = ctx.getMethod().getName(); Logger.global.entering(class, method, ctx.getParameters()); try { Object result = ctx.proceed(); Logger.global.exiting(class, method, result); return result; } catch (Exception e) { Logger.global.throwing(class, method, e); throw e; }  }    Since:     Interceptors 1.0",1,0,0,0,0,0,0,0,1,0,0,0
"Sets the parameter values that will be passed to the method of the target class.  Parameters: params - the parameter values, as an array Throws: java.lang.IllegalStateException - if invoked within a lifecycle callback method. java.lang.IllegalArgumentException - if the types of the given parameter values do not match the types of the method parameters, or if the number of parameters supplied does not equal the number of method parameters.",0,0,0,0,0,0,0,0,0,0,0,1
"Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the bytes message stream as a 4-byte quantity, high byte first.  Parameters: value - the float value to be written Throws: JMSException - if the JMS provider fails to write the message due to some internal error. MessageNotWriteableException - if the message is in read-only mode.",1,0,0,0,1,0,0,0,0,0,0,0
"A Connection object is a client's active connection to its JMS provider. It  typically allocates provider resources outside the Java virtual machine  (JVM).  Connections support concurrent use.  A connection serves several purposes:      * It encapsulates an open connection with a JMS provider. It typically       represents an open TCP/IP socket between a client and the service       provider software.     * Its creation is where client authentication takes place.     * It can specify a unique client identifier.     * It provides a ConnectionMetaData object.     * It supports an optional ExceptionListener object.  Because the creation of a connection involves setting up authentication and  communication, a connection is a relatively heavyweight object. Most  clients will do all their messaging with a single connection. Other more  advanced applications may use several connections. The JMS API does not  architect a reason for using multiple connections; however, there may be  operational reasons for doing so.  A JMS client typically creates a connection, one or more sessions, and a  number of message producers and consumers. When a connection is created, it  is in stopped mode. That means that no messages are being delivered.  It is typical to leave the connection in stopped mode until setup is  complete (that is, until all message consumers have been created). At that  point, the client calls the connection's start method, and messages begin  arriving at the connection's consumers. This setup convention minimizes any  client confusion that may result from asynchronous message delivery while  the client is still in the process of setting itself up.  A connection can be started immediately, and the setup can be done  afterwards. Clients that do this must be prepared to handle asynchronous  message delivery while they are still in the process of setting up.  A message producer can send messages while a connection is stopped.  See Also:     ConnectionFactory, QueueConnection, TopicConnection",1,1,1,1,1,0,1,0,0,0,0,0
"For application servers, Connection objects provide a special facility for  creating a ConnectionConsumer (optional). The messages it is to consume are  specified by a Destination and a message selector. In addition, a  ConnectionConsumer must be given a ServerSessionPool to use for processing  its messages.  Normally, when traffic is light, a ConnectionConsumer gets a ServerSession  from its pool, loads it with a single message, and starts it. As traffic  picks up, messages can back up. If this happens, a ConnectionConsumer can  load each ServerSession with more than one message. This reduces the thread  context switches and minimizes resource use at the expense of some  serialization of message processing.  See Also:     Connection.createConnectionConsumer(javax.jms.Destination,     java.lang.String, javax.jms.ServerSessionPool, int),      Connection.createDurableConnectionConsumer(javax.jms.Topic,     java.lang.String, java.lang.String, javax.jms.ServerSessionPool, int),      QueueConnection.createConnectionConsumer(javax.jms.Queue,     java.lang.String, javax.jms.ServerSessionPool, int),      TopicConnection.createConnectionConsumer(javax.jms.Topic,     java.lang.String, javax.jms.ServerSessionPool, int),      TopicConnection.createDurableConnectionConsumer(javax.jms.Topic,     java.lang.String, java.lang.String, javax.jms.ServerSessionPool, int)",1,1,1,1,0,0,0,0,0,0,0,0
"A ConnectionMetaData object provides information describing the Connection  object.",0,0,0,0,0,0,0,0,0,0,0,0
"The delivery modes supported by the JMS API are PERSISTENT and  NON_PERSISTENT.  A client marks a message as persistent if it feels that the application  will have problems if the message is lost in transit. A client marks a  message as non-persistent if an occasional lost message is tolerable.  Clients use delivery mode to tell a JMS provider how to balance message  transport reliability with throughput.  Delivery mode covers only the transport of the message to its destination.  Retention of a message at the destination until its receipt is acknowledged  is not guaranteed by a PERSISTENT delivery mode. Clients should assume that  message retention policies are set administratively. Message retention  policy governs the reliability of message delivery from destination to  message consumer. For example, if a client's message storage space is  exhausted, some messages may be dropped in accordance with a site-specific  message retention policy.  A message is guaranteed to be delivered once and only once by a JMS  provider if the delivery mode of the message is PERSISTENT and if the  destination has a sufficient message retention policy.",1,0,0,1,0,0,0,0,0,0,0,0
"A Destination object encapsulates a provider-specific address. The JMS API  does not define a standard address syntax. Although a standard address  syntax was considered, it was decided that the differences in address  semantics between existing message-oriented middleware (MOM) products were  too wide to bridge with a single syntax.  Since Destination is an administered object, it may contain  provider-specific configuration information in addition to its address.  The JMS API also supports a client's use of provider-specific address  names.  Destination objects support concurrent use.  A Destination object is a JMS administered object.  JMS administered objects are objects containing configuration information  that are created by an administrator and later used by JMS clients. They  make it practical to administer the JMS API in the enterprise.  Although the interfaces for administered objects do not explicitly depend  on the Java Naming and Directory Interface (JNDI) API, the JMS API  establishes the convention that JMS clients find administered objects by  looking them up in a JNDI namespace.  An administrator can place an administered object anywhere in a namespace.  The JMS API does not define a naming policy.  It is expected that JMS providers will provide the tools an administrator  needs to create and configure administered objects in a JNDI namespace. JMS  provider implementations of administered objects should implement the  javax.naming.Referenceable and java.io.Serializable interfaces so that they  can be stored in all JNDI naming contexts. In addition, it is recommended  that these implementations follow the JavaBeansTM design patterns.  This strategy provides several benefits:      * It hides provider-specific details from JMS clients.     * It abstracts JMS administrative information into objects in the Java       programming language (Java objects) that are easily organized and       administered from a common management console.     * Since there will be JNDI providers for all popular naming services,       JMS providers can deliver one implementation of administered objects       that will run everywhere.  An administered object should not hold on to any remote resources. Its  lookup should not use remote resources other than those used by the JNDI  API itself.  Clients should think of administered objects as local Java objects. Looking  them up should not have any hidden side effects or use surprising amounts  of local resources.  See Also:     Queue, Topic  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,0,0,0,0,0,1,0,0,0,0
"This exception must be thrown when a client attempts to set a connection's  client ID to a value that is rejected by a provider.  See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"This exception must be thrown when a destination either is not understood  by a provider or is no longer valid.  See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Gets the message ID.  The JMSMessageID header field contains a value that uniquely identifies each message sent by a provider.  When a message is sent, JMSMessageID can be ignored. When the send or publish method returns, it contains a provider-assigned value.  A JMSMessageID is a String value that should function as a unique key for identifying messages in a historical repository. The exact scope of uniqueness is provider-defined. It should at least cover all messages for a specific installation of a provider, where an installation is some connected set of message routers.  All JMSMessageID values must start with the prefix 'ID:'. Uniqueness of message ID values across different providers is not required.  Since message IDs take some effort to create and increase a message's size, some JMS providers may be able to optimize message overhead if they are given a hint that the message ID is not used by an application. By calling the MessageProducer.setDisableMessageID method, a JMS client enables this potential optimization for all messages sent by that message producer. If the JMS provider accepts this hint, these messages must have the message ID set to null; if the provider ignores the hint, the message ID must be set to its normal unique value.  Returns: the message ID Throws: JMSException - if the JMS provider fails to get the message ID due to some internal error. See Also: setJMSMessageID(String), MessageProducer.setDisableMessageID(boolean)",0,1,1,1,1,0,0,0,0,0,0,1
"Sets the message's expiration value.  JMS providers set this field when a message is sent. This method can be used to change the value for a message that has been received.  Parameters: expiration - the message's expiration time Throws: JMSException - if the JMS provider fails to set the message expiration due to some internal error. See Also: getJMSExpiration()",1,0,0,0,0,0,0,1,0,0,0,1
"A client uses a QueueBrowser object to look at messages on a queue without  removing them.  The getEnumeration method returns a java.util.Enumeration that is used to  scan the queue's messages. It may be an enumeration of the entire content  of a queue, or it may contain only the messages matching a message  selector.  Messages may be arriving and expiring while the scan is done. The JMS API  does not require the content of an enumeration to be a static snapshot of  queue content. Whether these changes are visible or not depends on the JMS  provider.  A QueueBrowser can be created from either a Session or a QueueSession.  See Also:     Session.createBrowser(javax.jms.Queue),      QueueSession.createBrowser(javax.jms.Queue), QueueReceiver",1,0,0,0,0,0,1,1,0,0,0,0
"A QueueSession object provides methods for creating QueueReceiver,  QueueSender, QueueBrowser, and TemporaryQueue objects.  If there are messages that have been received but not acknowledged when a  QueueSession terminates, these messages will be retained and redelivered  when a consumer next accesses the queue.  A QueueSession is used for creating Point-to-Point specific objects. In  general, use the Session object. The QueueSession is used to support  existing code. Using the Session object simplifies the programming model,  and allows transactions to be used across the two messaging domains.  A QueueSession cannot be used to create objects specific to the  publish/subscribe domain. The following methods inherit from Session, but  must throw an IllegalStateException if they are used from QueueSession:      * createDurableSubscriber     * createTemporaryTopic     * createTopic     * unsubscribe  See Also:     Session, QueueConnection.createQueueSession(boolean, int),      XAQueueSession.getQueueSession()",0,0,1,1,0,1,0,0,0,0,0,0
"Creates a QueueReceiver object to receive messages from the specified queue using a message selector.  Parameters: queue - the Queue to access messageSelector - only messages with properties matching the message selector expression are delivered. A value of null or an empty string indicates that there is no message selector for the message consumer. Throws: JMSException - if the session fails to create a receiver due to some internal error. InvalidDestinationException - if an invalid queue is specified. InvalidSelectorException - if the message selector is invalid.",1,0,0,0,0,0,0,0,0,0,0,1
"Creates an initialized ObjectMessage object. An ObjectMessage object is used to send a message that contains a serializable Java object.  Parameters: object - the object to use to initialize this message Throws: JMSException - if the JMS provider fails to create this message due to some internal error.",0,0,0,0,0,0,0,0,0,0,0,1
"Closes the session.  Since a provider may allocate some resources on behalf of a session outside the JVM, clients should close the resources when they are not needed. Relying on garbage collection to eventually reclaim these resources may not be timely enough.  There is no need to close the producers and consumers of a closed session.  This call will block until a receive call or message listener in progress has completed. A blocked message consumer receive call returns null when this session is closed.  Closing a transacted session must roll back the transaction in progress.  This method is the only Session method that can be called concurrently.  Invoking any other Session method on a closed session must throw a JMSException.IllegalStateException. Closing a closed session must not throw an exception.  Throws: JMSException - if the JMS provider fails to close the session due to some internal error.",1,0,1,0,1,1,0,0,0,0,0,0
"Reads a float from the stream message.  Returns: a float value from the stream message Throws: JMSException - if the JMS provider fails to read the message due to some internal error. MessageEOFException - if unexpected end of message stream has been reached. MessageFormatException - if this type conversion is invalid. MessageNotReadableException - if the message is in write-only mode.",0,0,0,0,0,0,0,0,0,0,0,0
"A TemporaryTopic object is a unique Topic object created for the duration  of a Connection. It is a system-defined topic that can be consumed only by  the Connection that created it.  A TemporaryTopic object can be created either at the Session or  TopicSession level. Creating it at the Session level allows the  TemporaryTopic to participate in the same transaction with objects from the  PTP domain. If a TemporaryTopic is created at the TopicSession, it will  only be able participate in transactions with objects from the Pub/Sub  domain.  See Also:     Session\#createTemporaryTopic(), TopicSession\#createTemporaryTopic()",1,0,0,0,0,0,1,1,0,0,0,0
"Constructor for the TopicRequestor class.  This implementation assumes the session parameter to be non-transacted, with a delivery mode of either AUTO_ACKNOWLEDGE or DUPS_OK_ACKNOWLEDGE .  Parameters: session - the TopicSession the topic belongs to topic - the topic to perform the request/reply call on Throws: JMSException - if the JMS provider fails to create the TopicRequestor due to some internal error. InvalidDestinationException - if an invalid topic is specified.",1,0,1,0,0,0,0,0,0,0,0,0
"Constructs a TransactionRolledBackException with the specified reason. The error code defaults to null.  Parameters: reason - a description of the exception",1,0,0,0,0,0,0,0,0,0,0,0
"An XATopicConnection provides the same create options as TopicConnection  (optional). The Topic connections created are transactional.  The XATopicConnection interface is optional. JMS providers are not required  to support this interface. This interface is for use by JMS providers to  support transactional environments. Client programs are strongly encouraged  to use the transactional support available in their environment, rather  than use these XA interfaces directly.  See Also:     XAConnection",1,0,0,1,0,0,0,0,0,0,0,0
"An XATopicConnectionFactory provides the same create options as a  TopicConnectionFactory (optional).  The XATopicConnectionFactory interface is optional. JMS providers are not  required to support this interface. This interface is for use by JMS  providers to support transactional environments. Client programs are  strongly encouraged to use the transactional support available in their  environment, rather than use these XA interfaces directly.  See Also:     TopicConnectionFactory, XAConnectionFactory",0,0,0,0,0,0,1,1,0,0,0,0
"The direction in which the parameter flows",0,0,0,0,0,0,0,0,0,0,0,0
"Customizes the mapping of the return value to a WSDL part and XML element.  Author:     Copyright (c) 2004 by BEA Systems, Inc. All Rights Reserved.  Optional Element Summary  boolean 	header           If true, the result is pulled from a message header rather then  the message body.  java.lang.String 	name           Name of return value.  java.lang.String 	partName           The name of the wsdl:part representing this return value.  java.lang.String 	targetNamespace           The XML namespace for the return value.     name   public abstract java.lang.String name      Name of return value.      If the operation is rpc style and @WebResult.partName has not been     specified, this is the name of the wsdl:part representing the return     value.     If the operation is document style or the return value maps to a     header, this is the local name of the XML element representing the     return value.      Default:            partName   public abstract java.lang.String partName      The name of the wsdl:part representing this return value.      This is only used if the operation is rpc style, or if the operation is     document style and the parameter style is BARE.      Since:         2.0     Default:            targetNamespace   public abstract java.lang.String targetNamespace      The XML namespace for the return value.      Only used if the operation is document style or the return value maps     to a header. If the target namespace is set to , this represents the     empty namespace.      Default:            header   public abstract boolean header      If true, the result is pulled from a message header rather then the     message body.      Since:         2.0     Default:         false Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
"The style of mapping parameters onto SOAP messages",0,0,0,0,0,0,0,0,0,0,0,0
"Specifies the mapping of the Web Service onto the SOAP message protocol.  Author:     Copyright (c) 2004 by BEA Systems, Inc. All Rights Reserved.  Optional Element Summary  SOAPBinding.ParameterStyle 	parameterStyle           Determines whether method parameters represent the entire message  body, or whether the parameters are elements wrapped inside a top-level  element named after the operation  SOAPBinding.Style 	style           Defines the encoding style for messages send to and from the Web  Service.  SOAPBinding.Use 	use           Defines the formatting style for messages sent to and from the  Web Service.     style   public abstract SOAPBinding.Style style      Defines the encoding style for messages send to and from the Web     Service.      Default:         javax.jws.soap.SOAPBinding.Style.DOCUMENT   use   public abstract SOAPBinding.Use use      Defines the formatting style for messages sent to and from the Web     Service.      Default:         javax.jws.soap.SOAPBinding.Use.LITERAL   parameterStyle   public abstract SOAPBinding.ParameterStyle parameterStyle      Determines whether method parameters represent the entire message body,     or whether the parameters are elements wrapped inside a top-level     element named after the operation      Default:         javax.jws.soap.SOAPBinding.ParameterStyle.WRAPPED Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,0,1,0,0,0,0,0,0,0,0
"Returns: the default user name given by the requestor",1,0,0,0,0,0,0,0,0,0,0,0
"This class models a Part that is contained within a Multipart. This is an  abstract class. Subclasses provide actual implementations.  BodyPart implements the Part interface. Thus, it contains a set of  attributes and a content.  Author:     John Mani, Bill Shannon",0,0,0,0,0,0,1,0,0,0,0,0
"Compute a hash code for this Flags object.  Overrides: hashCode in class java.lang.Object Returns: the hash code",1,0,0,0,0,0,0,0,0,0,0,1
"Folder is an abstract class that represents a folder for mail messages.  Subclasses implement protocol specific Folders.  Folders can contain Messages, other Folders or both, thus providing a  tree-like hierarchy rooted at the Store's default folder. (Note that some  Folder implementations may not allow both Messages and other Folders in the  same Folder).  The interpretation of folder names is implementation dependent. The  different levels of hierarchy in a folder's full name are separated from  each other by the hierarchy delimiter character.  The case-insensitive full folder name (that is, the full name relative to  the default folder for a Store) INBOX is reserved to mean the primary  folder for this user on this server. Not all Stores will provide an INBOX  folder, and not all users will have an INBOX folder at all times. The name  INBOX is reserved to refer to this folder, when it exists, in Stores that  provide it.  A Folder object obtained from a Store need not actually exist in the  backend store. The exists method tests whether the folder exists or not.  The create method creates a Folder.  A Folder is initially in the closed state. Certain methods are valid in  this state; the documentation for those methods note this. A Folder is  opened by calling its 'open' method. All Folder methods, except open,  delete and renameTo, are valid in this state.  The only way to get a Folder is by invoking the getFolder method on Store,  Folder, or Session, or by invoking the list or listSubscribed methods on  Folder. Folder objects returned by the above methods are not cached by the  Store. Thus, invoking the getFolder method with the same folder name  multiple times will return distinct Folder objects. Likewise for the list  and listSubscribed methods.  The Message objects within the Folder are cached by the Folder. Thus,  invoking getMessage(msgno) on the same message number multiple times will  return the same Message object, until an expunge is done on this Folder.  Message objects from a Folder are only valid while a Folder is open and  should not be accessed after the Folder is closed, even if the Folder is  subsequently reopened. Instead, new Message objects must be fetched from  the Folder after the Folder is reopened.  Note that a Message's message number can change within a session if the  containing Folder is expunged using the expunge method. Clients that use  message numbers as references to messages should be aware of this and  should be prepared to deal with situation (probably by flushing out  existing message number references and reloading them). Because of this  complexity, it is better for clients to use Message objects as references  to messages, rather than message numbers. Expunged Message objects still  have to be pruned, but other Message objects in that folder are not  affected by the expunge.  Author:     John Mani, Bill Shannon",1,0,1,0,1,0,1,1,0,0,0,0
"This exception is thrown by Folder methods, when those methods are invoked  on a non existent folder.  Author:     John Mani See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs a MessagingException with the specified folder and the specified detail message.  Parameters: folder - the Folder s - the detail message Since: JavaMail 1.2",0,0,0,0,0,0,0,0,0,0,0,0
"This inner class defines the types of recipients allowed by the Message  class. The currently defined types are TO, CC and BCC. Note that this class  only has a protected constructor, thereby restricting new Recipient types  to either this class or subclasses. This effectively implements an  enumeration of the allowed Recipient types. The following code sample shows  how to use this class to obtain the TO recipients from a message.        Message msg = folder.getMessages(1); Address[] a = m.getRecipients(Message.RecipientType.TO);    See Also:     Message.getRecipients(javax.mail.Message.RecipientType),      Message.setRecipients(javax.mail.Message.RecipientType,     javax.mail.Address[]),      Message.addRecipients(javax.mail.Message.RecipientType,     javax.mail.Address[]), Serialized Form",1,0,0,0,0,0,0,0,1,0,0,0
"This class models an email message. This is an abstract class. Subclasses  provide actual implementations.  Message implements the Part interface. Message contains a set of attributes  and a content. Messages within a folder also have a set of flags that  describe its state within the folder.  Message defines some new attributes in addition to those defined in the  Part interface. These attributes specify meta-data for the message - i.e.,  addressing and descriptive information about the message.  Message objects are obtained either from a Folder or by constructing a new  Message object of the appropriate subclass. Messages that have been  received are normally retrieved from a folder named INBOX.  A Message object obtained from a folder is just a lightweight reference to  the actual message. The Message is 'lazily' filled up (on demand) when each  item is requested from the message. Note that certain folder  implementations may return Message objects that are pre-filled with certain  user-specified items. To send a message, an appropriate subclass of Message  (e.g., MimeMessage) is instantiated, the attributes and content are filled  in, and the message is sent using the Transport.send method.  Author:     John Mani, Bill Shannon, Max Spivak See Also:     Part",1,0,0,0,0,0,1,1,0,0,0,0
"Returns the From attribute. The From attribute contains the identity of the person(s) who wished this message to be sent.  In certain implementations, this may be different from the entity that actually sent the message.  This method returns null if this attribute is not present in this message. Returns an empty array if this attribute is present, but contains no addresses.  Returns: array of Address objects Throws: MessagingException",1,0,0,0,0,0,0,0,0,0,0,1
"The base class for all exceptions thrown by the Messaging classes  Author:     John Mani, Bill Shannon See Also:     Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
"Initialize a new PasswordAuthentication  Parameters: userName - the user name password - The user's password",0,0,0,0,0,0,0,0,0,0,0,1
"The Provider is a class that describes a protocol implementation. The  values typically come from the javamail.providers and  javamail.default.providers resource files. An application may also create  and register a Provider object to dynamically add support for a new  provider.  Author:     Max Spivak, Bill Shannon",0,0,0,0,0,0,0,1,0,0,0,0
"Overrides Object.toString()  Overrides: toString in class java.lang.Object",0,0,0,0,0,0,0,0,0,0,0,1
"This exception is thrown when the message cannot be sent.  The exception includes those addresses to which the message could not be  sent as well as the valid addresses to which the message was sent and valid  addresses to which the message was not sent.  Author:     John Mani, Max Spivak See Also:     Transport.send(javax.mail.Message),      Transport.sendMessage(javax.mail.Message, javax.mail.Address[]),      TransportEvent, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,1
"Connect to the current host using the specified username and password. This method is equivalent to calling the connect(host, user, password) method with null for the host name.  Parameters: user - the user name password - this user's password Throws: AuthenticationFailedException - for authentication failures MessagingException - for other failures IllegalStateException - if the service is already connected Since: JavaMail 1.4 See Also: ConnectionEvent, Session.setPasswordAuthentication(javax.mail.URLName, javax.mail.PasswordAuthentication), connect(java.lang.String, java.lang.String, java.lang.String)",1,0,0,0,0,0,1,0,0,0,0,1
"The service implementation should override this method to perform the actual protocol-specific connection attempt. The default implementation of the connect method calls this method as needed.  The protocolConnect method should return false if a user name or password is required for authentication but the corresponding parameter is null; the connect method will prompt the user when needed to supply missing information. This method may also return false if authentication fails for the supplied user name or password. Alternatively, this method may throw an AuthenticationFailedException when authentication fails. This exception may include a String message with more detail about the failure.  The protocolConnect method should throw an exception to report failures not related to authentication, such as an invalid host name or port number, loss of a connection during the authentication process, unavailability of the server, etc.  Parameters: host - the name of the host to connect to port - the port to use (-1 means use default port) user - the name of the user to login as password - the user's password Returns: true if connection successful, false if authentication failed Throws: AuthenticationFailedException - for authentication failures MessagingException - for non-authentication failures",1,0,1,0,0,0,0,0,0,0,0,1
"Set the connection state of this service. The connection state will automatically be set by the service implementation during the connect and close methods. Subclasses will need to call this method to set the state if the service was automatically disconnected.  The implementation in this class merely sets the private field returned by the isConnected method.  Parameters: connected - true if the service is connected, false if it is not connected",1,0,0,0,0,1,0,0,0,0,0,1
"Return a URLName representing this service. The returned URLName does not include the password field.  Subclasses should only override this method if their URLName does not follow the standard format.  The implementation in the Service class returns (usually a copy of) the url field with the password and file information stripped out.  Returns: the URLName representing this service See Also: URLName",1,0,1,0,0,0,0,0,0,0,0,0
"The name of a URL. This class represents a URL name and also provides the  basic parsing functionality to parse most internet standard URL schemes.  Note that this class differs from java.net.URL in that this class just  represents the name of a URL, it does not model the connection to a URL.  Author:     Christopher Cotton, Bill Shannon",1,0,0,0,0,0,0,0,0,0,0,1
"The adapter which receives Folder events. The methods in this class are  empty; this class is provided as a convenience for easily creating  listeners by extending this class and overriding only the methods of  interest.  Author:     John Mani",1,0,0,1,0,0,0,0,0,0,0,0
"This is the Listener interface for Folder events.  Author:     John Mani",0,0,0,0,0,0,0,0,0,0,0,1
"Return the type of this event.  Returns: type",0,0,0,0,0,0,0,0,0,0,0,1
"This is the Listener interface for MessageCount events.  Author:     John Mani",0,0,0,0,0,0,0,0,0,0,0,1
"This class models Transport events.  Author:     John Mani, Max Spivak See Also:     Transport, TransportListener, Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"The Token class represents tokens returned by the HeaderTokenizer.",1,0,0,0,0,0,0,0,0,0,0,0
"This class tokenizes RFC822 and MIME headers into the basic symbols  specified by RFC822 and MIME.  This class handles folded headers (ie headers with embedded CRLF SPACE  sequences). The folds are removed in the returned tokens.  Author:     John Mani, Bill Shannon",1,0,0,0,0,0,0,0,0,0,0,0
" MIME specials  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"Convert the given array of InternetAddress objects into a comma separated sequence of address strings. The resulting string contains only US-ASCII characters, and hence is mail-safe.  Parameters: addresses - array of InternetAddress objects Returns: comma separated string of addresses Throws: ClassCastException, - if any address object in the given array is not an InternetAddress object. Note that this is a RuntimeException.",1,0,0,0,0,0,0,0,0,0,0,0
"Convert the given array of InternetAddress objects into a comma separated sequence of address strings. The resulting string contains only US-ASCII characters, and hence is mail-safe.  The 'used' parameter specifies the number of character positions already taken up in the field into which the resulting address sequence string is to be inserted. It is used to determine the line-break positions in the resulting address sequence string.  Parameters: addresses - array of InternetAddress objects used - number of character positions already used, in the field into which the address string is to be inserted. Returns: comma separated string of addresses Throws: ClassCastException, - if any address object in the given array is not an InternetAddress object. Note that this is a RuntimeException.",1,0,0,0,0,0,0,0,0,0,0,0
"Returns the value of the Content-Disposition header field. This represents the disposition of this part. The disposition describes how the part should be presented to the user.  If the Content-Disposition field is unavailable, null is returned.  This implementation uses getHeader(name) to obtain the requisite header field.  Specified by: getDisposition in interface Part Returns: disposition of this part, or null if unknown Throws: MessagingException See Also: headers",1,0,0,0,1,0,1,0,0,0,0,0
"Set the value for this header_name. Replaces all existing header values with this new value. Note that RFC 822 headers must contain only US-ASCII characters, so a header that contains non US-ASCII characters must be encoded as per the rules of RFC 2047.  Specified by: setHeader in interface Part Parameters: name - header name value - header value Throws: MessagingException See Also: MimeUtility",0,0,1,0,0,0,1,0,0,0,0,1
"Constructs a MimeMessage by reading and parsing the data from the specified MIME InputStream. The InputStream will be left positioned at the end of the data for the message. Note that the input stream parse is done within this constructor itself.  The input stream contains an entire MIME formatted message with headers and data.  Parameters: session - Session object for this message is - the message input stream Throws: MessagingException",1,0,0,0,0,0,0,0,0,0,0,1
"Add the specified addresses to the existing From field. If the From field does not already exist, it is created.  Specified by: addFrom in class Message Parameters: addresses - the senders of this message Throws: IllegalWriteException - if the underlying implementation does not support modification of existing values IllegalStateException - if this message is obtained from a READ_ONLY folder. MessagingException",1,0,0,0,0,1,0,0,0,0,0,1
"Create and return a MimeMessage object. The reply method uses this method to create the MimeMessage object that it will return. Subclasses can override this method to return a subclass of MimeMessage. This implementation simply constructs and returns a MimeMessage object using the supplied Session.  Parameters: session - the Session to use for the new message Returns: the new MimeMessage object Throws: MessagingException Since: JavaMail 1.4",1,0,0,0,0,0,0,0,0,0,0,1
"The MimePart interface models an Entity as defined by MIME (RFC2045,  Section 2.4).  MimePart extends the Part interface to add additional RFC822 and MIME  specific semantics and attributes. It provides the base interface for the  MimeMessage and MimeBodyPart classes  ------------------------------------------------------------------------ A note on RFC822 and MIME headers  RFC822 and MIME header fields must contain only US-ASCII characters. If a  header contains non US-ASCII characters, it must be encoded as per the  rules in RFC 2047. The MimeUtility class provided in this package can be  used to to achieve this. Callers of the setHeader, addHeader, and  addHeaderLine methods are responsible for enforcing the MIME requirements  for the specified headers. In addition, these header fields must be folded  (wrapped) before being sent if they exceed the line length limitation for  the transport (1000 bytes for SMTP). Received headers may have been folded.  The application is responsible for folding and unfolding headers as  appropriate.  Author:     John Mani See Also:     MimeUtility, Part",1,0,1,1,0,0,1,0,0,0,0,0
"Get the values of all header fields available for this header, returned as a single String, with the values separated by the delimiter. If the delimiter is null, only the first value is returned.  Parameters: name - the name of this header delimiter - delimiter between fields in returned string Returns: the value fields for all headers with this name Throws: MessagingException",1,0,0,0,0,0,0,0,0,0,0,0
" Encode a RFC 822 word token into mail-safe form as per RFC 2047.  The given Unicode string is examined for non US-ASCII characters. If the string contains only US-ASCII characters, it is returned as-is. If the string contains non US-ASCII characters, it is first character-encoded using the platform's default charset, then transfer-encoded using either the B or Q encoding. The resulting bytes are then returned as a Unicode string containing only ASCII characters.  This method is meant to be used when creating RFC 822 phrases. The InternetAddress class, for example, uses this to encode it's 'phrase' component.  Parameters: word - Unicode string Returns: Array of Unicode strings containing only US-ASCII characters. Throws: java.io.UnsupportedEncodingException - if the encoding fails ",1,0,0,1,0,0,0,0,0,0,1,0
"This class holds MIME parameters (attribute-value pairs). The  mail.mime.encodeparameters and mail.mime.decodeparameters System properties  control whether encoded parameters, as specified by RFC 2231, are  supported. By default, such encoded parameters are not supported.  Also, in the current implementation, setting the System property  mail.mime.decodeparameters.strict to true will cause a ParseException to  be thrown for errors detected while decoding encoded parameters. By  default, if any decoding errors occur, the original (undecoded) string is  used.  The current implementation supports the System property  mail.mime.parameters.strict, which if set to false when parsing a parameter  list allows parameter values to contain whitespace and other special  characters without being quoted; the parameter value ends at the next  semicolon. If set to true (the default), parameter values are required to  conform to the MIME specification and must be quoted if they contain  whitespace or special characters.  Author:     John Mani, Bill Shannon",1,0,0,0,0,0,1,0,0,0,1,0
"This class implements Message Address comparisons.  Author:     Bill Shannon, John Mani See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"This class implements comparisons for Dates  Author:     Bill Shannon, John Mani See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Equality comparison.  Overrides: equals in class ComparisonTerm",0,0,0,0,0,0,0,0,0,0,0,1
"This class implements comparisons for Message Flags.  Author:     Bill Shannon, John Mani See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"This class implements the logical NEGATION operator.  Author:     Bill Shannon, John Mani See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"This class implements string comparisons for the Recipient Address headers.  Note that this class differs from the RecipientTerm class in that this  class does comparisons on address strings rather than Address objects. The  string comparisons are case-insensitive.  Since:     JavaMail 1.1 See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"Constructor.  Parameters: type - the recipient type pattern - the address pattern to be compared.",0,0,0,0,0,0,0,0,0,0,0,1
" Ignore case when comparing? ",0,0,0,0,0,0,0,0,0,0,0,1
"Create a ByteArrayDataSource with data from the specified String and with the specified MIME type. The MIME type should include a charset parameter specifying the charset to be used for the string. If the parameter is not included, the default charset is used.  Parameters: data - the String type - the MIME type Throws: java.io.IOException - errors reading the String",1,0,1,0,0,0,0,0,0,0,0,1
"A SharedFileInputStream is a BufferedInputStream that buffers data from the  file and supports the mark and reset methods. It also supports the  newStream method that allows you to create other streams that represent  subsets of the file. A RandomAccessFile object is used to access the file  data.  Note that when the SharedFileInputStream is closed, all streams created  with the newStream method are also closed. This allows the creator of the  SharedFileInputStream object to control access to the underlying file and  ensure that it is closed when needed, to avoid leaking file descriptors.  Note also that this behavior contradicts the requirements of  SharedInputStream and may change in a future release.  Since:     JavaMail 1.4 Author:     Bill Shannon",1,0,0,0,1,0,0,0,0,0,0,0
"This method discovers the attributes and operations that a managed object exposes for management.  Parameters: name - The name of the managed object to analyze Returns: An instance of MBeanInfo allowing the retrieval of all attributes and operations of this managed object. Throws: javax.management.IntrospectionException - An exception occurs during introspection. javax.management.InstanceNotFoundException - The managed object specified is not found. javax.management.ReflectionException - An exception occurred when trying to perform reflection on a managed object RemoteException - A communication exception occurred during the execution of a remote method call",1,0,0,0,0,0,0,0,0,0,0,1
"The required home interface for the J2EE Management EJB component (MEJB). A  J2EE client must be able to create a compliant session object using the  specified create() method.  Author:     Hans Hrasna",0,0,1,1,0,0,1,0,0,0,0,0
"Specifies standard count measurements.",0,0,0,0,0,0,0,0,0,0,0,0
"Specifies the statistics provided by a JMS connection  Author:     Hans Hrasna",0,0,0,0,0,0,0,0,0,0,0,1
"Specifies the statistics provided by a JMS message consumer  Author:     Hans Hrasna",0,0,0,0,0,0,0,0,0,0,0,0
"Specifies the statistics provided by a JMS message producer or a JMS  message consumer.",0,0,0,0,0,0,0,0,0,0,0,0
"Number of messages that expired before delivery.",0,0,0,0,0,0,0,0,0,0,0,1
"Number of expired messages.",0,0,0,0,0,0,0,0,0,0,0,1
"Specifies the statistics provided by a Servlet.",0,0,0,0,0,0,0,0,0,0,0,1
"Specifies the statistics provided by a URL resource.",1,0,0,0,0,0,0,0,0,0,0,0
"Is used with the Access annotation to specify an access type to be applied  to an entity class, mapped superclass, or embeddable class, or to a  specific attribute of such a class.  Since:     Java Persistence 2.0 See Also:     Access",0,0,0,0,0,0,0,0,0,0,0,0
"Used as the value of the javax.persistence.cache.retrieveMode property to  specify the behavior when data is retrieved by the find methods and by  queries.  Since:     Java Persistence 2.0",0,0,0,0,0,0,0,0,0,0,0,0
"Specifies whether an entity should be cached if caching is enabled when the  value of the persistence.xml caching element is ENABLE_SELECTIVE or  DISABLE_SELECTIVE. The value of the Cacheable annotation is inherited by  subclasses; it can be overridden by specifying Cacheable on a subclass.  Cacheable(false) means that the entity and its state must not be cached by  the provider.  Since:     Java Persistence 2.0  Optional Element Summary  boolean 	value           (Optional) Whether or not the entity should be cached.     value   public abstract boolean value      (Optional) Whether or not the entity should be cached.      Default:         true Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,1,1,0,0,0,0
"Defines the set of cascadable operations that are propagated to the  associated entity. The value cascade=ALL is equivalent to  cascade={PERSIST, MERGE, REMOVE, REFRESH, DETACH}.  Since:     Java Persistence 1.0",0,0,0,0,0,0,0,0,0,0,0,0
"Specifies the value of the discriminator column for entities of the given  type.  The DiscriminatorValue annotation can only be specified on a concrete  entity class.  If the DiscriminatorValue annotation is not specified and a discriminator  column is used, a provider-specific function will be used to generate a  value representing the entity type. If the DiscriminatorType is STRING, the  discriminator value default is the entity name.  The inheritance strategy and the discriminator column are only specified in  the root of an entity class hierarchy or subhierarchy in which a different  inheritance strategy is applied. The discriminator value, if not defaulted,  should be specified for each entity class in the hierarchy.    Example:  @Entity @Table(name=CUST) @Inheritance(strategy=SINGLE_TABLE) @DiscriminatorColumn(name=DISC, discriminatorType=STRING, length=20) @DiscriminatorValue(CUSTOMER) public class Customer { ... }  @Entity @DiscriminatorValue(VCUSTOMER) public class ValuedCustomer extends Customer { ... }   Since:     Java Persistence 1.0 See Also:     DiscriminatorColumn  Required Element Summary  java.lang.String 	value           (Optional) The value that indicates that the row is an entity of  the annotated entity type.    Element Detail   value   public abstract java.lang.String value      (Optional) The value that indicates that the row is an entity of the     annotated entity type.      If the DiscriminatorValue annotation is not specified and a     discriminator column is used, a provider-specific function will be used     to generate a value representing the entity type. If the      DiscriminatorType is STRING, the discriminator value default is the     entity name.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,0,0,1,0,0,1
"Applied to a persistent field or property of an entity class or mapped  superclass to denote a composite primary key that is an embeddable class.  The embeddable class must be annotated as Embeddable.  There must be only one EmbeddedId annotation and no Id annotation when the  EmbeddedId annotation is used.  The AttributeOverride annotation may be used to override the column  mappings declared within the embeddable class.  The MapsId annotation may be used in conjunction with the EmbeddedId  annotation to specify a derived primary key.  If the entity has a derived primary key, the AttributeOverride annotation  may only be used to override those attributes of the embedded id that do  not correspond to the relationship to the parent entity.  Relationship mappings defined within an embedded id class are not  supported.   Example 1:  @EmbeddedId protected EmployeePK empPK;   Example 2:  @Embeddable public class DependentId { String name; EmployeeId empPK;   // corresponds to primary key type of Employee }  @Entity public class Dependent { // default column name for name attribute is overridden @AttributeOverride(name=name, @Column(name=dep_name)) @EmbeddedId DependentId id; ... @MapsId(empPK) @ManyToOne Employee emp; }   Since:     Java Persistence 1.0 See Also:     Embeddable, MapsId  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,0,0,1,0,0,0
"Create an instance of Query for executing a Java Persistence query language statement.  Parameters: qlString - a Java Persistence query string Returns: the new query instance Throws: IllegalArgumentException - if the query string is found to be invalid",0,0,0,0,0,0,0,0,0,0,0,1
"Indicate to the entity manager that a JTA transaction is active. This method should be called on a JTA application managed entity manager that was created outside the scope of the active transaction to associate it with the current JTA transaction.  Throws: TransactionRequiredException - if there is no transaction",1,0,0,0,0,0,0,1,0,0,0,0
"Interface used to interact with the entity manager factory for the  persistence unit.  When the application has finished using the entity manager factory, and/or  at application shutdown, the application should close the entity manager  factory. Once an EntityManagerFactory has been closed, all its entity  managers are considered to be in the closed state.  Since:     Java Persistence 1.0",1,0,1,0,0,0,0,1,0,0,0,0
"Get the properties and associated values that are in effect for the entity manager factory. Changing the contents of the map does not change the configuration in effect.  Returns: properties Throws: IllegalStateException - if the entity manager factory has been closed Since: Java Persistence 2.0",1,0,0,0,0,0,0,0,0,0,0,1
"Thrown by the persistence provider when an entity reference obtained by  EntityManager.getReference is accessed but the entity does not exist.  Thrown when EntityManager.refresh is called and the object no longer exists  in the database. Thrown when EntityManager.lock is used with pessimistic  locking is used and the entity no longer exists in the database.  The current transaction, if one is active, will be marked for rollback.  Since:     Java Persistence 1.0 See Also:     EntityManager\#getReference(Class,Object),      EntityManager\#refresh(Object), EntityManager\#refresh(Object,     LockModeType), EntityManager\#refresh(Object, java.util.Map),      EntityManager\#refresh(Object, LockModeType, java.util.Map),      EntityManager\#lock(Object, LockModeType), EntityManager\#lock(Object,     LockModeType, java.util.Map), Serialized Form",1,0,0,0,0,1,0,0,0,0,0,0
"Used to map the SELECT clause of a SQL query to an entity result. If this  annotation is used, the SQL statement should select all of the columns that  are mapped to the entity object. This should include foreign key columns to  related entities. The results obtained when insufficient data is available  are undefined.   Example:  Query q = em.createNativeQuery( SELECT o.id, o.quantity, o.item, i.id, i.name, i.description + FROM Order o, Item i  + WHERE (o.quantity > 25) AND (o.item = i.id), OrderItemResults); @SqlResultSetMapping(name=OrderItemResults, entities={ @EntityResult(entityClass=com.acme.Order.class), @EntityResult(entityClass=com.acme.Item.class) })   Since:     Java Persistence 1.0 See Also:     SqlResultSetMapping  Required Element Summary  java.lang.Class 	entityClass           The class of the result.   Optional Element Summary  java.lang.String 	discriminatorColumn           Specifies the column name (or alias) of the column in the SELECT  list that is used to determine the type of the entity instance.  FieldResult[] 	fields           Maps the columns specified in the SELECT list of the query to the  properties or fields of the entity class.    Element Detail   entityClass   public abstract java.lang.Class entityClass      The class of the result.   fields   public abstract FieldResult[] fields      Maps the columns specified in the SELECT list of the query to the     properties or fields of the entity class.      Default:         {}   discriminatorColumn   public abstract java.lang.String discriminatorColumn      Specifies the column name (or alias) of the column in the SELECT list     that is used to determine the type of the entity instance.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,1,0,0,0,1,0,0,0
"Start a resource transaction.  Throws: IllegalStateException - if isActive() is true",1,0,0,0,0,0,0,0,0,0,0,0
" Defines that data must be eagerly fetched. ",0,0,0,0,0,0,0,0,0,0,0,1
"Flush mode setting.  When queries are executed within a transaction, if FlushModeType.AUTO is  set on the Query or TypedQuery object, or if the flush mode setting for the  persistence context is AUTO (the default) and a flush mode setting has not  been specified for the Query or TypedQuery object, the persistence provider  is responsible for ensuring that all updates to the state of all entities  in the persistence context which could potentially affect the result of the  query are visible to the processing of the query. The persistence provider  implementation may achieve this by flushing those entities to the database  or by some other means.  If FlushModeType.COMMIT is set, the effect of updates made to entities in  the persistence context upon queries is unspecified.  If there is no transaction active, the persistence provider must not flush  to the database.  Since:     Java Persistence 1.0",1,0,0,0,0,0,1,1,0,0,0,1
"Defines the inheritance strategy to be used for an entity class hierarchy.  It is specified on the entity class that is the root of the entity class  hierarchy. If the Inheritance annotation is not specified or if no  inheritance type is specified for an entity class hierarchy, the  SINGLE_TABLE mapping strategy is used.    Example:  @Entity @Inheritance(strategy=JOINED) public class Customer { ... }  @Entity public class ValuedCustomer extends Customer { ... }   Since:     Java Persistence 1.0  Optional Element Summary  InheritanceType 	strategy           The strategy to be used for the entity inheritance hierarchy.     strategy   public abstract InheritanceType strategy      The strategy to be used for the entity inheritance hierarchy.      Default:         javax.persistence.InheritanceType.SINGLE_TABLE Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,0,0,0,0,0,0,1,0,0,0
" Optimistic lock.  Since: Java Persistence 2.0 ",0,0,0,0,0,0,0,0,0,0,0,1
"Specifies a named native SQL query. Query names are scoped to the  persistence unit. The NamedNativeQuery annotation can be applied to an  entity or mapped superclass.  Since:     Java Persistence 1.0  Required Element Summary  java.lang.String 	name           The name used to refer to the query with the EntityManager  methods that create query objects.  java.lang.String 	query           The SQL query string.   Optional Element Summary  QueryHint[] 	hints           Query properties and hints.  java.lang.Class 	resultClass           The class of the result.  java.lang.String 	resultSetMapping           The name of a SqlResultSetMapping, as defined in metadata.    Element Detail   name   public abstract java.lang.String name      The name used to refer to the query with the EntityManager methods that     create query objects.   query   public abstract java.lang.String query      The SQL query string.   hints   public abstract QueryHint[] hints      Query properties and hints. (May include vendor-specific query hints.)      Default:         {}   resultClass   public abstract java.lang.Class resultClass      The class of the result.      Default:         void.class   resultSetMapping   public abstract java.lang.String resultSetMapping      The name of a SqlResultSetMapping, as defined in metadata.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,1,0,1,0,0,0,0,0,0,0,1
"Specifies multiple named Java Persistence query language queries. Query  names are scoped to the persistence unit. The NamedQueries annotation can  be applied to an entity or mapped superclass.  Since:     Java Persistence 1.0 See Also:     NamedQuery  Required Element Summary  NamedQuery[] 	value           (Required) An array of NamedQuery annotations.    Element Detail   value   public abstract NamedQuery[] value      (Required) An array of NamedQuery annotations.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,0,0,0,0,0,0,0,0,0,0
"Thrown by the persistence provider when Query.getSingleResult() or  TypedQuery.getSingleResult()is executed on a query and there is no result  to return. This exception will not cause the current transaction, if one is  active, to be marked for rollback.  Since:     Java Persistence 1.0 See Also:     Query\#getSingleResult(), TypedQuery\#getSingleResult(), Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Defines a many-valued association with one-to-many multiplicity.  If the collection is defined using generics to specify the element type,  the associated target entity type need not be specified; otherwise the  target entity class must be specified. If the relationship is  bidirectional, the mappedBy element must be used to specify the  relationship field or property of the entity that is the owner of the  relationship.  The OneToMany annotation may be used within an embeddable class contained  within an entity class to specify a relationship to a collection of  entities. If the relationship is bidirectional, the mappedBy element must  be used to specify the relationship field or property of the entity that is  the owner of the relationship. When the collection is a java.util.Map, the  cascade element and the orphanRemoval element apply to the map value.    Example 1: One-to-Many association using generics  // In Customer class:  @OneToMany(cascade=ALL, mappedBy=customer) public Set<Order> getOrders() { return orders; }  In Order class:  @ManyToOne @JoinColumn(name=CUST_ID, nullable=false) public Customer getCustomer() { return customer; }   Example 2: One-to-Many association without using generics  // In Customer class:  @OneToMany(targetEntity=com.acme.Order.class, cascade=ALL, mappedBy=customer) public Set getOrders() { return orders; }  // In Order class:  @ManyToOne @JoinColumn(name=CUST_ID, nullable=false) public Customer getCustomer() { return customer; }   Example 3: Unidirectional One-to-Many association using a foreign key mapping  // In Customer class:  @OneToMany(orphanRemoval=true) @JoinColumn(name=CUST_ID) // join column is in table for Order public Set<Order> getOrders() {return orders;}    Since:     Java Persistence 1.0  Optional Element Summary  CascadeType[] 	cascade           (Optional) The operations that must be cascaded to the target of  the association.  FetchType 	fetch           (Optional) Whether the association should be lazily loaded or  must be eagerly fetched.  java.lang.String 	mappedBy           The field that owns the relationship.  boolean 	orphanRemoval           (Optional) Whether to apply the remove operation to entities that  have been removed from the relationship and to cascade the remove operation  to those entities.  java.lang.Class 	targetEntity           (Optional) The entity class that is the target of the  association.     targetEntity   public abstract java.lang.Class targetEntity      (Optional) The entity class that is the target of the association.     Optional only if the collection property is defined using Java     generics. Must be specified otherwise.      Defaults to the parameterized type of the collection when defined using     generics.      Default:         void.class   cascade   public abstract CascadeType[] cascade      (Optional) The operations that must be cascaded to the target of the     association.      Defaults to no operations being cascaded.      When the target collection is a java.util.Map, the cascade element     applies to the map value.      Default:         {}   fetch   public abstract FetchType fetch      (Optional) Whether the association should be lazily loaded or must be     eagerly fetched. The EAGER strategy is a requirement on the persistence     provider runtime that the associated entities must be eagerly fetched.     The LAZY strategy is a hint to the persistence provider runtime.      Default:         javax.persistence.FetchType.LAZY   mappedBy   public abstract java.lang.String mappedBy      The field that owns the relationship. Required unless the relationship     is unidirectional.      Default:            orphanRemoval   public abstract boolean orphanRemoval      (Optional) Whether to apply the remove operation to entities that have     been removed from the relationship and to cascade the remove operation     to those entities.      Since:         Java Persistence 2.0     Default:         false Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,1,0,0,0,0,0,1,0,0,0
"Specifies the ordering of the elements of a collection valued association  or element collection at the point when the association or collection is  retrieved.  The syntax of the value ordering element is an orderby_list, as follows:   orderby_list::= orderby_item [,orderby_item]* orderby_item::= [property_or_field_name] [ASC | DESC]   If ASC or DESC is not specified, ASC (ascending order) is assumed.  If the ordering element is not specified for an entity association,  ordering by the primary key of the associated entity is assumed.  The property or field name must correspond to that of a persistent property  or field of the associated class or embedded class within it. The  properties or fields used in the ordering must correspond to columns for  which comparison operators are supported.  The dot (.) notation is used to refer to an attribute within an embedded  attribute. The value of each identifier used with the dot notation is the  name of the respective embedded field or property.  The OrderBy annotation may be applied to an element collection. When  OrderBy is applied to an element collection of basic type, the ordering  will be by value of the basic objects and the property or field name is not  used. When specifying an ordering over an element collection of embeddable  type, the dot notation must be used to specify the attribute or attributes  that determine the ordering.  The OrderBy annotation is not used when an order column is specified.   Example 1:  @Entity public class Course { ... @ManyToMany @OrderBy(lastname ASC) public List<Student> getStudents() {...}; ... }  Example 2:  @Entity public class Student { ... @ManyToMany(mappedBy=students) @OrderBy // ordering by primary key is assumed public List<Course> getCourses() {...}; ... }  Example 3:  @Entity public class Person { ... @ElementCollection @OrderBy(zipcode.zip, zipcode.plusFour) public Set<Address> getResidences() {...}; ... }  @Embeddable public class Address { protected String street; protected String city; protected String state; @Embedded protected Zipcode zipcode; }  @Embeddable public class Zipcode { protected String zip; protected String plusFour; }   Since:     Java Persistence 1.0 See Also:     OrderColumn  Optional Element Summary  java.lang.String 	value           An orderby_list.     value   public abstract java.lang.String value      An orderby_list. Specified as follows:       orderby_list::= orderby_item [,orderby_item]* orderby_item::= [property_or_field_name] [ASC | DESC]       If ASC or DESC is not specified, ASC (ascending order) is assumed.      If the ordering element is not specified, ordering by the primary key     of the associated entity is assumed.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,1,0,0,1,0,1,0,0,0
"Thrown by the persistence provider when a problem occurs. All instances of  PersistenceException except for instances of NoResultException,  NonUniqueResultException, LockTimeoutException, and QueryTimeoutException  will cause the current transaction, if one is active, to be marked for  rollback.  Since:     Java Persistence 1.0 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Describes a single container or persistence provider property. Used in  PersistenceContext.  Vendor specific properties may be included in the set of properties, and  are passed to the persistence provider by the container when the entity  manager is created. Properties that are not recognized by a vendor will be  ignored.  Since:     Java Persistence 1.0  Required Element Summary  java.lang.String 	name           The name of the property  java.lang.String 	value           The value of the property    Element Detail   name   public abstract java.lang.String name      The name of the property   value   public abstract java.lang.String value      The value of the property  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,1,0,0,0,0,0
"Is used to specify callback methods for the corresponding lifecycle event.  This annotation may be applied to methods of an entity class, a mapped  superclass, or a callback listener class.  Since:     Java Persistence 1.0  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,1,0,0,0,0,0,0,0,0
"Is used to specify callback methods for the corresponding lifecycle event.  This annotation may be applied to methods of an entity class, a mapped  superclass, or a callback listener class.  Since:     Java Persistence 1.0  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
"Specifies how the provider must use a second-level cache for the  persistence unit. Corresponds to the value of the persistence.xml  shared-cache-mode element, and returned as the result of  PersistenceUnitInfo.getSharedCacheMode().  Since:     Java Persistence 2.0",1,0,0,0,0,0,1,0,0,0,0,0
"Specifies the mapping of the result of a native SQL query.   Example:  Query q = em.createNativeQuery( SELECT o.id AS order_id,  + o.quantity AS order_quantity,  + o.item AS order_item,  + i.name AS item_name,  + FROM Order o, Item i  + WHERE (order_quantity > 25) AND (order_item = i.id), OrderResults);  @SqlResultSetMapping(name=OrderResults, entities={ @EntityResult(entityClass=com.acme.Order.class, fields={ @FieldResult(name=id, column=order_id), @FieldResult(name=quantity, column=order_quantity), @FieldResult(name=item, column=order_item)})}, columns={ @ColumnResult(name=item_name)} )   Since:     Java Persistence 1.0  Required Element Summary  java.lang.String 	name           The name given to the result set mapping, and used to refer to it  in the methods of the Query API.   Optional Element Summary  ColumnResult[] 	columns           Specifies the result set mapping to scalar values.  EntityResult[] 	entities           Specifies the result set mapping to entities.    Element Detail   name   public abstract java.lang.String name      The name given to the result set mapping, and used to refer to it in     the methods of the Query API.   entities   public abstract EntityResult[] entities      Specifies the result set mapping to entities.      Default:         {}   columns   public abstract ColumnResult[] columns      Specifies the result set mapping to scalar values.      Default:         {} Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,1,0,0,0
" Map as java.sql.Time ",0,0,0,0,0,0,0,0,0,0,0,0
"Thrown by the persistence provider when a transaction is required but is  not active.  Since:     Java Persistence 1.0 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Specifies that a unique constraint is to be included in the generated DDL  for a primary or secondary table.   Example: @Entity @Table( name=EMPLOYEE, uniqueConstraints= @UniqueConstraint(columnNames={EMP_ID, EMP_NAME}) ) public class Employee { ... }   Since:     Java Persistence 1.0  Required Element Summary  java.lang.String[] 	columnNames           (Required) An array of the column names that make up the  constraint.   Optional Element Summary  java.lang.String 	name           (Optional) Constraint name.    Element Detail   columnNames   public abstract java.lang.String[] columnNames      (Required) An array of the column names that make up the constraint.   name   public abstract java.lang.String name      (Optional) Constraint name. A provider-chosen name will be chosen if a     name is not specified.      Since:         Java Persistence 2.0     Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,1,0,0,0
"Specifies the version field or property of an entity class that serves as  its optimistic lock value. The version is used to ensure integrity when  performing the merge operation and for optimistic concurrency control.  Only a single Version property or field should be used per class;  applications that use more than one Version property or field will not be  portable.  The Version property should be mapped to the primary table for the entity  class; applications that map the Version property to a table other than the  primary table will not be portable.  The following types are supported for version properties: int, Integer,  short, Short, long, Long, java.sql.Timestamp.   Example:  @Version @Column(name=OPTLOCK) protected int getVersionNum() { return versionNum; }   Since:     Java Persistence 1.0  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,1,0,0,0,0,1,1,0,0
"The CollectionJoin interface is the type of the result of joining to a  collection over an association or element collection that has been  specified as a java.util.Collection.  Since:     Java Persistence 2.0",0,0,0,0,0,0,0,0,0,0,0,0
"Add a when/then clause to the case expression.  Parameters: condition - when condition result - then result value Returns: general case expression",1,0,0,0,0,0,0,0,0,0,0,1
"Interface used to build coalesce expressions. A coalesce expression is  equivalent to a case expression that returns null if all its arguments  evaluate to null, and the value of its first non-null argument otherwise.",0,1,0,1,0,0,0,0,0,0,0,0
"Used to specify how strings are trimmed.",1,0,0,0,0,0,0,0,0,0,0,0
"Create a negation of the given restriction.  Parameters: restriction - restriction expression Returns: not predicate",1,0,0,0,0,0,0,0,0,0,0,1
"Create a predicate for testing whether the first argument is greater than or equal to the second.  Parameters: x - expression y - value Returns: greater-than-or-equal predicate",1,0,0,0,0,0,0,0,0,0,0,1
"Create an expression that returns the difference between its arguments.  Parameters: x - expression y - value Returns: difference",1,0,0,0,0,0,0,0,0,0,0,1
"Create a predicate that tests whether an element is a member of a collection. If the collection is empty, the predicate will be false.  Parameters: elem - element collection - expression Returns: is-member predicate",1,0,0,0,0,0,0,0,0,0,0,1
"Type for query expressions.  Since:     Java Persistence 2.0",1,0,0,0,0,0,0,0,0,0,0,0
"Return the fetch joins that have been made from this type. Returns empty set if no fetch joins have been made from this type. Modifications to the set do not affect the query.  Returns: fetch joins made from this type",1,0,0,0,0,0,0,0,0,0,0,0
"Create a join to the specified single-valued attribute using the given join type.  Parameters: attribute - target of the join jt - join type Returns: the resulting join",1,0,0,0,0,0,0,0,0,0,0,0
"An object that defines an ordering over the query results.  Since:     Java Persistence 2.0",0,0,0,0,0,0,0,0,0,0,0,0
"Return the boolean operator for the predicate. If the predicate is simple, this is AND.  Returns: boolean operator for the predicate",1,0,0,0,0,0,0,0,0,0,0,1
"The Subquery interface defines functionality that is specific to  subqueries. A subquery has an expression as its selection item.  Since:     Java Persistence 2.0",1,0,0,0,0,0,1,0,0,0,0,0
"Return the attribute that corresponds to the id attribute declared by the entity or mapped superclass.  Parameters: type - the type of the represented declared id attribute Returns: declared id attribute Throws: IllegalArgumentException - if id attribute of the given type is not declared in the identifiable type or if the identifiable type has an id class",1,0,0,0,0,0,0,0,0,0,0,1
"Instances of the type MapAttribute represent persistent java.util.Map -valued attributes.  Since:     Java Persistence 2.0",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null",1,0,1,0,0,0,0,0,0,0,0,1
"Instances of the type PluralAttribute represent persistent  collection-valued attributes.  Since:     Java Persistence 2.0",0,0,0,0,0,0,0,0,0,0,0,0
"Instances of the type SetAttribute represent persistent java.util.Set -valued attributes.  Since:     Java Persistence 2.0",0,0,0,0,0,0,0,0,0,0,0,0
"Instances of the type SingularAttribute represents persistent single-valued  properties or fields.  Since:     Java Persistence 2.0",0,0,0,0,0,0,0,0,0,0,0,0
" Mapped superclass ",0,0,0,0,0,0,0,0,0,0,0,1
"Returns a list of the PersistenceProvider implementations available in the runtime environment.  Returns: list of the persistence providers available in the environment",1,0,0,0,0,0,0,0,0,0,0,1
"Holds the global PersistenceProviderResolver instance. If no  PersistenceProviderResolver is set by the environment, the default  PersistenceProviderResolver is used. Implementations must be thread-safe.  Since:     Java Persistence 2.0",1,0,0,0,1,0,0,0,0,0,0,0
"Interface implemented by the container and used by the persistence provider  when creating an EntityManagerFactory.  Since:     Java Persistence 1.0",1,0,0,0,0,0,1,0,0,0,0,0
"The Referenceable interface extends the javax.naming.Referenceable  interface. It enables support for JNDI Reference mechanism for the  registration of the connection factory in the JNDI name space. Note that  the implementation and structure of Reference is specific to an application  server.  The implementation class for a connection factory interface is required to  implement both java.io.Serializable and javax.resource.Referenceable  interfaces to support JNDI registration.  Version:     0.9 Author:     Rahul Sharma",1,0,0,1,0,0,0,1,0,0,0,0
"Constructs a new throwable with the specified cause.  Parameters: cause - a chained exception of type Throwable.",0,0,0,0,0,0,0,0,0,0,0,1
"Creates an Interaction associated with this Connection. An Interaction enables an application to execute EIS functions.  Returns: Interaction instance Throws: ResourceException - Failed to create an Interaction",1,0,0,0,0,0,0,0,0,0,0,1
"An InteractionSpec holds properties for driving an Interaction with an EIS  instance. An InteractionSpec is used by an Interaction to execute the  specified function on an underlying EIS.  The CCI specification defines a set of standard properties for an  InteractionSpec. An InteractionSpec implementation is not required to  support a standard property if that property does not apply to its  underlying EIS.  The InteractionSpec implementation class must provide getter and setter  methods for each of its supported properties. The getter and setter methods  convention should be based on the Java Beans design pattern.  The standard properties are as follows:      * FunctionName: name of an EIS function     * InteractionVerb: mode of interaction with an EIS instance: SYNC_SEND,       SYNC_SEND_RECEIVE, SYNC_RECEIVE     * ExecutionTimeout: the number of milliseconds an Interaction will wait       for an EIS to execute the specified function  The following standard properties are used to give hints to an Interaction  instance about the ResultSet requirements:      * FetchSize     * FetchDirection     * MaxFieldSize     * ResultSetType     * ResultSetConcurrency  A CCI implementation can provide additional properties beyond that  described in the InteractionSpec interface. Note that the format and type  of the additional properties is specific to an EIS and is outside the scope  of the CCI specification.  It is required that the InteractionSpec interface be implemented as a  JavaBean for the toolability support. The properties on the InteractionSpec  implementation class should be defined through the getter and setter  methods pattern. An implementation class for InteractionSpec interface is  required to implement the java.io.Serializable interface.  Since:     0.8 Version:     0.8 Author:     Rahul Sharma See Also:     Interaction",1,0,0,0,0,0,1,0,0,0,0,0
"The LocalTransaction defines a transaction demarcation interface for  resource manager local transactions. Note that this interface is used for  application level local transaction demarcation. The system contract level  LocalTransaction interface (as defined in the javax.resource.spi package)  is used by the container for local transaction management.  A local transaction is managed internal to a resource manager. There is no  external transaction manager involved in the coordination of such  transactions.  A CCI implementation can (but is not required to) implement the  LocalTransaction interface. If the LocalTransaction interface is supported  by a CCI implementation, then the method Connection.getLocalTransaction  should return a LocalTransaction instance. A component can then use the  returned LocalTransaction to demarcate a resource manager local transaction  (associated with the Connection instance) on the underlying EIS instance.  Since:     0.8 Author:     Rahul Sharma See Also:     Connection",0,0,1,1,0,0,1,1,0,0,0,0
"Returns true if the implementation class for the Interaction interface implements public Record execute(InteractionSpec ispec, Record input) method; otherwise the method returns false.  Returns: boolean depending on method support See Also: Interaction",1,0,0,0,0,0,0,0,0,0,0,1
"A ResultSet represents tabular data that is retrieved from an EIS instance  by the execution of an Interaction.. The CCI ResultSet is based on the JDBC  ResultSet.  Refer the CCI specification in Connectors 1.0 for detailed requirements on  the implementation of a CCI ResultSet.  Since:     0.8 Author:     Rahul Sharma See Also:     ResultSet",1,0,0,0,0,0,0,0,0,0,0,0
"The interface javax.resource.cci.ResultSetInfo provides information on the  support provided for ResultSet by a connected EIS instance. A component  calls the method Connection.getResultInfo to get the ResultSetInfo  instance.  A CCI implementation is not required to support  javax.resource.cci.ResultSetInfo interface. The implementation of this  interface is provided only if the CCI supports the ResultSet facility.  Version:     0.9 Author:     Rahul Sharma See Also:     Connection, ResultSet, ConnectionMetaData",1,0,0,0,0,0,0,0,0,0,0,0
"An ApplicationServerInternalException is thrown by an application server to  indicate error conditions specific to an application server. These error  conditions can be related to either configuration related errors or  implementation of mechanisms internal to an application server (example:  connection pooling, thread management).  Version:     1.0 Author:     Rahul Sharma, Ram Jeyaraman See Also:     Serialized Form",1,1,0,0,0,1,0,0,0,0,0,0
"An enumerated type that represents the various interfaces that a resource  adapter may support for the representation of the credentials.  Since:     1.6 Version:     Java EE Connector Architecture 1.6  Enum Constant Summary GenericCredential           Corresponds to javax.resource.spi.security.GenericCredential GSSCredential           Corresponds to org.ietf.jgss.GSSCredential PasswordCredential           Corresponds to javax.resource.spi.security.PasswordCredential.",0,0,0,0,0,0,0,0,0,0,0,0
" Type of the event ",0,0,0,0,0,0,0,0,0,0,0,0
"The ConnectionEventListener interface provides an event callback mechanism  to enable an application server to receive notifications from a  ManagedConnection instance.  An application server uses these event notifications to manage its  connection pool, to clean up any invalid or terminated connections and to  manage local transactions.  An application server implements the ConnectionEventListener interface. It  registers a connection listener with a ManagedConnection instance by using  ManagedConnection.addConnectionEventListener method.  Version:     0.5 Author:     Rahul Sharma See Also:     ConnectionEvent",1,0,0,0,0,1,0,0,0,0,0,0
"ConnectionManager interface provides a hook for the resource adapter to  pass a connection request to the application server.  An application server provides implementation of the ConnectionManager  interface. This implementation is not specific to any particular type of  the resource adapter or connection factory interface.  The ConnectionManager implementation delegates to the application server to  enable latter to provide quality of services (QoS) - security, connection  pool management, transaction management and error logging/tracing.  An application server implements these services in a generic manner,  independent of any resource adapter and EIS specific mechanisms. The  connector architecture does not specify how an application server  implements these services; the implementation is specific to an application  server.  After an application server hooks-in its services, the connection request  gets delegated to a ManagedConnectionFactory instance either for the  creation of a new physical connection or for the matching of an already  existing physical connection.  An implementation class for ConnectionManager interface is required to  implement the java.io.Serializable interface.  In the non-managed application scenario, the ConnectionManager  implementation class can be provided either by a resource adapter (as a  default ConnectionManager implementation) or by application developers. In  both cases, QOS can be provided as components by third party vendors.  Since:     0.6 Author:     Rahul Sharma See Also:     ManagedConnectionFactory",1,0,1,0,0,0,1,1,0,0,0,0
"The ConnectionRequestInfo interface enables a resource adapter to pass its  own request specific data structure across the connection request flow. A  resource adapter extends the empty interface to supports its own data  structures for connection request.  A typical use allows a resource adapter to handle application component  specified per-connection request properties (example - client ID,  language). The application server passes these properties back across to  match/createManagedConnection calls on the resource adapter. These  properties remain opaque to the application server during the connection  request flow.  Once the ConnectionRequestInfo reaches match/createManagedConnection  methods on the ManagedConnectionFactory instance, resource adapter uses  this additional per-request information to do connection creation and  matching.  Version:     0.8 Author:     Rahul Sharma See Also:     ManagedConnectionFactory, ManagedConnection",1,0,0,0,0,1,0,0,0,0,0,0
"This is a mix-in interface that may be optionally implemented by a  ManagedConnection implementation. An implementation of this interface must  support the lazy transaction enlistment optimization.  Version:     1.0 Author:     Ram Jeyaraman  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,1,0,0,0,0,0,0,0,0,0
"Constructs a new throwable with the specified detail message and an error code.  Parameters: message - a description of the exception. errorCode - a string specifying the vendor specific error code.",0,0,0,0,0,0,0,0,0,0,0,1
"This interface specifies the methods to associate a ResourceAdapter object  with other objects that implement this interface like  ManagedConnectionFactory and ActivationSpec.  Version:     1.0 Author:     Ram Jeyaraman",0,0,0,0,0,0,1,0,0,0,0,0
"A marker interface indicating that the Exception is transient. It is used  in situations where a previously failed operation might be able to succeed  if the resource adapter performs some recovery steps and retries the  operation.  Since:     1.6 Version:     Java EE Connector Architecture 1.6  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,1,0,0,0,0,0,0,0,0
"An enumerated type that represents the levels of transaction support a  resource adapter may support.  Since:     1.6 Version:     Java EE Connector Architecture 1.6",1,0,0,0,0,0,0,0,0,0,0,0
"Constructs a new instance with the specified detail message.  Parameters: message - the detail message.",0,0,0,0,0,0,0,0,0,0,0,1
"Tells the resource manager to forget about a heuristically completed transaction branch.  Parameters: xid - A global transaction identifier. Throws: XAException - An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or XAER_PROTO.",1,0,0,0,0,0,1,0,0,0,0,0
"This serves as a factory for creating message endpoints.  Version:     1.0 Author:     Ram Jeyaraman",0,0,0,0,0,0,0,0,0,0,0,1
"This is used to create a message endpoint. The message endpoint is expected to implement the correct message listener type.  Parameters: xaResource - an optional XAResource instance used to get transaction notifications when the message delivery is transacted. timeout - an optional value used to specify the time duration (in milliseconds) within which the message endpoint needs to be created by the MessageEndpointFactory. Otherwise, the MessageEndpointFactory rejects the creation of the MessageEndpoint with an UnavailableException. Note, this does not offer real-time guarantees. Returns: a message endpoint instance. Throws: UnavailableException - indicates a transient failure in creating a message endpoint. Subsequent attempts to create a message endpoint might succeed.",1,0,1,0,0,0,0,1,0,0,0,1
"Deprecated. Tests if this GenericCredential instance refers to the same entity as the supplied object. The two credentials must be acquired over the same mechanisms and must refer to the same principal. Returns true if the two GenericCredentials refer to the same entity; false otherwise.  Overrides: equals in class java.lang.Object",1,0,1,0,0,0,0,1,0,0,0,0
"The class PasswordCredential acts as a holder for username and password.  Since:     0.6 Version:     0.6 Author:     Rahul Sharma See Also:     ManagedConnectionFactory, Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"A standard WorkContext that allows a Work instance to propagate security  related context information from an EIS to an application server.  This allows an EIS/resource adapter to flow-in security context information  and execute a Work instance, and call methods on a MessageEndpoint  interface, to effect message inflow, within that Work instance, in the  context of an established identity.  A resource adapter indicates to the WorkManager, that a Work instance needs  to be run in a specified security execution context by submitting a Work  instance that implements WorkContextProvider interface and ensuring that  the List of WorkContexts for that Work instance contains an instance of its  subclass of Securitytext.  It should be noted however that when a resource adapter flows-in an  identity to be used by the application server, the propagated identity may  or may not belong to the application server's security domain.  There are therefore, two scenarios while a resource adapter propagates a  security identity from an EIS to the application server:      * Case 1: Resource adapter flows-in an identity in the application       server's security domain: In this case, the application server could       just set the initiating principal, flown-in from the resource       adapter, as the security context the Work instance executes as.     * Case 2: Resource adapter flows-in an identity belonging to the EIS'       security domain: The resource adapter establishes a connection to the       EIS and needs to perform a Work in the context of an EIS identity. In       this case, the initiating or caller principal does not exist in the       application server's security domain and a translation from one       domain to the other needs to be performed.  Since:     1.6 Version:     Java EE Connector Architecture 1.6 See Also:     WorkContextProvider, Serialized Form",1,0,0,1,0,0,0,1,0,0,0,0
"A standard WorkContext that allows a Work instance to propagate transaction  related context information from an EIS to an application server.  This class extends ExecutionContext so that a resource adapter developer  could migrate their existing code from ExecutionContext to  TransactionContext easily.  Since:     1.6 Version:     Java EE Connector Architecture 1.6 See Also:     WorkContext, ExecutionContext, Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"Invoked when a Work instance has started execution. This only means that a thread has been allocated.  Specified by: workStarted in interface WorkListener Parameters: e - A WorkEvent object that provides more information about the rejected Work.",0,0,0,0,0,0,0,0,0,0,0,1
"This class models the various events that occur during the processing of  the WorkContexts associated with a Work instance. This interface may be  implemented by a WorkContext instance to receive notifications from the  WorkManager when the WorkContext is set as the execution context of the  Work instance it is associated with.  When a WorkManager sets up the execution context of a Work instance that  implements WorkContextProvider, the WorkManager must make the relevant  lifecycle notifications if an WorkContext instance implements this  interface.  When a Work instance is submitted to the Connector WorkManager using one of  the methods that passes in a WorkListener as a parameter, the WorkManager  must send Work related notifications to the WorkListener and WorkContext  setup related notifications to this interface.  The possible error conditions that might occur during associating an  WorkContext with a Work instance is captured in WorkContextErrorCodes.  Since:     1.6 Version:     Java EE Connector Architecture 1.6",1,1,1,1,0,0,1,0,0,1,0,0
"Accepts a Work instance for processing. This call blocks until the Work instance starts execution but not until its completion. There is no guarantee on when the accepted Work instance would start execution ie., there is no time constraint to start execution.  Parameters: work - The unit of work to be done. Could be long or short-lived. startTimeout - a time duration (in milliseconds) within which the execution of the Work instance must start. Otherwise, the Work instance is rejected with a WorkRejectedException set to an appropriate error code (WorkRejectedException.TIMED_OUT). Note, this does not offer real-time guarantees. execContext - an object containing the execution context with which the submitted Work instance must be executed. workListener - an object which would be notified when the various Work processing events (work accepted, work rejected, work started, work completed) occur. Returns: the time elapsed (in milliseconds) from Work acceptance until start of execution. Note, this does not offer real-time guarantees. It is valid to return -1, if the actual start delay duration is unknown. Throws: WorkRejectedException - indicates that a Work instance has been rejected from further processing. This can occur due to internal factors or start timeout expiration. WorkException",1,0,0,0,1,1,0,0,0,0,0,0
"This exception is thrown by a WorkManager to indicate that a submitted  Work instance has been rejected. The rejection could be due to internal  factors or start timeout expiration.  This could be thrown only before the execution of a Work instance starts  (that is, before a thread has been allocated for Work execution).  An associated error code indicates the nature of the error condition.  Possible error codes are WorkException.START_TIMED_OUT,  WorkException.INTERNAL or WorkException.UNDEFINED.  Version:     1.0 Author:     Ram Jeyaraman See Also:     Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"This interface is used to represent message authentication policy.  The internal state of a ProtectionPolicy object defines the message  authentication requirements to be applied to the associated Target.",1,0,0,0,0,0,0,0,0,0,0,0
" The identifer for a ProtectionPolicy that indicates that the sending entity is to be authenticated.  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"This class defines a message authentication policy.  A ClientAuthContext uses this class to communicate (at module  initialization time) request and response message protection policies to  its ClientAuthModule objects. A ServerAuthContext uses this class to  communicate request and response message protection policies to its  ServerAuthModule objects.  Version:     %I%, %G% See Also:     ClientAuthContext, ServerAuthContext, ClientAuthModule,      ServerAuthModule",0,1,0,1,0,0,1,0,0,0,0,0
"Request type for private keys that are identified using a certificate  digest or thumbprint.",1,0,0,0,0,0,0,0,0,0,0,0
"Get the algorithm identifier.  Returns: The identifer of the algorithm used to compute the digest.",1,0,0,0,0,0,0,0,0,0,0,0
"Request type for private keys that are identified using an issuer/serial  number.",0,0,0,0,0,0,0,0,0,0,0,1
"Marker interface for private key request types.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,0,0,0,0,0,0,0,0,0
"This interface is implemented by objects that can be used to obtain  authentication context configuration objects, that is, ClientAuthConfig or  ServerAuthConfig objects.  Authentication context configuration objects serve as sources of the  authentication context objects, that is, ClientAuthContext or  ServerAuthContext objects, for a specific message layer and messaging  context.  Authentication context objects encapsulate the initialization,  configuration, and invocation of authentication modules, that is,  ClientAuthModule or ServerAuthModule objects, for a specific message  exchange within a specific message layer and messaging context.  Callers do not directly operate on authentication modules. Instead, they  rely on a ClientAuthContext or ServerAuthContext to manage the invocation  of modules. A caller obtains an instance of ClientAuthContext or  ServerAuthContext by calling the respective getAuthContext method on a  ClientAuthConfig or ServerAuthConfig object obtained from an  AuthConfigProvider.  The following represents a typical sequence of calls for obtaining a client  authentication context object, and then using it to secure a request.     1. AuthConfigProvider provider;    2. ClientAuthConfig config =       provider.getClientAuthConfig(layer,appID,cbh);    3. String authContextID = config.getAuthContextID(messageInfo);    4. ClientAuthContext context =       config.getAuthContext(authContextID,subject,properties);    5. context.secureRequest(messageInfo,subject);  Every implementation of this interface must offer a public, two argument  constructor with the following signature:    public AuthConfigProviderImpl(Map properties, AuthConfigFactory factory);    where the properties argument may be null, and where all values and keys  occurring in a non-null properties argument must be of type String. When  the factory argument is not null, it indicates that the provider is to  self-register at the factory by calling the following method on the  factory:    public String registerConfigProvider(AuthConfigProvider provider, String layer, String appContext, String description);    Version:     %I%, %G% See Also:     ClientAuthContext, ServerAuthContext, AuthConfigFactory",0,0,1,1,0,1,0,1,1,0,0,0
"This interface encapsulates the configuration of ClientAuthContext objects  for a message layer and application context (for example, the messaging  context of a specific application, or set of applications).  Implementations of this interface are returned by an AuthConfigProvider.  Callers interact with a ClientAuthConfig to obtain ClientAuthContext  objects suitable for processing a given message exchange at the layer and  within the application context of the ClientAuthConfig. Each  ClientAuthContext object is responsible for instantiating, initializing,  and invoking the one or more ClientAuthModules encapsulated in the  ClientAuthContext.  After having acquired a ClientAuthContext, a caller operates on the context  to cause it to invoke the encapsulated ClientAuthModules to secure client  requests and to validate server responses.  Version:     %I%, %G% See Also:     AuthConfigProvider",1,0,0,0,0,1,0,0,0,0,0,0
"Notify the listener that a registration with which it was associated was replaced or unregistered.  When a RegistrationListener is associated with a provider registration within the factory, the factory must call its notify method when the corresponding registration is unregistered or replaced.  Parameters: layer - A String identifying the one or more message layers corresponding to the registration for which the listerner is being notified. appContext - A String value identifying the application contexts corresponding to the registration for which the listener is being notified. The factory detaches the listener from the corresponding registration once the listener has been notified for the registration. The detachListerner method must be called to detach listeners that are no longer in use.",1,0,1,0,0,0,1,1,0,0,0,0
"A ClientAuthModule secures request messages, and validates received  response messages.  A module implementation should assume it may be used to secure different  requests as different clients. A module should also assume it may be used  concurrently by multiple callers. It is the module implementation's  responsibility to properly save and restore any state as necessary. A  module that does not need to do so may remain completely stateless.  Every implementation of the interface must provide a public zero argument  contructor.  Version:     %I%, %G% See Also:     ClientAuthContext",1,0,0,0,1,0,0,0,0,0,0,0
"Initialize this module with request and response message policies to enforce, a CallbackHandler, and any module-specific configuration properties.  The request policy and the response policy must not both be null.  Parameters: requestPolicy - The request policy this module must enforce, or null. responsePolicy - The response policy this module must enforce, or null. handler - CallbackHandler used to request information. options - A Map of module-specific configuration properties. Throws: AuthException - If module initialization fails, including for the case where the options argument contains elements that are not supported by the module.",1,0,0,0,0,0,0,0,0,0,0,1
"Class for EJB isCallerInRole (String reference) permissions. An  EJBRoleRefPermission is a named permission and has actions.  The name of an EJBRoleRefPermission contains the value of the ejb-name  element in the application's deployment descriptor that identifies the EJB  in whose context the permission is being evalutated.  the actions of an EJBRoleRefPermission identifies the role reference to  which the permission applies. An EJBRoleRefPermission is checked to  determine if the subject is a member of the role identified by the  reference.  Implementations of this class MAY implement newPermissionCollection or  inherit its implementation from the super class.  Author:     Ron Monzillo, Gary Ellison See Also:     Permission, Serialized Form",1,0,0,0,0,0,1,0,0,0,0,0
"Used to add a single excluded policy statement to this PolicyConfiguration.  Parameters: permission - the permission to be added to the excluded policy statements. Throws: java.lang.SecurityException - if called by an AccessControlContext that has not been granted the setPolicy SecurityPermission. java.lang.UnsupportedOperationException - if the state of the policy context whose interface is this PolicyConfiguration Object is deleted or inService when this method is called. PolicyContextException - if the implementation throws a checked exception that has not been accounted for by the addToExcludedPolicy method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException.",1,0,0,0,0,0,0,0,0,0,0,1
"Authorization protected method that may be used to associate a thread-scoped handler data object with the PolicyContext. The handler data object will be made available to handlers, where it can serve to supply or bind the handler to invocation scoped state within the container.  Parameters: data - a container-specific object that will be associated with the calling thread and passed to any handler activated by a Policy provider (on the thread). The value null is a legitimate value for this parameter, and is the value that will be used in the activation of handlers if the setHandlerData has not been called on the thread. Throws: java.lang.SecurityException - if the calling AccessControlContext is not authorized by the container to call this method.",0,0,1,0,0,0,1,0,0,0,0,0
"Class for Servlet web resource permissions. A WebResourcePermission is a  named permission and has actions.  The name of a WebResourcePermission (also referred to as the target name)  identifies the Web resources to which the permission pertains.  Implementations of this class MAY implement newPermissionCollection or  inherit its implementation from the super class.  Version:     %I% %E% Author:     Ron Monzillo, Gary Ellison See Also:     Permission, Serialized Form",1,0,0,0,0,0,0,1,0,0,0,0
"Causes the next filter in the chain to be invoked, or if the calling filter is the last filter in the chain, causes the resource at the end of the chain to be invoked.  Parameters: request - the request to pass along the chain. response - the response to pass along the chain. Throws: java.io.IOException ServletException",1,0,0,0,0,0,0,0,0,0,0,1
"Java Class representation of an HttpConstraint annotation value.  Since:     Servlet 3.0",1,0,0,0,0,0,0,0,0,0,0,1
"Gets the data protection requirement (i.e., whether or not SSL/TLS is required) that must be satisfied by the transport connection.  Returns: the TransportGuarantee indicating the data protection that must be provided by the connection",1,0,0,0,0,0,0,0,0,0,0,1
"Java Class represntation of an HttpMethodConstraint annotation value.  Since:     Servlet 3.0",0,1,0,0,0,0,0,0,0,0,0,1
"Interface through which a Servlet or Filter may be further configured.  A Registration object whose getClassName() method returns null is  considered preliminary. Servlets and Filters whose implementation class is  container implementation specific may be declared without any  servlet-class or filter-class elements, respectively, and will be  represented as preliminary Registration objects. Preliminary registrations  must be completed by calling one of the addServlet or addFilter methods on  ServletContext, and passing in the Servlet or Filter name (obtained via  getName()) along with the supporting Servlet or Filter implementation class  name, Class object, or instance, respectively. In most cases, preliminary  registrations will be completed by an appropriate, container-provided  ServletContainerInitializer.  Since:     Servlet 3.0",1,1,0,1,0,0,0,0,0,0,0,0
"Defines a set of methods that a servlet uses to communicate with its  servlet container, for example, to get the MIME type of a file, dispatch  requests, or write to a log file.  There is one context per web application per Java Virtual Machine. (A  web application is a collection of servlets and content installed under a  specific subset of the server's URL namespace such as /catalog and possibly  installed via a .war file.)  In the case of a web application marked distributed in its deployment  descriptor, there will be one context instance for each virtual machine. In  this situation, the context cannot be used as a location to share global  information (because the information won't be truly global). Use an  external resource like a database instead.  The ServletContext object is contained within the ServletConfig object,  which the Web server provides the servlet when the servlet is initialized.  Author:     Various See Also:     Servlet\#getServletConfig, ServletConfig\#getServletContext",1,0,1,0,0,0,0,0,0,0,0,0
"Returns a URL to the resource that is mapped to the given path.  The path must begin with a / and is interpreted as relative to the current context root, or relative to the /META-INF/resources directory of a JAR file inside the web application's /WEB-INF/lib directory. This method will first search the document root of the web application for the requested resource, before searching any of the JAR files inside /WEB-INF/lib. The order in which the JAR files inside /WEB-INF/lib are searched is undefined.  This method allows the servlet container to make a resource available to servlets from any source. Resources can be located on a local or remote file system, in a database, or in a .war file.  The servlet container must implement the URL handlers and URLConnection objects that are necessary to access the resource.  This method returns null if no resource is mapped to the pathname.  Some containers may allow writing to the URL returned by this method using the methods of the URL class.  The resource content is returned directly, so be aware that requesting a .jsp page returns the JSP source code. Use a RequestDispatcher instead to include results of an execution.  This method has a different purpose than java.lang.Class.getResource, which looks up resources based on a class loader. This method does not use class loaders.  Parameters: path - a String specifying the path to the resource Returns: the resource located at the named path, or null if there is no resource at that path Throws: java.net.MalformedURLException - if the pathname is not given in the correct form",1,0,1,1,0,0,1,0,0,0,0,0
"Event class for notifications about changes to the attributes of the  ServletContext of a web application.  Since:     Servlet 2.3 See Also:     ServletContextAttributeListener, Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"Writes a carriage return-line feed (CRLF) to the client.  Throws: java.io.IOException - if an input or output exception occurred",1,0,0,0,0,0,0,0,0,0,0,0
"Interface through which a Servlet registered via one of the addServlet  methods on ServletContext may be further configured.",0,0,0,0,0,0,1,0,0,0,0,0
"Returns the host name of the Internet Protocol (IP) interface on which the request was received.  Returns: a String containing the host name of the IP on which the request was received. Since: Servlet 2.4",1,0,0,0,0,0,0,0,0,0,0,1
"Provides a convenient implementation of the ServletRequest interface that  can be subclassed by developers wishing to adapt the request to a Servlet.  This class implements the Wrapper or Decorator pattern. Methods default to  calling through to the wrapped request object.  Since:     Servlet 2.3 See Also:     ServletRequest",1,0,0,1,0,0,0,1,0,0,0,0
"Sets the character encoding (MIME charset) of the response being sent to the client, for example, to UTF-8. If the character encoding has already been set by setContentType(java.lang.String) or setLocale(java.util.Locale), this method overrides it. Calling setContentType(java.lang.String) with the String of text/html and calling this method with the String of UTF-8 is equivalent with calling setContentType with the String of text/html; charset=UTF-8.  This method can be called repeatedly to change the character encoding. This method has no effect if it is called after getWriter has been called or after the response has been committed.  Containers must communicate the character encoding used for the servlet response's writer to the client if the protocol provides a way for doing so. In the case of HTTP, the character encoding is communicated as part of the Content-Type header for text media types. Note that the character encoding cannot be communicated via HTTP headers if the servlet does not specify a content type; however, it is still used to encode text written via the servlet response's writer.  Parameters: charset - a String specifying only the character set defined by IANA Character Sets (http://www.iana.org/assignments/character-sets) Since: Servlet 2.4 See Also: \#setLocale",1,0,0,0,0,0,1,0,0,0,1,0
"Gets the (possibly empty) collection of HTTP Method specific constraint elements.  If permitted, any changes to the returned Collection must not affect this ServletSecurityElement.  Returns: the (possibly empty) collection of HttpMethodConstraintElement objects",1,0,1,0,0,0,0,0,0,0,0,0
"Enumeration of session tracking modes.  Since:     Servlet 3.0",0,0,0,0,0,0,0,0,0,0,0,1
"Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null",1,0,1,0,0,0,0,0,0,0,0,1
"Defines an exception that a servlet or filter throws to indicate that it is  permanently or temporarily unavailable.  When a servlet or filter is permanently unavailable, something is wrong  with it, and it cannot handle requests until some action is taken. For  example, a servlet might be configured incorrectly, or a filter's state may  be corrupted. The component should log both the error and the corrective  action that is needed.  A servlet or filter is temporarily unavailable if it cannot handle requests  momentarily due to some system-wide problem. For example, a third-tier  server might not be accessible, or there may be insufficient memory or disk  storage to handle requests. A system administrator may need to take  corrective action.  Servlet containers can safely treat both types of unavailable exceptions in  the same way. However, treating temporary unavailability effectively makes  the servlet container more robust. Specifically, the servlet container  might block requests to the servlet or filter for a period of time  suggested by the exception, rather than rejecting them until the servlet  container restarts.  Author:     Various See Also:     Serialized Form",1,1,0,1,0,0,0,0,0,0,0,0
"Deprecated. As of Java Servlet API 2.2, use UnavailableException(String) instead.  Parameters: servlet - the Servlet instance that is unavailable msg - a String specifying the descriptive message",0,0,0,0,0,0,0,0,0,0,0,1
"This annotation is used within the ServletSecurity annotation to represent  the security constraints to be applied to all HTTP protocol methods for  which a corresponding HttpMethodConstraint element does NOT occur within  the ServletSecurity annotation.  Since:     Servlet 3.0  Optional Element Summary  java.lang.String[] 	rolesAllowed           The names of the authorized roles.  ServletSecurity.TransportGuarantee 	transportGuarantee           The data protection requirements (i.e., whether or not SSL/TLS is  required) that must be satisfied by the connections on which requests  arrive.  ServletSecurity.EmptyRoleSemantic 	value           The default authorization semantic.     value   public abstract ServletSecurity.EmptyRoleSemantic value      The default authorization semantic. This value is insignificant when      rolesAllowed returns a non-empty array, and should not be specified     when a non-empty array is specified for rolesAllowed.      Returns:         the ServletSecurity.EmptyRoleSemantic to be applied when          rolesAllowed returns an empty (that is, zero-length) array.     Default:         javax.servlet.annotation.ServletSecurity.EmptyRoleSemantic.PERMIT   transportGuarantee   public abstract ServletSecurity.TransportGuarantee transportGuarantee      The data protection requirements (i.e., whether or not SSL/TLS is     required) that must be satisfied by the connections on which requests     arrive.      Returns:         the TransportGuarantee indicating the data protection that must be         provided by the connection.     Default:         javax.servlet.annotation.ServletSecurity.TransportGuarantee.NONE   rolesAllowed   public abstract java.lang.String[] rolesAllowed      The names of the authorized roles. Duplicate role names appearing in     rolesAllowed are insignificant and may be discarded during runtime     processing of the annotation. The String * has no special meaning as     a role name (should it occur in rolesAllowed).      Returns:         an array of zero or more role names. When the array contains zero         elements, its meaning depends on the EmptyRoleSemantic returned by         the value method. If value returns DENY, and rolesAllowed returns a         zero length array, access is to be denied independent of         authentication state and identity. Conversely, if value returns          PERMIT, it indicates that access is to be allowed independent of         authentication state and identity. When the array contains the         names of one or more roles, it indicates that access is contingent         on membership in at least one of the named roles (independent of         the EmptyRoleSemantic returned by the value method).     Default:         {} Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,1,0,0,1,0,0,0,0,0
"Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null",1,0,1,0,0,0,0,0,0,0,0,0
"Annotation used to declare a servlet filter.  This annotation is processed by the container at deployment time, and the  corresponding filter applied to the specified URL patterns, servlets, and  dispatcher types.  Since:     Servlet 3.0 See Also:     Filter  Optional Element Summary  boolean 	asyncSupported           Declares whether the filter supports asynchronous operation mode.  java.lang.String 	description           The description of the filter  DispatcherType[] 	dispatcherTypes           The dispatcher types to which the filter applies  java.lang.String 	displayName           The display name of the filter  java.lang.String 	filterName           The name of the filter  WebInitParam[] 	initParams           The init parameters of the filter  java.lang.String 	largeIcon           The large-icon of the filter  java.lang.String[] 	servletNames           The names of the servlets to which the filter applies.  java.lang.String 	smallIcon           The small-icon of the filter  java.lang.String[] 	urlPatterns           The URL patterns to which the filter applies  java.lang.String[] 	value           The URL patterns to which the filter applies     description   public abstract java.lang.String description      The description of the filter      Default:            displayName   public abstract java.lang.String displayName      The display name of the filter      Default:            initParams   public abstract WebInitParam[] initParams      The init parameters of the filter      Default:         {}   filterName   public abstract java.lang.String filterName      The name of the filter      Default:            smallIcon   public abstract java.lang.String smallIcon      The small-icon of the filter      Default:            largeIcon   public abstract java.lang.String largeIcon      The large-icon of the filter      Default:            servletNames   public abstract java.lang.String[] servletNames      The names of the servlets to which the filter applies.      Default:         {}   value   public abstract java.lang.String[] value      The URL patterns to which the filter applies      Default:         {}   urlPatterns   public abstract java.lang.String[] urlPatterns      The URL patterns to which the filter applies      Default:         {}   dispatcherTypes   public abstract DispatcherType[] dispatcherTypes      The dispatcher types to which the filter applies      Default:         javax.servlet.DispatcherType.REQUEST   asyncSupported   public abstract boolean asyncSupported      Declares whether the filter supports asynchronous operation mode.      See Also:         ServletRequest.startAsync(),          ServletRequest.startAsync(ServletRequest, ServletResponse)     Default:         false Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,0,0,0,0,0,0,0,0,1
"This interface provides access to the <jsp-property-group> related  configuration of a web application.  The configuration is aggregated from the web.xml and web-fragment.xml  descriptor files of the web application.  Since:     Servlet 3.0",1,1,0,0,0,0,0,0,0,0,0,0
"Gets the value of the is-xml configuration, which specifies whether any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor will be treated as JSP documents (XML syntax).  Returns: the value of the is-xml configuration, or null if unspecified",1,0,0,0,0,0,1,0,0,0,0,0
"Sets the version of the cookie protocol that this Cookie complies with.  Version 0 complies with the original Netscape cookie specification. Version 1 complies with RFC 2109.  Since RFC 2109 is still somewhat new, consider version 1 as experimental; do not use it yet on production sites.  Parameters: v - 0 if the cookie should comply with the original Netscape specification; 1 if the cookie should comply with RFC 2109 See Also: getVersion()",1,0,0,0,0,0,0,0,0,1,0,0
"The default behavior of this method is to return getIntHeader(String name) on the wrapped request object.  Specified by: getIntHeader in interface HttpServletRequest Parameters: name - a String specifying the name of a request header Returns: an integer expressing the value of the request header or -1 if the request doesn't have a header of this name",1,0,0,0,0,0,0,0,0,0,0,0
"Gets the names of the headers of this response.  This method considers only response headers set or added via setHeader(java.lang.String, java.lang.String), addHeader(java.lang.String, java.lang.String), setDateHeader(java.lang.String, long), addDateHeader(java.lang.String, long), setIntHeader(java.lang.String, int), or addIntHeader(java.lang.String, int), respectively.  Any changes to the returned Collection must not affect this HttpServletResponse.  Returns: a (possibly empty) Collection of the names of the headers of this response Since: Servlet 3.0",1,0,0,0,0,0,1,0,0,0,0,0
"Provides a convenient implementation of the HttpServletResponse interface  that can be subclassed by developers wishing to adapt the response from a  Servlet. This class implements the Wrapper or Decorator pattern. Methods  default to calling through to the wrapped response object.  Since:     Servlet 2.3 Author:     Various See Also:     HttpServletResponse",1,0,0,0,1,0,0,0,0,0,0,0
"Deprecated. As of version 2.1, use encodeURL(String url) instead  The default behavior of this method is to call encodeUrl(String url) on the wrapped response object.  Specified by: encodeUrl in interface HttpServletResponse Parameters: url - the url to be encoded. Returns: the encoded URL if encoding is needed; the unchanged URL otherwise.",1,0,0,0,0,1,1,0,0,1,0,1
"The default behavior of this method is to call sendError(int sc, String msg) on the wrapped response object.  Specified by: sendError in interface HttpServletResponse Parameters: sc - the error status code msg - the descriptive message Throws: java.io.IOException - If an input or output exception occurs",1,0,0,0,0,0,0,0,0,0,0,1
"Objects that are bound to a session may listen to container events  notifying them that sessions will be passivated and that session will be  activated. A container that migrates session between VMs or persists  sessions is required to notify all attributes bound to sessions  implementing HttpSessionActivationListener.  Since:     Servlet 2.3",0,1,0,0,0,0,0,0,0,0,0,0
"Deprecated. As of Java Servlet API 2.1 with no replacement. This method must return null and will be removed in a future version of this API.",0,0,0,0,0,0,0,0,0,0,0,0
"Interface for receiving notification events about HttpSession lifecycle  changes.  In order to receive these notification events, the implementation class  must be either declared in the deployment descriptor of the web  application, annotated with WebListener, or registered via one of the  addListener methods defined on ServletContext.  Implementations of this interface are invoked at their  sessionCreated(javax.servlet.http.HttpSessionEvent) method in the order in  which they have been declared, and at their  sessionDestroyed(javax.servlet.http.HttpSessionEvent) method in reverse  order.  Since:     Servlet 2.3 See Also:     HttpSessionEvent",1,0,1,0,0,0,0,0,0,0,0,0
"Contains information about an error, for error pages. The information  contained in this instance is meaningless if not used in the context of an  error page. To indicate a JSP is an error page, the page author must set  the isErrorPage attribute of the page directive to true.  Since:     JSP 2.0 See Also:     PageContext\#getErrorData",1,0,1,0,0,0,0,0,0,0,0,0
"A generic exception known to the JSP engine; uncaught JspExceptions will  result in an invocation of the errorpage machinery.  See Also:     Serialized Form",0,1,0,0,0,0,0,0,0,0,0,0
"The JspFactory is an abstract class that defines a number of factory  methods available to a JSP page at runtime for the purposes of creating  instances of various interfaces and classes used to support the JSP  implementation.  A conformant JSP Engine implementation will, during it's initialization  instantiate an implementation dependent subclass of this class, and make it  globally available for use by JSP implementation classes by registering the  instance created with this class via the static setDefaultFactory()  method.  The only implementation-dependent classes that can be created from the  factory are: PageContext, JspEngineInfo, and JspApplicationContext.  With the exception of JspApplicationContext, JspFactory objects should not  be used by JSP application developers.",1,0,0,0,0,0,0,1,0,0,0,0
"Protected constructor.  Parameters: bufferSize - the size of the buffer to be used by the JspWriter autoFlush - whether the JspWriter should be autoflushing",0,0,0,0,0,0,0,0,0,0,0,1
"Print an object. The string produced by the String.valueOf(Object) method is written to the JspWriter's buffer or, if no buffer is used, directly to the underlying writer.  Parameters: obj - The Object to be printed Throws: java.io.IOException - If an error occured while writing See Also: Object.toString()",0,0,0,0,0,1,0,0,0,0,0,1
" Name used to store ServletRequest in PageContext name table.  See Also: Constant Field Values ",0,0,0,1,0,0,0,0,0,0,0,0
"public class ELParseException      extends ELException   Represents a parsing error encountered while parsing an EL expression.  Since:     JSP 2.0 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,1
"Defines variable resolution behavior for the EL implicit objects defined in  the JSP specification.  The following variables are resolved by this ELResolver, as per the JSP  specification:      * pageContext - the PageContext object.     * pageScope - a Map that maps page-scoped attribute names to their       values.     * requestScope - a Map that maps request-scoped attribute names to       their values.     * sessionScope - a Map that maps session-scoped attribute names to       their values.     * applicationScope - a Map that maps application-scoped attribute names       to their values.     * param - a Map that maps parameter names to a single String parameter       value (obtained by calling ServletRequest.getParameter(String name)).     * paramValues - a Map that maps parameter names to a String[] of all       values for that parameter (obtained by calling        ServletRequest.getParameterValues(String name)).     * header - a Map that maps header names to a single String header value       (obtained by calling HttpServletRequest.getHeader(String name)).     * headerValues - a Map that maps header names to a String[] of all       values for that header (obtained by calling        HttpServletRequest.getHeaders(String)).     * cookie - a Map that maps cookie names to a single Cookie object.       Cookies are retrieved according to the semantics of        HttpServletRequest.getCookies(). If the same name is shared by       multiple cookies, an implementation must use the first one       encountered in the array of Cookie objects returned by the        getCookies() method. However, users of the cookie implicit object       must be aware that the ordering of cookies is currently unspecified       in the servlet specification.     * initParam - a Map that maps context initialization parameter names to       their String parameter value (obtained by calling        ServletContext.getInitParameter(String name)).  Since:     JSP 2.1 See Also:     ELResolver",0,0,0,0,0,0,0,0,0,0,0,0
"If the base object is null, returns false to indicate that scoped attributes are never read-only.  The propertyResolved property of the ELContext object must be set to true by this resolver before returning if base is null. If this property is not true after this method is called, the caller should ignore the return value.  Specified by: isReadOnly in class ELResolver Parameters: context - The context of this evaluation. base - Only null is handled by this resolver. Other values will result in an immediate return. property - The name of the scoped attribute. Returns: If the propertyResolved property of ELContext was set to true, then false; otherwise undefined. Throws: java.lang.NullPointerException - if context is null. ELException - if an exception was thrown while performing the property or variable resolution. The thrown exception must be included as the cause property of this exception, if available.",1,0,1,0,0,0,0,0,0,0,0,1
"Looks up a configuration variable in the given scope.  The lookup of configuration variables is performed as if each scope had its own name space, that is, the same configuration variable name in one scope does not replace one stored in a different scope.  Parameters: pc - Page context in which the configuration variable is to be looked up name - Configuration variable name scope - Scope in which the configuration variable is to be looked up Returns: The java.lang.Object associated with the configuration variable, or null if it is not defined.",1,0,0,0,0,0,0,0,0,0,0,1
"Description copied from class: ValueExpression Returns the type the result of the expression will be coerced to after evaluation.  Specified by: getExpectedType in class ValueExpression Returns: the expectedType passed to the ExpressionFactory.createValueExpression method that created this ValueExpression.",1,0,0,0,0,0,1,0,0,0,0,1
"Version:     $Id: IteratedValueExpression.java,v 1.2 2005/12/08 01:20:43 kchung Exp     $ Author:     Kin-man Chung See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Exposes the current status of an iteration. JSTL provides a mechanism for  LoopTags to return information about the current index of the iteration and  convenience methods to determine whether or not the current round is either  the first or last in the iteration. It also lets authors use the status  object to obtain information about the iteration range, step, and current  object.  Environments that require more status can extend this interface.  Author:     Shawn Bayern",1,0,0,1,0,0,0,0,0,0,0,0
"Returns the value of the 'end' attribute for the associated tag, or null if no 'end' attribute was specified.  Returns: the 'end' value for the associated tag, or null if no 'end' attribute was specified",1,0,0,0,0,0,0,0,0,0,0,1
"Class which exposes the locale-determination logic for resource bundles  through convenience methods.  This class may be useful to any tag handler implementation that needs to  produce localized messages. For example, this might be useful for exception  messages that are intended directly for user consumption on an error page.  Author:     Jan Luehe",1,0,0,1,0,0,0,0,0,0,0,0
"Gets the locale of this I18N localization context.  Returns: The locale of this I18N localization context, or null if this I18N localization context is empty, or its resource bundle is a (locale-less) root resource bundle.",1,0,0,0,0,0,0,0,0,0,0,1
"Returns the names of the columns in the result. The order of the names in the array matches the order in which columns are returned in method getRowsByIndex().  Returns: the column names as an array of String objects",1,1,0,0,0,0,0,0,0,0,0,0
"This interface allows tag handlers implementing it to receive values for  parameter markers in their SQL statements.  This interface is implemented by both <sql:query> and <sql:update>. Its  addSQLParameter() method is called by nested parameter actions (such as  <sql:param>) to substitute PreparedStatement parameter values for ?  parameter markers in the SQL statement of the enclosing SQLExecutionTag  action.  The given parameter values are converted to their corresponding SQL type  (following the rules in the JDBC specification) before they are sent to the  database.  Keeping track of the index of the parameter values being added is the  responsibility of the tag handler implementing this interface  The SQLExcecutionTag interface is exposed in order to support custom  parameter actions which may retrieve their parameters from any source and  process them before substituting them for a parameter marker in the SQL  statement of the enclosing SQLExecutionTag action  Author:     Justyna Horwat",1,0,0,1,0,1,1,0,0,0,0,0
"A TagLibraryValidator for enforcing restrictions against the use of JSP  scripting elements.  This TLV supports four initialization parameters, for controlling which of  the four types of scripting elements are allowed or prohibited:      * allowDeclarations: if true, indicates that declaration elements are       not prohibited.     * allowScriptlets: if true, indicates that scriptlets are not       prohibited     * allowExpressions: if true, indicates that top-level expression       elements (i.e., expressions not associated with request-time       attribute values) are not prohibited.     * allowRTExpressions: if true, indicates that expression elements       associated with request-time attribute values are not prohibited.  The default value for all for initialization parameters is false,  indicating all forms of scripting elements are to be prohibited.  Author:     Mark A. Kolb, Shawn Bayern (minor changes)",1,0,0,0,0,0,0,0,0,0,0,0
"An encapsulation of the evaluation of the body of an action so it is  available to a tag handler. BodyContent is a subclass of JspWriter.  Note that the content of BodyContent is the result of evaluation, so it  will not contain actions and the like, but the result of their invocation.  BodyContent has methods to convert its contents into a String, to read its  contents, and to clear the contents.  The buffer size of a BodyContent object is unbounded. A BodyContent object  cannot be in autoFlush mode. It is not possible to invoke flush on a  BodyContent object, as there is no backing stream.  Instances of BodyContent are created by invoking the pushBody and popBody  methods of the PageContext class. A BodyContent is enclosed within another  JspWriter (maybe another BodyContent object) following the structure of  their associated actions.  A BodyContent is made available to a BodyTag through a setBodyContent()  call. The tag handler can use the object until after the call to  doEndTag().",1,0,0,0,0,0,1,1,0,0,0,0
"Protected constructor. Unbounded buffer, no autoflushing.  Parameters: e - the enclosing JspWriter",1,0,0,0,0,0,0,0,0,0,0,1
"The BodyTag interface extends IterationTag by defining additional methods  that let a tag handler manipulate the content of evaluating its body.  It is the responsibility of the tag handler to manipulate the body content.  For example the tag handler may take the body content, convert it into a  String using the bodyContent.getString method and then use it. Or the tag  handler may take the body content and write it out into its enclosing  JspWriter using the bodyContent.writeOut method.  A tag handler that implements BodyTag is treated as one that implements  IterationTag, except that the doStartTag method can return SKIP_BODY,  EVAL_BODY_INCLUDE or EVAL_BODY_BUFFERED.  If EVAL_BODY_INCLUDE is returned, then evaluation happens as in  IterationTag.  If EVAL_BODY_BUFFERED is returned, then a BodyContent object will be  created (by code generated by the JSP compiler) to capture the body  evaluation. The code generated by the JSP compiler obtains the BodyContent  object by calling the pushBody method of the current pageContext, which  additionally has the effect of saving the previous out value. The page  compiler returns this object by calling the popBody method of the  PageContext class; the call also restores the value of out.  The interface provides one new property with a setter method and one new  action method.  Properties  There is a new property: bodyContent, to contain the BodyContent object,  where the JSP Page implementation object will place the evaluation (and  reevaluation, if appropriate) of the body. The setter method  (setBodyContent) will only be invoked if doStartTag() returns  EVAL_BODY_BUFFERED and the corresponding action element does not have an  empty body.  Methods  In addition to the setter method for the bodyContent property, there is a  new action method: doInitBody(), which is invoked right after  setBodyContent() and before the body evaluation. This method is only  invoked if doStartTag() returns EVAL_BODY_BUFFERED.  Lifecycle  Lifecycle details are described by the transition diagram below. Exceptions  that are thrown during the computation of doStartTag(), setBodyContent(),  doInitBody(), BODY, doAfterBody() interrupt the execution sequence and are  propagated up the stack, unless the tag handler implements the  TryCatchFinally interface; see that interface for details.  [Lifecycle Details Transition Diagram for BodyTag]  Empty and Non-Empty Action  If the TagLibraryDescriptor file indicates that the action must always have  an empty element body, by an <body-content> entry of empty, then the  doStartTag() method must return SKIP_BODY. Otherwise, the doStartTag()  method may return SKIP_BODY, EVAL_BODY_INCLUDE, or EVAL_BODY_BUFFERED.  Note that which methods are invoked after the doStartTag() depends on both  the return value and on if the custom action element is empty or not in the  JSP page, not how it's declared in the TLD.  If SKIP_BODY is returned the body is not evaluated, and doEndTag() is  invoked.  If EVAL_BODY_INCLUDE is returned, and the custom action element is not  empty, setBodyContent() is not invoked, doInitBody() is not invoked, the  body is evaluated and passed through to the current out, doAfterBody() is  invoked and then, after zero or more iterations, doEndTag() is invoked. If  the custom action element is empty, only doStart() and doEndTag() are  invoked.  If EVAL_BODY_BUFFERED is returned, and the custom action element is not  empty, setBodyContent() is invoked, doInitBody() is invoked, the body is  evaluated, doAfterBody() is invoked, and then, after zero or more  iterations, doEndTag() is invoked. If the custom action element is empty,  only doStart() and doEndTag() are invoked.",1,0,0,0,0,0,1,0,0,0,0,0
"Encapsulates a portion of JSP code in an object that can be invoked as many  times as needed. JSP Fragments are defined using JSP syntax as the body of  a tag for an invocation to a SimpleTag handler, or as the body of a  <jsp:attribute> standard action specifying the value of an attribute that  is declared as a fragment, or to be of type JspFragment in the TLD.  The definition of the JSP fragment must only contain template text and JSP  action elements. In other words, it must not contain scriptlets or  scriptlet expressions. At translation time, the container generates an  implementation of the JspFragment abstract class capable of executing the  defined fragment.  A tag handler can invoke the fragment zero or more times, or pass it along  to other tags, before returning. To communicate values to/from a JSP  fragment, tag handlers store/retrieve values in the JspContext associated  with the fragment.  Note that tag library developers and page authors should not generate  JspFragment implementations manually.  Implementation Note: It is not necessary to generate a separate class for  each fragment. One possible implementation is to generate a single helper  class for each page that implements JspFragment. Upon construction, a  discriminator can be passed to select which fragment that instance will  execute.  Since:     JSP 2.0",1,0,1,0,0,0,1,1,0,0,0,0
"Constructor for TagAttributeInfo. This class is to be instantiated only from the TagLibrary code under request from some JSP code that is parsing a TLD (Tag Library Descriptor).  Parameters: name - The name of the attribute. required - If this attribute is required in tag instances. type - The name of the type of the attribute. reqTime - Whether this attribute holds a request-time Attribute.",0,0,1,0,0,0,1,0,0,0,0,1
"Returns the expected method signature of this deferred method attribute.  This method returns null if isDeferredMethod() returns false.  Returns: the method signature Since: JSP 2.1",1,0,0,0,0,0,0,0,0,0,0,1
"Optional class provided by the tag library author to describe additional  translation-time information not described in the TLD. The TagExtraInfo  class is mentioned in the Tag Library Descriptor file (TLD).  This class can be used:      * to indicate that the tag defines scripting variables     * to perform translation-time validation of the tag attributes.  It is the responsibility of the JSP translator that the initial value to be  returned by calls to getTagInfo() corresponds to a TagInfo object for the  tag being translated. If an explicit call to setTagInfo() is done, then the  object passed will be returned in subsequent calls to getTagInfo().  The only way to affect the value returned by getTagInfo() is through a  setTagInfo() call, and thus, TagExtraInfo.setTagInfo() is to be called by  the JSP translator, with a TagInfo object that corresponds to the tag being  translated. The call should happen before any invocation on validate() and  before any invocation on getVariableInfo().  NOTE: It is a (translation time) error for a tag definition in a TLD with  one or more variable subelements to have an associated TagExtraInfo  implementation that returns a VariableInfo array with one or more elements  from a call to getVariableInfo().",0,0,0,1,0,0,1,1,0,0,0,0
"information on scripting variables defined by the tag associated with this TagExtraInfo instance. Request-time attributes are indicated as such in the TagData parameter.  Parameters: data - The TagData instance. Returns: An array of VariableInfo data, or null or a zero length array if no scripting variables are to be defined.",0,0,0,0,0,0,0,0,0,0,0,1
"Tag information for a tag file in a Tag Library; This class is instantiated  from the Tag Library Descriptor file (TLD) and is available only at  translation time.  Since:     JSP 2.0",0,0,0,0,0,0,1,0,0,0,0,0
"Set the TagLibraryInfo property. Note that a TagLibraryInfo element is dependent not just on the TLD information but also on the specific taglib instance used. This means that a fair amount of work needs to be done to construct and initialize TagLib objects. If used carefully, this setter can be used to avoid having to create new TagInfo elements for each taglib directive.  Parameters: tl - the TagLibraryInfo to assign",0,0,0,1,0,0,1,0,0,0,0,1
"A base class for defining new tag handlers implementing Tag.  The TagSupport class is a utility class intended to be used as the base  class for new tag handlers. The TagSupport class implements the Tag and  IterationTag interfaces and adds additional convenience methods including  getter methods for the properties in Tag. TagSupport has one static method  that is included to facilitate coordination among cooperating tags.  Many tag handlers will extend TagSupport and only redefine a few methods.  See Also:     Serialized Form",1,0,0,1,0,0,1,0,0,0,0,0
"This exception indicates that the request carried an invalid transaction  context. For example, this exception could be raised if an error occurred  when trying to register a resource.  See Also:     Serialized Form",1,0,0,0,0,0,0,1,0,0,0,0
"NotSupportedException exception indicates that the request cannot be  executed because the operation is not a supported feature. For example,  because nested transactions are not supported, the Transaction Manager  throws this exception when a calling thread that is already associated with  a transaction attempts to start a new transaction. (A nested transaction  occurs when a thread is already associated with one transaction and  attempts to start a second transaction.)  See Also:     Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0
"Roll back the transaction associated with the current thread. When this method completes, the thread is no longer associated with a transaction.  Throws: SecurityException - Thrown to indicate that the thread is not allowed to roll back the transaction. IllegalStateException - Thrown if the current thread is not associated with a transaction. SystemException - Thrown if the transaction manager encounters an unexpected error condition.",1,0,0,1,0,0,0,0,0,0,0,0
"The UserTransaction interface defines the methods that allow an application  to explicitly manage transaction boundaries.",1,0,0,0,0,0,0,0,0,0,0,0
"Roll back the transaction associated with the current thread. When this method completes, the thread is no longer associated with a transaction.  Throws: SecurityException - Thrown to indicate that the thread is not allowed to roll back the transaction. IllegalStateException - Thrown if the current thread is not associated with a transaction. SystemException - Thrown if the transaction manager encounters an unexpected error condition.",1,0,0,0,0,0,0,0,0,0,0,0
" Disassociates caller from a transaction branch.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Ends the work performed on behalf of a transaction branch. The resource manager disassociates the XA resource from the transaction branch specified and lets the transaction complete.  If TMSUSPEND is specified in the flags, the transaction branch is temporarily suspended in an incomplete state. The transaction context is in a suspended state and must be resumed via the start method with TMRESUME specified.  If TMFAIL is specified, the portion of work has failed. The resource manager may mark the transaction as rollback-only  If TMSUCCESS is specified, the portion of work has completed successfully.  Parameters: xid - A global transaction identifier that is the same as the identifier used previously in the start method. flags - One of TMSUCCESS, TMFAIL, or TMSUSPEND. Throws: XAException - An error has occurred. Possible XAException values are XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL, XAER_PROTO, or XA_RB*.",1,0,1,0,0,0,0,0,0,0,0,0
"Link between a constraint annotation and its constraint validation  implementations.  A given constraint annotation should be annotated by a @Constraint  annotation which refers to its list of constraint validation  implementations.  Author:     Emmanuel Bernard, Gavin King, Hardy Ferentschik  Required Element Summary  java.lang.Class<? extends ConstraintValidator<?,?>>[] 	validatedBy           ConstraintValidator classes must reference distinct target types.    Element Detail   validatedBy   public abstract java.lang.Class<? extends ConstraintValidator<?,?>>[] validatedBy      ConstraintValidator classes must reference distinct target types. If     two ConstraintValidator refer to the same type, an exception will     occur.      Returns:         array of ConstraintValidator classes implementing the constraint Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,1,0,0,0,0,0,0,0,0,0,1
"Represent a node whose context is configurable (ie index, key and  isInIterable)",1,0,0,0,0,0,0,0,0,0,0,0
"ConstraintViolation builder allowing to optionally associate the violation  report to a sub path. To create the ConstraintViolation, one must call  either one of the \#addConstraintViolation() methods available in one of the  interfaces of the fluent API. If another method is called after  \#addConstraintViolation() on ConstraintViolationBuilder or any of its  associated objects an IllegalStateException is raised.",1,0,0,0,0,0,0,1,0,0,0,0
"Exception raised if a group definition is not legal  Author:     Emmanuel Bernard See Also:     Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"Returns: value being validated",0,0,0,0,0,0,0,0,0,0,0,1
"Represents an element of a navigation path",1,0,0,0,0,0,0,0,0,0,0,0
"A constraint annotation hosting this annotation will return the composed  annotation error report if any of the composing annotations fail. The error  reports of each individual composing constraint is ignored.  Author:     Emmanuel Bernard  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,1,0,0,0,0,0,0,0,0
"Mark an association as cascaded. The associated object will be validated by  cascade.  Author:     Emmanuel Bernard, Hardy Ferentschik  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
"Defines the state used to bootstrap Bean Validation and creates a provider  specific Configuration of typeT.  The specific Configuration is linked to the provider via the generic  parameter of the ValidationProvider implementation.  The requested provider is the first provider instance assignable to the  requested provider type (known when ProviderSpecificBootstrap is built).  The list of providers evaluated is returned by ValidationProviderResolver.  If no ValidationProviderResolver is defined, the default  ValidationProviderResolver strategy is used.  Author:     Emmanuel Bernard",0,0,0,0,0,0,1,1,0,0,0,0
"Optionally defines the provider resolver implementation used. If not defined, use the default ValidationProviderResolver  Parameters: resolver - ValidationProviderResolver implementation used Returns: this following the chaining method pattern",1,0,0,0,0,0,0,0,0,0,0,0
"Defines several @AssertFalse annotations on the same element  Author:     Emmanuel Bernard See Also:     AssertFalse  Required Element Summary  AssertFalse[] 	value                Element Detail   value   public abstract AssertFalse[] value  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
"Defines several @DecimalMax annotations on the same element  Author:     Emmanuel Bernard See Also:     DecimalMax  Required Element Summary  DecimalMax[] 	value                Element Detail   value   public abstract DecimalMax[] value  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,0,0,0,0,0,0,0,0,0
"The annotated element must be a number whose value must be higher or equal  to the specificed minimum.  Supported types are:      * BigDecimal     * BigInteger     * String     * byte, short, int, long, and their respective wrappers Note that double and float are not supported due to rounding errors (some  providers might provide some approximative support)  null elements are considered valid  Author:     Emmanuel Bernard  Required Element Summary  java.lang.String 	value           The String representation of the min value according to the  BigDecimal string representation   Optional Element Summary  java.lang.Class<?>[] 	groups              java.lang.String 	message              java.lang.Class<? extends Payload>[] 	payload                Element Detail   value   public abstract java.lang.String value      The String representation of the min value according to the BigDecimal      string representation      Returns:         value the element must be higher or equal to   message   public abstract java.lang.String message      Default:         {javax.validation.constraints.DecimalMin.message}   groups   public abstract java.lang.Class<?>[] groups      Default:         {}   payload   public abstract java.lang.Class<? extends Payload>[] payload      Default:         {} Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,1,0,0,0,0,0
"The annotated element must be a number whose value must be higher or equal  to the specified minimum.  Supported types are:      * BigDecimal     * BigInteger     * byte, short, int, long, and their respective wrappers Note that double and float are not supported due to rounding errors (some  providers might provide some approximative support)  null elements are considered valid  Author:     Emmanuel Bernard  Required Element Summary  long 	value               Optional Element Summary  java.lang.Class<?>[] 	groups              java.lang.String 	message              java.lang.Class<? extends Payload>[] 	payload                Element Detail   value   public abstract long value      Returns:         value the element must be higher or equal to   message   public abstract java.lang.String message      Default:         {javax.validation.constraints.Min.message}   groups   public abstract java.lang.Class<?>[] groups      Default:         {}   payload   public abstract java.lang.Class<? extends Payload>[] payload      Default:         {} Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,1,0,1,0,0,0,0,0,0,0
"Defines several @Past annotations on the same element  Author:     Emmanuel Bernard See Also:     Past  Required Element Summary  Past[] 	value                Element Detail   value   public abstract Past[] value  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
"The annotated element must be a date in the past. Now is defined as the  current time according to the virtual machine The calendar used if the  compared type is of type Calendar is the calendar based on the current  timezone and the current locale.  Supported types are:      * java.util.Date     * java.util.Calendar  null elements are considered valid.  Author:     Emmanuel Bernard  Optional Element Summary  java.lang.Class<?>[] 	groups              java.lang.String 	message              java.lang.Class<? extends Payload>[] 	payload                 message   public abstract java.lang.String message      Default:         {javax.validation.constraints.Past.message}   groups   public abstract java.lang.Class<?>[] groups      Default:         {}   payload   public abstract java.lang.Class<? extends Payload>[] payload      Default:         {} Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,0,0,0,0,0
" Enables case-insensitive matching  See Also: Pattern.CASE_INSENSITIVE ",1,0,0,0,0,0,0,0,0,0,0,0
"Default Bean Validation group. Unless a list of group is explicitly  defined:      * constraints belong to the Default group     * validation apply on the Default group Most structural constraints should belong to the default group.  Author:     Emmanuel Bernard  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,0,0,0,0,0,0,0,0,0
"Restrict to the constraints matching a given set of groups for this element This method respects group sequences and group inheritance (including class-level Default group overriding) but does not return ConstraintDescriptors in any particular order. Specifically, ordering of the group sequence is not respected.  Parameters: groups - groups targeted Returns: this following the chaining method pattern",1,0,0,0,0,0,0,0,0,0,0,0
"Describes a Java Bean property hosting validation constraints. Constraints  placed on the attribute and the getter of a given property are all  referenced.  Author:     Emmanuel Bernard",0,0,0,0,0,0,1,0,0,0,0,0
"Defines the state used to bootstrap the Configuration  Author:     Emmanuel Bernard, Sebastian Thomschke",0,0,0,0,0,0,0,0,0,0,0,0
"Specification default ValidationProviderResolver strategy instance.  Returns: default implementation of ValidationProviderResolver",0,0,0,0,0,0,0,0,0,0,0,1
"Identifies the application path that serves as the base URI for all  resource URIs provided by Path. May only be applied to a subclass of  Application.  When published in a Servlet container, the value of the application path  may be overridden using a servlet-mapping element in the web.xml.  Since:     1.1 See Also:     Application, Path  Required Element Summary  java.lang.String 	value           Defines the base URI for all resource URIs.    Element Detail   value   public abstract java.lang.String value      Defines the base URI for all resource URIs. A trailing '/' character     will be automatically appended if one is not present.      The supplied value is automatically percent encoded to conform to the      path production of RFC 3986 section 3.3. Note that percent encoded     values are allowed in the value, an implementation will recognize such     values and will not double encode the '%' character.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,1,0,0,0,0
"Binds the value(s) of a form parameter contained within a request entity  body to a resource method parameter. Values are URL decoded unless this is  disabled using the Encoded annotation. A default value can be specified  using the DefaultValue annotation. If the request entity body is absent or  is an unsupported media type, the default value is used. The type T of the  annotated parameter must either:     1. Be a primitive type    2. Have a constructor that accepts a single String argument    3. Have a static method named valueOf or fromString that accepts a       single String argument (see, for example, Integer.valueOf(String))    4. Be List<T>, Set<T> or SortedSet<T>, where T satisfies 2 or 3 above.       The resulting collection is read-only.  If the type is not one of those listed in 4 above then the first value  (lexically) of the parameter is used.  Note that, whilst the annotation target permits use on fields and methods,  this annotation is only required to be supported on resource method  parameters.  See Also:     DefaultValue, Encoded  Required Element Summary  java.lang.String 	value           Defines the name of the form parameter whose value will be used  to initialize the value of the annotated method argument.    Element Detail   value   public abstract java.lang.String value      Defines the name of the form parameter whose value will be used to     initialize the value of the annotated method argument. The name is     specified in decoded form, any percent encoded literals within the     value will not be decoded and will instead be treated as literal text.     E.g. if the parameter name is a b then the value of the annotation is     a b, not a+b or a%20b.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,1,0,0,0,1,0,0,0,0,0
"Binds the value(s) of a HTTP header to a resource method parameter,  resource class field, or resource class bean property. A default value can  be specified using the DefaultValue annotation. The type T of the annotated  parameter, field or property must either:     1. Be a primitive type    2. Have a constructor that accepts a single String argument    3. Have a static method named valueOf or fromString that accepts a       single String argument (see, for example, Integer.valueOf(String))    4. Be List<T>, Set<T> or SortedSet<T>, where T satisfies 2 or 3 above.       The resulting collection is read-only.  If the type is not one of those listed in 4 above then the first value  (lexically) of the header is used.  Because injection occurs at object creation time, use of this annotation on  resource class fields and bean properties is only supported for the default  per-request resource class lifecycle. Resource classes using other  lifecycles should only use this annotation on resource method parameters.  See Also:     DefaultValue, HttpHeaders  Required Element Summary  java.lang.String 	value           Defines the name of the HTTP header whose value will be used to  initialize the value of the annotated method argument, class field or bean  property.    Element Detail   value   public abstract java.lang.String value      Defines the name of the HTTP header whose value will be used to     initialize the value of the annotated method argument, class field or     bean property. Case insensitive.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,0,0,0,0,0,0
"Runtime exception for applications.  This exception may be thrown by a resource method, provider or  StreamingOutput implementation if a specific HTTP error response needs to  be produced. Only effective if thrown prior to the response being  committed.  Author:     Paul.Sandoz@Sun.Com See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Construct a new instance with a blank message and specified HTTP status code  Parameters: status - the HTTP status code that will be returned to the client",1,0,0,0,0,0,0,0,0,0,0,0
"Defines the components of a JAX-RS application and supplies additional  metadata. A JAX-RS application or implementation supplies a concrete  subclass of this abstract class.  The implementation-created instance of an Application subclass may be  injected into resource classes and providers using Context.",1,0,0,0,0,0,1,1,0,0,0,0
"Creates a new instance of CacheControl by parsing the supplied string.  Parameters: value - the cache control string Returns: the newly created CacheControl Throws: IllegalArgumentException - if the supplied string cannot be parsed or is null",1,0,0,0,0,0,0,0,0,0,0,0
"Corresponds to the value of the private cache control directive.  Returns: a mutable list of field-names that will form the value of the private cache control directive. An empty list results in a bare no-cache directive. See Also: isPrivate(), setPrivate(boolean), HTTP/1.1 section 14.9.1",1,0,0,0,0,0,0,0,0,0,0,0
"Represents the value of a HTTP cookie, transferred in a request. RFC 2109  specifies the legal characters for name, value, path and domain. The  default version of 1 corresponds to RFC 2109.  See Also:     IETF RFC 2109",0,0,0,0,0,0,0,0,0,0,1,0
"An abstraction for a media type. Instances are immutable.  See Also:     HTTP/1.1 section 3.7",0,0,0,0,0,0,0,0,0,0,0,1
" application/xhtml+xml ",1,0,0,0,0,0,0,0,0,0,0,1
"Used to create a new HTTP cookie, transferred in a response.  See Also:     IETF RFC 2109",1,0,0,0,0,0,0,0,0,0,0,0
"Set the status on the ResponseBuilder.  Parameters: status - the response status Returns: the updated ResponseBuilder Throws: IllegalArgumentException - if status is null",0,0,0,0,0,0,0,0,0,0,0,1
"Add a Vary header that lists the available variants.  Parameters: variants - a list of available representation variants, a null value will remove an existing value for vary. Returns: the updated ResponseBuilder",1,0,0,0,0,0,0,0,0,0,0,0
"Commonly used status codes defined by HTTP, see HTTP/1.1 documentation for  the complete list. Additional status codes can be added by applications by  creating an implementation of Response.StatusType.  Nested Class Summary static class 	Response.Status.Family           An enumeration representing the class of status code.   Enum Constant Summary ACCEPTED           202 Accepted, see HTTP/1.1 documentation. BAD_REQUEST           400 Bad Request, see HTTP/1.1 documentation. CONFLICT           409 Conflict, see HTTP/1.1 documentation. CREATED           201 Created, see HTTP/1.1 documentation. FORBIDDEN           403 Forbidden, see HTTP/1.1 documentation. GONE           410 Gone, see HTTP/1.1 documentation. INTERNAL_SERVER_ERROR           500 Internal Server Error, see HTTP/1.1 documentation. MOVED_PERMANENTLY           301 Moved Permanently, see HTTP/1.1 documentation. NO_CONTENT           204 No Content, see HTTP/1.1 documentation. NOT_ACCEPTABLE           406 Not Acceptable, see HTTP/1.1 documentation. NOT_FOUND           404 Not Found, see HTTP/1.1 documentation. NOT_MODIFIED           304 Not Modified, see HTTP/1.1 documentation. OK           200 OK, see HTTP/1.1 documentation. PRECONDITION_FAILED           412 Precondition Failed, see HTTP/1.1 documentation. SEE_OTHER           303 See Other, see HTTP/1.1 documentation. SERVICE_UNAVAILABLE           503 Service Unavailable, see HTTP/1.1 documentation. TEMPORARY_REDIRECT           307 Temporary Redirect, see HTTP/1.1 documentation. UNAUTHORIZED           401 Unauthorized, see HTTP/1.1 documentation. UNSUPPORTED_MEDIA_TYPE           415 Unsupported Media Type, see HTTP/1.1 documentation.   Method Summary static Response.Status 	fromStatusCode(int statusCode)           Convert a numerical status code into the corresponding Status  Response.Status.Family 	getFamily()           Get the class of status code  java.lang.String 	getReasonPhrase()           Get the reason phrase  int 	getStatusCode()           Get the associated status code  java.lang.String 	toString()           Get the reason phrase static Response.Status 	valueOf(java.lang.String name)           Returns the enum constant of this type with the specified name. static Response.Status[] 	values()           Returns an array containing the constants of this enum type, in  the order they are declared.   Methods inherited from class java.lang.Enum clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name,  ordinal, valueOf   Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait    Enum Constant Detail   OK   public static final Response.Status OK      200 OK, see HTTP/1.1 documentation.   CREATED   public static final Response.Status CREATED      201 Created, see HTTP/1.1 documentation.   ACCEPTED   public static final Response.Status ACCEPTED      202 Accepted, see HTTP/1.1 documentation.   NO_CONTENT   public static final Response.Status NO_CONTENT      204 No Content, see HTTP/1.1 documentation.   MOVED_PERMANENTLY   public static final Response.Status MOVED_PERMANENTLY      301 Moved Permanently, see HTTP/1.1 documentation.   SEE_OTHER   public static final Response.Status SEE_OTHER      303 See Other, see HTTP/1.1 documentation.   NOT_MODIFIED   public static final Response.Status NOT_MODIFIED      304 Not Modified, see HTTP/1.1 documentation.   TEMPORARY_REDIRECT   public static final Response.Status TEMPORARY_REDIRECT      307 Temporary Redirect, see HTTP/1.1 documentation.   BAD_REQUEST   public static final Response.Status BAD_REQUEST      400 Bad Request, see HTTP/1.1 documentation.   UNAUTHORIZED   public static final Response.Status UNAUTHORIZED      401 Unauthorized, see HTTP/1.1 documentation.   FORBIDDEN   public static final Response.Status FORBIDDEN      403 Forbidden, see HTTP/1.1 documentation.   NOT_FOUND   public static final Response.Status NOT_FOUND      404 Not Found, see HTTP/1.1 documentation.   NOT_ACCEPTABLE   public static final Response.Status NOT_ACCEPTABLE      406 Not Acceptable, see HTTP/1.1 documentation.   CONFLICT   public static final Response.Status CONFLICT      409 Conflict, see HTTP/1.1 documentation.   GONE   public static final Response.Status GONE      410 Gone, see HTTP/1.1 documentation.   PRECONDITION_FAILED   public static final Response.Status PRECONDITION_FAILED      412 Precondition Failed, see HTTP/1.1 documentation.   UNSUPPORTED_MEDIA_TYPE   public static final Response.Status UNSUPPORTED_MEDIA_TYPE      415 Unsupported Media Type, see HTTP/1.1 documentation.   INTERNAL_SERVER_ERROR   public static final Response.Status INTERNAL_SERVER_ERROR      500 Internal Server Error, see HTTP/1.1 documentation.   SERVICE_UNAVAILABLE   public static final Response.Status SERVICE_UNAVAILABLE      503 Service Unavailable, see HTTP/1.1 documentation.  Method Detail   values   public static Response.Status[] values()      Returns an array containing the constants of this enum type, in the     order they are declared. This method may be used to iterate over the     constants as follows:       for (Response.Status c : Response.Status.values())     System.out.println(c);       Returns:         an array containing the constants of this enum type, in the order         they are declared   valueOf   public static Response.Status valueOf(java.lang.String name)      Returns the enum constant of this type with the specified name. The     string must match exactly an identifier used to declare an enum     constant in this type. (Extraneous whitespace characters are not     permitted.)      Parameters:         name - the name of the enum constant to be returned.     Returns:         the enum constant with the specified name     Throws:         IllegalArgumentException - if this enum type has no constant with         the specified name         java.lang.NullPointerException - if the argument is null   getFamily   public Response.Status.Family getFamily()      Get the class of status code      Specified by:         getFamily in interface Response.StatusType     Returns:         the class of status code   getStatusCode   public int getStatusCode()      Get the associated status code      Specified by:         getStatusCode in interface Response.StatusType     Returns:         the status code   getReasonPhrase   public java.lang.String getReasonPhrase()      Get the reason phrase      Specified by:         getReasonPhrase in interface Response.StatusType     Returns:         the reason phrase   toString   public java.lang.String toString()      Get the reason phrase      Overrides:         toString in class java.lang.Enum<Response.Status>     Returns:         the reason phrase   fromStatusCode   public static Response.Status fromStatusCode(int statusCode)      Convert a numerical status code into the corresponding Status      Parameters:         statusCode - the numerical status code     Returns:         the matching Status or null is no matching Status is defined Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | ENUM CONSTANTS | FIELD | METHOD 	 DETAIL: ENUM CONSTANTS  | FIELD | METHOD Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,1,0,0,1,0,1,0,1,0
" String identifier for Form authentication. Value FORM  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"Set the URI scheme.  Parameters: scheme - the URI scheme, may contain URI template parameters. A null value will unset the URI scheme. Returns: the updated UriBuilder Throws: IllegalArgumentException - if scheme is invalid",0,0,0,0,0,0,0,0,0,0,0,1
"Set the URI scheme-specific-part (see URI). This method will overwrite any existing values for authority, user-info, host, port and path.  Parameters: ssp - the URI scheme-specific-part, may contain URI template parameters Returns: the updated UriBuilder Throws: IllegalArgumentException - if ssp cannot be parsed or is null",1,0,0,0,0,0,0,0,0,0,1,0
"Overrides: toString in class java.lang.Object",0,0,0,0,0,0,0,0,0,0,0,0
"Defines the contract for a delegate that is responsible for converting  between the String form of a HTTP header and the corresponding JAX-RS type  T.",1,0,0,0,0,0,0,0,0,0,0,0
"Implementations of JAX-RS provide a concrete subclass of RuntimeDelegate  and various JAX-RS API methods defer to methods of RuntimeDelegate for  their functionality. Regular users of JAX-RS are not expected to use this  class directly and overriding an implementation of this class with a user  supplied subclass may cause unexpected behavior.",0,0,0,1,0,0,0,0,0,0,0,0
"The DatatypeConverterInterface is for JAXB provider use only. A JAXB  provider must supply a class that implements this interface. JAXB Providers  are required to call the DatatypeConverter.setDatatypeConverter api at some  point before the first marshal or unmarshal operation (perhaps during the  call to JAXBContext.newInstance). This step is necessary to configure the  converter that should be used to perform the print and parse functionality.  Calling this api repeatedly will have no effect - the DatatypeConverter  instance passed into the first invocation is the one that will be used from  then on.  This interface defines the parse and print methods. There is one parse and  print method for each XML schema datatype specified in the the default  binding Table 5-1 in the JAXB specification.  The parse and print methods defined here are invoked by the static parse  and print methods defined in the DatatypeConverter class.  A parse method for a XML schema datatype must be capable of converting any  lexical representation of the XML schema datatype ( specified by the XML  Schema Part2: Datatypes specification into a value in the value space of  the XML schema datatype. If an error is encountered during conversion, then  an IllegalArgumentException or a subclass of IllegalArgumentException must  be thrown by the method.  A print method for a XML schema datatype can output any lexical  representation that is valid with respect to the XML schema datatype. If an  error is encountered during conversion, then an IllegalArgumentException,  or a subclass of IllegalArgumentException must be thrown by the method.  The prefix xsd: is used to refer to XML schema datatypes XML Schema Part2:  Datatypes specification.  Since:     JAXB1.0 Author:         * Sekhar Vajjhala, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems Inc.         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Ryan Shoemaker,Sun Microsystems Inc. See Also:     DatatypeConverter, ParseConversionEvent, PrintConversionEvent",1,0,1,1,0,0,1,1,0,0,1,0
"Converts a Calendar value into a string.  Parameters: val - A Calendar value Returns: A string containing a lexical representation of xsd:dateTime Throws: IllegalArgumentException - if val is null.",1,0,0,0,0,0,0,0,0,0,0,1
"JAXB representation of an Xml Element.  This class represents information about an Xml Element from both the  element declaration within a schema and the element instance value within  an xml document with the following properties      * element's xml tag name     * value represents the element instance's atttribute(s) and content       model     * element declaration's declaredType (xs:element @type attribute)     * scope of element declaration     * boolean nil property. (element instance's xsi:nil attribute)  The declaredType and scope property are the JAXB class binding for the xml  type definition.  Scope is either JAXBElement.GlobalScope or the Java class representing the  complex type definition containing the schema element declaration.  There is a property constraint that if value is null, then nil must be  true. The converse is not true to enable representing a nil element with  attribute(s). If nil is true, it is possible that value is non-null so it  can hold the value of the attributes associated with a nil element.  Since:     JAXB 2.0 Author:     Kohsuke Kawaguchi, Joe Fialli See Also:     Serialized Form",1,0,1,0,0,0,1,0,0,0,0,0
"Set the content model and attributes of this xml element.  When this property is set to null, isNil() must by true. Details of constraint are described at isNil().  See Also: isTypeSubstituted()",1,0,1,0,0,0,1,0,0,0,0,0
"Overrides: getCause in class java.lang.Throwable",0,0,0,0,0,0,0,0,0,0,0,0
"Get the JAXP 1.3 Schema object being used to perform marshal-time validation. If there is no Schema set on the marshaller, then this method will return null indicating that marshal-time validation will not be performed.  Returns: the Schema object being used to perform marshal-time validation or null if not present. Throws: UnsupportedOperationException - could be thrown if this method is invoked on an Marshaller created from a JAXBContext referencing JAXB 1.0 mapped classes Since: JAXB2.0",1,0,0,0,0,0,0,0,0,0,0,1
"This event indicates that a problem was encountered resolving an ID/IDREF.  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc.         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems, Inc. See Also:     Validator, ValidationEventHandler",1,0,0,0,0,0,0,0,0,0,0,0
"This event indicates that a problem was encountered while converting a  string from the XML data into a value of the target Java data type.  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc.         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems, Inc. See Also:     ValidationEvent, ValidationEventHandler, Unmarshaller",1,0,0,0,0,0,0,0,0,0,0,0
"This event indicates that a problem was encountered while converting data  from the Java content tree into its lexical representation.  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc.         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems, Inc. See Also:     ValidationEvent, ValidationEventHandler, Marshaller",0,1,0,0,0,0,0,0,0,0,0,0
"Construct a TypeConstraintException with the specified detail message. The errorCode and linkedException will default to null.  Parameters: message - a description of the exception",1,0,0,0,0,0,0,0,0,0,0,1
"Add a linked Exception.  Parameters: exception - the linked Exception (A null value is permitted and indicates that the linked exception does not exist or is unknown).",1,0,0,0,0,0,0,0,0,0,0,0
"This exception indicates that an error has occurred while performing an  unmarshal operation that prevents the JAXB Provider from completing the  operation.  The ValidationEventHandler can cause this exception to be thrown during the  unmarshal operations. See  ValidationEventHandler.handleEvent(ValidationEvent).  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc. See Also:     JAXBException, Unmarshaller, ValidationEventHandler, Serialized Form",0,0,0,0,0,0,1,0,0,0,1,0
"Callback method invoked before unmarshalling into target.  This method is invoked immediately after target was created and before the unmarshalling of this object begins. Note that if the class of target defines its own beforeUnmarshal method, the class specific callback method is invoked before this method is invoked.  Parameters: target - non-null instance of JAXB mapped class prior to unmarshalling into it. parent - instance of JAXB mapped class that will eventually reference target. null when target is root element.",1,0,0,0,0,0,1,0,0,0,0,0
"A basic event handler interface for validation errors.  If an application needs to implement customized event handling, it must  implement this interface and then register it with either the Unmarshaller , the Validator, or the Marshaller. The JAXB Provider will then report  validation errors and warnings encountered during the unmarshal, marshal,  and validate operations to these event handlers.  If the handleEvent method throws an unchecked runtime exception, the JAXB  Provider must treat that as if the method returned false, effectively  terminating whatever operation was in progress at the time (unmarshal,  validate, or marshal).  Modifying the Java content tree within your event handler is undefined by  the specification and may result in unexpected behaviour.  Failing to return false from the handleEvent method after encountering a  fatal error is undefined by the specification and may result in unexpected  behavior.  Default Event Handler      See: Validator javadocs  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc.         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems, Inc. See Also:     Unmarshaller, Validator, Marshaller, ValidationEvent,      ValidationEventCollector",1,0,1,1,0,1,1,0,0,0,0,0
"Encapsulate the location of a ValidationEvent.  The ValidationEventLocator indicates where the ValidationEvent occurred.  Different fields will be set depending on the type of validation that was  being performed when the error or warning was detected. For example,  on-demand validation would produce locators that contained references to  objects in the Java content tree while unmarshal-time validation would  produce locators containing information appropriate to the source of the  XML data (file, url, Node, etc).  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc.         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems, Inc. See Also:     Validator, ValidationEvent",1,1,0,0,0,0,0,0,0,0,0,0
"Converts an element (and its descendants) from/to DOM (or similar)  representation.  Implementations of this interface will be used in conjunction with  XmlAnyElement annotation to map an element of XML into a representation of  infoset such as W3C DOM.  Implementations hide how a portion of XML is converted into/from such  DOM-like representation, allowing JAXB providers to work with arbitrary  such library.  This interface is intended to be implemented by library writers and  consumed by JAXB providers. None of those methods are intended to be called  from applications.  Since:     JAXB2.0 Author:     Kohsuke Kawaguchi",1,0,0,1,0,0,0,0,0,0,0,0
"Used by XmlAccessorOrder to control the ordering of properties and fields  in a JAXB bound class.  Since:     JAXB2.0 Author:     Sekhar Vajjhala, Sun Microsystems, Inc. See Also:     XmlAccessorOrder",0,0,0,1,0,0,1,0,0,0,0,0
"Maps a JavaBean property to a map of wildcard attributes.  Usage  The @XmlAnyAttribute annotation can be used with the following program  elements:      * JavaBean property     * non static, non transient field  See Package Specification in javax.xml.bind.package javadoc for  additional common information.  The usage is subject to the following constraints:     * At most one field or property in a class can be annotated with        @XmlAnyAttribute.     * The type of the property or the field must java.util.Map  While processing attributes to be unmarshalled into a value class, each  attribute that is not statically associated with another JavaBean property,  via XmlAttribute, is entered into the wildcard attribute map represented by  Map<QName,Object>. The attribute QName is the map's key. The key's value is  the String value of the attribute.  Since:     JAXB2.0 Author:     Kohsuke Kawaguchi, Sun Microsystems, Inc.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,1,1,0,1,0,0,0,0
"Used in XmlElementDecl\#scope() to signal that the declaration is in the  global scope.",0,0,0,1,0,0,0,0,0,0,0,0
"Maps a JavaBean property to a XML element derived from property's type.  Usage  @XmlElementRef annotation can be used with a JavaBean property or from  within XmlElementRefs  This annotation dynamically associates an XML element name with the  JavaBean property. When a JavaBean property is annotated with XmlElement,  the XML element name is statically derived from the JavaBean property name.  However, when this annotation is used, the XML element name is derived from  the instance of the type of the JavaBean property at runtime.   XML Schema substitution group support  XML Schema allows a XML document author to use XML element names that were  not statically specified in the content model of a schema using  substitution groups. Schema derived code provides support for substitution  groups using an element property, (section 5.5.5, Element Property of  JAXB 2.0 specification). An element property method signature is of the  form:   public void setTerm(JAXBElement<? extends Operator>); public JAXBElement<? extends Operator> getTerm();   An element factory method annotated with XmlElementDecl is used to create a  JAXBElement instance, containing an XML element name. The presence of  @XmlElementRef annotation on an element property indicates that the element  name from JAXBElement instance be used instead of deriving an XML element  name from the JavaBean property name.  The usage is subject to the following constraints:      * If the collection item type (for collection property) or property       type (for single valued property) is JAXBElement, then        @XmlElementRef}.name() and @XmlElementRef.namespace() must point an       element factory method with an @XmlElementDecl annotation in a class       annotated with @XmlRegistry (usually ObjectFactory class generated by       the schema compiler) :           o @XmlElementDecl.name() must equal @XmlElementRef.name()           o @XmlElementDecl.namespace() must equal             @XmlElementRef.namespace().     * If the collection item type (for collection property) or property       type (for single valued property) is not JAXBElement, then the type       referenced by the property or field must be annotated with        XmlRootElement.     * This annotation can be used with the following annotations:        XmlElementWrapper, XmlJavaTypeAdapter.  See Package Specification in javax.xml.bind.package javadoc for  additional common information.  Example 1: Ant Task Example  The following Java class hierarchy models an Ant build script. An Ant task  corresponds to a class in the class hierarchy. The XML element name of an  Ant task is indicated by the @XmlRootElement annotation on its  corresponding class.   @XmlRootElement(name=target) class Target { // The presence of @XmlElementRef indicates that the XML // element name will be derived from the @XmlRootElement // annotation on the type (for e.g. jar for JarTask). @XmlElementRef List<Task> tasks; }  abstract class Task { }  @XmlRootElement(name=jar) class JarTask extends Task { ... }  @XmlRootElement(name=javac) class JavacTask extends Task { ... }  <!-- XML Schema fragment --> <xs:element name=target type=Target> <xs:complexType name=Target> <xs:sequence> <xs:choice maxOccurs=unbounded> <xs:element ref=jar> <xs:element ref=javac> </xs:choice> </xs:sequence> </xs:complexType>    Thus the following code fragment:   Target target = new Target(); target.tasks.add(new JarTask()); target.tasks.add(new JavacTask()); marshal(target);   will produce the following XML output:     ....   ....     It is not an error to have a class that extends Task that doesn't have  XmlRootElement. But they can't show up in an XML instance (because they  don't have XML element names).  Example 2: XML Schema Susbstitution group support  The following example shows the annotations for XML Schema substitution  groups. The annotations and the ObjectFactory are derived from the schema.   @XmlElement class Math { //  The value of type()is //  JAXBElement.class , which indicates the XML //  element name ObjectFactory - in general a class marked //  with @XmlRegistry. (See ObjectFactory below) // //  The name() is operator, a pointer to a // factory method annotated with a //  XmlElementDecl with the name operator. Since //  operator is the head of a substitution group that //  contains elements add and sub elements, operator //  element can be substituted in an instance document by //  elements add or sub. At runtime, JAXBElement //  instance contains the element name that has been //  substituted in the XML document. // @XmlElementRef(type=JAXBElement.class,name=operator) JAXBElement<? extends Operator> term; }  @XmlRegistry class ObjectFactory { @XmlElementDecl(name=operator) JAXBElement<Operator> createOperator(Operator o) {...} @XmlElementDecl(name=add,substitutionHeadName=operator) JAXBElement<Operator> createAdd(Operator o) {...} @XmlElementDecl(name=sub,substitutionHeadName=operator) JAXBElement<Operator> createSub(Operator o) {...} }  class Operator { ... }   Thus, the following code fragment   Math m = new Math(); m.term = new ObjectFactory().createAdd(new Operator()); marshal(m);   will produce the following XML output:   <math> <add>...</add> </math>   Since:     JAXB2.0 Author:         * Kohsuke Kawaguchi, Sun Microsystems,Inc.         * Sekhar Vajjhala, Sun Microsystems, Inc. See Also:     XmlElementRefs  Optional Element Summary  java.lang.String 	name              java.lang.String 	namespace           This parameter and name() are used to determine the XML element  for the JavaBean property.  boolean 	required           Customize the element declaration to be required.  java.lang.Class 	type           The Java type being referenced.     type   public abstract java.lang.Class type      The Java type being referenced.      If the value is DEFAULT.class, the type is inferred from the the type     of the JavaBean property.      Default:         javax.xml.bind.annotation.XmlElementRef.DEFAULT.class   namespace   public abstract java.lang.String namespace      This parameter and name() are used to determine the XML element for the     JavaBean property.      If type() is JAXBElement.class , then namespace() and name() point to a     factory method with XmlElementDecl. The XML element name is the element     name from the factory method's XmlElementDecl annotation or if an     element from its substitution group (of which it is a head element) has     been substituted in the XML document, then the element name is from the      XmlElementDecl on the substituted element.      If type() is not JAXBElement.class, then the XML element name is the     XML element name statically associated with the type using the     annotation XmlRootElement on the type. If the type is not annotated     with an XmlElementDecl, then it is an error.      If type() is not JAXBElement.class, then this value must be .      Default:            name   public abstract java.lang.String name      See Also:         namespace()     Default:         \#\#default   required   public abstract boolean required      Customize the element declaration to be required.      If required() is true, then Javabean property is mapped to an XML     schema element declaration with minOccurs=1. maxOccurs is 1 for a     single valued property and unbounded for a multivalued property.      If required() is false, then the Javabean property is mapped to XML     Schema element declaration with minOccurs=0. maxOccurs is 1 for a     single valued property and unbounded for a multivalued property.      For compatibility with JAXB 2.1, this property defaults to true,     despite the fact that XmlElement\#required() defaults to false.      Since:         2.2     Default:         true Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,1,0,0,1,1,1,1,0,0
"Generates a wrapper element around XML representation. This is primarily  intended to be used to produce a wrapper XML element around collections.  The annotation therefore supports two forms of serialization shown below.   //Example: code fragment int[] names;  // XML Serialization Form 1 (Unwrapped collection) <names> ... </names> <names> ... </names>  // XML Serialization Form 2 ( Wrapped collection ) <wrapperElement> <names> value-of-item </names> <names> value-of-item </names> .... </wrapperElement>   The two serialized XML forms allow a null collection to be represented  either by absence or presence of an element with a nillable attribute.  Usage  The @XmlElementWrapper annotation can be used with the following program  elements:      * JavaBean property     * non static, non transient field  The usage is subject to the following constraints:      * The property must be a collection property     * This annotation can be used with the following annotations:        XmlElement, XmlElements, XmlElementRef, XmlElementRefs,        XmlJavaTypeAdapter       .  See Package Specification in javax.xml.bind.package javadoc for  additional common information.  Since:     JAXB2.0 Author:         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Sekhar Vajjhala, Sun Microsystems, Inc. See Also:     XmlElement, XmlElements, XmlElementRef, XmlElementRefs  Optional Element Summary  java.lang.String 	name           Name of the XML wrapper element.  java.lang.String 	namespace           XML target namespace of the XML wrapper element.  boolean 	nillable           If true, the absence of the collection is represented by using  xsi:nil='true'.  boolean 	required           Customize the wrapper element declaration to be required.     name   public abstract java.lang.String name      Name of the XML wrapper element. By default, the XML wrapper element     name is derived from the JavaBean property name.      Default:         \#\#default   namespace   public abstract java.lang.String namespace      XML target namespace of the XML wrapper element.      If the value is \#\#default, then the namespace is determined as     follows:         1. If the enclosing package has XmlSchema annotation, and its            elementFormDefault is QUALIFIED, then the namespace of the           enclosing class.        2. Otherwise  (which produces unqualified element in the default           namespace.      Default:         \#\#default   nillable   public abstract boolean nillable      If true, the absence of the collection is represented by using      xsi:nil='true'. Otherwise, it is represented by the absence of the     element.      Default:         false   required   public abstract boolean required      Customize the wrapper element declaration to be required.      If required() is true, then the corresponding generated XML schema     element declaration will have minOccurs=1, to indicate that the     wrapper element is always expected.      Note that this only affects the schema generation, and not the     unmarshalling or marshalling capability. This is simply a mechanism to     let users express their application constraints better.      Since:         JAXB 2.1     Default:         false Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,1,0,0,0,0,1,0,0,0
"Marks a class that has XmlElementDecls.  Since:     JAXB 2.0 Author:         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Sekhar Vajjhala, Sun Microsystems, Inc. See Also:     XmlElementDecl  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,0,0,0,0,0,0,0,0,0
"Prevents the mapping of a JavaBean property/type to XML representation.  The @XmlTransient annotation is useful for resolving name collisions  between a JavaBean property name and a field name or preventing the mapping  of a field/property. A name collision can occur when the decapitalized  JavaBean property name and a field name are the same. If the JavaBean  property refers to the field, then the name collision can be resolved by  preventing the mapping of either the field or the JavaBean property using  the @XmlTransient annotation.  When placed on a class, it indicates that the class shouldn't be mapped to  XML by itself. Properties on such class will be mapped to XML along with  its derived classes, as if the class is inlined.  Usage  The @XmlTransient annotation can be used with the following program  elements:      * a JavaBean property     * field     * class  @XmlTransientis mutually exclusive with all other JAXB defined annotations.  See Package Specification in javax.xml.bind.package javadoc for  additional common information.  Example: Resolve name collision between JavaBean property and field name   // Example: Code fragment public class USAddress {  // The field name name collides with the property name // obtained by bean decapitalization of getName() below @XmlTransient public String name;  String getName() {..}; String setName() {..}; }   <!-- Example: XML Schema fragment --> <xs:complexType name=USAddress> <xs:sequence> <xs:element name=name type=xs:string/> </xs:sequence> </xs:complexType>   Since:     JAXB2.0 Author:     Sekhar Vajjhala, Sun Microsystems, Inc.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,0,1,0,0,1,1,1,0,0,0
"Used in XmlType\#factoryClass() to signal that either factory mehod is not  used or that it's in the class with this XmlType itself.",0,0,0,0,0,0,0,0,0,0,0,0
"XmlAdapter for xs:hexBinary.  This XmlAdapter binds byte[] to the hexBinary representation in XML.  Since:     JAXB 2.0 Author:     Kohsuke Kawaguchi",1,0,0,0,0,0,0,0,0,0,0,0
"Description copied from class: XmlAdapter Convert a value type to a bound type.  Specified by: unmarshal in class XmlAdapter<java.lang.String,byte[]> Parameters: s - The value to be converted. Can be null.",1,0,0,0,0,0,0,0,0,0,0,0
"XmlAdapter to handle xs:normalizedString.  This adapter removes leading and trailing whitespaces, then replace any  tab, CR, and LF by a whitespace character ' '.  Since:     JAXB 2.0 Author:     Kohsuke Kawaguchi",1,0,0,0,0,0,1,0,0,0,0,0
"Enable JAXB marshalling to optimize storage of binary data.  This API enables an efficient cooperative creation of optimized binary data  formats between a JAXB marshalling process and a MIME-based package  processor. A JAXB implementation marshals the root body of a MIME-based  package, delegating the creation of referenceable MIME parts to the  MIME-based package processor that implements this abstraction.  XOP processing is enabled when isXOPPackage() is true. See  addMtomAttachment(DataHandler, String, String) for details.  WS-I Attachment Profile 1.0 is supported by  addSwaRefAttachment(DataHandler) being called by the marshaller for each  JAXB property related to {http://ws-i.org/profiles/basic/1.1/xsd}swaRef.  Since:     JAXB 2.0 Author:     Marc Hadley, Kohsuke Kawaguchi, Joseph Fialli See Also:     Marshaller\#setAttachmentMarshaller(AttachmentMarshaller), XML-binary     Optimized Packaging, WS-I Attachments Profile Version 1.0.",1,0,0,0,0,0,0,0,0,0,0,0
"JAXB 1.0 only default validation event handler. This is the default handler  for all objects created from a JAXBContext that is managing schema-derived  code generated by a JAXB 1.0 binding compiler.  This handler causes the unmarshal and validate operations to fail on the  first error or fatal error.  This handler is not the default handler for JAXB mapped classes following  JAXB 2.0 or later versions. Default validation event handling has changed  and is specified in Unmarshaller and Marshaller.  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc. See Also:     Unmarshaller, Validator, ValidationEventHandler",1,0,0,0,0,0,1,0,0,1,0,0
"Description copied from interface: ValidationEventLocator Return the byte offset if available  Specified by: getOffset in interface ValidationEventLocator Returns: the byte offset into the input source or -1 if unavailable See Also: ValidationEventLocator.getOffset()",1,0,0,0,0,0,0,0,0,0,0,0
"ValidationEventHandler implementation that collects all events.  To use this class, create a new instance and pass it to the setEventHandler  method of the Validator, Unmarshaller, Marshaller class. After the call to  validate or unmarshal completes, call the getEvents method to retrieve all  the reported errors and warnings.  Since:     JAXB1.0 Author:         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Ryan Shoemaker, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems, Inc. See Also:     Validator, ValidationEventHandler, ValidationEvent,      ValidationEventLocator",0,0,0,0,0,0,1,1,0,0,0,0
"Provides information about the capabilities of a JAXR provider.  Author:     Farrukh S. Najmi",1,0,0,0,0,0,0,0,0,0,0,0
"This is the abstract base class for factory classes for creating a JAXR  connection. A JAXR ConnectionFactory object is configured in a  provider-specific way to create connections with registry providers.   Looking Up a ConnectionFactory Using the JNDI API  The preferred way for a client to look up a JAXR ConnectionFactory is  within the Java Naming and Directory InterfaceTM (JNDI) API. A  ConnectionFactory object is registered with a naming service in a provider  specific way, such as one based on the JNDI API. This registration  associates the ConnectionFactory object with a logical name. When an  application wants to establish a connection with the provider associated  with that ConnectionFactory object, it does a lookup, providing the logical  name. The application can then use the ConnectionFactory object that is  returned to create a connection to the messaging provider.   Looking Up a ConnectionFactory Without Using the JNDI API  The JAXR API provides an alternative way to look up a JAXR  ConnectionFactory that does not require the use of the JNDI API. This is  done using the newInstance static method on the abstract class  ConnectionFactory provided in the JAXR API. The newInstance method returns  a JAXR ConnectionFactory. The client may indicate which factory class  should be instantiated by the newInstance method by defining the system  property javax.xml.registry.ConnectionFactoryClass. If this property is not  set, the JAXR provider must return a default ConnectionFactory instance.  Author:     Farrukh S. Najmi See Also:     Connection",1,0,1,0,0,0,1,1,0,0,0,0
"A RegistryException that occurs during a find action.  Author:     Farrukh S. Najmi See Also:     Serialized Form",0,0,0,0,0,0,1,0,0,0,0,0
" Maps to UDDI combineCategoryBags. Required for JAXR UDDI providers, optional for all others.  See Also: Constant Field Values ",0,0,1,0,0,0,0,0,0,0,0,0
"This exception is thrown when a JAXR client attempts to invoke an API  method that is not valid for some reason.  Author:     Farrukh S. Najmi See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Returns the unique id for the request that generated this response.  Capability Level: 0  Returns: the request id Throws: JAXRException - If the JAXR provider encounters an internal error",1,0,0,0,0,0,0,0,0,0,0,0
" Constant representing the javax.xml.registry.infomodel.PersonName interface.  See Also: LifeCycleManager.createObject, Constant Field Values ",0,0,0,1,0,0,0,0,0,0,0,0
" Constant representing the javax.xml.registry.infomodel.TelephoneNumber interface.  See Also: LifeCycleManager.createObject, Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"This is the common base class for all Exceptions that are detected on the  registry provider side rather than the JAXR client side.  Author:     Farrukh S. Najmi See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0
"Constructs a JAXRException object with the given String as the reason for the exception being thrown.  Parameters: reason - a description of what caused the exception",1,0,0,0,0,0,0,0,0,0,0,1
"A RegistryObject instance may be associated with zero or more  RegistryObject instances. The information model defines an Association  interface, an instance of which may be used to associate any two  RegistryObject instances.   Example of an Association  One example of such an association is between two ClassificationScheme  instances, where one ClassificationScheme supersedes the other  ClassificationScheme as shown in Figure 1. This may be the case when a new  version of a ClassificationScheme is submitted. In Figure 1, we see how an  Association is defined between a new version of the NAICS  ClassificationScheme and an older version of the NAICS  ClassificationScheme.  [Example of RegistryObject Association] Figure 1. Example of RegistryObject Association   Source and Target Objects  An Association instance represents an association between a source  RegistryObject and a target RegistryObject. These are referred to as  sourceObject and targetObject for the Association instance. It is important  which object is the sourceObject and which is the targetObject as it  determines the directional semantics of an Association. In the example in  Figure 1, it is important to make the newer version of NAICS  ClassificationScheme be the sourceObject and the older version of NAICS be  the targetObject because the associationType implies that the sourceObject  supersedes the targetObject (and not the other way around).   Association Types  Each Association must have an associationType attribute that identifies the  type of that association. The associationType attribute is a reference to  an enumeration Concept as defined by the predefined associationType  ClassificationScheme in the JAXR specification. Our example uses the  pre-defined associationType Concept named Supersedes.   Intramural Associations  A common use case for the Association interface is when a User u creates  an Association a between two RegistryObjects o1 and o2 where  association a and RegistryObjects o1 and o2 are objects that were  created by the same User u. This is the simplest use case where the  association is between two objects that are owned by same User that is  defining the Association. Such associations are referred to as intramural  associations. Figure 2 extends the previous example in Figure 1 for the  intramural association case.  [Example of Intramural Association] Figure 2. Example of Intramural Association   Extramural Association  The information model also allows a more sophisticated use case where a  User u1 creates an Association a between two RegistryObjects o1 and  o2 where association a is owned by User u1, but RegistryObjects o1  and o2 are owned by User u2 and User u3 respectively. In this use  case the Association is being defined where either or both objects that are  being associated are owned by a User different from the User defining the  Association. Such associations are referred to as extramural associations.  The Association interface provides a convenience method called isExtramural  that returns true if the Association instance is an extramural Association.  Figure 3 extends the previous example in Figure 1 for the extramural  association case. Note that it is possible for an extramural association to  have two distinct Users rather than three distinct Users as shown in Figure  3. In such case, one of the two users owns two of the three objects  involved (Association, sourceObject and targetObject).  [Example of Extramural Association] Figure 3. Example of Extramural Association   Confirmation of an Association  An association may need to be confirmed by the parties whose objects are  involved in that Association. This section describes the semantics of  confirmation of an association by the parties involved.   Confirmation of Intramural Associations  Intramural associations may be viewed as declarations of truth and do not  require any explicit steps to confirm that Association as being true. In  other words, intramural associations are implicitly considered be  confirmed.   Confirmation of Extramural Associations  Extramural associations may be viewed as a unilateral assertion that may  not be viewed as truth until it has been confirmed by the other  (extramural) parties (Users u2 and u3 in example). The  confirmAssociation method on the BusinessLifeCycleManager interface may be  called by the extramural parties that own the sourceObject or targetObject.   Visibility of Unconfirmed Associations  Extramural associations require each extramural party to confirm the  assertion being made by the extramural Association before the Association  is visible to 3rd parties that are not involved in the Association. This  ensures that unconfirmed Associations are not visible to 3rd party registry  clients.   Possible Confirmation States  Assume the most general case where there are three distinct User instances  as shown in Figure 23 for an extramural Association. The extramural  Association needs to be confirmed by both the other (extramural) parties  (Users u2 and u3 in example) in order to be fully confirmed. The  methods isConfirmedBySourceOwner and isConfiremedByTargetOwner in the  Association interface provide access to confirmation state for both the  sourceObject and targetObject. A third convenience method called  isConfirmed provides a way to determine whether the Association is fully  confirmed or not. So there are the following four possibilities related to  confirmation state of an extramural Association:     * The Association is confirmed neither by the owner of the sourceObject       nor is it confirmed by owner of targetObject.     * The Association is confirmed by the owner of the sourceObject but it       is not confirmed by owner of targetObject.     * The Association is not confirmed by the owner of the sourceObject but       it is confirmed by owner of targetObject.     * The Association is confirmed by the owner of the sourceObject and it       is confirmed by owner of targetObject. This is the only state where       the Association is fully confirmed.  Author:     Farrukh S. Najmi See Also:     RegistryObject",1,1,0,0,0,1,1,1,0,0,0,0
"AuditableEvent instances provide a long term record of events that effect a  change of state in a RegistryObject. Such events are usually a result of a  client initiated request. AuditableEvent instances are generated by the  registry service to log such events.  Often such events effect a change in the life cycle of a RegistryObject.  For example a client request could Create, Update, Deprecate or Delete a  RegistryObject. No AuditableEvent is created for requests that do not alter  the state of a RegistryObject. Specifically, read-only requests do not  generate an AuditableEvent. No AuditableEvent is generated for a  RegistryObject when it is classified, assigned to a Package or associated  with another Object.  A RegistryObject is associated with an ordered Collection of AuditableEvent  instances that provide a complete audit trail for that Object.  Author:     Farrukh S. Najmi See Also:     RegistryObject",1,0,0,0,0,0,1,1,0,0,0,0
"Gets the value (usually a code in a taxonomy) associated with this Concept.  Capability Level: 0  Returns: the value (usually a taxonomy value) associated with this Concept Throws: JAXRException - If the JAXR provider encounters an internal error",1,0,0,0,0,0,0,0,0,0,0,1
"ExternalLink instances model a named URI to content that may reside outside  the registry. RegistryObject may be associated with any number of  ExternalLinks to annotate a RegistryObject with external links to external  content.  Consider the case where a Submitting Organization submits a repository item  (e.g. a DTD) and wants to associate some external content to that object  (e.g. the Submitting Organization's home page). The ExternalLink enables  this capability.  Author:     Farrukh S. Najmi See Also:     RegistryObject",1,1,0,0,0,0,0,0,0,0,0,0
"Represents a unique key that identifies a RegistryObject. Must be a DCE 128  UUID.  Author:     Farrukh S. Najmi See Also:     RegistryObject",1,0,0,0,0,0,1,0,0,0,0,0
"This interface is used as a simple wrapper interface that associates a  String with its Locale. The interface is needed in the InternationalString  interface where a Collection of LocalizedString instances are kept. Each  LocalizedString instance has a Locale and a String instance.  Author:     Farrukh S. Najmi See Also:     InternationalString",0,0,0,1,0,0,1,0,0,0,0,0
"Sets the type of address (for example, headquarters) as a String.  Capability Level: 0  Parameters: type - the type for this PostalAddress. This is an arbitrary String (e.g. Home, Office) Throws: JAXRException - If the JAXR provider encounters an internal error",1,0,1,0,0,0,0,0,0,0,0,0
"Adds specified Classifications to this object. Silently replaces the classifiedObject in Classifications with reference to this object.  Capability Level: 0  Parameters: classifications - the Collection of Classifications being added Throws: JAXRException - If the JAXR provider encounters an internal error",1,0,0,0,0,0,0,0,0,0,0,1
"Adds specified ExternalIdentifier as an external identifier to this object. Silently replaces the registryObject in ExternalIdentifier with reference to this object.  Capability Level: 0  Parameters: externalIdentifier - the ExternalIdentifier being added Throws: JAXRException - If the JAXR provider encounters an internal error",1,0,0,1,0,0,0,0,0,0,0,1
"Gets the object type that best describes the RegistryObject.  Capability Level: 1 This method must throw UnsupportedCapabilityException in lower capability levels.  Returns: the object type as a Concept within the pre-defined ClassificationScheme named ObjectType Throws: JAXRException - If the JAXR provider encounters an internal error",1,0,1,0,0,0,0,0,0,0,0,0
"Gets all children ServiceBindings.  Capability Level: 0  Returns: Collection of ServiceBinding instances. The Collection may be empty but not null. Throws: JAXRException - If the JAXR provider encounters an internal error See Also: ServiceBinding",0,0,0,0,0,0,0,0,0,0,0,0
"A SpecificationLink provides the linkage between a ServiceBinding and one  of its technical specifications that describes how to use the service using  the ServiceBinding. For example, a ServiceBinding may have a  SpecificationLink instance that describes how to access the service using a  technical specification in the form of a WSDL document or a CORBA IDL  document. It serves the same purpose as the union of the tModelInstanceInfo  and instanceDetails structures in UDDI.  Author:     Farrukh S. Najmi See Also:     Concept",1,0,0,1,0,0,0,0,0,0,0,0
"Sets any usage parameters. Each parameter is a String  Capability Level: 0  Parameters: usageParameters - the Collection of usage parameter Strings Throws: JAXRException - If the JAXR provider encounters an internal error",0,0,1,0,0,0,0,0,0,0,0,1
"Sets the various telephone numbers for this user.  Capability Level: 0  Parameters: phoneNumbers - the Collection of TelephoneNumbers to be set Throws: JAXRException - If the JAXR provider encounters an internal error",1,0,0,0,0,0,0,0,0,0,0,0
"The javax.xml.rpc.Call interface provides support for the dynamic  invocation of a service endpoint. The javax.xml.rpc.Service interface acts  as a factory for the creation of Call instances.  Once a Call instance is created, various setter and getter methods may be  used to configure this Call instance.  Version:     1.0 Author:     Rahul Sharma",1,0,0,0,0,0,0,1,0,0,0,0
"Constants used in JAX-RPC for namespace prefixes and URIs  Version:     1.0 Author:     Rahul Sharma",0,0,0,0,0,0,0,0,0,0,0,0
" Nameapace URI for SOAP 1.1 Encoding  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
" Returns a String describing this ParameterMode object.  Overrides: toString in class java.lang.Object ",0,0,0,0,0,0,0,0,0,0,0,1
"The javax.xml.rpc.encoding.DeserializerFactory is a factory of  deserializers. A DeserializerFactory is registered with a TypeMapping  instance as part of the TypeMappingRegistry.  Version:     1.0 Author:     Rahul Sharma See Also:     Serializer",0,0,0,0,0,0,0,1,0,0,0,1
"The javax.xml.rpc.encoding.Serializer interface defines the base interface  for serializers. A Serializer converts a Java object to an XML  representation using a specific XML processing mechanism and based on the  specified type mapping and encoding style.  Version:     1.0 Author:     Rahul Sharma",1,1,0,0,0,0,0,0,0,0,0,0
" The name of the xsd:hexBinary type. ",0,0,0,0,0,0,0,0,0,0,0,1
"The javax.xml.rpc.handler.GenericHandler class implements the Handler  interface. SOAP Message Handler developers should typically subclass  GenericHandler class unless the Handler class needs another class as a  superclass.  The GenericHandler class is a convenience abstract class that makes writing  Handlers easy. This class provides default implementations of the lifecycle  methods init and destroy and also different handle methods. A Handler  developer should only override methods that it needs to specialize as part  of the derived Handler implementation class.  Version:     1.0 Author:     Rahul Sharma",1,0,1,1,0,0,1,0,0,0,0,0
"Gets the Handler configuration  Returns: Returns empty Map if no configuration map has been set; otherwise returns the set configuration map",0,0,0,0,0,0,0,0,0,0,0,1
"The interface javax.xml.rpc.soap.SOAPMessageContext provides access to the  SOAP message for either RPC request or response. The  javax.xml.soap.SOAPMessage specifies the standard Java API for the  representation of a SOAP 1.1 message with attachments.  Version:     1.0 Author:     Rahul Sharma See Also:     SOAPMessage",1,0,0,0,0,0,1,0,0,0,0,0
"Sets the SOAPMessage in this message context  Parameters: message - SOAP message Throws: JAXRPCException - If any error during the setting of the SOAPMessage in this message context java.lang.UnsupportedOperationException - If this operation is not supported",0,0,0,0,0,0,0,0,0,0,0,1
"The java.xml.rpc.holders.Holder interface represents the base interface for  both standard and generated Holder classes. A generated Holder class is  required to implement this Holder interface.  Version:     1.0 Author:     Rahul Sharma  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: NESTED | FIELD | CONSTR | METHOD 	 DETAIL: FIELD | CONSTR | METHOD Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,1,0,0,0,0
"The javax.xml.rpc.server.ServiceLifecycle defines a lifecycle interface for  a JAX-RPC service endpoint. If the service endpoint class implements the  ServiceLifeycle interface, the servlet container based JAX-RPC runtime  system is required to manage the lifecycle of the corresponding service  endpoint objects.  Version:     1.0 Author:     Rahul Sharma",1,0,0,0,0,0,0,0,0,0,0,0
"The getHttpSession method returns the current HTTP session (as a javax.servlet.http.HTTPSession). When invoked by the service endpoint within a remote method implementation, the getHttpSession returns the HTTP session associated currently with this method invocation. This method returns null if there is no HTTP session currently active and associated with this service endpoint. An endpoint class should not rely on an active HTTP session being always there; the underlying JAX-RPC runtime system is responsible for managing whether or not there is an active HTTP session.  The getHttpSession method throws JAXRPCException if invoked by an non HTTP bound endpoint.  Returns: The HTTP session associated with the current invocation or null if there is no active session. Throws: JAXRPCException - If this method invoked by any non-HTTP bound endpoint See Also: HttpSession",1,0,0,0,0,0,0,0,0,0,0,0
"The SOAPFaultException exception represents a SOAP fault.  The message part in the SOAP fault maps to the contents of faultdetail  element accessible through the getDetail method on the SOAPFaultException.  The method createDetail on the javax.xml.soap.SOAPFactory creates an  instance of the javax.xml.soap.Detail.  The faultstring provides a human-readable description of the SOAP fault.  The faultcode element provides an algorithmic mapping of the SOAP fault.  Refer to SOAP 1.1 and WSDL 1.1 specifications for more details of the SOAP  faults.  Version:     1.0 Author:     Rahul Sharma See Also:     Detail, SOAPFactory.createDetail(), Serialized Form",1,0,0,0,0,0,1,0,0,0,1,1
"Constructor for the SOAPFaultException  Parameters: faultcode - QName for the SOAP faultcode faultstring - faultstring element of SOAP fault faultactor - faultactor element of SOAP fault faultdetail - faultdetail element of SOAP fault See Also: SOAPFactory.createDetail()",0,0,0,0,0,0,0,0,0,0,0,1
"A Web service endpoint.  Endpoints are created using the static methods defined in this class. An  endpoint is always tied to one Binding and one implementor, both set at  endpoint creation time.  An endpoint is either in a published or an unpublished state. The publish  methods can be used to start publishing an endpoint, at which point it  starts accepting incoming requests. Conversely, the stop method can be used  to stop accepting incoming requests and take the endpoint down. Once  stopped, an endpoint cannot be published again.  An Executor may be set on the endpoint in order to gain better control over  the threads used to dispatch incoming requests. For instance, thread  pooling with certain parameters can be enabled by creating a  ThreadPoolExecutor and registering it with the endpoint.  Handler chains can be set using the contained Binding.  An endpoint may have a list of metadata documents, such as WSDL and  XMLSchema documents, bound to it. At publishing time, the JAX-WS  implementation will try to reuse as much of that metadata as possible  instead of generating new ones based on the annotations present on the  implementor.  Since:     JAX-WS 2.0 See Also:     Binding, BindingType, SOAPBinding, Executor",1,0,0,0,0,0,1,1,0,0,0,0
" Standard property: name of WSDL service.  Type: javax.xml.namespace.QName  See Also: Constant Field Values ",0,0,0,0,0,0,0,0,0,0,0,0
"EndpointContext allows multiple endpoints in an application to share any  information. For example, servlet application's war may contain multiple  endpoints and these endpoints can get addresses of each other by sharing  this context. If multiple endpoints share different ports of a WSDL, then  the multiple port addresses can be patched when the WSDL is accessed. It  also allows all endpoints to share any other runtime information.  This needs to be set by using Endpoint\#setEndpointContext before  Endpoint\#publish methods.  Since:     JAX-WS 2.2 Author:     Jitendra Kotamraju",0,0,1,0,0,0,0,1,0,0,0,0
"The ProtocolException class is a base class for exceptions related to a  specific protocol binding. Subclasses are used to communicate protocol  level fault information to clients and may be used on the server to control  the protocol specific fault representation.  Since:     JAX-WS 2.0 See Also:     Serialized Form",0,0,0,1,0,0,0,0,0,0,0,0
"Used to annotate methods in the Service Endpoint Interface with the request  wrapper bean to be used at runtime. The default value of the localName is  the operationName, as defined in WebMethod annotation and the  targetNamespace is the target namespace of the SEI.  When starting from Java this annotation is used resolve overloading  conflicts in document literal mode. Only the className is required in this  case.  Since:     JAX-WS 2.0  Optional Element Summary  java.lang.String 	className           Request wrapper bean name.  java.lang.String 	localName           Element's local name.  java.lang.String 	partName           wsdl:part name for the wrapper part  java.lang.String 	targetNamespace           Element's namespace name.     localName   public abstract java.lang.String localName      Element's local name.      Default:            targetNamespace   public abstract java.lang.String targetNamespace      Element's namespace name.      Default:            className   public abstract java.lang.String className      Request wrapper bean name.      Default:            partName   public abstract java.lang.String partName      wsdl:part name for the wrapper part      Since:         JAX-WS 2.2     Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,0,0,1,0,0,0,0,0,0,0,1
"This feature clarifies the use of the wsdl:binding in a JAX-WS runtime.  This annotation MUST only be used in conjunction the javax.jws.WebService,  WebServiceProvider, WebServiceRef annotations. When used with the  javax.jws.WebService annotation this annotation MUST only be used on the  service endpoint implementation class. When used with a WebServiceRef  annotation, this annotation MUST only be used when a proxy instance is  created. The injected SEI proxy, and endpoint MUST honor the values of the  RespectBinding annotation.  This annotation's behaviour is defined by the corresponding feature  RespectBindingFeature.  Since:     JAX-WS 2.1 See Also:     RespectBindingFeature  Optional Element Summary  boolean 	enabled           Specifies if this feature is enabled or disabled.     enabled   public abstract boolean enabled      Specifies if this feature is enabled or disabled.      Default:         true Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,0,0,0,0,0,0,0,0
"The Response interface provides methods used to obtain the payload and  context of a message sent in response to an operation invocation.  For asynchronous operation invocations it provides additional methods to  check the status of the request. The get(...) methods may throw the  standard set of exceptions and their cause may be a RemoteException or a  WebServiceException that represents the error that occured during the  asynchronous method invocation.  Since:     JAX-WS 2.0",1,0,0,0,0,0,0,0,0,0,0,0
"Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows:  for (Service.Mode c : Service.Mode.values())     System.out.println(c);  Returns: an array containing the constants of this enum type, in the order they are declared",1,0,0,0,0,0,0,0,1,0,0,1
"Creates a Service instance. The created instance is configured with the web service features. The specified WSDL document location and service qualified name MUST uniquely identify a wsdl:service element.  Parameters: wsdlDocumentLocation - URL for the WSDL document location for the service serviceName - QName for the service features - Web Service features that must be configured on the service. If the provider doesn't understand a feature, it must throw a WebServiceException. Throws: WebServiceException - If any error in creation of the specified service. Since: JAX-WS 2.2",1,0,1,0,0,0,0,0,0,0,0,1
"A WebServiceContext makes it possible for a web service endpoint  implementation class to access message context and security information  relative to a request being served. Typically a WebServiceContext is  injected into an endpoint implementation class using the Resource  annotation.  Since:     JAX-WS 2.0 See Also:     Resource",1,0,0,0,0,0,0,1,0,0,0,0
"The WebServiceException class is the base exception class for all JAX-WS  API runtime exceptions.  Since:     JAX-WS 2.0 See Also:     Serialized Form",1,0,0,0,0,0,0,0,0,0,0,0
"The WebServiceRefs annotation allows multiple web service references to be  declared at the class level.  It can be used to inject both service and proxy instances. These injected  references are not thread safe. If the references are accessed by multiple  threads, usual synchronization techinques can be used to support multiple  threads.  There is no way to associate web service features with the injected  instances. If an instance needs to be configured with web service features,  use @WebServiceRef to inject the resource along with its features.  Example: The StockQuoteProvider proxy instance, and the StockQuoteService  service instance are injected using @WebServiceRefs.   @WebServiceRefs({@WebServiceRef(name=service/stockquoteservice, value=StockQuoteService.class), @WebServiceRef(name=service/stockquoteprovider, type=StockQuoteProvider.class, value=StockQuoteService.class}) public class MyClient { void init() { Context ic = new InitialContext(); StockQuoteService service = (StockQuoteService) ic.lookup(java:comp/env/service/stockquoteservice); StockQuoteProvider port = (StockQuoteProvider) ic.lookup(java:comp/env/service/stockquoteprovider); ... } ... }   Since:     2.0 See Also:     WebServiceRef  Required Element Summary  WebServiceRef[] 	value           Array used for multiple web service reference declarations.    Element Detail   value   public abstract WebServiceRef[] value      Array used for multiple web service reference declarations.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,0,1,0,1,0,1,0,0,0
"Gets the URI identifying the binding used by the port being accessed.  Returns: String The binding identifier for the port. See Also: Binding",1,0,0,0,0,0,0,0,0,0,0,0
"Gets headers that have a particular qualified name from the message in the message context. Note that a SOAP message can contain multiple headers with the same qualified name.  Parameters: header - The XML qualified name of the SOAP header(s). context - The JAXBContext that should be used to unmarshall the header allRoles - If true then returns headers for all SOAP roles, if false then only returns headers targetted at the roles currently being played by this SOAP node, see getRoles. Returns: An array of unmarshalled headers; returns an empty array if no message is present in this message context or no headers match the supplied qualified name. Throws: WebServiceException - If an error occurs when using the supplied JAXBContext to unmarshall. The cause of the WebServiceException is the original JAXBException.",1,0,0,0,0,0,1,0,0,0,0,0
" A constant representing the identity of the XML/HTTP binding.  See Also: Constant Field Values ",0,1,0,0,0,0,0,0,0,0,0,0
" A constant representing the identity of the SOAP 1.2 over HTTP binding with MTOM enabled by default.  See Also: Constant Field Values ",1,0,0,0,0,0,0,0,0,0,0,0
"The SOAPFaultException exception represents a SOAP 1.1 or 1.2 fault.  A SOAPFaultException wraps a SAAJ SOAPFault that manages the SOAP-specific  representation of faults. The createFault method of  javax.xml.soap.SOAPFactory may be used to create an instance of  javax.xml.soap.SOAPFault for use with the constructor. SOAPBinding  contains an accessor for the SOAPFactory used by the binding instance.  Note that the value of getFault is the only part of the exception used when  searializing a SOAP fault.  Refer to the SOAP specification for a complete description of SOAP faults.  Since:     JAX-WS 2.0 See Also:     SOAPFault, SOAPBinding.getSOAPFactory(), ProtocolException, Serialized     Form",1,0,0,1,0,0,0,0,0,0,0,0
"Gets the embedded SOAPFault instance.  Returns: javax.xml.soap.SOAPFault SOAP fault element",0,0,0,0,0,0,0,0,0,0,0,0
"Creates a Dispatch instance for use with objects of the user's choosing.  Parameters: portName - Qualified name for the target service endpoint type - The class of object used for messages or message payloads. Implementations are required to support javax.xml.transform.Source and javax.xml.soap.SOAPMessage. mode - Controls whether the created dispatch instance is message or payload oriented, i.e. whether the user will work with complete protocol messages or message payloads. E.g. when using the SOAP protocol, this parameter controls whether the user will work with SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE when type is SOAPMessage. features - A list of WebServiceFeatures to configure on the proxy. Supported features not in the features parameter will have their default values. Returns: Dispatch instance Throws: WebServiceException - If any error in the creation of the Dispatch object or if a feature is enabled that is not compatible with this port or is unsupported. Since: JAX-WS 2.1 See Also: Source, SOAPMessage, WebServiceFeature",1,0,0,0,0,0,0,0,0,0,0,1
"This class encapsulates a HTTP request received and a response to be  generated in one exchange. It provides methods for examining the request  from the client, and for building and sending the response.  A HttpExchange must be closed to free or reuse underlying resources. The  effect of failing to close an exchange is undefined.  Since:     JAX-WS 2.2 Author:     Jitendra Kotamraju",1,0,1,1,0,0,0,0,0,0,0,0
"This class is used to build W3CEndpointReference instances. The intended  use of this clsss is for an application component, for example a factory  component, to create an W3CEndpointReference for a web service endpoint  published by the same Java EE application. It can also be used to create  W3CEndpointReferences for an Java SE based endpoint by providing the  address property.  When creating a W3CEndpointReference for an endpoint that is not published  by the same Java EE application, the address property MUST be specified.  When creating a W3CEndpointReference for an endpoint published by the same  Java EE application, the address property MAY be null but then the  serviceName and endpointName MUST specify an endpoint published by the same  Java EE application.  When the wsdlDocumentLocation is specified it MUST refer to a valid WSDL  document and the serviceName and endpointName (if specified) MUST match a  service and port in the WSDL document.  Since:     JAX-WS 2.1",0,0,1,1,0,0,0,0,0,0,0,0
