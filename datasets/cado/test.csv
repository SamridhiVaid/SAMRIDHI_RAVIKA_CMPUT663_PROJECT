,id,quoteId,elementId,projectId,elementName,text,functionality,concept,directives,purpose,quality,control,structure,patterns,codeExamples,environment,reference,nonInformation,knCount,length,Three class
0,40003,263574,267272,7,System.Windows.Forms.DataGridViewAutoSizeModeEventHandler,"Additional online Documentation: Syntax: public delegate void DataGridViewAutoSizeModeEventHandler( Object sender, DataGridViewAutoSizeModeEventArgs e ) Parameters senderType: System.Object The source of the event.  eType: System.Windows.Forms.DataGridViewAutoSizeModeEventArgs A DataGridViewAutoSizeModeEventArgs that contains the event data. Summary: Represents the method that will handle the AutoSizeRowsModeChanged or RowHeadersWidthSizeModeChanged events of a DataGridView. Remarks: The AutoSizeRowsModeChanged event is raised when the value of the AutoSizeRowsMode property of the DataGridView control changes. The RowHeadersWidthSizeModeChanged event is raised when the value of the RowHeadersWidthSizeMode property changes. When you create a DataGridViewAutoSizeModeEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, information about event-handler delegates, see Events and Delegates. Example: The following code demonstrates how to handle the AutoSizeRowsModeChanged event.",1,0,0,0,0,1,1,1,1,0,0,1,6,152,mixed
1,32521,445288,449032,8,public abstract class SelectorProvider   ,"Service-provider class for selectors and selectable channels.  A selector provider is a concrete subclass of this class that has a  zero-argument constructor and implements the abstract methods specified  below. A given invocation of the Java virtual machine maintains a single  system-wide default provider instance, which is returned by the provider  method. The first invocation of that method will locate the default  provider as specified below.  The system-wide default provider is used by the static open methods of the  DatagramChannel, Pipe, Selector, ServerSocketChannel, and SocketChannel  classes. It is also used by the System.inheritedChannel() method. A program  may make use of a provider other than the default provider by instantiating  that provider and then directly invoking the open methods defined in this  class.  All of the methods in this class are safe for use by multiple concurrent  threads.  Since:     1.4",1,0,0,0,0,1,0,1,0,0,0,1,4,142,mixed
3,33361,456457,460201,8,static final String LANGUAGE," Constant that holds the name of the environment property for specifying the preferred language to use with the service. The value of the property is a colon-separated list of language tags as defined in RFC 1766. If this property is unspecified, the language preference is determined by the service provider.  The value of this constant is java.naming.language.  See Also: addToEnvironment(String, Object), removeFromEnvironment(String), Constant Field Values ",0,0,0,1,0,0,0,0,0,0,1,0,2,69,clean
4,34613,477726,481470,8,public interface DynAnyFactory   ,"DynAny objects can be created by invoking operations on the DynAnyFactory  object. Generally there are only two ways to create a DynAny object:      * invoking an operation on an existing DynAny object     * invoking an operation on a DynAnyFactory object A constructed DynAny object supports operations that enable the creation of  new DynAny objects encapsulating access to the value of some constituent.  DynAny objects also support the copy operation for creating new DynAny  objects. A reference to the DynAnyFactory object is obtained by calling  ORB.resolve_initial_references() with the identifier parameter set to the  string constant DynAnyFactory.  Dynamic interpretation of an any usually involves creating a DynAny object  using create_dyn_any() as the first step. Depending on the type of the any,  the resulting DynAny object reference can be narrowed to a DynFixed,  DynStruct, DynSequence, DynArray, DynUnion, DynEnum, or DynValue object  reference.  Dynamic creation of an any involves creating a DynAny object using  create_dyn_any_from_type_code(), passing the TypeCode associated with the  value to be created. The returned reference is narrowed to one of the  complex types, such as DynStruct, if appropriate. Then, the value can be  initialized by means of invoking operations on the resulting object.  Finally, the to_any operation can be invoked to create an any value from  the constructed DynAny.",1,0,0,0,0,0,1,1,0,0,0,0,3,217,clean
5,39817,251422,255093,7,System.Web.UI.MobileControls.Adapters.HtmlMobileTextWriter.EnterStyle(System.Web.UI.MobileControls.Style),"Additional online Documentation: Summary: Begins a block by using the layout and character formatting from a given style. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,1,0,0,0,0,0,2,40,clean
6,39213,237595,240590,7,System.ServiceModel.Activities.WorkflowService.AllowBufferedReceive,"Additional online Documentation: Syntax: public bool AllowBufferedReceive { get; set; } Property Value Type: System.Boolean true if the workflow service has buffered receive processing enabled for incoming messages; otherwise, false. Summary: Gets or sets a value that indicates whether the workflow service has buffered receive processing enabled for incoming messages. Remarks: The buffered receive feature enables a workflow service to process out-of-order messages without relying on complicated poison message handling.",0,1,0,0,0,0,0,0,0,0,0,1,2,71,mixed
7,33279,455080,458824,8,public RuntimeException getTargetException(),Returns the actual RuntimeException thrown.  Returns: the wrapped RuntimeException.,0,0,0,0,0,0,0,0,0,0,0,0,0,9,
8,38540,225523,228487,7,System.DirectoryServices.Protocols.BerConverter,Additional online Documentation: Syntax: public sealed class BerConverter Summary: The BerConverter class encodes and decodes structured data using basic encoding rules (BER). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,0,0,0,1,0,0,0,0,0,2,47,clean
9,33722,461979,465723,8,public class JFileChooser   ,"JFileChooser provides a simple mechanism for the user to choose a file. For  information about using JFileChooser, see How to Use File Choosers, a  section in The Java Tutorial.  The following code pops up a file chooser for the user's home directory  that sees only .jpg and .gif images:   JFileChooser chooser = new JFileChooser(); FileNameExtensionFilter filter = new FileNameExtensionFilter( JPG & GIF Images, jpg, gif); chooser.setFileFilter(filter); int returnVal = chooser.showOpenDialog(parent); if(returnVal == JFileChooser.APPROVE_OPTION) { System.out.println(You chose to open this file:  + chooser.getSelectedFile().getName()); }   Warning: Swing is not thread safe. For more information see Swing's  Threading Policy.",1,0,0,0,0,0,0,1,1,0,1,0,4,102,clean
10,40126,261481,265177,7,System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs),Additional online Documentation:,0,0,0,0,0,0,1,0,0,0,0,0,1,3,clean
11,38894,235529,238516,7,System.Runtime.Remoting.Channels.SoapClientFormatterSink,"Additional online Documentation: Syntax: public class SoapClientFormatterSink : IClientFormatterSink, IMessageSink, IClientChannelSink, IChannelSinkBase Summary: Provides the implementation for a client formatter sink that uses the SoapFormatter. Remarks: The function of the formatter sink is to generate the necessary headers and serialize the message to the stream. After reaching the formatter sink, the IMessage is forwarded to all sinks in the channel sink chain through the ProcessMessage or AsyncProcessRequest calls. At this stage the message has already been serialized and is provided as information only. Sinks that need to create or modify the message need to be placed in the sink chain before the formatter. This can be achieved by implementing both the IMessageSink and IClientChannelSink interfaces. The formatter sink can be placed in the sink chain later. Property Description includeVersions Specifies whether the formatter will include versioning information. Values are true or false. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,1,1,0,0,0,1,5,166,mixed
12,37657,208354,211280,7,System.Activities.Debugger.VirtualStackFrame,Additional online Documentation: Syntax: public class VirtualStackFrame Summary: Provides a virtual call stack frame for the interpreter. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,0,0,0,1,0,0,0,0,1,3,42,mixed
13,39142,240316,243384,7,System.ServiceModel.WSDualHttpBinding.ReliableSession,Additional online Documentation: Syntax: public ReliableSession ReliableSession { get; set; } Property Value Type: System.ServiceModel.ReliableSession The ReliableSession that provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings. Summary: Gets an object that provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings. Remarks: The reliable session is required for service configured with a WSDualHttpBinding. Example: The following example shows how to get the ReliableSession property.,1,0,0,0,0,0,0,0,0,0,0,1,2,92,mixed
15,34655,479005,482749,8,public interface SYSTEM_EXCEPTION ,"org/omg/PortableInterceptor/SYSTEM_EXCEPTION.java . Generated by the  IDL-to-Java compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl  Monday, April 4, 2011 1:26:21 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0,0,28,
16,32706,449526,453270,8,public InvalidPropertiesFormatException(String message),Constructs an InvalidPropertiesFormatException with the specified detail message.  Parameters: message - the detail message. The detail message is saved for later retrieval by the Throwable.getMessage() method.,0,0,0,0,0,0,1,0,0,0,0,1,2,26,mixed
17,39985,264989,268688,7,System.Windows.Forms.DragAction,"Additional online Documentation: Syntax: [ComVisibleAttribute(true)] public enum DragAction Summary: Specifies how and if a drag-and-drop operation should continue. Remarks: This enumeration is used by QueryContinueDragEventArgs. Example: The following example demonstrates a drag-and-drop operation between two ListBox controls. The example calls the DoDragDrop method when the drag action starts. The drag action starts if the mouse has moved more than SystemInformation.DragSize from the mouse location during the MouseDown event. The IndexFromPoint method is used to determine the index of the item to drag during the MouseDown event. The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, 3dwarro.cur and 3dwno.cur, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the UseCustomCursorsCheck CheckBox is checked. The custom cursors are set in the GiveFeedback event handler. The keyboard state is evaluated in the DragOver event handler for the right ListBox, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the ListBox where the drop would occur is also determined during the DragOver event. If the data to drop is not a String, then the DragEventArgs.Effect is set to DragDropEffects.None. Finally, the status of the drop is displayed in the DropLocationLabel Label. The data to drop for the right ListBox is determined in the DragDrop event handler and the String value is added at the appropriate place in the ListBox. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the QueryContinueDrag event handler. This code excerpt demonstrates using the DragAction enumeration. See the DoDragDrop method for the complete code example.",1,0,0,0,0,0,1,0,1,0,0,0,3,303,clean
18,32705,450166,453910,8,public String getFlags(),Returns the set of flags which contains an unknown flag.  Returns: The flags,1,0,0,0,0,0,0,0,0,0,0,1,2,13,mixed
19,40117,263746,267444,7,System.Windows.Forms.DataGridViewCell.RowIndex,"Additional online Documentation: Syntax: [BrowsableAttribute(false)] public int RowIndex { get; } Property Value Type: System.Int32 The index of the row that contains the cell; -1 if there is no owning row. Summary: Gets the index of the cell's parent row. Remarks: When the RowIndex property returns -1, the cell is either a column header, or the cell's row is shared. For more information about row sharing, see Best Practices for Scaling the Windows Forms DataGridView Control. Example: The following code example illustrates the use of this property.",1,0,0,0,0,0,0,0,1,0,0,0,2,87,clean
20,40027,264037,267735,7,System.Windows.Forms.DataGridViewColumnCollection.CollectionChanged,"Additional online Documentation: Syntax: public event CollectionChangeEventHandler CollectionChanged Summary: Occurs when the collection changes. Remarks: Examples of collection changes include additions or removals of columns. For more information about handling events, see Consuming Events. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CollectionChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type DataGridViewColumnCollection named DataGridViewColumnCollection1. Then ensure that the event handler is associated with the CollectionChanged event.",0,0,0,0,0,0,1,0,1,0,0,1,3,132,mixed
22,33986,466661,470405,8,protected MouseInputListener createMouseInputListener(),"Creates a delegate that implements MouseInputListener. The delegate is added to the corresponding java.awt.Component listener lists at installUI() time. Subclasses can override this method to return a custom MouseInputListener, e.g.  class MyListUI extends BasicListUI { protected MouseInputListener createMouseInputListener() { return new MyMouseInputHandler(); } public class MyMouseInputHandler extends MouseInputHandler { public void mouseMoved(MouseEvent e) { // do some extra work when the mouse moves super.mouseMoved(e); } } }  See Also: BasicListUI.MouseInputHandler, installUI(javax.swing.JComponent)",1,0,0,0,0,0,0,0,1,0,0,0,2,72,clean
23,39051,243944,247022,7,System.ServiceModel.Description.ServiceSecurityAuditBehavior,"Additional online Documentation: Syntax: public sealed class ServiceSecurityAuditBehavior : IServiceBehavior Summary: Specifies the audit behavior of security events. In general, the security events consist of authentication events such as transport, message or negotiate authentication and authorization event. For more information, seeServiceAuthorizationManager. Remarks: The ServiceSecurityAuditBehavior class is used to audit authentication events. When auditing is enabled, either successful or failed authentication attempts (or both) can be audited. The events are written to one of three event logs: application, security, or the default log for the operating system version. The event logs can all be viewed using the Windows Event viewer. Use this class to specify which event log is written to, as well as kinds of authentication events to write. You can also specify whether to suppress audit failures by setting the SuppressAuditFailure property to false (the default is true). For more information about auditing security events for applications, see Auditing Security Events. To specify audit behavior in configuration, use the <serviceSecurityAudit> element. Example: The following code creates an instance of the ServiceHost class and adds a new ServiceSecurityAuditBehavior to its collection of behaviors. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,1,1,0,1,0,6,207,clean
24,38460,223999,226952,7,System.Web.UI.Design.WebControls.DataListDesigner.AutoFormats,Additional online Documentation: Syntax: public override DesignerAutoFormatCollection AutoFormats { get; } Property Value Type: System.Web.UI.Design.DesignerAutoFormatCollection The DesignerAutoFormatCollection associated with this designer. Summary: Gets the DesignerAutoFormatCollection object associated with this designer.,0,0,0,0,0,0,0,0,0,0,1,1,2,32,mixed
25,40188,260027,263720,7,System.Windows.Forms.DataVisualization.Charting.LegendCell,"Additional online Documentation: Syntax: public class LegendCell : ChartNamedElement Summary: Represents a legend cell in a legend item. Remarks: A legend is populated with legend items, which are represented by the LegendItemsCollection. These legend items consist of individual legend cells, which are in turn represented by the LegendCellCollection. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,1,0,0,0,0,1,0,0,0,0,0,2,72,clean
26,34165,471837,475581,8,public abstract static class HTMLDocument.Iterator   ,"An iterator to iterate over a particular type of tag. The iterator is not  thread safe. If reliable access to the document is not already ensured by  the context under which the iterator is being used, its use should be  performed under the protection of Document.render.",1,0,0,0,1,0,1,0,0,0,0,0,3,47,clean
27,38828,234252,237234,7,System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs,Additional online Documentation: Syntax: public class CreateContactCompletedEventArgs : AsyncCompletedEventArgs Summary: Provides qualifying information to a callback method when a CreateContactCompleted event occurs. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,0,0,1,0,0,0,0,0,0,2,46,clean
28,34272,490625,494369,8,public abstract class RuntimeDelegate   ,Implementations of JAX-RS provide a concrete subclass of RuntimeDelegate  and various JAX-RS API methods defer to methods of RuntimeDelegate for  their functionality. Regular users of JAX-RS are not expected to use this  class directly and overriding an implementation of this class with a user  supplied subclass may cause unexpected behavior.,0,0,0,1,0,0,0,0,0,0,0,0,1,53,clean
29,38226,215394,218335,7,System.Data.Linq.DuplicateKeyException,Additional online Documentation: Syntax: public class DuplicateKeyException : InvalidOperationException Summary: Thrown when an attempt is made to add an object to the identity cache by using a key that is already being used. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,0,0,1,0,0,0,0,0,0,2,57,clean
30,33716,464526,468270,8,"public abstract static class RowFilter.Entry<M,I>   ","An Entry object is passed to instances of RowFilter, allowing the filter to  get the value of the entry's data, and thus to determine whether the entry  should be shown. An Entry object contains information about the model as  well as methods for getting the underlying values from the model.  Since:     1.6 See Also:     RowFilter, DefaultRowSorter.setRowFilter(javax.swing.RowFilter)",1,1,0,0,0,0,1,0,0,0,0,0,3,60,clean
31,33629,489537,493281,8,public class ImplicitObjectELResolver   ,"Defines variable resolution behavior for the EL implicit objects defined in  the JSP specification.  The following variables are resolved by this ELResolver, as per the JSP  specification:      * pageContext - the PageContext object.     * pageScope - a Map that maps page-scoped attribute names to their       values.     * requestScope - a Map that maps request-scoped attribute names to       their values.     * sessionScope - a Map that maps session-scoped attribute names to       their values.     * applicationScope - a Map that maps application-scoped attribute names       to their values.     * param - a Map that maps parameter names to a single String parameter       value (obtained by calling ServletRequest.getParameter(String name)).     * paramValues - a Map that maps parameter names to a String[] of all       values for that parameter (obtained by calling        ServletRequest.getParameterValues(String name)).     * header - a Map that maps header names to a single String header value       (obtained by calling HttpServletRequest.getHeader(String name)).     * headerValues - a Map that maps header names to a String[] of all       values for that header (obtained by calling        HttpServletRequest.getHeaders(String)).     * cookie - a Map that maps cookie names to a single Cookie object.       Cookies are retrieved according to the semantics of        HttpServletRequest.getCookies(). If the same name is shared by       multiple cookies, an implementation must use the first one       encountered in the array of Cookie objects returned by the        getCookies() method. However, users of the cookie implicit object       must be aware that the ordering of cookies is currently unspecified       in the servlet specification.     * initParam - a Map that maps context initialization parameter names to       their String parameter value (obtained by calling        ServletContext.getInitParameter(String name)).  Since:     JSP 2.1 See Also:     ELResolver",0,0,0,0,0,0,0,0,0,0,0,0,0,262,
32,32633,447455,451199,8,boolean locatorsUpdateCopy() throws SQLException,Indicates whether updates made to a LOB are made on a copy or directly to the LOB.  Returns: true if updates are made to a copy of the LOB; false if updates are made directly to the LOB Throws: SQLException - if a database access error occurs Since: 1.4,1,0,0,0,0,0,1,0,0,0,0,0,2,47,clean
33,38002,219611,222560,7,System.Data.Common.DbDataSourceEnumerator,Additional online Documentation: Syntax: public abstract class DbDataSourceEnumerator Summary: Provides a mechanism for enumerating all available instances of database servers within the local network. Remarks: This class provides the basis for other strongly typed data source enumerators. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,0,0,0,0,0,0,0,1,0,2,62,clean
34,34358,473957,477701,8,public static final class DatatypeConstants.Field   ,Type-safe enum class that represents six fields of the Duration class.  Since:     1.5,1,0,0,0,0,0,1,0,0,0,0,0,2,13,clean
35,38903,235777,238768,7,System.Runtime.Serialization.CollectionDataContractAttribute,"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class|AttributeTargets.Struct, Inherited = false, AllowMultiple = false)] public sealed class CollectionDataContractAttribute : Attribute Summary: When applied to a collection type, enables custom specification of the collection item elements. This attribute can be applied only to types that are recognized by the DataContractSerializer as valid, serializable collections. Remarks: The CollectionDataContractAttribute is intended to ease interoperability when working with data from non- providers and to control the exact shape of serialized instances. To this end, the ItemName property enables you to control the names of the repeating items inside a collection. This is especially useful when the provider does not use the XML element type name as the array item name, for example, if a provider uses #String# as an element type name instead of the XSD type name #string#. The CollectionDataContractAttribute is also intended to be used with dictionary types to handle keyed collections. Dictionary types are classes that implement either the IDictionary or the IDictionary(Of TKey, TValue) interface, for example, the Dictionary(Of TKey, TValue). Use the KeyName and ValueName properties to set custom names when using the Dictionary(Of TKey, TValue) class. For more information about using the DataContractSerializer, see Data Contracts Overview. Example: The following example applies the CollectionDataContractAttribute to a class that inherits from the List(Of T) class. The code sets the Name and ItemName properties to custom values.  When the Service Model Metadata Utility Tool (Svcutil.exe) is used to generate code for the client, the code resembles the following example. Notice that the name of the class is changed, as well as the ItemName. When using generics, the type parameter name is used to create the resulting type name. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,1,0,0,1,1,1,0,1,0,7,306,clean
36,37939,210674,213608,7,System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0}),"Additional online Documentation: Syntax: public bool IsSubsetOf( IEnumerable<T> other ) Parameters otherType: System.Collections.Generic.IEnumerable(Of T) The collection to compare to the current HashSet(Of T) object. Return Value Type: System.Boolean true if the HashSet(Of T) object is a subset of other; otherwise, false. Implements ISet(Of T).IsSubsetOf(IEnumerable(Of T)) Summary: Determines whether a HashSet(Of T) object is a subset of the specified collection. Remarks: An empty set is a subset of any other collection, including an empty set; therefore, this method returns true if the collection represented by the current HashSet(Of T) object is empty, even if the other parameter is an empty set. This method always returns false if Count is greater than the number of elements in other. If the collection represented by other is a HashSet(Of T) collection with the same equality comparer as the current HashSet(Of T) object, this method is an O(n) operation. Otherwise, this method is an O(n + m) operation, where n is Count and m is the number of elements in other. Example: The following example creates two disparate HashSet(Of T) objects and compares them to each other. In this example, lowNumbers is both a subset and a proper subset of allNumbers until allNumbers is modified, using the IntersectWith method, to contain only values that are present in both sets. Once allNumbers and lowNumbers are identical, lowNumbers is still a subset of allNumbers but is no longer a proper subset.",1,0,0,0,0,0,0,0,1,0,0,0,2,251,clean
37,40057,261213,264909,7,"System.Windows.Forms.BindingContext.Item(System.Object,System.String)",Additional online Documentation: Summary: Gets a BindingManagerBase.,1,0,0,0,0,0,0,0,0,0,0,1,2,7,mixed
38,39657,247978,251638,7,System.Web.DynamicData.ModelProviders.AssociationProvider.Direction,"Additional online Documentation: Syntax: public virtual AssociationDirection Direction { get; protected set; } Property Value Type: System.Web.DynamicData.ModelProviders.AssociationDirection The type of the association. Summary: Gets or sets the type of the association. Remarks: Associations include one-to-one, one-to-many, and many-to-many.",1,0,0,0,0,0,0,0,0,0,0,1,2,46,mixed
39,34057,469012,472756,8,public class MultiPanelUI   ,A multiplexing UI used to combine PanelUIs.  This file was automatically generated by AutoMulti.,1,0,0,0,0,0,1,0,0,0,0,0,2,14,clean
40,37932,213127,216064,7,System.Security.Cryptography.CngUIPolicy.UseContext,Additional online Documentation: Syntax: public string UseContext { get; } Property Value Type: System.String The description of how the key will be used. Summary: Gets the description of how the key will be used.,1,0,0,0,0,0,0,0,0,0,0,1,2,33,mixed
41,40184,260205,263898,7,System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection,"Additional online Documentation: Syntax: public class NamedImagesCollection : ChartNamedElementCollection<NamedImage> Summary: Represents a collection of NamedImage objects. Remarks: The NamedImagesCollection class represents a collection of NamedImage objects, which are objects that have an associated image and a name that is unique to the collection. This class is exposed as the Images collection property of the root Chart object, and is only available at run time. An image can be any object derived from the .NET Framework Image class, such as Bitmap, which is created dynamically. The image can be stored in this collection, and then assigned at a later time to any image property in the Chart control, such as BackImage. When one of the image properties in the Chart control is set by specifying a string value, the Images collection property, of type NamedImagesCollection, is first checked to see if an image with that name exists. If a matching NamedImage object is found, this image is used. If a matching NamedImage object is not located, the string expression is treated as a URL, image resource name or pathname. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,0,0,0,1,4,203,mixed
42,33139,453691,457435,8,"protected <T extends Object & Comparable<? super T>> void addObjectValue(String elementName, Class<T> classType, T defaultValue, Comparable<? super T> minValue, Comparable<? super T> maxValue, boolean minInclusive, boolean maxInclusive)","Allows an Object reference of a given class type to be stored in nodes implementing the named element. The value of the Object must be within the range given by minValue and maxValue. Furthermore, the class type must implement the Comparable interface.  If an Object reference was previously allowed, the previous settings are overwritten.  Parameters: elementName - the name of the element. classType - a Class variable indicating the legal class type for the object value. defaultValue - the default value for the minValue - the smallest (inclusive or exclusive depending on the value of minInclusive) legal value for the object value, as a String. maxValue - the largest (inclusive or exclusive depending on the value of minInclusive) legal value for the object value, as a String. minInclusive - true if minValue is inclusive. maxInclusive - true if maxValue is inclusive. Throws: IllegalArgumentException - if elementName is null, or is not a legal element name for this format.",1,0,1,0,0,0,0,0,0,0,0,1,3,150,mixed
43,39973,265236,268935,7,System.Windows.Forms.FontDialog.Apply,"Additional online Documentation: Syntax: public event EventHandler Apply Summary: Occurs when the user clicks the Apply button in the font dialog box. Remarks: Every time the Apply button is clicked, another Apply event is raised. For more information about handling events, see Consuming Events. Example: The following code example demonstrates using the MinSize, MaxSize, ShowEffects and FontMustExist members and handling the Apply event. To run this example paste the following code in a form containing a FontDialog named FontDialog1 and a Button named Button1.",0,0,0,0,0,0,0,0,1,0,0,0,1,84,clean
44,37691,208048,210974,7,System.Activities.NativeActivityMetadata.GetDelegatesWithReflection,"Additional online Documentation: Syntax: public Collection<ActivityDelegate> GetDelegatesWithReflection() Return Value Type: System.Collections.ObjectModel.Collection(Of ActivityDelegate) A collection of delegates. Summary: Returns a collection of delegates using reflection. Remarks: This method uses an activity's TypeDescriptor to examine all public properties of type ActivityDelegate, or IList<T> or ICollection<T> where T derives from ActivityDelegate, and returns them in a collection.",1,0,0,0,0,0,0,0,0,0,0,1,2,61,mixed
45,39493,256861,260543,7,System.Web.Configuration.SystemWebSectionGroup.XhtmlConformance,Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#xhtmlConformance#)] public XhtmlConformanceSection XhtmlConformance { get; } Property Value Type: System.Web.Configuration.XhtmlConformanceSection The XhtmlConformanceSection object refers to the xhtmlConformance section of the configuration file. Summary: Gets the xhtmlConformance section. Example: The following code example shows how to obtain the XhtmlConformanceSection object from the configuration file of an existing Web application.,0,0,0,0,0,0,0,1,1,0,0,1,3,55,mixed
46,38416,223197,226150,7,System.Web.UI.Design.DesignerDataSourceView.CanUpdate,"Additional online Documentation: Syntax: public virtual bool CanUpdate { get; } Property Value Type: System.Boolean true if the ExecuteUpdate method is supported; otherwise, false. Summary: Gets a value indicating whether the DataSourceView object that is associated with the current DataSourceControl object supports the ExecuteUpdate method.",1,0,0,0,0,0,1,0,0,0,1,0,3,44,clean
47,38118,220502,223451,7,System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable),"Additional online Documentation: Summary: Copies all rows from a data source to a destination table specified by the DestinationTableName property of the SqlBulkCopy object. Remarks: If multiple active result sets (MARS) is disabled, WriteToServer makes the connection busy. If MARS is enabled, you can interleave calls to WriteToServer with other commands in the same connection.",1,0,0,0,0,0,1,1,1,0,0,0,4,55,clean
48,37810,210164,213094,7,System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath,Additional online Documentation: Syntax: public string FullPath { get; } Property Value Type: System.String The translated absolute path observed by the catalog. Summary: Gets the translated absolute path observed by the DirectoryCatalog.,1,0,0,0,0,0,0,0,0,0,0,1,2,31,mixed
49,34107,471243,474987,8,public class StyleContext   ,"A pool of styles and their associated resources. This class determines the  lifetime of a group of resources by being a container that holds caches for  various resources such as font and color that get reused by the various  style definitions. This can be shared by multiple documents if desired to  maximize the sharing of related resources.  This class also provides efficient support for small sets of attributes and  compresses them by sharing across uses and taking advantage of their  immutable nature. Since many styles are replicated, the potential for  sharing is significant, and copies can be extremely cheap. Larger sets  reduce the possibility of sharing, and therefore revert automatically to a  less space-efficient implementation.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",1,1,0,1,1,0,0,0,0,0,0,0,4,171,clean
50,40216,260377,264070,7,System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.MaxMovingDistance,"Additional online Documentation: Syntax: [BindableAttribute(true)] public virtual double MaxMovingDistance { get; set; } Property Value Type: System.Double A double value. Summary: Gets or sets the maximum distance, in pixels, that the overlapped SmartLabelStyle object can be moved from the marker. Remarks: This property specifies the maximum distance in pixels from the data point that data point labels are allowed to be moved in case of overlapping.",1,0,0,0,0,0,0,0,0,0,0,1,2,66,mixed
51,39350,256788,260470,7,System.Web.Configuration.SiteMapSection,"Additional online Documentation: Syntax: public sealed class SiteMapSection : ConfigurationSection Summary: Defines configuration settings that are used to support the infrastructure for configuring, storing, and rendering site navigation. This class cannot be inherited. Remarks: The SiteMapSection class provides a way to programmatically access and modify the content of the configuration file siteMap section. Example: This example demonstrates how to specify values declaratively for several attributes of the siteMap section, which can also be accessed as members of the SiteMapSection class. The following configuration file example shows how to specify values declaratively for the siteMap section.  The following code example demonstrates how to use the SiteMapSection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0,2,130,clean
52,32619,447782,451526,8,public interface ResultSetMetaData   ,"An object that can be used to get information about the types and  properties of the columns in a ResultSet object. The following code  fragment creates the ResultSet object rs, creates the ResultSetMetaData  object rsmd, and uses rsmd to find out how many columns rs has and whether  the first column in rs can be used in a WHERE clause.    ResultSet rs = stmt.executeQuery(SELECT a, b, c FROM TABLE2); ResultSetMetaData rsmd = rs.getMetaData(); int numberOfColumns = rsmd.getColumnCount(); boolean b = rsmd.isSearchable(1);",1,0,0,1,0,0,0,0,1,0,0,0,3,82,clean
53,32209,437769,441513,8,public String paramString(),Returns a parameter string identifying this item event. This method is useful for event-logging and for debugging.  Overrides: paramString in class AWTEvent Returns: a string identifying the event and its attributes,1,0,0,1,0,0,0,0,0,0,0,1,3,32,mixed
54,32659,448244,451988,8,public interface CharacterIterator   ,"This interface defines a protocol for bidirectional iteration over text.  The iterator iterates over a bounded sequence of characters. Characters are  indexed with values beginning with the value returned by getBeginIndex()  and continuing through the value returned by getEndIndex()-1.  Iterators maintain a current character index, whose valid range is from  getBeginIndex() to getEndIndex(); the value getEndIndex() is included to  allow handling of zero-length text ranges and for historical reasons. The  current index can be retrieved by calling getIndex() and set directly by  calling setIndex(), first(), and last().  The methods previous() and next() are used for iteration. They return DONE  if they would move outside the range from getBeginIndex() to getEndIndex()  -1, signaling that the iterator has reached the end of the sequence. DONE  is also returned by other methods to indicate that the current index is  outside this range.  Examples:  Traverse the text from start to finish   public void traverseForward(CharacterIterator iter) { for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) { processChar(c); } }   Traverse the text backwards, from end to start   public void traverseBackward(CharacterIterator iter) { for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) { processChar(c); } }   Traverse both forward and backward from a given position in the text. Calls  to notBoundary() in this example represents some additional stopping  criteria.   public void traverseOut(CharacterIterator iter, int pos) { for (char c = iter.setIndex(pos); c != CharacterIterator.DONE && notBoundary(c); c = iter.next()) { } int end = iter.getIndex(); for (char c = iter.setIndex(pos); c != CharacterIterator.DONE && notBoundary(c); c = iter.previous()) { } int start = iter.getIndex(); processSection(start, end); }   See Also:     StringCharacterIterator, AttributedCharacterIterator",1,0,0,1,0,0,1,1,1,0,0,0,5,264,clean
55,39479,257276,260967,7,"System.Web.Hosting.SimpleWorkerRequest.SendResponseFromFile(System.String,System.Int64,System.Int64)",Additional online Documentation: Summary: Adds the contents of a file to the response.,1,0,1,0,0,0,0,0,0,0,0,0,2,13,clean
56,39137,242488,245562,7,System.ServiceModel.Configuration.MexTcpBindingCollectionElement.GetDefault,Additional online Documentation: Syntax: protected internal override Binding GetDefault() Return Value Type: System.ServiceModel.Channels.Binding A Binding. Summary: Gets the default binding element of this collection.,1,0,0,0,0,0,0,0,0,0,0,1,2,27,mixed
57,39253,238593,241637,7,System.ServiceModel.Channels.JavascriptCallbackResponseMessageProperty,"Additional online Documentation: Syntax: public sealed class JavascriptCallbackResponseMessageProperty Summary: Enables the use of a JavaScript callback in a service operation response using JSON Padding (JSONP). Remarks: JSONP is a mechanism used to enable cross-site, scripting support in Web browsers. Caution Using cross-site scripting is inherently unsecure and its use is not generally recommended. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0,2,80,clean
58,38250,216065,219002,7,System.Data.OracleClient.OracleDateTime.OracleDateTime(),Additional online Documentation: Summary: Initializes a new instance of the OracleDateTime structure.,1,0,0,0,0,0,0,0,0,0,0,1,2,12,mixed
59,38011,218531,221480,7,System.Data.DataTable.RowChanged,"Additional online Documentation: Syntax: public event DataRowChangeEventHandler RowChanged Summary: Occurs after a DataRow has been changed successfully. Remarks: For more information, see Handling DataTable Events (ADO.NET).",0,0,0,0,0,0,0,0,1,0,1,0,2,27,clean
60,39898,253234,256913,7,System.Web.Services.Protocols.ServerProtocol.Request,Additional online Documentation: Syntax: protected internal HttpRequest Request { get; } Property Value Type: System.Web.HttpRequest An HttpRequest object. Summary: Gets the HttpRequest object for the derived class.,1,0,0,0,0,0,0,0,0,0,0,1,2,27,mixed
61,32911,480786,484530,8,protected CommandType(int value),Construct a new enumeration value with the given integer value.  Parameters: value - Integer value.,1,0,0,0,0,0,0,0,0,0,0,1,2,14,mixed
62,32769,450976,454720,8,public abstract class AtomicLongFieldUpdater<T>   ,"A reflection-based utility that enables atomic updates to designated  volatile long fields of designated classes. This class is designed for use  in atomic data structures in which several fields of the same node are  independently subject to atomic updates.  Note that the guarantees of the compareAndSet method in this class are  weaker than in other atomic classes. Because this class cannot ensure that  all uses of the field are appropriate for purposes of atomic access, it can  guarantee atomicity only with respect to other invocations of  compareAndSet and set on the same updater.  Since:     1.5",1,0,0,1,1,0,0,0,0,0,0,0,3,95,clean
63,33750,464857,468601,8,"public abstract class SwingWorker<T,V>   ","An abstract class to perform lengthy GUI-interacting tasks in a dedicated  thread.  When writing a multi-threaded application using Swing, there are two  constraints to keep in mind: (refer to How to Use Threads for more  details):      * Time-consuming tasks should not be run on the Event Dispatch Thread.       Otherwise the application becomes unresponsive.     * Swing components should be accessed on the Event Dispatch Thread        only.  These constraints mean that a GUI application with time intensive computing  needs at least two threads: 1) a thread to perform the lengthy task and 2)  the Event Dispatch Thread (EDT) for all GUI-related activities. This  involves inter-thread communication which can be tricky to implement.  SwingWorker is designed for situations where you need to have a long  running task run in a background thread and provide updates to the UI  either when done, or while processing. Subclasses of SwingWorker must  implement the doInBackground() method to perform the background  computation.  Workflow  There are three threads involved in the life cycle of a SwingWorker :      * Current thread: The execute() method is called on this thread. It       schedules SwingWorker for the execution on a worker thread and       returns immediately. One can wait for the SwingWorker to complete       using the get methods.      * Worker thread: The doInBackground() method is called on this thread.       This is where all background activities should happen. To notify        PropertyChangeListeners about bound properties changes use the        firePropertyChange and getPropertyChangeSupport() methods. By default       there are two bound properties available: state and progress.      * Event Dispatch Thread: All Swing related activities occur on this       thread. SwingWorker invokes the process and done() methods and       notifies any PropertyChangeListeners on this thread.  Often, the Current thread is the Event Dispatch Thread.  Before the doInBackground method is invoked on a worker thread,  SwingWorker notifies any PropertyChangeListeners about the state property  change to StateValue.STARTED. After the doInBackground method is finished  the done method is executed. Then SwingWorker notifies any  PropertyChangeListeners about the state property change to StateValue.DONE .  SwingWorker is only designed to be executed once. Executing a SwingWorker  more than once will not result in invoking the doInBackground method twice.  Sample Usage  The following example illustrates the simplest use case. Some processing is  done in the background and when done you update a Swing component.  Say we want to find the Meaning of Life and display the result in a  JLabel.   final JLabel label; class MeaningOfLifeFinder extends SwingWorker<String, Object> { @Override public String doInBackground() { return findTheMeaningOfLife(); }  @Override protected void done() { try { label.setText(get()); } catch (Exception ignore) { } } }  (new MeaningOfLifeFinder()).execute();   The next example is useful in situations where you wish to process data as  it is ready on the Event Dispatch Thread.  Now we want to find the first N prime numbers and display the results in a  JTextArea. While this is computing, we want to update our progress in a  JProgressBar. Finally, we also want to print the prime numbers to  System.out.   class PrimeNumbersTask extends SwingWorker<List<Integer>, Integer> { PrimeNumbersTask(JTextArea textArea, int numbersToFind) { //initialize }  @Override public List<Integer> doInBackground() { while (! enough && ! isCancelled()) { number = nextPrimeNumber(); publish(number); setProgress(100 * numbers.size() / numbersToFind); } } return numbers; }  @Override protected void process(List<Integer> chunks) { for (int number : chunks) { textArea.append(number +  n); } } }  JTextArea textArea = new JTextArea(); final JProgressBar progressBar = new JProgressBar(0, 100); PrimeNumbersTask task = new PrimeNumbersTask(textArea, N); task.addPropertyChangeListener( new PropertyChangeListener() { public  void propertyChange(PropertyChangeEvent evt) { if (progress.equals(evt.getPropertyName())) { progressBar.setValue((Integer)evt.getNewValue()); } } });  task.execute(); System.out.println(task.get()); //prints all prime numbers we have got   Because SwingWorker implements Runnable, a SwingWorker can be submitted to  an Executor for execution.  Since:     1.6",0,0,1,1,1,1,1,1,1,0,1,0,8,591,clean
64,33363,456437,460181,8,public Name add(String comp) throws InvalidNameException,"Adds a single component to the end of this compound name.  Specified by: add in interface Name Parameters: comp - The non-null component to add. Returns: The updated CompoundName, not a new one. Cannot be null. Throws: InvalidNameException - If adding comp at end of the name would violate the compound name's syntax.",0,0,0,0,0,0,0,0,0,0,0,0,0,53,
65,33963,467697,471441,8,protected void propertyChange(PropertyChangeEvent evt),"This method gets called when a bound property is changed on the associated JTextComponent. This is a hook which UI implementations may change to reflect how the UI displays bound properties of JTextComponent subclasses. If the font, foreground or document has changed, the the appropriate property is set in the default style of the document.  Overrides: propertyChange in class BasicEditorPaneUI Parameters: evt - the property change event",1,0,0,0,0,1,0,1,0,0,0,1,4,66,mixed
66,34503,476678,480422,8,public abstract class SetOverrideTypeHelper   ,"The Helper for SetOverrideType. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/SetOverrideTypeHelper.java Generated by the IDL-to-Java  compiler (portable), version 3.0 03 June 1999 11:52:03 o'clock GMT+00:00",0,0,0,0,0,0,0,0,0,0,1,1,2,33,mixed
67,34222,472923,476667,8,boolean isOutputLocation(),"Determines if this is an output location. An output location is a location that is conventionally used for output.  Returns: true if this is an output location, false otherwise",0,1,0,0,0,0,0,0,0,0,0,1,2,29,mixed
68,32620,447584,451328,8,public interface ResultSet   ,"A table of data representing a database result set, which is usually  generated by executing a statement that queries the database.  A ResultSet object maintains a cursor pointing to its current row of data.  Initially the cursor is positioned before the first row. The next method  moves the cursor to the next row, and because it returns false when there  are no more rows in the ResultSet object, it can be used in a while loop to  iterate through the result set.  A default ResultSet object is not updatable and has a cursor that moves  forward only. Thus, you can iterate through it only once and only from the  first row to the last row. It is possible to produce ResultSet objects that  are scrollable and/or updatable. The following code fragment, in which con  is a valid Connection object, illustrates how to make a result set that is  scrollable and insensitive to updates by others, and that is updatable. See  ResultSet fields for other options.    Statement stmt = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); ResultSet rs = stmt.executeQuery(SELECT a, b FROM TABLE2); // rs will be scrollable, will not show changes made by others, // and will be updatable    The ResultSet interface provides getter methods (getBoolean, getLong, and  so on) for retrieving column values from the current row. Values can be  retrieved using either the index number of the column or the name of the  column. In general, using the column index will be more efficient. Columns  are numbered from 1. For maximum portability, result set columns within  each row should be read in left-to-right order, and each column should be  read only once.  For the getter methods, a JDBC driver attempts to convert the underlying  data to the Java type specified in the getter method and returns a suitable  Java value. The JDBC specification has a table showing the allowable  mappings from SQL types to Java types that can be used by the ResultSet  getter methods.  Column names used as input to getter methods are case insensitive. When a  getter method is called with a column name and several columns have the  same name, the value of the first matching column will be returned. The  column name option is designed to be used when column names are used in the  SQL query that generated the result set. For columns that are NOT  explicitly named in the query, it is best to use column numbers. If column  names are used, the programmer should take care to guarantee that they  uniquely refer to the intended columns, which can be assured with the SQL  AS clause.  A set of updater methods were added to this interface in the JDBC 2.0 API  (JavaTM 2 SDK, Standard Edition, version 1.2). The comments regarding  parameters to the getter methods also apply to parameters to the updater  methods.  The updater methods may be used in two ways:     1. to update a column value in the current row. In a scrollable        ResultSet object, the cursor can be moved backwards and forwards, to       an absolute position, or to a position relative to the current row.       The following code fragment updates the NAME column in the fifth row       of the ResultSet object rs and then uses the method updateRow to       update the data source table from which rs was derived.          rs.absolute(5); // moves the cursor to the fifth row of rs rs.updateString(NAME, AINSWORTH); // updates the // NAME column of row 5 to be AINSWORTH rs.updateRow(); // updates the row in the data source       2. to insert column values into the insert row. An updatable ResultSet        object has a special row associated with it that serves as a staging       area for building a row to be inserted. The following code fragment       moves the cursor to the insert row, builds a three-column row, and       inserts it into rs and into the data source table using the method        insertRow.          rs.moveToInsertRow(); // moves cursor to the insert row rs.updateString(1, AINSWORTH); // updates the // first column of the insert row to be AINSWORTH rs.updateInt(2,35); // updates the second column to be 35 rs.updateBoolean(3, true); // updates the third column to true rs.insertRow(); rs.moveToCurrentRow();    A ResultSet object is automatically closed when the Statement object that  generated it is closed, re-executed, or used to retrieve the next result  from a sequence of multiple results.  The number, types and properties of a ResultSet object's columns are  provided by the ResulSetMetaData object returned by the  ResultSet.getMetaData method.  See Also:     Statement.executeQuery(java.lang.String), Statement.getResultSet(),      ResultSetMetaData",1,0,1,0,1,1,1,1,1,1,0,0,8,752,clean
69,38370,224556,227509,7,System.Web.UI.Design.WebControls.WebParts.PartDesigner,"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public abstract class PartDesigner : CompositeControlDesigner Summary: Extends design-time behavior for controls that implement the Part abstract class. Remarks: The PartDesigner class is the base class for many of the various designers in the System.Web.UI.Design.WebControls.WebParts namespace, which provide visual representations of Web Parts controls at design time. The UsePreviewControl property is overridden to always return true, so PartDesigner will always render a copy of the associated control rather than the control itself. Notes to Inheritors The PartDesigner class does not have a public constructor, so you cannot inherit from it directly outside the System.Web.UI.Design.WebControls.WebParts namespace. Instead, use WebPartDesigner, EditorPartDesigner, or CatalogPartDesigner, which derive from PartDesigner and provide the same functionality with a public constructor. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,0,0,0,0,3,159,clean
70,32809,451899,455643,8,public abstract class CurrencyNameProvider   ,An abstract class for service providers that provide localized currency  symbols for the Currency class. Note that currency symbols are considered  names when determining behaviors described in the LocaleServiceProvider  specification.  Since:     1.6,0,0,0,0,0,0,1,0,0,0,0,0,1,31,clean
71,39135,242073,245146,7,System.ServiceModel.Configuration.ClaimTypeElement.ClaimTypeElement(),Additional online Documentation: Summary: Initializes a new instance of the ClaimTypeElement class.,1,0,0,0,0,0,0,0,0,0,0,1,2,12,mixed
72,33832,463362,467106,8,public Object getNextValue(),"Returns the object in the sequence that comes after the object returned by getValue(). If the end of the sequence has been reached then return null. Calling this method does not effect value.  This method simply delegates to the model. It is equivalent to:  getModel().getNextValue()  Returns: the next legal value or null if one doesn't exist See Also: getValue(), getPreviousValue(), SpinnerModel.getNextValue()",1,0,0,0,0,0,1,0,0,0,0,0,2,64,clean
73,40086,260594,264288,7,System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator,"Additional online Documentation: Syntax: IEnumerator IEnumerable.GetEnumerator() Return Value Type: System.Collections.IEnumerator An enumerator that can iterate through the name/value pairs in the XML resource (.resx) stream or string associated with the current ResXResourceReader object. Implements IEnumerable.GetEnumerator Summary: Returns an enumerator for the current ResXResourceReader object. For a description of this member, see IEnumerable.GetEnumerator. Remarks: This member is an explicit interface member implementation. It can be used only when the ResXResourceReader instance is cast to an IEnumerable interface. If the UseResXDataNodes property is set to true before the enumerator is used, the resource items are retrieved as ResXDataNode objects. In this case, all resource nodes are returned regardless of type.",0,0,0,0,0,0,0,0,0,0,0,0,0,114,
74,32967,481710,485454,8,public abstract void processUpdates(FacesContext context),"Perform the component tree processing required by the Update Model Values phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows.  * If the rendered property of this UIComponent is false, skip further processing. * Call pushComponentToEL(javax.faces.context.FacesContext, javax.faces.component.UIComponent). * Call the processUpdates() method of all facets and children of this UIComponent, in the order determined by a call to getFacetsAndChildren(). After returning from the processUpdates() method on a child or facet, call UIComponent\#popComponentFromEL  Parameters: context - FacesContext for the request we are processing Throws: java.lang.NullPointerException - if context is null",1,0,0,0,0,0,1,0,0,0,0,0,2,108,clean
75,38933,237211,240204,7,System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform,"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class XmlDsigEnvelopedSignatureTransform : Transform Summary: Represents the enveloped signature transform for an XML digital signature as defined by the W3C. Remarks: The XmlDsigEnvelopedSignatureTransform class removes the <Signature> element from an XML document before the digest is computed. With this transform, you can sign and verify all elements of an XML document except the XML digital signature elements. Although you can create and insert a signature into an XML document, verifying the modified document using the embedded signature will fail because the document now has additional elements. This transform removes the <Signature> element and allows you to verify the document using its original form. Use the XmlDsigEnvelopedSignatureTransform class whenever you create an enveloped signature. For more information about the enveloped signature transform, see Section 6.6.4 of the XMLDSIG specification, which is available from the W3C at www.w3.org/TR/xmldsig-core/. Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: This section contains two code examples. The first example demonstrates how to sign an XML file using an envelope signature. The second example demonstrates how to use members of the XmlDsigEnvelopedSignatureTransform class. Example \#1  Example \#2 ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,1,0,0,1,6,269,mixed
76,40099,261958,265654,7,System.Windows.Forms.ContextMenu.ContextMenu(),Additional online Documentation: Summary: Initializes a new instance of the ContextMenu class.,1,0,0,0,0,0,1,1,1,0,0,1,5,12,mixed
77,38907,236074,239065,7,System.Xml.IXmlDictionary,"Additional online Documentation: Syntax: public interface IXmlDictionary Summary: An interface that defines the contract that an Xml dictionary must implement to be used by XmlDictionaryReader and XmlDictionaryWriter implementations. Remarks: This interface is implemented by XmlDictionary, which is used in to optimize the performance of serialization and deserialization of XML messages. Implement this interface to provide custom XmlDictionaryString management.",1,0,0,1,0,0,1,1,0,0,0,0,4,58,clean
78,38657,228585,231556,7,System.Drawing.KnownColor.Goldenrod,A system-defined color.,0,0,0,0,0,0,0,0,0,0,0,1,1,4,non-information
79,33101,485257,489001,8,public interface ActionSource2AttachedObjectHandler   ,A VDL handler that exposes ActionListener to a page author. The default  implementation of Facelets must provide an implemention of this in the  handler for the <f:actionListener> tag.  Since:     2.0,0,0,1,0,0,0,0,0,0,0,0,0,1,30,clean
80,34407,474248,477992,8,public interface Name ,"A representation of an XML name. This interface provides methods for  getting the local and namespace-qualified names and also for getting the  prefix associated with the namespace for the name. It is also possible to  get the URI of the namespace.  The following is an example of a namespace declaration in an element.   <wombat:GetLastTradePrice xmlns:wombat=http://www.wombat.org/trader>   (xmlns stands for XML namespace.) The following shows what the methods  in the Name interface will return.     * getQualifiedName will return prefix:LocalName =       WOMBAT:GetLastTradePrice     * getURI will return http://www.wombat.org/trader     * getLocalName will return GetLastTracePrice     * getPrefix will return WOMBAT  XML namespaces are used to disambiguate SOAP identifiers from  application-specific identifiers.  Name objects are created using the method SOAPEnvelope.createName, which  has two versions. One method creates Name objects with a local name, a  namespace prefix, and a namespace URI. and the second creates Name objects  with just a local name. The following line of code, in which se is a  SOAPEnvelope object, creates a new Name object with all three.   Name name = se.createName(GetLastTradePrice, WOMBAT, http://www.wombat.org/trader);   The following line of code gives an example of how a Name object can be  used. The variable element is a SOAPElement object. This code creates a new  SOAPElement object with the given name and adds it to element.   element.addChildElement(name);   The Name interface may be deprecated in a future release of SAAJ in favor  of javax.xml.namespace.QName  See Also:     SOAPEnvelope.createName, SOAPFactory.createName",1,1,1,0,0,0,1,1,1,0,0,0,6,253,clean
81,40170,259109,262801,7,System.Windows.Forms.DataVisualization.Charting.AxisType,"Additional online Documentation: Syntax: public enum AxisType Summary: Specifies the axis type for the X and Y-axes of a Series. Remarks: The AxisType enumeration represents the axis type used for the X and Y-axes of a Series. A Series is plotted using two axes, with the exception of pie and doughnut charts. This enumeration is used in conjunction with the XAxisType and YAxisType properties to set the axes used for plotting the associated data points of the series. For all charts except for bar, stacked bar, pie and doughnut types, the primary and secondary axes are as follows: Axis Type Description Primary X-Axis Bottom horizontal axis. Secondary X-Axis Top horizontal axis. Primary Y-Axis Left vertical axis. Secondary Y-Axis Right vertical axis. Bar and stacked bar charts have their axes rotated 90 degrees clockwise. For example, the primary X-axis for these two charts is the left-vertical axis.",1,1,0,0,0,0,1,0,0,0,0,0,3,153,clean
82,34679,479054,482798,8,public interface CurrentOperations   ,"The PortableServer::Current interface, derived from CORBA::Current,  provides method implementations with access to the identity of the object  on which the method was invoked. The Current interface is provided to  support servants that implement multiple objects, but can be used within  the context of POA-dispatched method invocations on any servant. To provide  location transparency, ORBs are required to support use of Current in the  context of both locally and remotely invoked operations. An instance of  Current can be obtained by the application by issuing the  CORBA::ORB::resolve_initial_references(POACurrent) operation. Thereafter,  it can be used within the context of a method dispatched by the POA to  obtain the POA and ObjectId that identify the object on which that  operation was invoked.",0,0,0,1,0,0,0,1,0,0,0,0,2,125,clean
83,38092,221163,224112,7,System.Data.SqlTypes.SqlChars.IsNull,"Additional online Documentation: Syntax: public bool IsNull { get; } Property Value Type: System.Boolean true if the SqlChars is null. Otherwise, false. Implements INullable.IsNull Summary: Gets a Boolean value that indicates whether this SqlChars is null. Remarks: The default value is false. For more information, see Handling Null Values (ADO.NET).",1,0,0,0,0,0,1,0,0,0,0,1,3,51,mixed
84,34214,472790,476534,8,"void storeState(Hashtable<Object,Object> state)",Upon receiving this message the receiver should place any relevant state into state.,0,0,0,0,0,0,0,0,0,0,0,0,0,13,
85,32845,452752,456496,8,public MimeType(String rawdata) throws MimeTypeParseException,Constructor that builds a MimeType from a String.  Parameters: rawdata - the MIME type string Throws: MimeTypeParseException,0,0,0,0,0,0,0,0,0,0,0,0,0,16,
87,34316,473383,477127,8,"public interface DomHandler<ElementT,ResultT extends Result> ","Converts an element (and its descendants) from/to DOM (or similar)  representation.  Implementations of this interface will be used in conjunction with  XmlAnyElement annotation to map an element of XML into a representation of  infoset such as W3C DOM.  Implementations hide how a portion of XML is converted into/from such  DOM-like representation, allowing JAXB providers to work with arbitrary  such library.  This interface is intended to be implemented by library writers and  consumed by JAXB providers. None of those methods are intended to be called  from applications.  Since:     JAXB2.0",1,0,0,1,0,0,0,0,0,1,0,0,3,92,clean
88,40228,260409,264102,7,System.Windows.Forms.DataVisualization.Charting.StripLine.BackImage,"Additional online Documentation: Syntax: [BindableAttribute(true)] public string BackImage { get; set; } Property Value Type: System.String A string value that represents an image file's URL. The default is an empty string. Summary: Gets or sets the background image of the strip line. Remarks: The BackImage property defines a path to a background image for many chart elements, and is an absolute or relative URL. To position this image, use the BackImageAlignment and BackImageWrapMode properties. You can also specify that one color will be displayed by the image as #transparent# by setting the BackImageTransparentColor property. An image can be any valid graphics file supported by .NET Framework, including icons. This property is not applicable if the StripWidth property is set to a value of 0.0. Background images take precedence over other background properties, such as gradient colors.",1,0,0,0,0,0,0,1,0,0,0,0,2,136,clean
89,40282,266898,270612,7,System.Workflow.ComponentModel.DependencyObject.System#ComponentModel#IComponent#Disposed,"Additional online Documentation: Syntax: event EventHandler IComponent.Disposed Implements IComponent.Disposed Summary: Represents the method that handles the Disposed event of a component. Remarks: When you create a Disposed delegate, you identify the method that handles the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate.",0,0,0,0,0,0,1,0,0,0,0,0,1,69,clean
90,32801,451767,455511,8,public interface NodeChangeListener   ,"A listener for receiving preference node change events.  Since:     1.4 See Also:     Preferences, NodeChangeEvent, PreferenceChangeListener",0,0,0,0,0,0,0,0,0,0,0,0,0,14,
91,34813,489665,493409,8,public java.util.Locale getLocale(),"Gets the locale of this I18N localization context.  Returns: The locale of this I18N localization context, or null if this I18N localization context is empty, or its resource bundle is a (locale-less) root resource bundle.",1,0,0,0,0,0,0,0,0,0,0,1,2,39,mixed
92,38947,237287,240280,7,System.Security.Permissions.DataProtectionPermissionFlags.NoFlags,No protection abilities.,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
93,38286,216676,219619,7,System.Data.Services.Common.DataServiceKeyAttribute,"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false)] public sealed class DataServiceKeyAttribute : Attribute Summary: Denotes the key property or properties of an entity. Remarks: You should only apply the DataServiceKeyAttribute attribute to a property that can be used to uniquely identify an instance of the entity type. This attribute is ignored when applied to a navigation property. For more information, see Reflection Provider (WCF Data Services). ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,1,0,3,92,clean
94,38990,239955,243023,7,System.ServiceModel.OperationContext,"Additional online Documentation: Syntax: public sealed class OperationContext : IExtensibleObject<OperationContext> Summary: Provides access to the execution context of a service method. Remarks: Use the OperationContext from within a service operation to access the current operation execution environment. In particular, the operation context is used to access callback channels in duplex services, to store extra state data across portions of the operations, and to access incoming message headers and properties as well as add outgoing message headers and properties. For more information about using extensions to store state data, see Extensible Objects. The OperationContext has the following properties and methods. The Current property returns the OperationContext object representing the current execution context. The ServiceSecurityContext property returns the security environment under which the method executes. The EndpointDispatcher property gets the operation's System.ServiceModel.Dispatcher.EndpointDispatcher. The Extensions property returns an extension collection for the current OperationContext. The Host property returns the ServiceHostBase object that manages the service. The HasSupportingTokens property returns a value that indicates whether the method has supporting tokens, if so, the SupportingTokens property gets them. The IncomingMessageHeaders, IncomingMessageProperties, and IncomingMessageVersion properties get these items from the incoming message. The OperationCompleted event is fired when the operation has completed. The OutgoingMessageHeaders and OutgoingMessageProperties properties get these items for the outbound message. The RequestContext property returns the RequestContext implementation for the method. The InstanceContext property returns the InstanceContext associated with the operation. The SessionId property returns the session identifier for the current channel and object. The GetCallbackChannel(Of T) method returns a callback channel to the caller in the case of duplex communication. The SetTransactionComplete method commits the current transaction. Example: The following code example uses the Current property and GetCallbackChannel(Of T) method to obtain the channel back to the caller from within a method. All methods in this example are one-way methods, enabling the service and the client to communicate in both directions independently. In this case, the example client application expects only one return call before it exits, but an client, for example a Windows Forms client, can receive any number of calls from the service.  The following client implements the SampleDuplexHelloCallback to receive the callback message. The imported callback contract is not the same name as the one in the service, due to the use of the Name property in the preceding example. Note that the client makes no assumptions about whether or when it might receive a callback; the server callback is entirely independent of the client's outbound call. Note For an example that uses the OperationContext class in a client scenario, see OperationContextScope. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,1,0,5,456,clean
95,33811,461605,465349,8,public boolean isEditable(),"Returns true if the JComboBox is editable. By default, a combo box is not editable.  Returns: true if the JComboBox is editable, else false",1,0,0,0,0,0,0,0,0,0,0,1,2,24,mixed
96,34199,472433,476177,8,public class DefaultTreeCellEditor   ,"A TreeCellEditor. You need to supply an instance of  DefaultTreeCellRenderer so that the icons can be obtained. You can  optionally supply a TreeCellEditor that will be layed out according to the  icon in the DefaultTreeCellRenderer. If you do not supply a TreeCellEditor , a TextField will be used. Editing is started on a triple mouse click, or  after a click, pause, click and a delay of 1200 miliseconds.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.  See Also:     JTree",1,0,0,0,0,0,0,1,0,1,0,1,4,124,mixed
97,32482,444543,448287,8,public void setOOBInline(boolean on) throws SocketException,"Enable/disable OOBINLINE (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded. If the user wishes to receive urgent data, then this option must be enabled. When enabled, urgent data is received inline with normal data.  Note, only limited support is provided for handling incoming urgent data. In particular, no notification of incoming urgent data is provided and there is no capability to distinguish between normal data and urgent data unless provided by a higher level protocol.  Parameters: on - true to enable OOBINLINE, false to disable. Throws: SocketException - if there is an error in the underlying protocol, such as a TCP error. Since: 1.4 See Also: getOOBInline()",1,0,1,0,0,0,0,0,0,0,0,0,2,119,clean
98,38189,214327,217267,7,System.Data.Metadata.Edm.EdmFunction.CommandTextAttribute,"Additional online Documentation: Syntax: public string CommandTextAttribute { get; } Property Value Type: System.String A string value in the syntax used by the database management system or storage model that contains the query or update statement of the EdmFunction. Summary: Represents a query in the language that is used by the database management system or storage model. Remarks: For more information about the CommandTextAttribute, see Function Element (SSDL). Example: The following example shows a function definition as it would appear in SSDL. The CommandTextAttribute element defines the function in Transact-SQL syntax.",1,0,0,0,0,0,0,0,1,0,0,0,2,91,clean
99,39810,251187,254858,7,System.Web.UI.MobileControls.Style.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object),"Additional online Documentation: Syntax: void IParserAccessor.AddParsedSubObject( Object o ) Parameters oType: System.Object The parsed subobject to be added. Implements IParserAccessor.AddParsedSubObject(Object) Summary: For a description of this member, see IParserAccessor.AddParsedSubObject. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This member is an explicit interface member implementation. It can be used only when the Style instance is cast to an IParserAccessor interface.",0,0,0,0,0,0,0,0,0,0,0,0,0,79,
101,34527,476760,480504,8,public class TCKind   ,"The Java mapping of the IDL enum TCKind, which specifies the kind of a  TypeCode object. There is one kind for each primitive and essential IDL  data type.  The class TCKind consists of:      * a set of int constants, one for each kind of IDL data type. These        int constants make it possible to use a switch statement.     * a set of TCKind constants, one for each kind of IDL data type. The        value field for each TCKind instance is initialized with the int        constant that corresponds with the IDL data type that the instance       represents.     * the method from_intfor converting an int to its corresponding TCKind        instance        Example:         org.omg.CORBA.TCKind k = org.omg.CORBA.TCKind.from_int( org.omg.CORBA.TCKind._tk_string);         The variable k represents the TCKind instance for the IDL type        string, which is tk_string.      * the method value for accessing the _value field of a TCKind constant        Example:         int i = org.omg.CORBA.TCKind.tk_char.value();         The variable i represents 9, the value for the IDL data type char.  The value field of a TCKind instance is the CDR encoding used for a  TypeCode object in an IIOP message.",1,0,0,0,0,0,1,0,1,0,0,0,3,194,clean
102,39285,244593,248131,7,System.Speech.Synthesis.SpeechSynthesizer.VisemeReached,"Additional online Documentation: Syntax: public event EventHandler<VisemeReachedEventArgs> VisemeReached Summary: Raised when a viseme is reached. Remarks: A viseme is the basic position of the mouth and face when pronouncing a phoneme. Visemes are visual representations of phonemes. System.Speech supports 21 visemes for US English, each of which corresponds to one or more phonemes. VisemeReached events are raised when a new phoneme reached has a different corresponding viseme than the previous phoneme reached. Since some visemes represent more than one phoneme, a VisemeReached event is not generated if the next phoneme reached corresponds to the same viseme as the previous phoneme. For example, for the spoken words this zone""",1,0,1,0,0,1,0,0,0,0,0,0,3,224,clean
103,40217,259074,262766,7,System.Windows.Forms.DataVisualization.Charting.AxisScaleView.IsZoomed,"Additional online Documentation: Syntax: [BindableAttribute(false)] [BrowsableAttribute(false)] public bool IsZoomed { get; } Property Value Type: System.Boolean True if the axis is zoomed in, otherwise false. Summary: Gets a flag that indicates whether the axis is zoomed in.",0,0,0,0,0,0,0,0,0,0,0,0,0,38,
104,38740,231854,234830,7,System.IdentityModel.Claims.Claim.GetHashCode,Additional online Documentation: Syntax: public override int GetHashCode() Return Value Type: System.Int32 The hash code for the claim. Summary: Returns a hash code for the current claim. Remarks: This method generates the same hash code for two objects that are equal according to the Equals method.,1,0,0,0,0,0,0,0,0,0,0,1,2,47,mixed
105,38275,217185,220130,7,"System.Data.Services.Providers.OpenTypeMethods.Multiply(System.Object,System.Object)","Additional online Documentation: Syntax: public static Object Multiply( Object left, Object right ) Parameters leftType: System.Object The first value. rightType: System.Object The second value. Return Value Type: System.Object The product of the two values. Summary: Multiplies two values. Remarks: The Multiply method multiplies two values without overflow checking.",1,0,0,0,1,0,0,0,0,0,0,1,3,50,mixed
106,38909,235893,238884,7,System.Runtime.Serialization.NetDataContractSerializer.IsStartObject(System.Xml.XmlReader),Additional online Documentation: Summary: Determines whether the reader is positioned on an object that can be deserialized. Remarks: This is equivalent to using the ReadObject method of the IFormatter interface.,1,0,0,0,0,0,1,0,0,0,0,0,2,30,clean
107,32085,434774,438518,8,public class DefaultFocusTraversalPolicy   ,"A FocusTraversalPolicy that determines traversal order based on the order  of child Components in a Container. From a particular focus cycle root, the  policy makes a pre-order traversal of the Component hierarchy, and  traverses a Container's children according to the ordering of the array  returned by Container.getComponents(). Portions of the hierarchy that are  not visible and displayable will not be searched.  If client code has explicitly set the focusability of a Component by either  overriding Component.isFocusTraversable() or Component.isFocusable(), or by  calling Component.setFocusable(), then a DefaultFocusTraversalPolicy  behaves exactly like a ContainerOrderFocusTraversalPolicy. If, however, the  Component is relying on default focusability, then a  DefaultFocusTraversalPolicy will reject all Components with non-focusable  peers. This is the default FocusTraversalPolicy for all AWT Containers.  The focusability of a peer is implementation-dependent. Sun recommends that  all implementations for a particular native platform construct peers with  the same focusability. The recommendations for Windows and Unix are that  Canvases, Labels, Panels, Scrollbars, ScrollPanes, Windows, and lightweight  Components have non-focusable peers, and all other Components have  focusable peers. These recommendations are used in the Sun AWT  implementations. Note that the focusability of a Component's peer is  different from, and does not impact, the focusability of the Component  itself.  Please see How to Use the Focus Subsystem, a section in The Java Tutorial,  and the Focus Specification for more information.  Since:     1.4 See Also:     Container.getComponents(), Component.isFocusable(),      Component.setFocusable(boolean), Serialized Form",1,1,1,0,0,0,1,1,0,0,0,0,5,241,clean
108,39391,253629,257309,7,System.Web.HttpApplication.PostLogRequest,"Additional online Documentation: Syntax: public event EventHandler PostLogRequest Summary: Occurs when ASP.NET has completed processing all the event handlers for the LogRequest event. Remarks: For more information about how to handle events, see Consuming Events. PostLogRequest is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies.",0,0,0,0,0,0,0,0,0,1,1,0,2,53,clean
109,33414,487619,491363,8,"@Target(value={METHOD,FIELD}) @Retention(value=RUNTIME) public @interface Version ","Specifies the version field or property of an entity class that serves as  its optimistic lock value. The version is used to ensure integrity when  performing the merge operation and for optimistic concurrency control.  Only a single Version property or field should be used per class;  applications that use more than one Version property or field will not be  portable.  The Version property should be mapped to the primary table for the entity  class; applications that map the Version property to a table other than the  primary table will not be portable.  The following types are supported for version properties: int, Integer,  short, Short, long, Long, java.sql.Timestamp.   Example:  @Version @Column(name=OPTLOCK) protected int getVersionNum() { return versionNum; }   Since:     Java Persistence 1.0  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,1,0,0,0,0,1,1,0,0,5,166,clean
110,38013,220064,223013,7,System.Data.Odbc.OdbcTransaction,"Additional online Documentation: Syntax: public sealed class OdbcTransaction : DbTransaction Summary: Represents an SQL transaction to be made at a data source. This class cannot be inherited. Remarks: The application creates an OdbcTransaction object by calling BeginTransaction on the OdbcConnection object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction) are performed on the OdbcTransaction object. Example: The following example creates an OdbcConnection and an OdbcTransaction. It also demonstrates how to use the BeginTransaction, Commit, and Rollback methods. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,1,0,1,1,0,1,0,5,107,clean
111,38441,223741,226694,7,System.Web.UI.Design.WebFormsRootDesigner.PreFilterAttributes(System.Collections.IDictionary),Additional online Documentation: Syntax: protected virtual void PreFilterAttributes( IDictionary attributes ) Parameters attributesType: System.Collections.IDictionary The attributes for the class of the component. Summary: Allows a designer to add to the set of attributes that the designer exposes through a TypeDescriptor object.,1,0,0,0,0,0,1,0,0,0,1,1,4,42,mixed
112,33217,486375,490119,8,public URLName getURLName(),Return a URLName representing this service. The returned URLName does not include the password field.  Subclasses should only override this method if their URLName does not follow the standard format.  The implementation in the Service class returns (usually a copy of) the url field with the password and file information stripped out.  Returns: the URLName representing this service See Also: URLName,1,0,1,0,0,0,0,0,0,0,0,0,2,61,clean
113,32102,434745,438489,8,public void setImplicitDownCycleTraversal(boolean implicitDownCycleTraversal),"Sets whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly. If true, during normal forward focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root's default Component to focus. If false, the next Component in the focus traversal cycle rooted at the specified focus cycle root will be traversed instead. The default value for this property is true.  Parameters: implicitDownCycleTraversal - whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly See Also: getImplicitDownCycleTraversal(), getFirstComponent(java.awt.Container)",1,0,0,0,0,0,0,0,0,0,0,1,2,81,mixed
114,39066,240995,244063,7,System.ServiceModel.Channels.IContextBindingElement,Additional online Documentation: Syntax: public interface IContextBindingElement Summary: Defines the interface for a binding element that supports context exchange protocols. Remarks: This interface has no members.,1,0,0,0,0,0,1,0,0,0,0,0,2,26,clean
115,40021,261112,264808,7,System.Windows.Forms.AxHost.AxComponentEditor,"Additional online Documentation: Syntax: [ComVisibleAttribute(false)] [PermissionSetAttribute(SecurityAction.LinkDemand, Name = #FullTrust#)] [PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = #FullTrust#)] public class AxComponentEditor : WindowsFormsComponentEditor Summary: Provides an editor that uses a modal dialog box to display a property page for an ActiveX control. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0,2,64,clean
116,39218,237477,240472,7,System.ServiceModel.Activities.Send.SerializerOption,Additional online Documentation: Syntax: public SerializerOption SerializerOption { get; set; } Property Value Type: System.ServiceModel.Activities.SerializerOption The serializer to use for this operation. Summary: Gets or sets a value that specifies the serializer to use when sending a message. Remarks: This property is set to one of the SerializerOption enumeration values. The default serializer is DataContractSerializer.,1,0,0,0,0,0,1,0,0,0,0,1,3,56,mixed
117,38306,217477,220423,7,System.Xml.Xsl.Runtime.XmlQueryItemSequence,Additional online Documentation: Syntax: public sealed class XmlQueryItemSequence : XmlQuerySequence<XPathItem> Summary: A sequence of XML items that dynamically expands and allows random access to items. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,0,0,0,0,0,0,0,0,0,0,0,0,0,50,
118,39402,255436,259116,7,System.Web.Caching.CacheItemPriority,"Additional online Documentation: Syntax: public enum CacheItemPriority Summary: Specifies the relative priority of items stored in the Cache object. Remarks: When the Web server hosting an ASP.NET application runs low on memory, the Cache object selectively purges items to free system memory. When an item is added to the cache, you can assign it a relative priority compared to the other items stored in the cache. Items to which you assign higher priority values are less likely to be deleted from the cache when the server is processing a large number of requests, whereas items to which you assign lower priority values are more likely to be deleted. The default is Normal. Note Items can always be removed from the cache programmatically, regardless of their cache priority. Example: The following code example uses the Insert method to add an item to the Cache object with its priority parameter set to High.",1,0,0,0,0,0,1,0,1,0,0,0,3,152,clean
119,37788,209904,212832,7,System.AddIn.Hosting.AddInToken.Version,"Additional online Documentation: Syntax: public string Version { get; } Property Value Type: System.String The version of the add-in, or Nothing if the version number is not specified in the AddInAttribute attribute. Summary: Gets the version of the add-in, as specified in the AddInAttribute attribute. Remarks: The version number is a free-form string. Example: The following example displays the value of the Name, AddInFullName, Description, AssemblyName, Publisher, and Version properties to the console. This code example is part of a larger example provided for the AddInToken class.",0,0,0,0,0,0,0,0,1,0,0,0,1,89,clean
120,40202,260312,264005,7,System.Windows.Forms.DataVisualization.Charting.Series.Palette,"Additional online Documentation: Syntax: [BindableAttribute(true)] public ChartColorPalette Palette { get; set; } Property Value Type: System.Windows.Forms.DataVisualization.Charting.ChartColorPalette An ChartColorPalette enumeration value that determines the palette for the data series. Summary: Gets or sets the color palette of a Series object. Remarks: A palette is used to automatically assign colors to data elements if the data points themselves do not have colors assigned to them and if the data Series object that the data points belong to also does not have an assigned color. If no series or data point colors are explicitly specified, the colors used depend on the chart type and the Chart control palette or Series palette, if one is specified. See the table below for further details: Chart Type Series Palette Used? Colors Displayed by Data Points Any shape chart (for example, Pie and Doughnut charts) No First available colors used from Chart control palette. One color per data point. All charts except shape charts. No First available colors from Chart control palette. One color per data series. Any shape chart (for example, Pie and Doughnut charts) Yes First available colors used from Series palette. One color per data point. All charts except shape charts. Yes First available colors used from Series palette. One color per data series. This Palette property has precedence over the Palette property of the root Chart object, with respect to the display of data. NOTE: If the Palette property for both the Chart and Series objects is set to None, and no color is assigned to the relevant data series/data points, the default palette #BrightPastel# or PaletteCustomColors is used.",1,0,0,1,0,0,1,0,0,0,0,1,4,271,mixed
121,38456,224787,227740,7,System.Windows.Forms.Design.DocumentDesigner.menuEditorService,Additional online Documentation: Syntax: protected IMenuEditorService menuEditorService Summary: Initializes the menuEditorService variable to Nothing.,1,0,0,0,0,0,0,0,0,0,0,1,2,14,mixed
122,39740,248974,252641,7,System.Web.DynamicData.IDynamicDataSource.EnableDelete,"Additional online Documentation: Syntax: bool EnableDelete { get; set; } Property Value Type: System.Boolean true if the data source view supports the ability to delete rows; otherwise, false. Summary: Gets or sets a value that indicates whether the data source view supports the ability to delete rows.",1,0,1,0,0,0,0,0,0,0,0,0,2,46,clean
123,34307,473421,477165,8,"@Retention(value=RUNTIME) @Target(value={FIELD,METHOD}) public @interface XmlElementRef ","Maps a JavaBean property to a XML element derived from property's type.  Usage  @XmlElementRef annotation can be used with a JavaBean property or from  within XmlElementRefs  This annotation dynamically associates an XML element name with the  JavaBean property. When a JavaBean property is annotated with XmlElement,  the XML element name is statically derived from the JavaBean property name.  However, when this annotation is used, the XML element name is derived from  the instance of the type of the JavaBean property at runtime.   XML Schema substitution group support  XML Schema allows a XML document author to use XML element names that were  not statically specified in the content model of a schema using  substitution groups. Schema derived code provides support for substitution  groups using an element property, (section 5.5.5, Element Property of  JAXB 2.0 specification). An element property method signature is of the  form:   public void setTerm(JAXBElement<? extends Operator>); public JAXBElement<? extends Operator> getTerm();   An element factory method annotated with XmlElementDecl is used to create a  JAXBElement instance, containing an XML element name. The presence of  @XmlElementRef annotation on an element property indicates that the element  name from JAXBElement instance be used instead of deriving an XML element  name from the JavaBean property name.  The usage is subject to the following constraints:      * If the collection item type (for collection property) or property       type (for single valued property) is JAXBElement, then        @XmlElementRef}.name() and @XmlElementRef.namespace() must point an       element factory method with an @XmlElementDecl annotation in a class       annotated with @XmlRegistry (usually ObjectFactory class generated by       the schema compiler) :           o @XmlElementDecl.name() must equal @XmlElementRef.name()           o @XmlElementDecl.namespace() must equal             @XmlElementRef.namespace().     * If the collection item type (for collection property) or property       type (for single valued property) is not JAXBElement, then the type       referenced by the property or field must be annotated with        XmlRootElement.     * This annotation can be used with the following annotations:        XmlElementWrapper, XmlJavaTypeAdapter.  See Package Specification in javax.xml.bind.package javadoc for  additional common information.  Example 1: Ant Task Example  The following Java class hierarchy models an Ant build script. An Ant task  corresponds to a class in the class hierarchy. The XML element name of an  Ant task is indicated by the @XmlRootElement annotation on its  corresponding class.   @XmlRootElement(name=target) class Target { // The presence of @XmlElementRef indicates that the XML // element name will be derived from the @XmlRootElement // annotation on the type (for e.g. jar for JarTask). @XmlElementRef List<Task> tasks; }  abstract class Task { }  @XmlRootElement(name=jar) class JarTask extends Task { ... }  @XmlRootElement(name=javac) class JavacTask extends Task { ... }  <!-- XML Schema fragment --> <xs:element name=target type=Target> <xs:complexType name=Target> <xs:sequence> <xs:choice maxOccurs=unbounded> <xs:element ref=jar> <xs:element ref=javac> </xs:choice> </xs:sequence> </xs:complexType>    Thus the following code fragment:   Target target = new Target(); target.tasks.add(new JarTask()); target.tasks.add(new JavacTask()); marshal(target);   will produce the following XML output:     ....   ....     It is not an error to have a class that extends Task that doesn't have  XmlRootElement. But they can't show up in an XML instance (because they  don't have XML element names).  Example 2: XML Schema Susbstitution group support  The following example shows the annotations for XML Schema substitution  groups. The annotations and the ObjectFactory are derived from the schema.   @XmlElement class Math { //  The value of type()is //  JAXBElement.class , which indicates the XML //  element name ObjectFactory - in general a class marked //  with @XmlRegistry. (See ObjectFactory below) // //  The name() is operator, a pointer to a // factory method annotated with a //  XmlElementDecl with the name operator. Since //  operator is the head of a substitution group that //  contains elements add and sub elements, operator //  element can be substituted in an instance document by //  elements add or sub. At runtime, JAXBElement //  instance contains the element name that has been //  substituted in the XML document. // @XmlElementRef(type=JAXBElement.class,name=operator) JAXBElement<? extends Operator> term; }  @XmlRegistry class ObjectFactory { @XmlElementDecl(name=operator) JAXBElement<Operator> createOperator(Operator o) {...} @XmlElementDecl(name=add,substitutionHeadName=operator) JAXBElement<Operator> createAdd(Operator o) {...} @XmlElementDecl(name=sub,substitutionHeadName=operator) JAXBElement<Operator> createSub(Operator o) {...} }  class Operator { ... }   Thus, the following code fragment   Math m = new Math(); m.term = new ObjectFactory().createAdd(new Operator()); marshal(m);   will produce the following XML output:   <math> <add>...</add> </math>   Since:     JAXB2.0 See Also:     XmlElementRefs  Optional Element Summary  String 	name              String 	namespace           This parameter and name() are used to determine the XML element  for the JavaBean property.  Class 	type           The Java type being referenced.     type   public abstract Class type      The Java type being referenced.      If the value is DEFAULT.class, the type is inferred from the the type     of the JavaBean property.      Default:         javax.xml.bind.annotation.XmlElementRef.DEFAULT.class   namespace   public abstract String namespace      This parameter and name() are used to determine the XML element for the     JavaBean property.      If type() is JAXBElement.class , then namespace() and name() point to a     factory method with XmlElementDecl. The XML element name is the element     name from the factory method's XmlElementDecl annotation or if an     element from its substitution group (of which it is a head element) has     been substituted in the XML document, then the element name is from the      XmlElementDecl on the substituted element.      If type() is not JAXBElement.class, then the XML element name is the     XML element name statically associated with the type using the     annotation XmlRootElement on the type. If the type is not annotated     with an XmlElementDecl, then it is an error.      If type() is not JAXBElement.class, then this value must be .      Default:            name   public abstract String name      See Also:         namespace()     Default:         \#\#default Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,1,1,0,0,0,1,1,1,0,1,0,7,996,clean
124,40209,260407,264100,7,System.Windows.Forms.DataVisualization.Charting.StripLine.BackGradientStyle,"Additional online Documentation: Syntax: [BindableAttribute(true)] public GradientStyle BackGradientStyle { get; set; } Property Value Type: System.Windows.Forms.DataVisualization.Charting.GradientStyle A GradientStyle enumeration. The default value is None. Summary: Gets or sets the gradient style of the strip line. Remarks: The BackGradientStyle property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used. To use gradient colors: Use the BackColor property to set the primary color. Use the BackSecondaryColor property to set the secondary color. Set this BackGradientStyle property of the chart element to the desired gradient style. This property is not applicable if the StripWidth property is set to a value of 0.0.",1,0,1,1,0,0,1,1,0,0,0,1,6,112,mixed
125,38109,220578,223527,7,"System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)",Additional online Documentation: Summary: Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this SqlCommand.,1,0,0,0,0,0,1,0,0,0,0,0,2,22,clean
126,32713,449756,453500,8,public void notifyObservers(),"If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed.  Each observer has its update method called with two arguments: this observable object and null. In other words, this method is equivalent to:  notifyObservers(null)  See Also: clearChanged(), hasChanged(), Observer.update(java.util.Observable, java.lang.Object)",1,0,0,0,0,1,1,0,0,0,0,0,3,69,clean
127,39566,245529,249184,7,System.Web.HttpResponseWrapper.Headers,Additional online Documentation: Syntax: public override NameValueCollection Headers { get; } Property Value Type: System.Collections.Specialized.NameValueCollection The response headers. Summary: Gets the collection of response headers.,0,0,0,0,0,0,0,0,0,0,0,0,0,26,
128,32135,434150,437894,8,"public void show(Container parent, String name)","Flips to the component that was added to this layout with the specified name, using addLayoutComponent. If no such component exists, then nothing happens.  Parameters: parent - the parent container in which to do the layout name - the component name See Also: addLayoutComponent(java.awt.Component, java.lang.Object)",1,0,0,0,0,1,0,0,0,0,0,0,2,48,clean
129,33899,465450,469194,8,public interface MouseInputListener   ,A listener implementing all the methods in both the MouseListener and  MouseMotionListener interfaces.  See Also:     MouseInputAdapter,1,0,0,0,0,0,1,0,0,0,0,0,2,16,clean
130,38682,228427,231397,7,System.Drawing.Icon.ToBitmap,"Additional online Documentation: Syntax: public Bitmap ToBitmap() Return Value Type: System.Drawing.Bitmap A Bitmap that represents the converted Icon. Summary: Converts this Icon to a GDI+ Bitmap. Remarks: The transparent areas of the icon are lost when it is converted to a bitmap, and the transparent color of the resulting bitmap is set to RGB(13,11,12). The returned bitmap has the same height and width as the original icon. Example: The following code example demonstrates how to use the ToBitmap method. This example is designed to be used with Windows Forms. Create a form and paste the following code into it. Call the IconToBitmap method in the form's .Paint event handler, passing e as PaintEventArgs .",1,0,0,0,1,0,0,0,1,0,0,0,3,116,clean
131,32225,438376,442120,8,public Rectangle2D getBounds(),"Returns a Rectangle2D that encloses all of the bits drawn by this ShapeGraphicAttribute relative to the rendering position. A graphic can be rendered beyond its origin, ascent, descent, or advance; but if it does, this method's implementation should indicate where the graphic is rendered.  Overrides: getBounds in class GraphicAttribute Returns: a Rectangle2D that encloses all of the bits rendered by this ShapeGraphicAttribute.",1,1,1,0,0,0,1,0,0,0,0,1,5,65,mixed
132,34397,491820,495564,8,public abstract class GenericHandler   ,The javax.xml.rpc.handler.GenericHandler class implements the Handler  interface. SOAP Message Handler developers should typically subclass  GenericHandler class unless the Handler class needs another class as a  superclass.  The GenericHandler class is a convenience abstract class that makes writing  Handlers easy. This class provides default implementations of the lifecycle  methods init and destroy and also different handle methods. A Handler  developer should only override methods that it needs to specialize as part  of the derived Handler implementation class.  Version:     1.0 Author:     Rahul Sharma,1,0,1,1,0,0,1,0,0,0,0,0,4,84,clean
133,39414,257659,261350,7,System.Web.Management.WebViewStateFailureAuditEvent,"Additional online Documentation: Syntax: public class WebViewStateFailureAuditEvent : WebFailureAuditEvent Summary: Provides Web-application view-state-related-failure information. Remarks: ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The System.Web.Management namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events. ASP.NET raises events of type WebViewStateFailureAuditEvent when a view-state failure occurs. This failure indicates either an attempt to tamper with view state or its reuse from another machine with a different key. The related audit event code is AuditInvalidViewStateFailure. Note In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the healthMonitoring configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. Example: The following is an excerpt of a configuration file showing how to configure the EventLogWebEventProvider to capture view-state failures. For completeness we are showing the setup for the provider and eventMappings sections. They are already set by default. The only thing you need to do is to provide the setup for the rules section. Refer to healthMonitoring for more information. To generate a view-state error, enter a URL in your browser with the following query string:  The Windows Application Eventlog will capture a view-state failure, if you enter the following configuration settings. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1,3,284,mixed
134,38624,228137,231105,7,System.Drawing.FontFamily.FontFamily(),Additional online Documentation: Summary: Initializes a new FontFamily that uses the specified name.,1,0,0,0,0,0,0,0,0,0,0,1,2,13,mixed
135,32243,439017,442761,8,"public final boolean contains(double x, double y, double w, double h)","Tests if the interior of the Shape entirely contains the specified rectangular area. All coordinates that lie inside the rectangular area must lie within the Shape for the entire rectanglar area to be considered contained within the Shape.  The Shape.contains() method allows a Shape implementation to conservatively return false when:  * the intersect method returns true and * the calculations to determine whether or not the Shape entirely contains the rectangular area are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the rectangular area. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.  This method object may conservatively return false in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path. Such segments could lie entirely within the interior of the path if they are part of a path with a WIND_NON_ZERO winding rule or if the segments are retraced in the reverse direction such that the two sets of segments cancel each other out without any exterior area falling between them. To determine whether segments represent true boundaries of the interior of the path would require extensive calculations involving all of the segments of the path and the winding rule and are thus beyond the scope of this implementation.  Specified by: contains in interface Shape Parameters: x - the X coordinate of the upper-left corner of the specified rectangular area y - the Y coordinate of the upper-left corner of the specified rectangular area w - the width of the specified rectangular area h - the height of the specified rectangular area Returns: true if the interior of the Shape entirely contains the specified rectangular area; false otherwise or, if the Shape contains the rectangular area and the intersects method returns true and the containment calculations would be too expensive to perform. Since: 1.6 See Also: Area, Shape.intersects(double, double, double, double)",1,1,0,0,0,0,1,1,0,0,0,0,4,345,clean
136,38345,223111,226064,7,System.Web.UI.Design.DataSetViewSchema,"Additional online Documentation: Syntax: public sealed class DataSetViewSchema : IDataSourceViewSchema Summary: Represents the structure, or schema, of a DataTable. This class cannot be inherited. Remarks: Use the DataSetViewSchema class to list the structure of data using a DataTable at design time. Use the GetFields method to get a list of information about each field as DataColumn objects. The DataSetViewSchema class is used by custom control designer components to provide UI options to the user at design time that accurately reflect the structure of the data. To examine the components of data using a DataSet, use the following classes. DataSetSchema DataSetViewSchema DataSetFieldSchema ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,1,0,0,1,0,2,125,clean
137,39982,263121,266819,7,System.Windows.Forms.DataGridView.CellParsing,"Additional online Documentation: Syntax: public event DataGridViewCellParsingEventHandler CellParsing Summary: Occurs when a cell leaves edit mode if the cell value has been modified. Remarks: By default, the DataGridView control will attempt to convert a user-specified value displayed in a cell to an actual underlying cell value in the type specified by the cell ValueType property. This conversion uses the formatting properties of the cell style returned by the cell InheritedStyle property. If the standard conversion does not meet your needs, handle the CellParsing event to provide custom value conversion to the required type. Users can enter edit mode using the method specified by the EditMode property, and can leave edit mode, committing any changes to a cell, by moving to another cell or by pressing ENTER. Pressing ESC will revert any changes to the value before it is committed, and the CellParsing event will not occur. The CellParsing event occurs only if the cell value has actually been modified, even if the final value is the same as the original value. It also occurs when the CommitEdit method is called. When you handle the CellParsing event, you can convert the value yourself or you can customize the default conversion. For example, you can convert the value yourself using the cell ParseFormattedValue method with type converters of your choosing. Alternatively, you can let the default type converters parse the value, but modify the NullValue, DataSourceNullValue, and FormatProvider properties of the object returned by the DataGridViewCellParsingEventArgs.InheritedCellStyle property, which is initialized using the cell InheritedStyle property. When you convert the value yourself, replace the initial, formatted value of the ConvertEventArgs.Value property with the converted value in the type specified by the cell ValueType property. To indicate that no further parsing is necessary, set the DataGridViewCellParsingEventArgs.ParsingApplied property to true. When the event handler completes, if the ConvertEventArgs.Value is Nothing or is not of the correct type, or the DataGridViewCellParsingEventArgs.ParsingApplied property is false, the Value is parsed using the cell ParseFormattedValue method with default type converters. The default implementation of this method parses the value using the NullValue, DataSourceNullValue, and FormatProvider properties of the cell style passed in. If the value is not equal to NullValue, the value is parsed using the FormatProvider property and the type converters passed in. To customize the conversion of a cell value into a formatted value for display, handle the CellFormatting event. For more information about handling events, see Consuming Events. Example: The following code example shows how to handle the CellParsing event. It also shows how to use the DataGridViewCellParsingEventArgs class.",1,1,0,1,0,0,1,0,1,0,0,0,5,429,clean
138,39644,247957,251617,7,System.Web.DynamicData.QueryableFilterUserControl,"Additional online Documentation: Syntax: public abstract class QueryableFilterUserControl : UserControl ASP.NET Copy <asp:QueryableFilterUserControl /> Summary: Provides a base class for filter controls. Remarks: The QueryableFilterUserControl class is the base class for user controls that render filters that can be plugged into the Dynamic Data filtering framework that is based on the QueryExtender class. Implementers must override the GetQueryable control, which can return a modified IQueryable object that reflects the filter's state. The base class contains helper methods for building LINQ expression trees. Example: A Visual Studio project with source code is available to accompany this topic: Scaffolding Dynamic Data. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,1,0,0,1,0,1,1,7,125,mixed
139,33115,485529,489273,8,public class FacetTag   ,FacetTag is the JSP mechanism for denoting a UIComponent is to be added as  a facet to the component associated with its parent.  A FacetTag must have one and only one child. This child must be a  UIComponentTag instance representing a single UIComponent instance.  See Also:     Serialized Form,0,0,1,0,0,0,1,0,0,0,0,0,2,48,clean
140,33205,486072,489816,8,public abstract class BodyPart   ,"This class models a Part that is contained within a Multipart. This is an  abstract class. Subclasses provide actual implementations.  BodyPart implements the Part interface. Thus, it contains a set of  attributes and a content.  Author:     John Mani, Bill Shannon",0,0,0,0,0,0,1,0,0,0,0,0,1,40,clean
141,34145,471179,474923,8,public static Color getForeground(AttributeSet a),"Gets the foreground color setting from the attribute list.  Parameters: a - the attribute set Returns: the color, Color.black as the default",1,0,0,0,0,0,0,0,0,0,0,1,2,22,mixed
142,33439,487646,491390,8,public static interface CriteriaBuilder.Coalesce<T>   ,"Interface used to build coalesce expressions. A coalesce expression is  equivalent to a case expression that returns null if all its arguments  evaluate to null, and the value of its first non-null argument otherwise.",0,1,0,1,0,0,0,0,0,0,0,0,2,35,clean
143,38580,228048,231018,7,System.Drawing.CopyPixelOperation,Additional online Documentation: Syntax: [ComVisibleAttribute(true)] public enum CopyPixelOperation Summary: Determines how the source color in a copy pixel operation is combined with the destination color to result in a final color. Remarks: The CopyPixelOperation enumeration is used by the CopyFromScreen method of the Graphics class.,0,0,0,0,0,0,0,0,0,0,0,0,0,46,
144,38541,225959,228923,7,System.DirectoryServices.Protocols.PermissiveModifyControl,Additional online Documentation: Syntax: public class PermissiveModifyControl : DirectoryControl Summary: The PermissiveModifyControl class is used to modify the behavior of a ModifyRequest object. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,0,0,0,0,0,0,0,0,0,0,0,0,0,47,
146,33025,483835,487579,8,public java.lang.String getOnmouseup(),Return the value of the onmouseup property.  Contents: Javascript code executed when a pointer button is released over this element.,1,0,0,0,0,1,0,0,0,0,0,1,3,20,mixed
147,33930,467947,471691,8,public class BasicTreeUI.TreeToggleAction   ,For the first selected row expandedness will be toggled.,0,0,0,0,0,0,0,0,0,0,0,0,0,9,
148,32080,436565,440309,8,public final class SystemColor   ,"A class to encapsulate symbolic colors representing the color of native GUI  objects on a system. For systems which support the dynamic update of the  system colors (when the user changes the colors) the actual RGB values of  these symbolic colors will also change dynamically. In order to compare the  current RGB value of a SystemColor object with a non-symbolic Color  object, getRGB should be used rather than equals.  Note that the way in which these system colors are applied to GUI objects  may vary slightly from platform to platform since GUI objects may be  rendered differently on each platform.  System color values may also be available through the getDesktopProperty  method on java.awt.Toolkit.  See Also:     Toolkit.getDesktopProperty(java.lang.String), Serialized Form",1,1,0,0,0,0,1,1,0,0,0,0,4,125,clean
149,33504,457874,461618,8,public final String getName(),"Get the name of the category of which this attribute value is an instance.  For class Destination, the category name is spool-data-destination.  Specified by: getName in interface Attribute Returns: Attribute category name.",1,0,0,0,0,0,0,0,0,0,0,1,2,34,mixed
150,38610,229468,232439,7,System.Drawing.Design.UITypeEditor.GetEditStyle,Additional online Documentation: Summary: Gets the editor style used by the EditValue method.,0,0,0,0,0,0,0,0,0,0,0,0,0,13,
151,33661,459361,463105,8,public long getTickLength(),"Obtains the duration of this sequence, expressed in MIDI ticks.  Returns: this sequence's length in ticks See Also: getMicrosecondLength()",1,0,0,0,0,0,0,0,0,0,0,1,2,20,mixed
152,32839,452445,456189,8,public static final String SUBWINDOW_OF, Indicates that an object is a subwindow of one or more objects.  Since: 1.5 See Also: Constant Field Values ,0,0,0,0,0,0,0,0,0,0,0,0,0,18,
153,33762,463002,466746,8,"public JRadioButton(String text, Icon icon)","Creates a radio button that has the specified text and image, and that is initially unselected.  Parameters: text - the string displayed on the radio button icon - the image that the button should display",1,0,0,0,0,0,0,0,0,0,0,1,2,33,mixed
155,38764,231613,234587,7,"System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)",Additional online Documentation: Summary: Creates a new LogExtent and adds it to the collection.,1,0,0,0,0,0,0,0,0,0,0,1,2,14,mixed
156,33052,484461,488205,8,public abstract class FacesContextFactory   ,"FacesContextFactory is a factory object that creates (if needed) and  returns new FacesContext instances, initialized for the processing of the  specified request and response objects. Implementations may take advantage  of the calls to the release() method of the allocated FacesContext  instances to pool and recycle them, rather than creating a new instance  every time.  There must be one FacesContextFactory instance per web application that is  utilizing JavaServer Faces. This instance can be acquired, in a portable  manner, by calling:   FacesContextFactory factory = (FacesContextFactory) FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);",1,0,1,0,0,0,0,1,1,0,0,0,4,88,clean
157,39372,258509,262200,7,System.Web.SessionState.SessionStateUtility,"Additional online Documentation: Syntax: public static class SessionStateUtility Summary: Provides helper methods used by session-state modules and session-state store providers to manage session information for an ASP.NET application. This class cannot be inherited. Remarks: The SessionStateUtility class provides static helper methods that are used by a session-state module or a session-state store provider. Application developers will not need to call these methods from their code. The following table describes the ways the session-state module and session-state store provider use the methods. Method Use GetHttpSessionStateFromContext method Can be used by custom session-state modules to either retrieve session information for an existing session or create session information for a new session. AddHttpSessionStateToContext method Called by the session-state module to add the session data to the current HttpContext and make it available to application code through the Session property. RemoveHttpSessionStateFromContext method Called by the session-state module during the ReleaseRequestState or EndRequest events at the end of a request, to clear session data from the current HttpContext. GetSessionStaticObjects method Called by the session-state module to get a reference to the StaticObjects collection based on objects defined in the Global.asax file. The HttpStaticObjectsCollection collection returned is included with the session data added to the current HttpContext. Session data is passed to and retrieved from the current HttpContext as an HttpSessionStateContainer object or any valid implementation of the IHttpSessionState interface. For information about implementing a session-state store provider, see Implementing a Session-State Store Provider. Example: The following code example shows a custom session-state module implementation that stores session information in memory using a Hashtable. The module uses the SessionStateUtility class to reference the current HttpContext and SessionIDManager, retrieve the current HttpStaticObjectsCollection, and raise the Session_OnEnd event defined in the Global.asax file for the ASP.NET application. This application does not prevent simultaneous Web requests from using the same session identifier.  To use this custom session-state module in an ASP.NET application, you can replace the existing SessionStateModule reference in the Web.config file, as shown in the following example. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0,4,376,clean
158,38436,223912,226865,7,System.Web.UI.Design.WebControls.ContentPlaceHolderDesigner.GetPersistenceContent,Additional online Documentation: Syntax: public override string GetPersistenceContent() Return Value Type: System.String The persistable inner HTML of the control. Summary: Gets the persistable inner HTML of the control.,1,0,0,0,0,0,0,0,0,0,0,1,2,29,mixed
159,33518,458572,462316,8,public interface PrintJobListener ,"Implementations of this listener interface should be attached to a  DocPrintJob to monitor the status of the printer job. These callback  methods may be invoked on the thread processing the print job, or a service  created notification thread. In either case the client should not perform  lengthy processing in these callbacks.",0,0,0,1,0,1,0,0,0,0,0,0,2,51,clean
160,38200,214754,217694,7,System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32}),"Additional online Documentation: Summary: Invokes the canonical VarP function, which returns the statistical variance over a population. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL). Remarks: This function is translated to a corresponding function in the database.",1,0,0,0,0,0,0,0,0,0,0,1,2,42,mixed
161,39038,244201,247280,7,System.ServiceModel.Dispatcher.EndpointAddressMessageFilter,"Additional online Documentation: Syntax: public class EndpointAddressMessageFilter : MessageFilter Summary: Represents a query that tests whether a message satisfies the requirements of a specified endpoint address. Remarks: This filter tests whether a message satisfies a particular endpoint address. An EndpointAddress object includes a URI and an optional collection of addressing headers. The addressing and message headers are canonicalized in order to be compared for equality. If a parameter appears more than once in an EndpointAddress, the corresponding header must appear in the message at least that many times. IIS and the underlying file system (NTFS or FAT) are case-insensitive. URI comparisons done by this class are also case-insensitive. So, for example, http://www.microsoft.com is evaluated as equal to http://WWW.microsoft.com. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,1,0,0,0,4,150,clean
162,32998,482562,486306,8,public java.lang.String toString(),Overrides: toString in class java.lang.Enum<HtmlForm.PropertyKeys>,0,0,0,0,0,0,0,0,0,0,0,0,0,9,
163,39344,257467,261158,7,System.Web.Management.WebApplicationLifetimeEvent,"Additional online Documentation: Syntax: public class WebApplicationLifetimeEvent : WebManagementEvent Summary: Represents a significant event in the lifetime of an application. Remarks: ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The System.Web.Management namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events. Application lifetime events include events such as application startup and shutdown events. If an application is terminated, you can determine why by viewing the related event message field. When a WebApplicationLifetimeEvent instance occurs, ASP.NET health monitoring updates the Application Lifetime Events performance counter. You can log these events by adding the WebApplicationLifetimeEvent object to the rules subsection of the healthMonitoring section of the configuration file, as shown in the following example.  The Application Lifetime Events performance counter contains the sum total of all ASP.NET lifetime events. To view this performance counter in System Monitor (PerfMon), in the Add Counters window select ASP.NET from the Performance object drop-down list. Select the Application Lifetime Events performance counter, and click the Add button. For more information, see #Using the System Monitor (PerfMon) with ASP.NET Applications# on MSDN. If you allow events to be logged by the standard EventLogWebEventProvider, you can view them in Event Viewer by selecting the Application log. For more information, see Event Viewer in the Windows Server 2003 documentation on TechNet. Caution Because the WebApplicationLifetimeEvent object is a high-volume event, logging it is resource-intensive and might slow down your system. It can also cause  events to be overwritten in the case of the EventLogWebEventProvider class due to the high volume of events and the way the event logging works. Note In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the healthMonitoring configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebApplicationLifetimeEvent class, see the example provided in this topic. Notes to Inheritors When formatting your custom event information for display, override the FormatCustomEventDetails method rather than the ToString method. This will avoid overwriting or tampering with sensitive system information. Example: The following code example shows how to derive from the WebApplicationLifetimeEvent class to create a custom event.  The following configuration-file excerpt shows how to configure the healthMonitoring section of a configuration file to add the SampleWebApplicationLifetimeEvent code defined above to the ASP.NET health-monitoring system. To add the event to the system, you must define the event by adding a new entry to the eventMappings section and map the event to a provider by adding a new entry to the rules section. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,0,0,1,0,1,0,4,505,clean
164,39188,240268,243336,7,System.ServiceModel.TransactionFlowOption.Mandatory,Transaction must be flowed.,0,0,0,0,0,0,0,0,1,0,0,0,1,4,clean
165,32747,450325,454069,8,"public class ConcurrentHashMap<K,V>   ","A hash table supporting full concurrency of retrievals and adjustable  expected concurrency for updates. This class obeys the same functional  specification as Hashtable, and includes versions of methods corresponding  to each method of Hashtable. However, even though all operations are  thread-safe, retrieval operations do not entail locking, and there is not  any support for locking the entire table in a way that prevents all access.  This class is fully interoperable with Hashtable in programs that rely on  its thread safety but not on its synchronization details.  Retrieval operations (including get) generally do not block, so may overlap  with update operations (including put and remove). Retrievals reflect the  results of the most recently completed update operations holding upon their  onset. For aggregate operations such as putAll and clear, concurrent  retrievals may reflect insertion or removal of only some entries.  Similarly, Iterators and Enumerations return elements reflecting the state  of the hash table at some point at or since the creation of the  iterator/enumeration. They do not throw ConcurrentModificationException.  However, iterators are designed to be used by only one thread at a time.  The allowed concurrency among update operations is guided by the optional  concurrencyLevel constructor argument (default 16), which is used as a hint  for internal sizing. The table is internally partitioned to try to permit  the indicated number of concurrent updates without contention. Because  placement in hash tables is essentially random, the actual concurrency will  vary. Ideally, you should choose a value to accommodate as many threads as  will ever concurrently modify the table. Using a significantly higher value  than you need can waste space and time, and a significantly lower value can  lead to thread contention. But overestimates and underestimates within an  order of magnitude do not usually have much noticeable impact. A value of  one is appropriate when it is known that only one thread will modify and  all others will only read. Also, resizing this or any other kind of hash  table is a relatively slow operation, so, when possible, it is a good idea  to provide estimates of expected table sizes in constructors.  This class and its views and iterators implement all of the optional  methods of the Map and Iterator interfaces.  Like Hashtable but unlike HashMap, this class does not allow null to be  used as a key or value.  This class is a member of the Java Collections Framework.  Since:     1.5 See Also:     Serialized Form",1,0,1,0,1,0,1,0,0,0,0,0,4,401,clean
166,34318,491005,494749,8,public static final class XmlType.DEFAULT   ,Used in XmlType\#factoryClass() to signal that either factory mehod is not  used or that it's in the class with this XmlType itself.,0,0,0,0,0,0,0,0,0,0,0,0,0,24,
167,38954,240265,243333,7,System.ServiceModel.TransactionFlowOption,"Additional online Documentation: Syntax: public enum TransactionFlowOption Summary: An enumeration that is used with the TransactionFlowAttribute to specify the transaction flow policy for a service operation. Remarks: This enumeration is used to instantiate an instance of the TransactionFlowAttribute class, which is used to mark a service contract method to indicate its transaction flow policy. Example: The following code example demonstrates the use of this enumeration together with the TransactionFlowOption class at the operation level.",0,0,0,1,0,0,1,0,1,0,0,0,3,74,clean
168,34777,479446,483190,8,public interface RunTime   ,"Defines the base class that represents the Sending Context of a request.  The sending context provides access to information about the runtime  environment of the originator of a GIOP message. For example, when a value  type is marshalled on a GIOP Request message, the receiver of the value  type may need to ask the sender about the CodeBase for the implementation  of the value type.",1,1,0,0,0,0,0,0,0,0,0,0,2,65,clean
169,33506,458427,462171,8,public boolean equals(Object object),"Returns whether this printer resolution attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: 1. object is not null. 2. object is an instance of class PrinterResolution. 3. This attribute's cross feed direction resolution is equal to object's cross feed direction resolution. 4. This attribute's feed direction resolution is equal to object's feed direction resolution.  Overrides: equals in class ResolutionSyntax Parameters: object - Object to compare to. Returns: True if object is equivalent to this printer resolution attribute, false otherwise. See Also: Object.hashCode(), Hashtable",1,0,1,0,0,0,0,0,0,0,1,1,4,94,mixed
170,32134,435661,439405,8,public static final int CENTER, Indicates that the label should be centered.  See Also: Constant Field Values ,0,0,0,0,0,0,0,0,0,0,0,0,0,12,
171,38028,218589,221538,7,System.Data.DataTableCollection.CollectionChanged,"Additional online Documentation: Syntax: public event CollectionChangeEventHandler CollectionChanged Summary: Occurs after the DataTableCollection is changed because of DataTable objects being added or removed. Remarks: For more information about handling events, see Consuming Events. Example: The following example demonstrates how to use the CollectionChanged event.",0,0,0,0,0,1,0,0,1,0,1,0,3,44,clean
172,38044,218550,221499,7,System.Data.DataTable.ToString,"Additional online Documentation: Syntax: public override string ToString() Return Value Type: System.String A string consisting of the TableName and the DisplayExpression values. Summary: Gets the TableName and DisplayExpression, if there is one as a concatenated string. Remarks: Gets the TableName and DisplayExpression for the DataTable. Example: The following example returns the TableName and DisplayExpression using the ToString method.",1,0,0,0,0,0,0,0,1,0,0,1,3,59,mixed
173,32564,445843,449587,8,public abstract class AuthProvider   ,"This class defines login and logout methods for a provider.  While callers may invoke login directly, the provider may also invoke  login on behalf of callers if it determines that a login must be performed  prior to certain operations.  Since:     1.5 See Also:     Serialized Form",1,0,0,1,0,0,0,0,0,0,0,0,2,44,clean
174,37653,208268,211194,7,System.Activities.WorkflowApplicationIdleEventArgs,"Additional online Documentation: Syntax: public class WorkflowApplicationIdleEventArgs : WorkflowApplicationEventArgs Summary: Holds information about the workflow instance that has become idle. Example: The following code example inspects the WorkflowApplicationIdleEventArgs passed into the Idle handler of a WorkflowApplication instance. In this example the workflow going idle has one Bookmark with a name of EnterGuess, owned by an activity named ReadInt. This code example is based off of How to: Run a Workflow, which is part of the Getting Started Tutorial. If the Idle handler in that step is modified to contain the code from this example, the following output is displayed. BookmarkName: EnterGuess - OwnerDisplayName: ReadInt ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,1,0,0,0,1,127,clean
175,32291,439447,443191,8,public ColorModel getColorModel(),Returns the ColorModel.  Specified by: getColorModel in interface RenderedImage Returns: the ColorModel of this BufferedImage.,1,0,0,0,0,0,0,0,0,0,0,1,2,15,mixed
176,38777,233253,236232,7,System.Management.PutType,Additional online Documentation: Syntax: public enum PutType Summary: Describes the possible effects of saving an object to WMI when using Put.,0,0,0,0,0,0,1,0,0,0,0,0,1,21,clean
177,39616,246888,250546,7,System.Web.UI.DataVisualization.Charting.LabelAlignmentStyles.BottomRight,Label is aligned to the bottom-right of the data point.,0,0,0,0,0,0,0,0,0,0,0,0,0,11,
178,33215,486369,490113,8,"public void connect(java.lang.String user, java.lang.String password) throws MessagingException","Connect to the current host using the specified username and password. This method is equivalent to calling the connect(host, user, password) method with null for the host name.  Parameters: user - the user name password - this user's password Throws: AuthenticationFailedException - for authentication failures MessagingException - for other failures IllegalStateException - if the service is already connected Since: JavaMail 1.4 See Also: ConnectionEvent, Session.setPasswordAuthentication(javax.mail.URLName, javax.mail.PasswordAuthentication), connect(java.lang.String, java.lang.String, java.lang.String)",1,0,0,0,0,0,1,0,0,0,0,1,3,78,mixed
179,38543,225695,228659,7,System.DirectoryServices.Protocols.DsmlDocumentProcessing,Additional online Documentation: Syntax: public enum DsmlDocumentProcessing Summary: The DsmlDocumentProcessing enumeration specifies the processing method for a DSML document.,1,0,0,0,0,0,1,0,0,0,0,0,2,19,clean
180,39735,249655,253322,7,System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions,"Additional online Documentation: Syntax: public IDictionary<string, Exception> InnerExceptions { get; } Property Value Type: System.Collections.Generic.IDictionary(Of String, Exception) A collection that contains the exceptions. Implements IDynamicValidatorException.InnerExceptions Summary: Gets one or more exceptions that occurred when new or modified data was being validated. Remarks: The InnerExceptions collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation. A validation exception can occur if a value does not match the type of the property. For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern. Example: The following example shows an event handler for the Updating event. It displays any validation exception messages by using a Label control.  [C\#]",1,0,0,0,1,0,1,0,1,0,0,0,4,155,clean
181,33164,485706,489450,8,public interface DeliveryMode ,"The delivery modes supported by the JMS API are PERSISTENT and  NON_PERSISTENT.  A client marks a message as persistent if it feels that the application  will have problems if the message is lost in transit. A client marks a  message as non-persistent if an occasional lost message is tolerable.  Clients use delivery mode to tell a JMS provider how to balance message  transport reliability with throughput.  Delivery mode covers only the transport of the message to its destination.  Retention of a message at the destination until its receipt is acknowledged  is not guaranteed by a PERSISTENT delivery mode. Clients should assume that  message retention policies are set administratively. Message retention  policy governs the reliability of message delivery from destination to  message consumer. For example, if a client's message storage space is  exhausted, some messages may be dropped in accordance with a site-specific  message retention policy.  A message is guaranteed to be delivered once and only once by a JMS  provider if the delivery mode of the message is PERSISTENT and if the  destination has a sufficient message retention policy.",1,0,0,1,0,0,0,0,0,0,0,0,2,183,clean
183,38323,222087,225038,7,System.Deployment.Application.TrustNotGrantedException,"Additional online Documentation: Syntax: [SerializableAttribute] public class TrustNotGrantedException : DeploymentException Summary: Indicates that the application does not have the appropriate level of trust to run on the local computer. Remarks: By default, ClickOnce applications are given a level of trust on client computers that prevents them from engaging in potentially malicious activity, such as deleting data from the hard drive or accessing the network. A ClickOnce application can use either permission elevation or Trusted Application Deployment to request a higher level of trust: Permission elevation asks the user to grant the application a higher level of security. Trusted Application Deployment matches the digital signature of the ClickOnce application against a list of trusted publishers on the local machine. TrustNotGrantedException will be thrown if: The application uses permission elevation and the user denies the request for elevated trust; or The application uses Trusted Application Deployment and the digital certificate used to sign the application is not listed as a trusted publisher on the local machine.If you have deployed an update to an application, and the update uses more permissions than the previous version, and ClickOnce throws a TrustNotGrantedException, the new version will not install. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,1,0,0,1,0,4,218,clean
184,34828,492153,495897,8,"java.lang.Object[] getHeaders(javax.xml.namespace.QName header, JAXBContext context, boolean allRoles)","Gets headers that have a particular qualified name from the message in the message context. Note that a SOAP message can contain multiple headers with the same qualified name.  Parameters: header - The XML qualified name of the SOAP header(s). context - The JAXBContext that should be used to unmarshall the header allRoles - If true then returns headers for all SOAP roles, if false then only returns headers targetted at the roles currently being played by this SOAP node, see getRoles. Returns: An array of unmarshalled headers; returns an empty array if no message is present in this message context or no headers match the supplied qualified name. Throws: WebServiceException - If an error occurs when using the supplied JAXBContext to unmarshall. The cause of the WebServiceException is the original JAXBException.",1,0,0,0,0,0,1,0,0,0,0,0,2,129,clean
185,39508,256507,260187,7,System.Web.Configuration.PagesEnableSessionState.True,Session state is enabled.,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
186,33463,457460,461204,8,public interface CancelablePrintJob   ,"This interface is used by a printing application to cancel a print job.  This interface extends DocPrintJob. A DocPrintJob implementation returned  from a print service implements this interface if the print job can be  cancelled. Before trying to cancel a print job, the client needs to test if  the DocPrintJob object returned from the print service actually implements  this interface. Clients should never assume that a DocPrintJob implements  this interface. A print service might support cancellation only for certain  types of print data and representation class names. This means that only  some of the DocPrintJob objects returned from a service will implement this  interface.  Service implementors are encouraged to implement this optional interface  and to deliver a javax.print.event.PrintJobEvent.JOB_CANCELLED event to any  listeners if a job is successfully cancelled with an implementation of this  interface. Services should also note that an implementation of this method  may be made from a separate client thread than that which made the print  request. Thus the implementation of this interface must be made thread  safe.",1,1,1,1,0,0,1,0,0,0,0,0,5,175,clean
187,39087,242818,245892,7,System.ServiceModel.Configuration.SecurityElementBase.InitializeFrom(System.ServiceModel.Channels.BindingElement),Additional online Documentation: Syntax: protected internal override void InitializeFrom( BindingElement bindingElement ) Parameters bindingElementType: System.ServiceModel.Channels.BindingElement A binding element. Summary: Initializes this binding configuration element with the content of the specified binding element.,1,0,0,0,0,0,0,0,0,0,0,1,2,34,mixed
188,40004,265701,269400,7,System.Windows.Forms.HtmlElement.DragLeave,"Additional online Documentation: Syntax: public event HtmlElementEventHandler DragLeave Summary: Occurs when the user is no longer dragging an item over this element. Example: The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing MessageBox.Show with Console.WriteLine or appending the message to a multiline TextBox. To run the example code, paste it into a project that contains an instance of type HtmlElement named HtmlElement1. Then ensure that the event handler is associated with the DragLeave event.",1,0,0,0,0,0,0,0,1,0,0,0,2,120,clean
189,38869,235321,238306,7,"System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual,System.Object)",Additional online Documentation: Summary: Writes asynchronously to the XpsDocument or PrintQueue that created the XpsDocumentWriter.,1,0,0,0,0,0,1,1,0,0,0,1,4,15,mixed
190,33366,456636,460380,8,public NamingSecurityException(String explanation),Constructs a new instance of NamingSecurityException using the explanation supplied. All other fields default to null.  Parameters: explanation - Possibly null additional detail about this exception. See Also: Throwable.getMessage(),0,0,0,0,0,0,0,0,0,0,0,0,0,29,
191,40062,262056,265753,7,System.Windows.Forms.Control.DoubleBuffered,"Additional online Documentation: Syntax: protected virtual bool DoubleBuffered { get; set; } Property Value Type: System.Boolean true if the surface of the control should be drawn using double buffering; otherwise, false. Summary: Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker. Remarks: Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface. Buffered graphics require that the updated graphics data is first written to a buffer. The data in the graphics buffer is then quickly written to displayed surface memory. The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur. Note DoubleBuffered is not a bindable property.",1,1,0,1,0,0,0,0,0,0,0,1,4,125,mixed
192,32338,441558,445302,8,public class ObjectStreamField   ,A description of a Serializable field from a Serializable class. An array  of ObjectStreamFields is used to declare the Serializable fields of a  class.  Since:     1.2 See Also:     ObjectStreamClass,0,0,0,1,0,0,0,0,0,0,0,1,2,28,mixed
193,32663,448256,452000,8,public class ChoiceFormat   ,"A ChoiceFormat allows you to attach a format to a range of numbers. It is  generally used in a MessageFormat for handling plurals. The choice is  specified with an ascending list of doubles, where each item specifies a  half-open interval up to the next item:       X matches j if and only if limit[j] <= X < limit[j+1]   If there is no match, then either the first or last index is used,  depending on whether the number (X) is too low or too high. If the limit  array is not in ascending order, the results of formatting will be  incorrect. ChoiceFormat also accepts  u221E as equivalent to infinity(INF).  Note: ChoiceFormat differs from the other Format classes in that you create  a ChoiceFormat object with a constructor (not with a getInstance style  factory method). The factory methods aren't necessary because ChoiceFormat  doesn't require any complex setup for a given locale. In fact,  ChoiceFormat doesn't implement any locale specific behavior.  When creating a ChoiceFormat, you must specify an array of formats and an  array of limits. The length of these arrays must be the same. For example,      * limits = {1,2,3,4,5,6,7}       formats = {Sun,Mon,Tue,Wed,Thur,Fri,Sat}     * limits = {0, 1, ChoiceFormat.nextDouble(1)}       formats = {no files, one file, many files}       (nextDouble can be used to get the next higher double, to make the       half-open interval.)  Here is a simple example that shows formatting and parsing:       double[] limits = {1,2,3,4,5,6,7}; String[] dayOfWeekNames = {Sun,Mon,Tue,Wed,Thur,Fri,Sat}; ChoiceFormat form = new ChoiceFormat(limits, dayOfWeekNames); ParsePosition status = new ParsePosition(0); for (double i = 0.0; i <= 8.0; ++i) { status.setIndex(0); System.out.println(i +  ->  + form.format(i) +  ->  + form.parse(form.format(i),status)); }   Here is a more complex example, with a pattern format:       double[] filelimits = {0,1,2}; String[] filepart = {are no files,is one file,are {2} files}; ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart); Format[] testFormats = {fileform, null, NumberFormat.getInstance()}; MessageFormat pattform = new MessageFormat(There {0} on {1}); pattform.setFormats(testFormats); Object[] testArgs = {null, ADisk, null}; for (int i = 0; i < 4; ++i) { testArgs[0] = new Integer(i); testArgs[2] = testArgs[0]; System.out.println(pattform.format(testArgs)); }   Specifying a pattern for ChoiceFormat objects is fairly straightforward.  For example:       ChoiceFormat fmt = new ChoiceFormat( -1\#is negative| 0\#is zero or fraction | 1\#is one |1.0<is 1+ |2\#is two |2<is more than 2.); System.out.println(Formatter Pattern :  + fmt.toPattern());  System.out.println(Format with -INF :  + fmt.format(Double.NEGATIVE_INFINITY)); System.out.println(Format with -1.0 :  + fmt.format(-1.0)); System.out.println(Format with 0 :  + fmt.format(0)); System.out.println(Format with 0.9 :  + fmt.format(0.9)); System.out.println(Format with 1.0 :  + fmt.format(1)); System.out.println(Format with 1.5 :  + fmt.format(1.5)); System.out.println(Format with 2 :  + fmt.format(2)); System.out.println(Format with 2.1 :  + fmt.format(2.1)); System.out.println(Format with NaN :  + fmt.format(Double.NaN)); System.out.println(Format with +INF :  + fmt.format(Double.POSITIVE_INFINITY));   And the output result would be like the following:          Format with -INF : is negative Format with -1.0 : is negative Format with 0 : is zero or fraction Format with 0.9 : is zero or fraction Format with 1.0 : is one Format with 1.5 : is 1+ Format with 2 : is two Format with 2.1 : is more than 2. Format with NaN : is negative Format with +INF : is more than 2.    Synchronization  Choice formats are not synchronized. It is recommended to create separate  format instances for each thread. If multiple threads access a format  concurrently, it must be synchronized externally.  See Also:     DecimalFormat, MessageFormat, Serialized Form",1,0,1,1,1,0,1,1,1,0,0,0,7,550,clean
194,38422,222460,225413,7,System.ComponentModel.Design.MenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb),"Additional online Documentation: Syntax: public virtual void AddVerb( DesignerVerb verb ) Parameters verbType: System.ComponentModel.Design.DesignerVerb The DesignerVerb to add. Implements IMenuCommandService.AddVerb(DesignerVerb) Summary: Adds a verb to the verb table of the MenuCommandService. Remarks: This verb is available regardless of what designer is currently selected. Unlike menu commands, verbs can define the text that is displayed to the user, but they do not define the placement of the command on the actual menu.",1,0,0,0,0,0,0,0,0,0,0,1,2,75,mixed
195,40376,268613,272326,7,System.Workflow.Runtime.WorkflowRuntime.WorkflowRuntime(),Additional online Documentation: Summary: Initializes a new instance of the WorkflowRuntime class.,1,0,0,0,0,0,0,0,0,0,0,1,2,12,mixed
196,38276,217017,219962,7,System.Data.Services.Internal.ExpandedWrapper`6.ProjectedProperty0,Additional online Documentation: Syntax: public TProperty0 ProjectedProperty0 { get; set; } Property Value Type: TProperty0 The property to expand. Summary: Get or sets the property to expand.,1,0,0,0,0,0,0,0,0,0,0,1,2,25,mixed
197,34811,489127,492871,8,public static ServletSecurity.TransportGuarantee valueOf(java.lang.String name),Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null,1,0,1,0,0,0,0,0,0,0,0,0,2,73,clean
198,33312,455616,459360,8,public class OpenMBeanInfoSupport   ,"The OpenMBeanInfoSupport class describes the management information of an  open MBean: it is a subclass of MBeanInfo, and it implements the  OpenMBeanInfo interface. Note that an open MBean is recognized as such if  its getMBeanInfo() method returns an instance of a class which implements  the OpenMBeanInfo interface, typically OpenMBeanInfoSupport.  Since:     1.5 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0,0,54,
199,32372,441447,445191,8,public void readFully(byte[] buf) throws IOException,"Reads bytes, blocking until all bytes are read.  Specified by: readFully in interface DataInput Parameters: buf - the buffer into which the data is read Throws: EOFException - If end of file is reached. IOException - If other I/O error has occurred.",1,0,0,0,0,0,0,0,0,0,0,1,2,40,mixed
200,32132,435520,439264,8,public static final JobAttributes.DestinationType FILE, The DestinationType instance to use for specifying print to file. ,0,0,0,1,0,0,0,0,0,0,0,1,2,10,mixed
201,37781,206829,209675,7,"System.Activities.Design.View.ArgumentToExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)","Additional online Documentation: Syntax: JScript   public Object Convert( Object value, Type targetType, Object parameter, CultureInfo culture ) Parameters valueType: System.Object Not the value to convert. targetTypeType: System.Type Not implemented. parameterType: System.Object Not implemented. cultureType: System.Globalization.CultureInfo Not implemented. Return Value Type: System.Object Returns Object. Contains the converted Argument.Expression. Implements IValueConverter.Convert(Object, Type, Object, CultureInfo) Summary: Converts the specified argument into an Argument.Expression.",1,0,0,0,0,0,0,0,0,0,0,1,2,69,mixed
202,32412,442222,445966,8,public static boolean isJavaLetter(char ch),"Deprecated. Replaced by isJavaIdentifierStart(char).  Determines if the specified character is permissible as the first character in a Java identifier.  A character may start a Java identifier if and only if one of the following is true:  * isLetter(ch) returns true * getType(ch) returns LETTER_NUMBER * ch is a currency symbol (such as $) * ch is a connecting punctuation character (such as _).  Parameters: ch - the character to be tested. Returns: true if the character may start a Java identifier; false otherwise. Since: 1.02 See Also: isJavaLetterOrDigit(char), isJavaIdentifierStart(char), isJavaIdentifierPart(char), isLetter(char), isLetterOrDigit(char), isUnicodeIdentifierStart(char)",0,0,1,0,0,0,0,0,0,0,0,1,2,95,mixed
203,32392,442567,446311,8,public class LinkageError   ,"Subclasses of LinkageError indicate that a class has some dependency on  another class; however, the latter class has incompatibly changed after the  compilation of the former class.  Since:     JDK1.0 See Also:     Serialized Form",0,0,0,1,0,0,1,0,0,0,0,0,2,33,clean
204,39033,241330,244404,7,System.ServiceModel.Channels.MessageVersion,"Additional online Documentation: Syntax: public sealed class MessageVersion Summary: Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange. Remarks: The MessageVersion contains the versioning information both about the SOAP envelope and the addressing protocol that is used by a message. An instance of Message is bound upon creation to a specific MessageVersion by passing the version as a parameter into one of the CreateMessage overloads. All the static #get# properties in this class, such as Soap11WSAddressing10 and Soap12 have enumeration-like semantics. They provide an enumeration of the possible message versions supported by the runtime. A message has an envelope structure and an addressing structure. MessageVersion is just a shortcut for supplying {EnvelopeVersion, AddressingVersion} together. There are currently two SOAP envelope versions available: SOAP 1.1 and SOAP 1.2. These versions of SOAP are represented by EnvelopeVersion and are returned by the Soap11 and Soap12 properties. The version of SOAP associated with the MessageVersion can be recovered by using the Envelope property. For more information, see the schema for SOAP 1.1 and SOAP 1.2. There are currently two versions of WS-Addressing available. The one submitted on 10 August 2004 and the one specified in the WS-Addressing 1.0 protocol. The address version used by the current message version can be recovered using the Addressing property. These versions of WS-Addressing are represented by AddressingVersion and are returned by the WSAddressingAugust2004 and WSAddressing10 properties. The WS-Addressing August 2004 is retained as a legacy value. The 10 August 2004 W3C Member Submission for WS-Addressing is available at Web Services Addressing (WS-Addressing). The 17 August 2005 W3C Candidate Recommendation for WS-Addressing 1.0 - Core is available at Web Services Addressing 1.0 - Core. None provides support for using #plain old XML# (POX)-style messaging. Enabling basic POX messaging is now a matter of setting up an HTTP binding on your service with a text encoder that uses None. Message version objects can be created using specified versions of WS-Addressing and SOAP using one of the CreateVersion overloads. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,0,1,0,0,3,357,clean
205,33156,485630,489374,8,@Qualifier @Documented @Retention(value=RUNTIME) public @interface Named ,"String-based qualifier.  Example usage:   public class Car { @Inject @Named(driver) Seat driverSeat; @Inject @Named(passenger) Seat passengerSeat; ... }  Optional Element Summary  java.lang.String 	value           The name.     value   public abstract java.lang.String value      The name.      Default:          Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",0,1,0,0,0,0,0,0,1,0,0,1,3,81,mixed
206,40150,265339,269038,7,System.Windows.Forms.Form.OnEnter(System.EventArgs),Additional online Documentation:,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
207,33851,460637,464381,8,public void setText(String text),Sets the button's text.  Parameters: text - the string used to set the text See Also: getText(),0,0,0,0,0,0,0,0,0,0,0,0,0,17,
208,39475,253973,257653,7,System.Web.HttpCachePolicy.AppendCacheExtension(System.String),"Additional online Documentation: Syntax: public void AppendCacheExtension( string extension ) Parameters extensionType: System.String The text to append to the Cache-Control header. Summary: Appends the specified text to the Cache-Control HTTP header. Remarks: If the browser does not recognize cache control directives or extensions, the browser must ignore the unrecognized terms. For more information, see RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1, available on the World Wide Web Consortium (W3C) Web site. AppendCacheExtension is introduced in the .NET Framework version 3.5. For more information, see .NET Framework Versions and Dependencies. Example: The following code example demonstrates the use of a cache-control extension supported by Internet Explorer. The server is indicating to the browser that the content will not change for one hour (pre-check=3600) and instructs it to retrieve the content directly from the local cache. However, if the content is modified by the server and the page is requested by the user within a fifteen-minute (post-check= 900) to one-hour period, the browser displays the information found in the local cache but also performs a background check and optional fetch of the new content on the server.",1,0,0,0,0,0,0,0,1,0,1,0,3,189,clean
209,32274,439493,443237,8,public class BufferedImageFilter   ,"The BufferedImageFilter class subclasses an ImageFilter to provide a simple  means of using a single-source/single-destination image operator ( BufferedImageOp) to filter a BufferedImage in the Image  Producer/Consumer/Observer paradigm. Examples of these image operators are:  ConvolveOp, AffineTransformOp and LookupOp.  See Also:     ImageFilter, BufferedImage, BufferedImageOp",1,0,0,0,0,0,1,0,0,0,0,0,2,47,clean
210,33817,463085,466829,8,"protected void addImpl(Component comp, Object constraints, int index)","Overridden to enforce the position of the glass component as the zero child.  Overrides: addImpl in class Container Parameters: comp - the component to be enhanced constraints - the constraints to be respected index - the index See Also: Container.add(Component), Container.add(Component, int), Container.add(Component, java.lang.Object), LayoutManager, LayoutManager2",0,0,0,0,0,0,0,0,0,0,0,0,0,51,
211,32288,440049,443793,8,"public static WritableRaster createInterleavedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location)","Creates a Raster based on a PixelInterleavedSampleModel with the specified DataBuffer, width, height, scanline stride, pixel stride, and band offsets. The number of bands is inferred from bandOffsets.length. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used.  Note that interleaved DataBuffer.TYPE_INT Rasters are not supported. To create a 1-band Raster of type DataBuffer.TYPE_INT, use Raster.createPackedRaster().  Parameters: dataBuffer - the DataBuffer that contains the image data w - the width in pixels of the image data h - the height in pixels of the image data scanlineStride - the line stride of the image data pixelStride - the pixel stride of the image data bandOffsets - the offsets of all bands location - the upper-left corner of the Raster Returns: a WritableRaster object with the specified DataBuffer, width, height, scanline stride, pixel stride and band offsets. Throws: RasterFormatException - if w or h is less than or equal to zero, or computing either location.x + w or location.y + h results in integer overflow IllegalArgumentException - if dataType is not one of the supported data types, which are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT RasterFormatException - if dataBuffer has more than one bank. NullPointerException - if dataBuffer is null",1,0,1,0,0,0,0,1,0,0,0,1,4,205,mixed
212,33862,461887,465631,8,public void setDefaultCloseOperation(int operation),"Sets the operation that will happen by default when the user initiates a close on this dialog. You must specify one of the following choices:  * DO_NOTHING_ON_CLOSE (defined in WindowConstants): Don't do anything; require the program to handle the operation in the windowClosing method of a registered WindowListener object. * HIDE_ON_CLOSE (defined in WindowConstants): Automatically hide the dialog after invoking any registered WindowListener objects. * DISPOSE_ON_CLOSE (defined in WindowConstants): Automatically hide and dispose the dialog after invoking any registered WindowListener objects.  The value is set to HIDE_ON_CLOSE by default. Changes to the value of this property cause the firing of a property change event, with property name defaultCloseOperation.  Note: When the last displayable window within the Java virtual machine (VM) is disposed of, the VM may terminate. See AWT Threading Issues for more information.  Parameters: operation - the operation which should be performed when the user closes the dialog Throws: IllegalArgumentException - if defaultCloseOperation value isn't one of the above valid values See Also: Window.addWindowListener(java.awt.event.WindowListener), getDefaultCloseOperation(), WindowConstants",1,1,1,0,0,0,0,0,0,0,0,0,3,178,clean
213,39150,240205,243273,7,System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement),Additional online Documentation: Syntax: protected void LoadConfigurationSection( ServiceElement serviceSection ) Parameters serviceSectionType: System.ServiceModel.Configuration.ServiceElement The ServiceElement to be loaded from configuration. Summary: Loads the service element from the configuration file of the hosted service.,1,0,0,0,0,0,0,0,0,0,0,1,2,35,mixed
214,39535,256430,260110,7,System.Web.Configuration.MachineKeySection.DecryptionKey,"Additional online Documentation: Syntax: [StringValidatorAttribute(MinLength = )] [TypeConverterAttribute(typeof(WhiteSpaceTrimStringConverter))] [ConfigurationPropertyAttribute(#decryptionKey#, DefaultValue = #AutoGenerate,IsolateApps#)] public string DecryptionKey { get; set; } Property Value Type: System.String A key value, or a value that indicates how the key is generated. The default is #AutoGenerate,IsolateApps#. Summary: Gets or sets the key that is used to encrypt and decrypt data, or the process by which the key is generated. Remarks: The DecryptionKey property is used for encryption and decryption, such as in Windows Forms authentication, and for view state when the Validation property is set to #3DES# or #AES#. Use the #AutoGenerate# option to specify that ASP.NET generates a random key and stores it in the Local Security Authority. The #AutoGenerate# option is part of the default value. If you add the #IsolateApps# modifier to the #AutoGenerate# DecryptionKey value, ASP.NET generates a unique encrypted key for each application by using each application's application ID. #IsolateApps# is also part of the default value. If you need to support configuration across a network of Web servers (a Web farm), set the DecryptionKey property manually to ensure consistent configuration. For information about how to manually generate values for the DecryptionKey attribute, see How To: Configure MachineKey in ASP.NET 2.0. This property is typically set declaratively in the DecryptionKey attribute of the machineKey element of the Web.config file. For more information, see the machineKey element. Example: The following example demonstrates how to set the DecryptionKey property by using code. This example is part of a larger example provided for the MachineKeySection class.",1,0,0,1,0,0,1,1,1,0,0,0,5,258,clean
215,32477,444773,448517,8,public class URLDecoder   ,"Utility class for HTML form decoding. This class contains static methods  for decoding a String from the application/x-www-form-urlencoded MIME  format.  To conversion process is the reverse of that used by the URLEncoder class.  It is assumed that all characters in the encoded string are one of the  following: a through z, A through Z, 0 through 9, and -, _ , ., and *. The character % is allowed but is interpreted as the  start of a special escaped sequence.  The following rules are applied in the conversion:      * The alphanumeric characters a through z, A through Z and 0       through 9 remain the same.     * The special characters ., -, *, and _ remain the same.     * The plus sign + is converted into a space character   .     * A sequence of the form %xy will be treated as representing a byte       where xy is the two-digit hexadecimal representation of the 8 bits.       Then, all substrings that contain one or more of these byte sequences       consecutively will be replaced by the character(s) whose encoding       would result in those consecutive bytes. The encoding scheme used to       decode these characters may be specified, or if unspecified, the       default encoding of the platform will be used.  There are two possible ways in which this decoder could deal with illegal  strings. It could either leave illegal characters alone or it could throw  an IllegalArgumentException. Which approach the decoder takes is left to  the implementation.  Since:     1.2",1,0,1,1,0,0,0,0,0,0,0,0,3,227,clean
216,38649,229697,232668,7,System.Drawing.Drawing2D.HatchStyle.DarkHorizontal,Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice the width of Horizontal.,1,0,0,0,1,0,1,0,0,0,0,0,3,18,clean
217,38476,227018,229983,7,System.DirectoryServices.ActiveDirectory.DirectoryServer,"Additional online Documentation: Syntax: [DirectoryServicesPermissionAttribute(SecurityAction.LinkDemand, Unrestricted = true)] public abstract class DirectoryServer : IDisposable Summary: The DirectoryServer class is an abstract class that represents an Active Directory Domain Services server or AD LDS instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0,2,59,clean
218,32828,452626,456370,8,public interface AccessibleTableModelChange ,"The AccessibleTableModelChange interface describes a change to the table  model. The attributes of the model change can be obtained by the following  methods:      * public int getType()     * public int getFirstRow();     * public int getLastRow();     * public int getFirstColumn();     * public int getLastColumn(); The model change type returned by getType() will be one of:     * INSERT - one or more rows and/or columns have been inserted     * UPDATE - some of the table data has changed     * DELETE - one or more rows and/or columns have been deleted The affected area of the table can be determined by the other four methods  which specify ranges of rows and columns  Since:     1.3 See Also:     Accessible, Accessible.getAccessibleContext(), AccessibleContext,      AccessibleContext.getAccessibleTable()",1,0,0,0,0,0,0,0,0,0,0,1,2,109,mixed
219,39794,250381,254049,7,System.Web.UI.MobileControls.Constants,"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class Constants Summary: Creates a UI element that allows user invocation of ASP.NET event handlers and provides a way to post user input from UI elements back to the server. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The following table describes the read-only Constants class members you can use. Member Description AlternatingItemTemplateTag Contains the tag name for the AlternatingItem template. ContentTemplateTag Contains the tag name for the Content template. DefaultSessionsStateHistorySize Contains the default depth of the history stack. EventArgumentID The argument associated with the postback event. EventSourceID Contains the query String name of the event target (the control that generated the postback). FooterTemplateTag Contains the tag name for the Footer template. FormIDPrefix Contains the prefix of a form in a URL. HeaderTemplateTag Contains the tag name for the HeaderTemplate. ItemDetailsTemplateTag Contains the tag name for the ItemDetails template. ItemTemplateTag Contains the tag name for the Item template. LabelTemplateTag Contains the tag name for the Label template. OptimumPageWeightParameter Contains the default page weight. PagePrefix Contains a page number delimiter used to ensure proper page numbering in a postback. ScreenCharactersHeightParameter Contains the default for the height of the characters on the screen. ScriptTemplateTag Contains the tag name for the Script template. SelectionListSpecialCharacter Contains the character used in CheckBox IDs for cHTML. SeparatorTemplateTag Contains the tag name for the Separator template. SymbolProtocol Contains the characters used to denote the beginning of an i-mode or J-Phone symbol scheme. UniqueFilePathSuffixVariable Contains the query String name of the unique file path suffix. UniqueFilePathSuffixVariableWithoutEqual Contains the query String name of the unique file path suffix, but no equal sign. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,1,1,4,353,mixed
220,37676,209438,212364,7,System.Activities.Tracking.WorkflowInstanceStates,Additional online Documentation: Syntax: public static class WorkflowInstanceStates Summary: Specifies the state of a workflow instance. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,0,0,0,1,0,0,0,0,1,3,41,mixed
221,34274,490844,494588,8,public interface PrintConversionEvent   ,"This event indicates that a problem was encountered while converting data  from the Java content tree into its lexical representation.  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc.         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems, Inc. See Also:     ValidationEvent, ValidationEventHandler, Marshaller",0,1,0,0,0,0,0,0,0,0,0,0,1,43,clean
222,38388,224472,227425,7,System.Web.UI.Design.WebControls.XmlDataSourceDesigner,"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class XmlDataSourceDesigner : HierarchicalDataSourceDesigner, IDataSourceDesigner Summary: Provides design-time support in a visual designer for the XmlDataSource control. Remarks: The XmlDataSourceDesigner class is intended for use by the XmlDataSource control, and not intended for use by developers of custom XML data source controls. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,0,0,0,1,0,3,78,clean
223,37693,208012,210938,7,"System.Activities.NativeActivityContext.ScheduleFunc``13(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback{``12},System.Activities.FaultCallback)","Additional online Documentation: Syntax: public ActivityInstance ScheduleAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>( ActivityAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, CompletionCallback onCompleted, FaultCallback onFaulted ) Type Parameters T1 The data that is carried into an activity. T2 The data that is carried into an activity. T3 The data that is carried into an activity. T4 The data that is carried into an activity. T5 The data that is carried into an activity. T6 The data that is carried into an activity. T7 The data that is carried into an activity. T8 The data that is carried into an activity. T9 The data that is carried into an activity. T10 The data that is carried into an activity. T11 The data that is carried into an activity. T12 The data that is carried into an activity. Parameters activityActionType: System.Activities.ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) An action that executes when a specific event occurs in the parent activity. argument1Type: T1 An argument that carries data into an activity. argument2Type: T2 An argument that carries data into an activity. argument3Type: T3 An argument that carries data into an activity. argument4Type: T4 An argument that carries data into an activity. argument5Type: T5 An argument that carries data into an activity. argument6Type: T6 An argument that carries data into an activity. argument7Type: T7 An argument that carries data into an activity. argument8Type: T8 An argument that carries data into an activity. argument9Type: T9 An argument that carries data into an activity. argument10Type: T10 An argument that carries data into an activity. argument11Type: T11 An argument that carries data into an activity. argument12Type: T12 An argument that carries data into an activity. onCompletedType: System.Activities.CompletionCallback A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12). onFaultedType: System.Activities.FaultCallback A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12). Return Value Type: System.Activities.ActivityInstance An instance of an activity. Summary: Schedules for execution a specified ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) that has twelve parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).",1,0,0,0,0,0,1,0,0,0,0,1,3,470,mixed
224,39317,244773,248427,7,System.Transactions.Transaction,"Additional online Documentation: Syntax: [SerializableAttribute] public class Transaction : IDisposable, ISerializable Summary: Represents a transaction. Remarks: The System.Transactions namespace provides both an explicit programming model based on the Transaction class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure. It is highly recommended that you use the easier implicit model for development. To get started, please see the Implementing An Implicit Transaction Using Transaction Scope topic. For more information on writing a transactional application, see Writing A Transactional Application. The Transaction class contains methods used by developers implementing resource managers for enlistment. It also provides functionalities for cloning a transaction and controlling the current transaction context. You can obtain the current transaction, if one is set, using the static Current property. ThreadSafety: This type is thread safe.",1,0,0,0,0,0,1,1,0,0,0,1,4,138,mixed
225,33637,489676,493420,8,public interface SQLExecutionTag ,This interface allows tag handlers implementing it to receive values for  parameter markers in their SQL statements.  This interface is implemented by both <sql:query> and <sql:update>. Its  addSQLParameter() method is called by nested parameter actions (such as  <sql:param>) to substitute PreparedStatement parameter values for ?  parameter markers in the SQL statement of the enclosing SQLExecutionTag  action.  The given parameter values are converted to their corresponding SQL type  (following the rules in the JDBC specification) before they are sent to the  database.  Keeping track of the index of the parameter values being added is the  responsibility of the tag handler implementing this interface  The SQLExcecutionTag interface is exposed in order to support custom  parameter actions which may retrieve their parameters from any source and  process them before substituting them for a parameter marker in the SQL  statement of the enclosing SQLExecutionTag action  Author:     Justyna Horwat,1,0,0,1,0,1,1,0,0,0,0,0,4,146,clean
226,33895,465373,469117,8,public abstract class InternalFrameAdapter   ,"An abstract adapter class for receiving internal frame events. The methods  in this class are empty. This class exists as convenience for creating  listener objects, and is functionally equivalent to the WindowAdapter class  in the AWT.  See How to Write an Internal Frame Listener in The Java Tutorial and The  Java Class Libraries (update)  See Also:     InternalFrameEvent, InternalFrameListener, WindowListener",1,0,0,1,0,0,0,0,0,0,1,0,3,59,clean
227,32827,452287,456031,8,public interface Accessible ,"Interface Accessible is the main interface for the accessibility package.  All components that support the accessibility package must implement this  interface. It contains a single method, getAccessibleContext(), which  returns an instance of the class AccessibleContext.",1,0,1,0,0,0,1,0,0,0,0,0,3,35,clean
229,38558,225949,228913,7,System.DirectoryServices.Protocols.PageResultResponseControl.TotalCount,Additional online Documentation: Syntax: public int TotalCount { get; } Property Value Type: System.Int32 The estimated value of the total count of the entries returned. Summary: The TotalCount property contains the estimated result set size.,1,0,0,0,0,0,0,0,0,0,0,1,2,34,mixed
230,38140,213621,216561,7,System.Data.Common.DbCommandDefinition,Additional online Documentation: Syntax: public class DbCommandDefinition Summary: Defines a cacheable command plan. Remarks: The DbCommandDefinition class is used by the Entity Framework and is not intended for use as a stand-alone component. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,1,0,0,0,0,0,0,0,0,2,59,clean
231,34842,479707,483451,8,public DOMImplementationList getDOMImplementationList(String features),Return a list of implementations that support the desired features.  Parameters: features - A string that specifies which features are required. This is a space separated list in which each feature is specified by its name optionally followed by a space and a version number. This is something like: XML 1.0 Traversal +Events 2.0 Returns: A list of DOMImplementations that support the desired features.,1,0,0,0,0,0,0,0,0,0,0,1,2,61,mixed
232,39271,244337,247416,7,System.ServiceProcess.ServiceControllerPermissionEntry,"Additional online Documentation: Syntax: [SerializableAttribute] public class ServiceControllerPermissionEntry Summary: Defines the smallest unit of a code access security permission that is set for a ServiceController. Remarks: For more information on code access security, see Code Access Security. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0,2,62,clean
234,32362,441161,444905,8,public final void writeShort(int v) throws IOException,"Writes a short to the underlying output stream as two bytes, high byte first. If no exception is thrown, the counter written is incremented by 2.  Specified by: writeShort in interface DataOutput Parameters: v - a short to be written. Throws: IOException - if an I/O error occurs. See Also: FilterOutputStream.out",1,0,0,0,0,0,0,0,0,0,0,1,2,50,mixed
235,39571,245717,249371,7,System.Web.Security.MembershipCreateUserException.MembershipCreateUserException(),Additional online Documentation: Summary: Initializes a new instance of the MembershipCreateUserException class.,0,0,0,0,0,0,0,0,0,0,0,0,0,12,
236,32366,441842,445586,8,public int nextToken() throws IOException,"Parses the next token from the input stream of this tokenizer. The type of the next token is returned in the ttype field. Additional information about the token may be in the nval field or the sval field of this tokenizer.  Typical clients of this class first set up the syntax tables and then sit in a loop calling nextToken to parse successive tokens until TT_EOF is returned.  Returns: the value of the ttype field. Throws: IOException - if an I/O error occurs. See Also: nval, sval, ttype",1,0,0,0,0,1,0,0,0,0,0,0,2,89,clean
237,34609,478007,481751,8,public abstract class NameValuePairHelper   ,"org/omg/DynamicAny/NameValuePairHelper.java . Generated by the IDL-to-Java  compiler (portable), version 3.2 from  ../../../../src/share/classes/org/omg/DynamicAny/DynamicAny.idl Monday,  April 4, 2011 1:26:25 PM GMT-08:00",0,0,0,0,0,0,0,0,0,0,0,0,0,27,
238,32558,446353,450097,8,public final class SignedObject   ,"SignedObject is a class for the purpose of creating authentic runtime  objects whose integrity cannot be compromised without being detected.  More specifically, a SignedObject contains another Serializable object, the  (to-be-)signed object and its signature.  The signed object is a deep copy (in serialized form) of an original  object. Once the copy is made, further manipulation of the original object  has no side effect on the copy.  The underlying signing algorithm is designated by the Signature object  passed to the constructor and the verify method. A typical usage for  signing is the following:   Signature signingEngine = Signature.getInstance(algorithm, provider); SignedObject so = new SignedObject(myobject, signingKey, signingEngine);   A typical usage for verification is the following (having received  SignedObject so):   Signature verificationEngine = Signature.getInstance(algorithm, provider); if (so.verify(publickey, verificationEngine)) try { Object myobj = so.getObject(); } catch (java.lang.ClassNotFoundException e) {};   Several points are worth noting. First, there is no need to initialize the  signing or verification engine, as it will be re-initialized inside the  constructor and the verify method. Secondly, for verification to succeed,  the specified public key must be the public key corresponding to the  private key used to generate the SignedObject.  More importantly, for flexibility reasons, the constructor and verify  method allow for customized signature engines, which can implement  signature algorithms that are not installed formally as part of a crypto  provider. However, it is crucial that the programmer writing the verifier  code be aware what Signature engine is being used, as its own  implementation of the verify method is invoked to verify a signature. In  other words, a malicious Signature may choose to always return true on  verification in an attempt to bypass a security check.  The signature algorithm can be, among others, the NIST standard DSA, using  DSA and SHA-1. The algorithm is specified using the same convention as that  for signatures. The DSA algorithm using the SHA-1 message digest algorithm  can be specified, for example, as SHA/DSA or SHA-1/DSA (they are  equivalent). In the case of RSA, there are multiple choices for the message  digest algorithm, so the signing algorithm could be specified as, for  example, MD2/RSA, MD5/RSA or SHA-1/RSA. The algorithm name must be  specified, as there is no default.  The name of the Cryptography Package Provider is designated also by the  Signature parameter to the constructor and the verify method. If the  provider is not specified, the default provider is used. Each installation  can be configured to use a particular provider as default.  Potential applications of SignedObject include:      * It can be used internally to any Java runtime as an unforgeable       authorization token -- one that can be passed around without the fear       that the token can be maliciously modified without being detected.     * It can be used to sign and serialize data/object for storage outside       the Java runtime (e.g., storing critical access control data on       disk).     * Nested SignedObjects can be used to construct a logical sequence of       signatures, resembling a chain of authorization and delegation.  See Also:     Signature, Serialized Form",1,1,1,1,0,0,1,1,1,0,0,1,8,503,mixed
239,32142,435529,439273,8,public static final JobAttributes.DialogType NONE, The DialogType instance to use for specifying no print dialog. ,0,0,0,0,0,0,0,0,0,0,0,0,0,10,
240,39575,246505,250162,7,System.Web.UI.DataVisualization.Charting.CustomizeLegendEventArgs,"Additional online Documentation: Syntax: public class CustomizeLegendEventArgs : EventArgs Summary: Provides data for the CustomizeLegend event of the Chart control. Remarks: The CustomizeLegendEventArgs class is used in the CustomizeLegend event. There are only two properties in this class. The LegendItems property allows you to delete or modify both default and custom legend items, and to add custom legend items. This property can also be used to change the order of legend items. The LegendName property is used to identify the legend that raised this event. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,0,3,109,clean
241,37818,210355,213287,7,System.ComponentModel.DataAnnotations.DataTypeAttribute,"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Method|AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter, AllowMultiple = false)] public class DataTypeAttribute : ValidationAttribute Summary: Specifies the name of an additional type to associate with a data field. Remarks: The DataTypeAttribute attribute enables you to mark fields by using a type that is more specific than the database intrinsic type. The type name is selected from the DataType enumeration type. For example, a string data field that contains e-mail addresses can be specified as the EmailAddress type. This information is then accessed by the field templates to modify how the data field is processed. You use the DataTypeAttribute attribute for the following reasons: To provide additional type information for a data field. You do this by applying the DataTypeAttribute attribute to a data field in the data model and by specifying the additional type name from the DataType enumeration. The field template that processes the data field can access this additional metadata type information to determine how to process the field. For example, the text field template can generate hyperlinks for e-mail addresses whose intrinsic type is String. To associate a custom field template with a data field. The specified custom field template will then be used to process the data field. This is an alternative to using the UIHintAttribute attribute. When you apply the DataTypeAttribute attribute to a data field you must do the following: Follow the attribute usage rules. Implement the metadata class that contains the data fields to which you want to apply the attribute. Issue validation errors as appropriate. For more information, see ASP.NET Dynamic Data Guidelines. See a run-time code example of this feature: Run. Example: The following example uses the DataTypeAttribute attribute to customize the display of the EmailAddress data field. The e-mail addresses are shown as hyperlinks instead of as simple text, which is what Dynamic Data would infer from the intrinsic data type. The example code is in three parts, and it performs the following steps: It implements a metadata partial class and the associated metadata class. In the associated metadata class, it applies the DataTypeAttribute attribute to the EmailAddress data field by specifying the EmailAddress enumerated value. This indicates to the Text.ascx field template that it should customize the display of e-mail addresses. It modifies the Text.ascx field template to customize the display of the EmailAddress data fields.    <%@ Control Language=## CodeFile=#Text.ascx.cs# Inherits=#TextField# %> <!-- Removed, evaluated in the code behind. <%\# FieldValueString %> -->    To compile and run the example code, you need the following: Visual Studio 2008 Service Pack 1 or Visual Developer 2008 Express Edition Service Pack 1. The AdventureWorksLT sample database. For information about how to download and install the SQL Server sample database, see Microsoft SQL Server Product Samples: Database on the CodePlex site. Make sure that you install the correct version of the sample database for the version of SQL Server that you are running (SQL Server 2005 or SQL Server 2008). A data-driven Web site. This enables you to create a data context for the database and to create the class that contains the data field to customize. For more information, see Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,1,1,1,1,0,9,559,clean
242,33552,458759,462503,8,public class ScriptEngineManager   ,"The ScriptEngineManager implements a discovery and instantiation mechanism  for ScriptEngine classes and also maintains a collection of key/value pairs  storing state shared by all engines created by the Manager. This class uses  the service provider mechanism to enumerate all the implementations of  ScriptEngineFactory.  The ScriptEngineManager provides a method to return an array of all these  factories as well as utility methods which look up factories on the basis  of language name, file extension and mime type.  The Bindings of key/value pairs, referred to as the Global Scope  maintained by the manager is available to all instances of ScriptEngine  created by the ScriptEngineManager. The values in the Bindings are  generally exposed in all scripts.  Since:     1.6",1,0,0,1,0,0,1,0,0,0,0,0,3,116,clean
243,37728,209565,212491,7,"System.Activities.XamlIntegration.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)",Additional online Documentation:,0,0,0,0,0,0,1,0,0,0,0,0,1,3,clean
244,38798,233417,236397,7,System.Messaging.AccessControlEntryType,"Additional online Documentation: Syntax: public enum AccessControlEntryType Summary: Specifies whether to allow, deny, or revoke access rights for a trustee. Remarks: When you use the AccessControlEntry class to specify a new access right for a trustee, you set its EntryType property to describe whether to grant the right or deny it. Furthermore, you can define whether the new right is appended to an existing list (if the trustee already exists in the context for which you are adding or removing access privileges) or if the new right overwrites and deletes any previously defined rights. When creating a new Allow entry, there might be a preexisting Deny entry for the same trustee that takes precedence and must be addressed. Similarly, when creating a new Deny entry, there might be an existing Allow entry that takes precedence. For information about the order in which access rights are applied, see AccessControlList.",1,0,1,0,0,0,1,1,0,0,0,0,4,148,clean
245,32123,435317,439061,8,"public VolatileImage createCompatibleVolatileImage(int width, int height, int transparency)","Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration. The returned VolatileImage may have data that is stored optimally for the underlying graphics device and may therefore benefit from platform-specific rendering acceleration.  Parameters: width - the width of the returned VolatileImage height - the height of the returned VolatileImage transparency - the specified transparency mode Returns: a VolatileImage whose data layout and color model is compatible with this GraphicsConfiguration. Throws: IllegalArgumentException - if the transparency is not a valid value Since: 1.5 See Also: Transparency.OPAQUE, Transparency.BITMASK, Transparency.TRANSLUCENT, Component.createVolatileImage(int, int)",1,0,0,0,0,0,0,0,0,1,0,0,2,95,clean
246,39082,244166,247245,7,System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply,"Additional online Documentation: Syntax: public bool SerializeReply { get; set; } Property Value Type: System.Boolean true if the Formatter property serializes the return values into a reply message; otherwise, false. Summary: Gets or sets a value that specifies whether the Formatter object serializes reply messages. Remarks: Use the SerializeReply property to indicate whether the formatter serializes operation parameters into a reply message or whether the first parameter is sent as the outbound message. Note If set to false, the return value of the operation must be of type Message or an exception is thrown.",1,0,0,0,0,0,1,0,0,0,0,0,2,93,clean
247,32105,434594,438338,8,public void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled),"Sets whether focus traversal keys are enabled for this Component. Components for which focus traversal keys are disabled receive key events for focus traversal keys. Components for which focus traversal keys are enabled do not see these events; instead, the events are automatically converted to traversal operations.  Parameters: focusTraversalKeysEnabled - whether focus traversal keys are enabled for this Component Since: 1.4 See Also: getFocusTraversalKeysEnabled(), setFocusTraversalKeys(int, java.util.Set<? extends java.awt.AWTKeyStroke>), getFocusTraversalKeys(int)",0,0,0,0,0,0,1,0,0,0,0,0,1,73,clean
248,38025,218805,221754,7,System.Data.DbType,"Additional online Documentation: Syntax: public enum DbType Summary: Specifies the data type of a field, a property, or a Parameter object of a .NET Framework data provider. Remarks: The type of a parameter is specific to the .NET Framework data provider. Specifying the type converts the value of the Parameter to the data provider Type before passing the value to the data source. If the type is not specified, ADO.NET infers the data provider Type of the Parameter from the Value property of the Parameter object. You can also generically specify the type of a Parameter by setting DbType property of a Parameter object. ADO.NET cannot correctly infer the type if a byte array is larger than 8,000 bytes. Explicitly specify the DbType when working with byte arrays larger than 8,000 bytes.",1,0,0,0,0,0,0,1,0,0,0,0,2,132,clean
249,38699,231326,234299,7,System.EnterpriseServices.TransactionStatus,Additional online Documentation: Syntax: [SerializableAttribute] [ComVisibleAttribute(false)] public enum TransactionStatus Summary: Indicates the transaction status. Remarks: TransactionStatus is the value returned by Leave.,0,1,0,0,0,0,1,0,0,0,0,1,3,23,mixed
250,34698,479529,483273,8,public interface Document   ,"The Document interface represents the entire HTML or XML document.  Conceptually, it is the root of the document tree, and provides the primary  access to the document's data.  Since elements, text nodes, comments, processing instructions, etc. cannot  exist outside the context of a Document, the Document interface also  contains the factory methods needed to create these objects. The Node  objects created have a ownerDocument attribute which associates them with  the Document within whose context they were created.  See also the Document Object Model (DOM) Level 3 Core Specification.",1,1,0,1,0,0,1,0,0,0,1,0,5,88,clean
251,33465,457638,461382,8,public abstract class StreamPrintServiceFactory   ,"A StreamPrintServiceFactory is the factory for StreamPrintService  instances, which can print to an output stream in a particular document  format described as a mime type. A typical output document format may be  Postscript(TM).  This class is implemented by a service and located by the implementation  using the SPI JAR File specification.  Applications locate instances of this class by calling the  lookupStreamPrintServiceFactories(DocFlavor, String) method.  Applications can use a StreamPrintService obtained from a factory in place  of a PrintService which represents a physical printer device.",1,0,0,0,0,0,1,1,0,0,1,0,4,85,clean
252,39600,247253,250909,7,System.Web.UI.DataVisualization.Charting.Series.Series(),Additional online Documentation:,1,0,0,0,0,0,0,1,0,0,0,1,3,3,mixed
253,40327,267222,270936,7,System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.Language,Additional online Documentation: Syntax: public string Language { get; } Property Value Type: System.String The workflow compiler options programming language that is available at the current scope. Summary: Gets the workflow compiler options Language that is available at the current scope.,1,0,0,0,0,0,0,0,0,0,0,1,2,40,mixed
254,32824,452600,456344,8,public interface AccessibleStreamable ,"The AccessibleStreamable interface should be implemented by the  AccessibleContext of any component that presents the raw stream behind a  component on the display screen. Examples of such components are HTML,  bitmap images and MathML. An object that implements AccessibleStreamable  provides two things: a list of MIME types supported by the object and a  streaming interface for each MIME type to get the data.  Since:     1.5 See Also:     AccessibleContext",0,0,0,0,0,0,1,0,0,0,0,0,1,67,clean
255,38986,240242,243310,7,System.ServiceModel.SpnEndpointIdentity,"Additional online Documentation: Syntax: public class SpnEndpointIdentity : EndpointIdentity Summary: Represents a service principal name (SPN) for an identity when the binding uses Kerberos. Remarks: An SPN is the name by which a client uniquely identifies an instance of a service. If you install multiple instances of a service on computers throughout a forest, each instance must have its own SPN. A given service instance can have multiple SPNs if there are multiple names that clients might use for authentication. When a client wants to connect to a service, it locates an instance of the service, composes an SPN for that instance, and sets the identity to a SpnEndpointIdentity. A check will be made that the message is intended for that service. The three authentication modes used under Kerberos are: SSPINegotiate Kerberos KerberosOverTransport. Example: The following code shows one common way to create an instance of this class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,1,1,0,0,0,4,172,clean
256,32148,436303,440047,8,"public RadialGradientPaint(Point2D center, float radius, Point2D focus, float[] fractions, Color[] colors, MultipleGradientPaint.CycleMethod cycleMethod)","Constructs a RadialGradientPaint with a default SRGB color space.  Parameters: center - the center point, in user space, of the circle defining the gradient. The last color of the gradient is mapped to the perimeter of this circle. radius - the radius of the circle defining the extents of the color gradient focus - the point in user space to which the first color is mapped fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the circle. cycleMethod - either NO_CYCLE, REFLECT, or REPEAT Throws: NullPointerException - if one of the points is null, or fractions array is null, or colors array is null, or cycleMethod is null IllegalArgumentException - if radius is non-positive, or fractions.length != colors.length, or colors is less than 2 in size, or a fractions value is less than 0.0 or greater than 1.0, or the fractions are not provided in strictly increasing order",1,1,1,0,0,0,0,0,0,0,0,0,3,171,clean
257,34132,470001,473745,8,"public Dictionary<Object,Object> getDocumentProperties()","Supports managing a set of properties. Callers can use the documentProperties dictionary to annotate the document with document-wide properties.  Returns: a non-null Dictionary See Also: setDocumentProperties(java.util.Dictionary<java.lang.Object, java.lang.Object>)",0,0,0,1,0,0,0,0,0,0,0,0,1,37,clean
258,33653,459220,462964,8,public class InvalidMidiDataException   ,"An InvalidMidiDataException indicates that inappropriate MIDI data was  encountered. This often means that the data is invalid in and of itself,  from the perspective of the MIDI specification. An example would be an  undefined status byte. However, the exception might simply mean that the  data was invalid in the context it was used, or that the object to which  the data was given was unable to parse or use it. For example, a file  reader might not be able to parse a Type 2 MIDI file, even though that  format is defined in the MIDI specification.  See Also:     Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0,2,99,clean
259,38188,214999,217939,7,System.Data.Objects.DataClasses.EdmTypeAttribute.NamespaceName,Additional online Documentation: Syntax: public string NamespaceName { get; set; } Property Value Type: System.String A String that is the namespace name. Summary: The namespace name of the entity object type or complex type in the conceptual schema that maps to this type.,0,0,0,0,0,0,0,0,0,0,1,0,1,42,clean
260,32819,452281,456025,8,public void setLevel(int level),Sets the compression level for subsequent entries which are DEFLATED. The default setting is DEFAULT_COMPRESSION.  Parameters: level - the compression level (0-9) Throws: IllegalArgumentException - if the compression level is invalid,1,0,0,0,0,0,1,0,0,0,0,0,2,29,clean
261,32699,449624,453368,8,public abstract class ListResourceBundle   ,"ListResourceBundle is an abstract subclass of ResourceBundle that manages  resources for a locale in a convenient and easy to use list. See  ResourceBundle for more information about resource bundles in general.  Subclasses must override getContents and provide an array, where each item  in the array is a pair of objects. The first element of each pair is the  key, which must be a String, and the second element is the value associated  with that key.  The following example shows two members of a resource bundle family with  the base name MyResources. MyResources is the default member of the  bundle family, and MyResources_fr is the French member. These members are  based on ListResourceBundle (a related example shows how you can add a  bundle to this family that's based on a properties file). The keys in this  example are of the form s1 etc. The actual keys are entirely up to your  choice, so long as they are the same as the keys you use in your program to  retrieve the objects from the bundle. Keys are case-sensitive.        public class MyResources extends ListResourceBundle { protected Object[][] getContents() { return new Object[][] = { // LOCALIZE THIS {s1, The disk  {1}  contains {0}.},  // MessageFormat pattern {s2, 1},                               // location of {0} in pattern {s3, My Disk},                         // sample disk name {s4, no files},                        // first ChoiceFormat choice {s5, one file},                        // second ChoiceFormat choice {s6, {0,number} files},                // third ChoiceFormat choice {s7, 3 Mar 96},                        // sample date {s8, new Dimension(1,5)}                 // real object, not just string // END OF MATERIAL TO LOCALIZE }; } }  public class MyResources_fr extends ListResourceBundle { protected Object[][] getContents() { return new Object[][] = { // LOCALIZE THIS {s1, Le disque  {1}  {0}.},          // MessageFormat pattern {s2, 1},                               // location of {0} in pattern {s3, Mon disque},                      // sample disk name {s4, ne contient pas de fichiers},     // first ChoiceFormat choice {s5, contient un fichier},             // second ChoiceFormat choice {s6, contient {0,number} fichiers},    // third ChoiceFormat choice {s7, 3 mars 1996},                     // sample date {s8, new Dimension(1,3)}                 // real object, not just string // END OF MATERIAL TO LOCALIZE }; } }   Since:     JDK1.1 See Also:     ResourceBundle, PropertyResourceBundle",1,0,1,0,0,0,1,0,1,0,0,0,4,320,clean
262,40279,267939,271653,7,System.Workflow.ComponentModel.Design.LineAnchor,"Additional online Documentation: Syntax: public enum LineAnchor Summary: Determines the shapes of connector points on a workflow design surface. Remarks: Connectors are the lines rendered on the workflow design surface between interconnected activity designers. The ends of each line are called connector points, which are where the lines attach to the activity designers that they connect. LineAnchor provides values that determine the appearance of the connector points.",1,1,0,0,0,0,1,0,0,0,0,0,3,67,clean
263,34034,468272,472016,8,public class MetalComboBoxUI.MetalPropertyChangeListener   ,This inner class is marked public due to a compiler bug. This class  should be treated as a protected inner class. Instantiate it only within  subclasses of .,0,0,1,0,0,0,0,0,0,1,0,0,2,27,clean
264,33519,458575,462319,8,void printJobFailed(PrintJobEvent pje),Called to notify the client that the job failed to complete successfully and will have to be resubmitted.  Parameters: pje - the job generating this event,0,0,0,0,0,0,0,0,0,0,0,0,0,25,
265,38292,216693,219636,7,System.Data.Services.Common.EntitySetAttribute,"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple = false)] public sealed class EntitySetAttribute : Attribute Summary: Indicates the entity set to which a client data service class belongs. Remarks: The EntitySetAttribute class is used by the client during data binding to determine the name of the entity set to which a class belongs. This attribute is generated by the Add Service Reference dialog box when the Binding option is used and by the DataSvcUtil.exe tool when the /binding option is supplied. You must apply the EntitySetAttribute to any user-supplied client data service classes that are used with data binding. EntitySetAttribute is only supported when there is one entity set associated with the type. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,1,1,0,0,0,0,0,4,139,clean
266,38671,230251,233217,7,System.Drawing.Imaging.EncoderParameter.EncoderParameter(),Additional online Documentation: Summary: Initializes a new instance of the EncoderParameter class with the specified Encoder object and value.,1,0,1,0,0,1,0,0,0,0,0,0,3,19,clean
267,39166,241389,244463,7,System.ServiceModel.Channels.MtomMessageEncodingBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext),"Additional online Documentation: Syntax: public override bool CanBuildChannelFactory<TChannel>( BindingContext context ) Type Parameters TChannel The type of channel the channel factory produces. Parameters contextType: System.ServiceModel.Channels.BindingContext The BindingContext for the channel. Return Value Type: System.Boolean true if the specified channel factory stack can be built on the service; otherwise, false. Summary: Returns a value that indicates whether the current binding can build a factory for a specified type of channel and context.",0,0,0,0,0,0,0,0,0,0,0,0,0,75,
268,34459,475185,478929,8,public final class RespectBindingFeature   ,"This feature clarifies the use of the wsdl:binding in a JAX-WS runtime.  This feature is only useful with web services that have an associated WSDL.  Enabling this feature requires that a JAX-WS implementation inspect the  wsdl:binding for an endpoint at runtime to make sure that all  wsdl:extensions that have the required attribute set to true are understood  and are being used.  The following describes the affects of this feature with respect to be  enabled or disabled:      * ENABLED: In this Mode, a JAX-WS runtime MUST assure that all required        wsdl:binding extensions are either understood and used by the       runtime, or explicitly disabled by the web service application. A web       service application can disable a particular extension that has a       known WebServiceFeature using either the appropriate annotation       associated with that WebServiceFeature on the server, or one of the       following methods on the client:           o Service.getPort(QName,Class,WebServiceFeature...)           o Service.getPort(Class,WebServiceFeature...)           o Service.getPort(EndpointReference,Class,WebServiceFeature...)           o Service.createDispatch(QName,Class,Service.Mode             mode,WebServiceFeature...)           o              Service.createDispatch(EndpointReference,Class,Service.Mode,WebServiceFeature...)           o              Service.createDispatch(QName,JAXBContext,Service.Mode,WebServiceFeature...)           o              Service.createDispatch(EndpointReference,JAXBContext,Service.Mode,WebServiceFeature...)           o EndpointReference.getPort(Class,WebServiceFeature...)           o One of the getXXXPort(WebServiceFeatures...) methods on a             generated Service.       The runtime MUST also make sure that binding of SEI parameters/return       values respect the wsdl:binding. With this feature enabled, if a       required (wsdl:required=true) wsdl:binding extension is in the WSDL       and it is not supported by a JAX-WS runtime and it has not been       explicitly turned off by the web service developer, then that JAX-WS       runtime MUST behave appropriately based on whether it is on the       client or server:           o Client: runtime MUST throw a WebServiceException no sooner than             when one of the methods above is invoked but no later than the             first invocation of an endpoint operation.           o Server: throw a WebServiceException and the endpoint MUST fail             to deploy     * DISABLED: In this Mode, an implementation may choose whether to       inspect the wsdl:binding or not and to what degree the wsdl:binding        will be inspected. For example, one implementation may choose to       behave as if this feature is enabled, another implementation may only       choose to verify the SEI's parameter/return type bindings.  Since:     JAX-WS 2.1 See Also:     AddressingFeature",1,0,1,1,0,0,1,1,1,0,0,0,6,390,clean
269,39249,238494,241532,7,System.ServiceModel.Routing.Configuration.FilterTableCollection,"Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(FilterTableEntryCollection), AddItemName = #filterTable#)] public class FilterTableCollection : ConfigurationElementCollection Summary: Represents the configuration element that contains a collection of FilterTableEntryCollection instances. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,0,0,0,1,4,50,mixed
271,40081,265811,269510,7,"System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)",Additional online Documentation: Summary: Moves the window to the specified coordinates on the screen.,1,0,0,0,0,0,1,0,0,0,0,0,2,14,clean
272,33683,459903,463647,8,public interface DataSource   ,"A factory for connections to the physical data source that this DataSource  object represents. An alternative to the DriverManager facility, a  DataSource object is the preferred means of getting a connection. An object  that implements the DataSource interface will typically be registered with  a naming service based on the JavaTM Naming and Directory (JNDI) API.  The DataSource interface is implemented by a driver vendor. There are three  types of implementations:     1. Basic implementation -- produces a standard Connection object    2. Connection pooling implementation -- produces a Connection object       that will automatically participate in connection pooling. This       implementation works with a middle-tier connection pooling manager.    3. Distributed transaction implementation -- produces a Connection        object that may be used for distributed transactions and almost       always participates in connection pooling. This implementation works       with a middle-tier transaction manager and almost always with a       connection pooling manager.  A DataSource object has properties that can be modified when necessary. For  example, if the data source is moved to a different server, the property  for the server can be changed. The benefit is that because the data  source's properties can be changed, any code accessing that data source  does not need to be changed.  A driver that is accessed via a DataSource object does not register itself  with the DriverManager. Rather, a DataSource object is retrieved though a  lookup operation and then used to create a Connection object. With a basic  implementation, the connection obtained through a DataSource object is  identical to a connection obtained through the DriverManager facility.  Since:     1.4",1,0,0,1,0,0,1,1,0,0,0,0,4,251,clean
273,38810,233687,236667,7,System.Messaging.MessageQueue.CanRead,"Additional online Documentation: Syntax: [MessagingDescriptionAttribute(#MQ_CanRead#)] [BrowsableAttribute(false)] public bool CanRead { get; } Property Value Type: System.Boolean true if the MessageQueue exists and the application can read from it; otherwise, false. Summary: Gets a value that indicates whether the MessageQueue can be read. Remarks: CanRead indicates whether the application is able to peek or receive messages from the queue. If CanRead is true, the MessageQueue can receive or peek messages from the queue. Otherwise, it cannot. CanRead is false if a queue is already open with exclusive read access (or if it's open with non-exclusive access and this MessageQueue requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to read from a queue when CanRead is false, access is denied. The following table shows whether this property is available in various Workgroup modes. Workgroup mode Available Local computer Yes Local computer and direct format name Yes Remote computer No Remote computer and direct format name Yes Example: The following code example displays the value of a message queue's CanRead property.",1,0,0,0,0,0,1,0,1,0,0,0,3,184,clean
274,33152,454122,457866,8,public void write(byte[] b) throws IOException,"Description copied from interface: ImageOutputStream Writes a sequence of bytes to the stream at the current position. If b.length is 0, nothing is written. The byte b[0] is written first, then the byte b[1], and so on.  If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.  Specified by: write in interface DataOutput Specified by: write in interface ImageOutputStream Parameters: b - an array of bytes to be written. Throws: IOException - if an I/O error occurs.",1,0,0,0,0,0,0,0,0,0,0,1,2,98,mixed
275,39796,251805,255476,7,System.Web.UI.MobileControls.Adapters.WmlPhoneCallAdapter,"Additional online Documentation: Syntax: [ObsoleteAttribute(#The System.Web.Mobile.dll assembly has been deprecated and should no longer be used. For information about how to develop ASP.NET mobile applications, see http://go.microsoft.com/fwlink/?LinkId=157231.#)] [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)] [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)] public class WmlPhoneCallAdapter : WmlControlAdapter Summary: Provides a phone call adapter class for the Wireless Markup Language (WML) device adapter set. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: The WML call adapter renders the PhoneCall by using a #tel:# URL on a phone with telephony capability. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,1,3,131,mixed
276,34752,459077,462821,8,public interface LoginModule ,"LoginModule describes the interface implemented by authentication  technology providers. LoginModules are plugged in under applications to  provide a particular type of authentication.  While applications write to the LoginContext API, authentication technology  providers implement the LoginModule interface. A Configuration specifies  the LoginModule(s) to be used with a particular login application.  Therefore different LoginModules can be plugged in under the application  without requiring any modifications to the application itself.  The LoginContext is responsible for reading the Configuration and  instantiating the appropriate LoginModules. Each LoginModule is initialized  with a Subject, a CallbackHandler, shared LoginModule state, and  LoginModule-specific options. The Subject represents the Subject currently  being authenticated and is updated with relevant Credentials if  authentication succeeds. LoginModules use the CallbackHandler to  communicate with users. The CallbackHandler may be used to prompt for  usernames and passwords, for example. Note that the CallbackHandler may be  null. LoginModules which absolutely require a CallbackHandler to  authenticate the Subject may throw a LoginException. LoginModules  optionally use the shared state to share information or data among  themselves.  The LoginModule-specific options represent the options configured for this  LoginModule by an administrator or user in the login Configuration. The  options are defined by the LoginModule itself and control the behavior  within it. For example, a LoginModule may define options to support  debugging/testing capabilities. Options are defined using a key-value  syntax, such as debug=true. The LoginModule stores the options as a Map so  that the values may be retrieved using the key. Note that there is no limit  to the number of options a LoginModule chooses to define.  The calling application sees the authentication process as a single  operation. However, the authentication process within the LoginModule  proceeds in two distinct phases. In the first phase, the LoginModule's  login method gets invoked by the LoginContext's login method. The login  method for the LoginModule then performs the actual authentication (prompt  for and verify a password for example) and saves its authentication status  as private state information. Once finished, the LoginModule's login  method either returns true (if it succeeded) or false (if it should be  ignored), or throws a LoginException to specify a failure. In the failure  case, the LoginModule must not retry the authentication or introduce  delays. The responsibility of such tasks belongs to the application. If the  application attempts to retry the authentication, the LoginModule's login  method will be called again.  In the second phase, if the LoginContext's overall authentication succeeded  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules  succeeded), then the commit method for the LoginModule gets invoked. The  commit method for a LoginModule checks its privately saved state to see if  its own authentication succeeded. If the overall LoginContext  authentication succeeded and the LoginModule's own authentication  succeeded, then the commit method associates the relevant Principals  (authenticated identities) and Credentials (authentication data such as  cryptographic keys) with the Subject located within the LoginModule.  If the LoginContext's overall authentication failed (the relevant REQUIRED,  REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed), then the  abort method for each LoginModule gets invoked. In this case, the  LoginModule removes/destroys any authentication state originally saved.  Logging out a Subject involves only one phase. The LoginContext invokes the  LoginModule's logout method. The logout method for the LoginModule then  performs the logout procedures, such as removing Principals or Credentials  from the Subject or logging session information.  A LoginModule implementation must have a constructor with no arguments.  This allows classes which load the LoginModule to instantiate it.  See Also:     LoginContext, Configuration",1,1,0,1,0,1,0,0,0,0,0,0,4,585,clean
277,34230,489952,493696,8,"void rollback() throws java.lang.IllegalStateException, java.lang.SecurityException, SystemException","Roll back the transaction associated with the current thread. When this method completes, the thread is no longer associated with a transaction.  Throws: SecurityException - Thrown to indicate that the thread is not allowed to roll back the transaction. IllegalStateException - Thrown if the current thread is not associated with a transaction. SystemException - Thrown if the transaction manager encounters an unexpected error condition.",1,0,0,1,0,0,0,0,0,0,0,0,2,61,clean
278,38075,218432,221381,7,"System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)","Additional online Documentation: Summary: Writes XML data, and optionally the schema, from the DataSet.",0,0,0,0,0,0,0,0,0,0,0,0,0,14,
279,32431,442635,446379,8,public static double random()," Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range.  When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression  new java.util.Random  This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else.  This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.  Returns: a pseudorandom double greater than or equal to 0.0 and less than 1.0. See Also: Random.nextDouble() ",1,0,0,0,1,1,1,0,0,0,1,0,5,128,clean
280,34529,476730,480474,8,public class StringValueHelper   ,"The Helper for StringValue. For more information on Helper files, see  Generated Files: Helper Files.  org/omg/CORBA/StringValueHelper.java Generated by the IDL-to-Java compiler  (portable), version 3.0 from orb.idl 31 May 1999 22:27:30 o'clock  GMT+00:00 The class definition has been modified to conform to the  following OMG specifications :      * ORB core as defined by CORBA 2.3.1 (formal/99-10-07)     * IDL/Java Language Mapping as defined in ptc/00-01-08",1,0,0,0,0,0,0,0,0,0,0,1,2,64,mixed
281,38356,223411,226364,7,System.Web.UI.Design.IDesignTimeResourceWriter,"Additional online Documentation: Syntax: public interface IDesignTimeResourceWriter : IResourceWriter, IDisposable Summary: Used by the DesignTimeResourceProviderFactory class to localize data at design time.",1,0,0,0,0,0,1,0,0,0,1,0,3,21,clean
282,34754,489654,493398,8,public class LocaleSupport   ,"Class which exposes the locale-determination logic for resource bundles  through convenience methods.  This class may be useful to any tag handler implementation that needs to  produce localized messages. For example, this might be useful for exception  messages that are intended directly for user consumption on an error page.  Author:     Jan Luehe",1,0,0,1,0,0,0,0,0,0,0,0,2,52,clean
283,40238,266364,270070,7,System.Workflow.Activities.WhileActivity,"Additional online Documentation: Syntax: [ToolboxBitmapAttribute(typeof(WhileActivity), #Resources.While.png#)] public sealed class WhileActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> Summary: Runs a child activity iteratively as long as a certain condition is true. Remarks: The WhileActivity is a CompositeActivity, meaning the WhileActivity can contain other activities. Before each iteration, the Condition property is evaluated. If the Condition property evaluates to false, the WhileActivity immediately finishes. Example: The following code example demonstrates how to create a new instance of the WhileActivity class and add the ParallelActivity class to the WhileActivity class. This code example is part of the WhileAndParallel SDK Sample from the WhileAndParallelWorkflow.Designer.cs file. For more information, see Using While and Parallel. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0,4,137,clean
284,34669,478923,482667,8,void pre_init(ORBInitInfo info),"Called during ORB initialization. If it is expected that initial services registered by an interceptor will be used by other interceptors, then those initial services shall be registered at this point via calls to ORBInitInfo.register_initial_reference.  Parameters: info - provides initialization attributes and operations by which Interceptors can be registered.",0,0,0,0,0,1,0,0,0,0,0,0,1,51,clean
285,33457,488021,491765,8,public static PluralAttribute.CollectionType valueOf(java.lang.String name),Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)  Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null,1,0,1,0,0,0,0,0,0,0,0,1,3,73,mixed
286,33128,453442,457186,8,protected int tileHeight," The height of each tile if tiling has been set, or 0 otherwise. The initial value is 0.  Subclasses that do not support tiling may ignore this value. ",1,0,1,0,0,0,0,0,0,0,0,0,2,26,clean
287,39904,252910,256589,7,System.Web.Services.Description.SoapProtocolImporter.SoapExporter,"Additional online Documentation: Syntax: public SoapCodeExporter SoapExporter { get; } Property Value Type: System.Xml.Serialization.SoapCodeExporter An object of type SoapCodeExporter used internally by the SoapProtocolImporter class to generate code from mappings between SOAP-encoded XML schema content and .NET Framework types. Summary: Gets the object of type SoapCodeExporter used internally by the SoapProtocolImporter class to generate code from mappings between SOAP-encoded XML schema content and .NET Framework types. Remarks: The SoapProtocolImporter class uses a SoapCodeExporter object to create code from .NET Framework type mappings for XML schema elements and data types that enable SOAP encoding, as opposed to literal XML Schema usage. SOAP encoding is specified in section 5 of the SOAP 1.1 specification. SOAP encoding uses the namespace #http://schemas.xmlsoap.org/soap/encoding/#.",1,0,0,0,0,0,1,0,0,0,1,0,3,124,clean
288,40387,269230,272946,7,System.ServiceModel.Persistence.PersistenceException,Additional online Documentation: Syntax: [SerializableAttribute] public class PersistenceException : CommunicationException Summary: This exception is thrown by a SqlPersistenceProviderFactory when general connectivity errors are encountered. Remarks: This exception is the base class for InstanceNotFoundException and InstanceLockException. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,0,0,0,0,0,0,1,0,0,0,0,0,1,59,clean
289,33461,488061,491805,8,public interface PersistenceUnitInfo ,Interface implemented by the container and used by the persistence provider  when creating an EntityManagerFactory.  Since:     Java Persistence 1.0,1,0,0,0,0,0,1,0,0,0,0,0,2,18,clean
290,34043,468132,471876,8,public FontUIResource getSubTextFont(),"Returns the sub-text font. This returns Dialog, 10pt, plain.  Specified by: getSubTextFont in class MetalTheme Returns: the sub-text font",1,0,0,0,0,0,0,0,0,0,0,1,2,21,mixed
291,34590,477699,481443,8,public class _NamingContextStub   ,A naming context is an object that contains a set of name bindings in which  each name is unique. Different names can be bound to an object in the same  or different contexts at the same time.  See CORBA COS Naming Specification.  See Also:     Serialized Form,0,0,0,0,0,0,0,0,0,0,1,0,1,46,clean
292,39536,258409,262100,7,System.Web.SessionState.IHttpSessionState.Item(System.Int32),Additional online Documentation: Summary: Gets or sets individual session-state item values.,1,0,0,0,0,0,0,0,1,0,1,1,4,12,mixed
293,34441,474944,478688,8,public interface DOMLocator   ,"Indicates the position of a node in a source DOM, intended primarily for  error reporting. To use a DOMLocator, the receiver of an error must  downcast the SourceLocator object returned by an exception. A Transformer  may use this object for purposes other than error reporting, for instance,  to indicate the source node that originated a result node.",1,0,0,1,0,0,0,0,0,0,0,0,2,57,clean
294,33835,464986,468730,8,"protected void exportDone(JComponent source, Transferable data, int action)",Invoked after data has been exported. This method should remove the data that was transferred if the action was MOVE.  This method is implemented to do nothing since MOVE is not a supported action of this implementation (getSourceActions does not include MOVE ).  Parameters: source - the component that was the source of the data data - The data that was transferred or possibly null if the action is NONE. action - the actual action that was performed,1,0,1,0,0,1,1,0,0,0,0,0,4,74,clean
295,32528,445468,449212,8,ServerRuntimeException,"@Deprecated public class ServerRuntimeException      extends RemoteException   From a server executing on JDK 1.1, a ServerRuntimeException is thrown as a  result of a remote method invocation when a RuntimeException is thrown  while processing the invoca",1,0,0,0,0,1,1,0,0,1,0,0,4,85,clean
296,34333,473526,477270,8,public final Object unmarshal(InputSource source) throws JAXBException,Description copied from interface: Unmarshaller Unmarshal XML data from the specified SAX InputSource and return the resulting content tree.  Implements Unmarshal Global Root Element.  Specified by: unmarshal in interface Unmarshaller Parameters: source - the input source to unmarshal XML data from Returns: the newly created root object of the java content tree Throws: JAXBException - If any unexpected errors occur while unmarshalling UnmarshalException - If the ValidationEventHandler returns false from its handleEvent method or the Unmarshaller is unable to perform the XML to Java binding. See Unmarshalling XML Data,1,0,0,0,0,1,0,0,0,0,0,1,3,86,mixed
297,38767,233025,236004,7,System.Management.ManagementOperationObserver.ObjectReady,"Additional online Documentation: Syntax: public event ObjectReadyEventHandler ObjectReady Summary: Occurs when a new object is available. Remarks: Event Data The event handler receives an argument of type ObjectReadyEventArgs containing data related to this event. The following ObjectReadyEventArgs properties provide information specific to this event. Property Description Context (inherited from ManagementEventArgs) Gets the operation context echoed back from the operation that triggered the event. NewObject Gets the newly-returned object. .NET Framework Security Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see Using Libraries from Partially Trusted Code. Example: The following example demonstrates how to perform an asynchronous instance enumeration. The example uses the ManagementOperationObserver class to handle management information and events asynchronously.",1,0,0,0,0,0,0,0,1,0,0,0,2,122,clean
298,39092,241558,244632,7,"System.ServiceModel.Channels.RedirectionScope.op_Equality(System.ServiceModel.Channels.RedirectionScope,System.ServiceModel.Channels.RedirectionScope)","Additional online Documentation: Syntax: public static bool operator ==( RedirectionScope left, RedirectionScope right ) Parameters leftType: System.ServiceModel.Channels.RedirectionScope A RedirectionScope instance. rightType: System.ServiceModel.Channels.RedirectionScope A RedirectionScope instance. Return Value Type: System.Boolean true if the values of left and right are equal; otherwise, false. Summary: Returns a value that indicates whether two instances of the RedirectionScope types are equal.",1,0,0,0,0,0,0,0,0,0,0,1,2,61,mixed
301,32460,443868,447612,8,"public static Class<?> getProxyClass(ClassLoader loader, Class<?>... interfaces) throws IllegalArgumentException","Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces. The proxy class will be defined by the specified class loader and will implement all of the supplied interfaces. If a proxy class for the same permutation of interfaces has already been defined by the class loader, then the existing proxy class will be returned; otherwise, a proxy class for those interfaces will be generated dynamically and defined by the class loader.  There are several restrictions on the parameters that may be passed to Proxy.getProxyClass:  * All of the Class objects in the interfaces array must represent interfaces, not classes or primitive types. * No two elements in the interfaces array may refer to identical Class objects. * All of the interface types must be visible by name through the specified class loader. In other words, for class loader cl and every interface i, the following expression must be true:  Class.forName(i.getName(), false, cl) == i  * All non-public interfaces must be in the same package; otherwise, it would not be possible for the proxy class to implement all of the interfaces, regardless of what package it is defined in. * For any set of member methods of the specified interfaces that have the same signature: o If the return type of any of the methods is a primitive type or void, then all of the methods must have that same return type. o Otherwise, one of the methods must have a return type that is assignable to all of the return types of the rest of the methods. * The resulting proxy class must not exceed any limits imposed on classes by the virtual machine. For example, the VM may limit the number of interfaces that a class may implement to 65535; in that case, the size of the interfaces array must not exceed 65535.  If any of these restrictions are violated, Proxy.getProxyClass will throw an IllegalArgumentException. If the interfaces array argument or any of its elements are null, a NullPointerException will be thrown.  Note that the order of the specified proxy interfaces is significant: two requests for a proxy class with the same combination of interfaces but in a different order will result in two distinct proxy classes.  Parameters: loader - the class loader to define the proxy class interfaces - the list of interfaces for the proxy class to implement Returns: a proxy class that is defined in the specified class loader and that implements the specified interfaces Throws: IllegalArgumentException - if any of the restrictions on the parameters that may be passed to getProxyClass are violated NullPointerException - if the interfaces array argument or any of its elements are null",1,0,0,0,0,0,0,0,1,0,0,0,2,445,clean
302,37837,269752,273495,7,System.Configuration.ConfigurationValidatorAttribute,"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property)] public class ConfigurationValidatorAttribute : Attribute Summary: Serves as the base class for the System.Configuration validator attribute types. Remarks: All the ASP.NET configuration standard validator attribute types derive from ConfigurationValidatorAttribute. You can use this type to create your own custom validator attribute. Example: The following code examples demonstrate how to create two custom validators using the ConfigurationValidatorAttribute type. The first example performs validation using hard-coded parameters; the second example performs validation using the parameters assigned to it at the time it is applied to the related section property. This code example also contains three supporting files. The first file contains the custom section that uses the validators described above, the second file contains a custom converter type, and the third file contains the console application that builds and uses the custom validators and the section that contains them. The following code example shows how to create a fixed validator with hard-coded parameters.  The following code example shows how to create a programmable validator.    The following code example shows how to create a custom section using the previous validators.    The following code example shows how to create a custom converter.    The following code example shows how to create the console application that builds and uses the custom validators and their containing section.    The following code example is a configuration excerpt used by the previous example. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,1,0,0,0,1,1,0,0,0,3,258,clean
303,40102,262647,266344,7,System.Windows.Forms.DataGrid.CreateAccessibilityInstance,Additional online Documentation: Syntax: protected override AccessibleObject CreateAccessibilityInstance() Return Value Type: System.Windows.Forms.AccessibleObject The Control.ControlAccessibleObject for this control. Summary: Constructs a new instance of the accessibility object for this control. Remarks: Derived classes should not call the base class's CreateAccessibilityInstance method. Only the following properties of the AccessibleObject should be set: Role Description Name All other properties are handled by the System.Windows.Forms.DataGrid itself.,0,0,1,0,0,0,0,0,0,0,0,1,2,70,mixed
304,40084,263038,266736,7,System.Windows.Forms.DataGridView.AdjustedTopLeftHeaderBorderStyle,Additional online Documentation: Syntax: [BrowsableAttribute(false)] public virtual DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle { get; } Property Value Type: System.Windows.Forms.DataGridViewAdvancedBorderStyle A DataGridViewAdvancedBorderStyle that represents the style of the border of the upper-left cell in the DataGridView. Summary: Gets the border style for the upper-left cell in the DataGridView. Remarks: The upper-left cell is the cell that is shared by the column header row and the row header column. The DataGridView gets the value of this property while painting the upper-left cell. Notes to Inheritors Override this property if you want to customize the appearance of the border on the upper-left header cell. Example: The following code example demonstrates how to override the AdjustedTopLeftHeaderBorderStyle property to customize the borders of the upper-left cell. This code example is part of a larger example provided for the DataGridViewAdvancedBorderStyle class.,1,0,0,0,0,0,0,1,1,0,0,0,3,140,clean
305,37850,269615,273358,7,System.Configuration.ConfigurationLockCollection.IsModified,"Additional online Documentation: Syntax: public bool IsModified { get; } Property Value Type: System.Boolean true if the ConfigurationLockCollection collection has been modified; otherwise, false. Summary: Gets a value specifying whether the collection has been modified. Example: The following code example demonstrates how to use the IsModified property. This code example is part of a larger example provided for the ConfigurationLockCollection class.",0,0,0,0,0,0,0,0,1,0,0,1,2,60,mixed
306,38968,240610,243678,7,System.ServiceModel.Channels.BodyWriter,"Additional online Documentation: Syntax: public abstract class BodyWriter Summary: Represents the writer of the message body. Remarks: A message consists of headers and a body. The headers are buffered and the body is streamed. Because the body is streamed, the user cannot pass the actual content of the body to a message. Instead the user must pass a class that knows how to write the body when asked to do so. This is done by passing a class derived from BodyWriter to the Message. A message calls the class derived from BodyWriter whenever it requires the body to be written using an XmlWriter. Example: The following example shows how to derive a class from BodyWriter. This override takes in an array of strings and writes them to a XmlDictionaryWriter. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,0,0,0,1,1,1,0,0,0,6,154,clean
307,32565,446161,449905,8,public abstract class PermissionCollection   ,"Abstract class representing a collection of Permission objects.  With a PermissionCollection, you can:      * add a permission to the collection using the add method.     * check to see if a particular permission is implied in the collection,       using the implies method.     * enumerate all the permissions, using the elements method.  When it is desirable to group together a number of Permission objects of  the same type, the newPermissionCollection method on that particular type  of Permission object should first be called. The default behavior (from the  Permission class) is to simply return null. Subclasses of class Permission  override the method if they need to store their permissions in a particular  PermissionCollection object in order to provide the correct semantics when  the PermissionCollection.implies method is called. If a non-null value is  returned, that PermissionCollection must be used. If null is returned, then  the caller of newPermissionCollection is free to store permissions of the  given type in any PermissionCollection they choose (one that uses a  Hashtable, one that uses a Vector, etc).  The PermissionCollection returned by the  Permission.newPermissionCollection method is a homogeneous collection,  which stores only Permission objects for a given Permission type. A  PermissionCollection may also be heterogeneous. For example, Permissions is  a PermissionCollection subclass that represents a collection of  PermissionCollections. That is, its members are each a homogeneous  PermissionCollection. For example, a Permissions object might have a  FilePermissionCollection for all the FilePermission objects, a  SocketPermissionCollection for all the SocketPermission objects, and so on.  Its add method adds a permission to the appropriate collection.  Whenever a permission is added to a heterogeneous PermissionCollection such  as Permissions, and the PermissionCollection doesn't yet contain a  PermissionCollection of the specified permission's type, the  PermissionCollection should call the newPermissionCollection method on the  permission's class to see if it requires a special PermissionCollection. If  newPermissionCollection returns null, the PermissionCollection is free to  store the permission in any type of PermissionCollection it desires (one  using a Hashtable, one using a Vector, etc.). For example, the Permissions  object uses a default PermissionCollection implementation that stores the  permission objects in a Hashtable.  Subclass implementations of PermissionCollection should assume that they  may be called simultaneously from multiple threads, and therefore should be  synchronized properly. Furthermore, Enumerations returned via the elements  method are not fail-fast. Modifications to a collection should not be  performed while enumerating over that collection.  See Also:     Permission, Permissions, Serialized Form",1,1,0,1,1,0,1,1,0,0,0,1,7,396,mixed
308,40014,263116,266814,7,System.Windows.Forms.DataGridView.CellMouseEnter,"Additional online Documentation: Syntax: public event DataGridViewCellEventHandler CellMouseEnter Summary: Occurs when the mouse pointer enters a cell. Remarks: For more information about handling events, see Consuming Events. Example: The following code example shows a CellMouseEnter event handler in a Tic-Tac-Toe game implementation that uses image columns in a DataGridView control. The event handler uses the cell value to determine the cursor and ToolTip to display. This code is part of a larger example shown in How to: Work with Image Columns in the Windows Forms DataGridView Control.",0,0,0,0,0,0,0,0,1,0,1,0,2,89,clean
309,39675,249032,252699,7,System.Web.Script.Serialization.SimpleTypeResolver,"Additional online Documentation: Syntax: public class SimpleTypeResolver : JavaScriptTypeResolver Summary: Provides a type resolver for managed types. Remarks: This type resolver can be used with the JavaScriptSerializer class to include in the serialized JavaScript Object Notation (JSON) string the assembly-qualified name of any managed type that requires custom type metadata. The SimpleTypeResolver class enables you to serialize managed types as JSON while retaining the managed type definition for custom types. To create an instance of the JavaScriptSerializer class that uses a type resolver, you must use the JavaScriptSerializer(JavaScriptTypeResolver) constructor. Example: The following example demonstrates how to use the SimpleTypeResolver class and shows the resulting serialized strings by using different type resolvers. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,0,1,0,0,0,5,137,clean
310,33071,484705,488449,8,"public java.lang.Object getAsObject(FacesContext context, UIComponent component, java.lang.String value)","Description copied from interface: Converter  Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.  Specified by: getAsObject in interface Converter Parameters: context - FacesContext for the request being processed component - UIComponent with which this model object value is associated value - String value to be converted (may be null) Returns: null if the value to convert is null, otherwise the result of the conversion Throws: ConverterException - if conversion cannot be successfully performed java.lang.NullPointerException - if context or component is null",1,1,0,1,0,0,0,0,0,0,1,0,4,104,clean
311,32168,435212,438956,8,protected Graphics(),"Constructs a new Graphics object. This constructor is the default contructor for a graphics context.  Since Graphics is an abstract class, applications cannot call this constructor directly. Graphics contexts are obtained from other graphics contexts or are created by calling getGraphics on a component.  See Also: create(), Component.getGraphics()",0,0,0,0,0,0,0,1,0,0,0,1,2,49,mixed
312,33643,489860,493604,8,public class TagSupport   ,A base class for defining new tag handlers implementing Tag.  The TagSupport class is a utility class intended to be used as the base  class for new tag handlers. The TagSupport class implements the Tag and  IterationTag interfaces and adds additional convenience methods including  getter methods for the properties in Tag. TagSupport has one static method  that is included to facilitate coordination among cooperating tags.  Many tag handlers will extend TagSupport and only redefine a few methods.  See Also:     Serialized Form,1,0,0,1,0,0,1,0,0,0,0,0,3,81,clean
313,32218,438085,441829,8,public void windowDeactivated(WindowEvent e),Invoked when a window is de-activated.  Specified by: windowDeactivated in interface WindowListener,1,0,0,0,0,0,0,0,0,0,0,1,2,13,mixed
314,33772,463779,467523,8,"public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)","Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation. This is implemented to use the values returned by the getRowHeight and getColumnWidth methods.  Scrolling containers, like JScrollPane, will use this method each time the user requests a unit scroll.  Specified by: getScrollableUnitIncrement in interface Scrollable Overrides: getScrollableUnitIncrement in class JTextComponent Parameters: visibleRect - the view area visible within the viewport orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL. direction - Less than zero to scroll up/left, greater than zero for down/right. Returns: The unit increment for scrolling in the specified direction Throws: IllegalArgumentException - for an invalid orientation See Also: JScrollBar.setUnitIncrement(int), getRowHeight(), getColumnWidth()",1,0,0,1,0,0,1,0,0,0,0,0,3,121,clean
315,32874,480350,484094,8,@Target(value=TYPE) @Retention(value=RUNTIME) public @interface Local ,"Declares the local business interface(s) for a session bean.  The Local annotation is applied to the session bean class or local business  interface to designate a local interface of the bean.  When used on the bean class, declares the local business interface(s) for a  session bean. When used on an interface, designates that interface as a  local business interface. In this case, no value element should be  provided.  The Local annotation applies only to session beans and their interfaces.  Use of the Local annotation is only required when the bean class does not  implement only a single interface other than any of the following:  java.io.Serializable; java.io.Externalizable; any of the interfaces defined  in javax.ejb.  Since:     EJB 3.0  Optional Element Summary  java.lang.Class[] 	value           Specifies the local business interface(s) of the bean.     value   public abstract java.lang.Class[] value      Specifies the local business interface(s) of the bean. The value      element is specified only when the annotation is applied to the bean     class. It is only required to be specified if the bean class implements     more than one interface (excluding java.io.Serializable,      java.io.Externalizable, and any of the interfaces defined by the      javax.ejb package).      Default:         {} Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,0,0,0,0,0,1,0,0,0,0,2,248,clean
316,38395,222124,225076,7,System.ComponentModel.Design.CollectionEditor,"Additional online Documentation: Syntax: public class CollectionEditor : UITypeEditor Summary: Provides a user interface that can edit most types of collections at design time. Remarks: Notes to Inheritors This editor can edit collections that have an Item property. The editor can determine the type of the collection from the Item property, if it exists. If the collection does not have this property, or if you want to provide collections of more than one type, you can override certain protected members of this class to customize the editor to support other types of collections. Example: The following code example uses an EditorAttribute to associate the CollectionEditor with a property. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0,3,132,clean
317,38354,222928,225881,7,System.ServiceProcess.Design.ServiceControllerDesigner,"Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] public class ServiceControllerDesigner : ComponentDesigner Summary: Provides design-time services for the ServiceController class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,1,0,0,0,0,0,1,48,clean
318,34147,471039,474783,8,public boolean isEmpty(),Checks whether the set of attributes is empty.  Returns: true if the set is empty else false,1,0,0,0,0,0,0,0,0,0,0,1,2,17,mixed
319,37843,269567,273310,7,System.Configuration.ConfigurationElementCollectionType,"Additional online Documentation: Syntax: public enum ConfigurationElementCollectionType Summary: Specifies the type of a ConfigurationElementCollectionType object. Remarks: This enumeration contains all the possible return values for the CollectionType property. It is used by the configuration system during run time to correctly merge configuration settings. It is also used when creating a custom class that extends ConfigurationElementCollection. By default, the type of a ConfigurationElementCollection object is AddRemoveClearMap. If a BasicMap is required, override the ConfigurationElementCollectionType property when extending ConfigurationElementCollection.",1,0,0,1,0,0,0,0,0,0,0,1,3,77,mixed
320,38373,223282,226235,7,System.Web.UI.Design.EditableDesignerRegion,"Additional online Documentation: Syntax: public class EditableDesignerRegion : DesignerRegion Summary: Represents an editable content region within the design-time markup for the associated control. Remarks: Use the EditableDesignerRegion class to help manage templates at design time. A ControlDesigner will use an instance of this class with its GetEditableDesignerRegionContent method to generate HTML markup of the region's content. Example: This example shows how to create a control with two clickable regions and an EditableDesignerRegion object with two views, or templates. Compile the project, then open the page in a visual designer and switch to design (WYSIWYG) view. There are two clickable views, View1 and View2. Click View1 and drag the CheckBox control from the lower part of the page into the empty designer region just below the clickable regions. Click View2 and drag the RadioButton control into the empty designer region. Click View1 again, and the region with the CheckBox reappears. Click View2 and the region with the RadioButton reappears. Switch back to source view to see how your changes are persisted in the HTML markup Note Your project must have a reference to the System.Design.dll assembly. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,0,3,213,clean
321,34327,473565,477309,8,public class ValidationEventImpl   ,"Default implementation of the ValidationEvent interface.  JAXB providers are allowed to use whatever class that implements the  ValidationEvent interface. This class is just provided for a convenience.  Since:     JAXB1.0 See Also:     Validator, ValidationEventHandler, ValidationEvent,      ValidationEventLocator",0,0,0,1,0,0,0,0,0,0,0,0,1,35,clean
322,33714,460925,464669,8,public interface ComboBoxModel   ,A data model for a combo box. This interface extends ListDataModel and adds  the concept of a selected item. The selected item is generally the item  which is visible in the combo box display area.  The selected item may not necessarily be managed by the underlying  ListModel. This disjoint behavior allows for the temporary storage and  retrieval of a selected item in the model.,1,1,0,0,0,0,0,1,0,0,0,1,4,64,mixed
323,37874,213299,216236,7,System.Security.Cryptography.X509Certificates.TrustStatus,Additional online Documentation: Syntax: public enum TrustStatus Summary: Identifies the level of trustworthiness that is assigned to the signature for a manifest.,0,0,0,1,0,0,0,0,0,0,0,0,1,22,clean
324,39385,255497,259177,7,System.Web.Caching.SqlCacheDependencyAdmin,"Additional online Documentation: Syntax: [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.High)] public static class SqlCacheDependencyAdmin Summary: Performs administrative tasks required on a SQL Server database to support the SqlCacheDependency class when using polling-based dependencies. This class cannot be inherited. Remarks: You can use the methods of this class to programmatically enable and disable a SQL Server database and its tables for SqlCacheDependency object change notifications. In addition, this class obtains information about which tables in a database are enabled for change notifications using the GetTablesEnabledForNotifications method. However, you can also use the Aspnet_regsql command-line tool to manage change notifications for a SQL Server database and its tables. Note To call any of the methods in this class, the account you use to access the SQL Server database must have permissions to create tables and stored procedures. To enable notifications on a specific table, you must have permissions to create a SQL Server trigger on that table. For more information on how to set permissions on a database, see the SQL Server documentation. For more information about the account used by the ASP.NET process, see ASP.NET Impersonation. Example: The following code example is a simple ASP.NET page for enabling and disabling change notifications on SQL Server database tables. It uses the SqlCacheDependencyAdmin object to manage change notifications in the database specified in a connection string called MyConnectionString. The example includes two files, an .aspx file that defines the user interface and a code-behind file containing the source code for the ASP.NET events. The first sample is the .aspx file that defines the user interface. Security Note This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see Script Exploits Overview.  The second sample is the code-behind file containing the source code for the page events. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,0,2,353,clean
325,34077,469431,473175,8,public abstract class SynthPainter   ,"SynthPainter is used for painting portions of JComponents. At a minimum  each JComponent has two paint methods: one for the border and one for the  background. Some JComponents have more than one Region, and as a  consequence more paint methods.  Instances of SynthPainter are obtained from the  SynthStyle.getPainter(javax.swing.plaf.synth.SynthContext) method.  You typically supply a SynthPainter by way of Synth's file format. The  following example registers a painter for all JButtons that will render the  image myImage.png:   <style id=buttonStyle> <imagePainter path=myImage.png sourceInsets=2 2 2 2 paintCenter=true stretch=true/> <insets top=2 bottom=2 left=2 right=2/> </style> <bind style=buttonStyle type=REGION key=button/>   SynthPainter is abstract in so far as it does no painting, all the methods  are empty. While none of these methods are typed to throw an exception,  subclasses can assume that valid arguments are passed in, and if not they  can throw a NullPointerException or IllegalArgumentException in response to  invalid arguments.  Since:     1.5",1,0,0,0,0,0,1,0,1,0,0,0,3,160,clean
326,40286,267716,271430,7,System.Workflow.ComponentModel.Design.ConnectorEventHandler,"Additional online Documentation: Syntax: public delegate void ConnectorEventHandler( Object sender, ConnectorEventArgs e ) Parameters senderType: System.Object The source of the event. eType: System.Workflow.ComponentModel.Design.ConnectorEventArgs A ConnectorEventArgs that contains the event data. Summary: Represents the method that will handle the ConnectorAdded, ConnectorRemoved, and ConnectorChanged events of a FreeformActivityDesigner.",1,0,0,0,0,0,0,0,0,0,0,1,2,50,mixed
327,32273,440197,443941,8,public class SinglePixelPackedSampleModel   ,"This class represents pixel data packed such that the N samples which make  up a single pixel are stored in a single data array element, and each data  data array element holds samples for only one pixel. This class supports  TYPE_BYTE, TYPE_USHORT, TYPE_INT data types. All data array elements reside  in the first bank of a DataBuffer. Accessor methods are provided so that  the image data can be manipulated directly. Scanline stride is the number  of data array elements between a given sample and the corresponding sample  in the same column of the next scanline. Bit masks are the masks required  to extract the samples representing the bands of the pixel. Bit offsets are  the offsets in bits into the data array element of the samples representing  the bands of the pixel.  The following code illustrates extracting the bits of the sample  representing band b for pixel x,y from DataBuffer data:   int sample = data.getElem(y * scanlineStride + x); sample = (sample & bitMasks[b]) >>> bitOffsets[b];",0,1,0,0,0,0,0,0,1,0,0,0,2,168,clean
328,32528,445468,449212,8,ServerRuntimeException,"@Deprecated public class ServerRuntimeException      extends RemoteException   From a server executing on JDK 1.1, a ServerRuntimeException is thrown as a  result of a remote method invocation when a RuntimeException is thrown  while processing the invoca",1,0,0,0,0,1,1,0,0,1,0,0,4,85,clean
329,33166,485697,489441,8,public interface ConnectionMetaData ,A ConnectionMetaData object provides information describing the Connection  object.,0,0,0,0,0,0,0,0,0,0,0,0,0,9,
330,39203,237370,240365,7,System.ServiceModel.Activities.CorrelationInitializer,"Additional online Documentation: Syntax: public abstract class CorrelationInitializer Summary: An abstract base class for correlation initializers that are used to tell the runtime what protocol is being used for the correlation. Remarks: The runtime uses the CorrelationHandle for correlation if it is present, otherwise the CorrelatesWith property of the messaging activity will be used. If both are absent, the ambient handle provided by CorrelationScope or the workflow service is used. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0,2,95,clean
331,34203,472627,476371,8,"public TreePath getPathClosestTo(int x, int y)","Returns the path to the node that is closest to x,y. If there is nothing currently visible this will return null, otherwise it'll always return a valid path. If you need to test if the returned object is exactly at x, y you should get the bounds for the returned path and test x, y against that.  Specified by: getPathClosestTo in class AbstractLayoutCache Parameters: x - the horizontal component of the desired location y - the vertical component of the desired location Returns: the TreePath closest to the specified point",1,0,0,0,0,0,0,1,0,0,0,0,2,90,clean
332,33259,454569,458313,8,public class AttributeChangeNotification   ,"Provides definitions of the attribute change notifications sent by MBeans.  It's up to the MBean owning the attribute of interest to create and send  attribute change notifications when the attribute change occurs. So the  NotificationBroadcaster interface has to be implemented by any MBean for  which an attribute change is of interest.  Example: If an MBean called myMbean needs to notify registered listeners  when its attribute:      String myString  is modified, myMbean creates and emits the following notification:      new AttributeChangeNotification(myMbean, sequenceNumber, timeStamp,     msg, myString, String, oldValue, newValue);  Since:     1.5 See Also:     Serialized Form",0,0,1,0,0,0,0,0,1,0,0,0,2,92,clean
333,34283,490917,494661,8,public interface ValidationEventHandler ,"A basic event handler interface for validation errors.  If an application needs to implement customized event handling, it must  implement this interface and then register it with either the Unmarshaller , the Validator, or the Marshaller. The JAXB Provider will then report  validation errors and warnings encountered during the unmarshal, marshal,  and validate operations to these event handlers.  If the handleEvent method throws an unchecked runtime exception, the JAXB  Provider must treat that as if the method returned false, effectively  terminating whatever operation was in progress at the time (unmarshal,  validate, or marshal).  Modifying the Java content tree within your event handler is undefined by  the specification and may result in unexpected behaviour.  Failing to return false from the handleEvent method after encountering a  fatal error is undefined by the specification and may result in unexpected  behavior.  Default Event Handler      See: Validator javadocs  Since:     JAXB1.0 Author:         * Ryan Shoemaker, Sun Microsystems, Inc.         * Kohsuke Kawaguchi, Sun Microsystems, Inc.         * Joe Fialli, Sun Microsystems, Inc. See Also:     Unmarshaller, Validator, Marshaller, ValidationEvent,      ValidationEventCollector",1,0,1,1,0,1,1,0,0,0,0,0,5,167,clean
334,37900,210916,213853,7,System.Diagnostics.Eventing.Reader.EventLogSession,"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public class EventLogSession : IDisposable Summary: Used to access the Event Log service on the local computer or a remote computer so you can manage and gather information about the event logs and event providers on the computer. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. Example: For example code using this class, see How To: Query for Events, How to: Retrieve Information About an Event Publisher or How to: Configure and Read Event Log Properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,1,0,0,1,0,1,0,1,0,5,160,clean
335,32345,441340,445084,8,public abstract class InputStream   ,"This abstract class is the superclass of all classes representing an input  stream of bytes.  Applications that need to define a subclass of InputStream must always  provide a method that returns the next byte of input.  Since:     JDK1.0 See Also:     BufferedInputStream, ByteArrayInputStream, DataInputStream,      FilterInputStream, read(), OutputStream, PushbackInputStream",1,0,1,0,0,0,0,0,0,0,0,0,2,47,clean
336,38067,218429,221378,7,System.Data.DataSet.WriteXml(System.String),"Additional online Documentation: Summary: Writes XML data, and optionally the schema, from the DataSet.",1,0,0,0,0,0,0,1,0,0,0,0,2,14,clean
337,37872,213291,216228,7,System.Security.Cryptography.X509Certificates.TimestampInformation,"Additional online Documentation: Syntax: [HostProtectionAttribute(SecurityAction.LinkDemand, MayLeakOnAbort = true)] public sealed class TimestampInformation Summary: Provides details about the time stamp that was applied to an Authenticode signature for a manifest. Remarks: Note The HostProtectionAttribute attribute applied to this type or member has the following Resources property value: MayLeakOnAbort. The HostProtectionAttribute does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the HostProtectionAttribute class or SQL Server Programming and Host Protection Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",0,0,0,0,0,0,0,0,0,0,0,0,0,114,
338,38983,243553,246628,7,System.ServiceModel.Description.IMetadataExchange,"Additional online Documentation: Syntax: [ServiceContractAttribute(ConfigurationName = #IMetadataExchange#, Name = #IMetadataExchange#, Namespace = #http://schemas.microsoft.com/2006/04/mex#)] public interface IMetadataExchange Summary: Exposes methods used to return metadata about a service. Remarks: When programming services, it is useful to publish metadata about the service. For example, metadata can be a Web Services Description Language (WSDL) document that describes all of the methods and data types employed by a service. Returning metadata about an service allows consumers of a service to easily create clients for the service. For more information about metadata endpoints, see Metadata. Services implemented using publish metadata by exposing one or more metadata endpoints. Metadata endpoints in have an address, a binding and a contract like any other endpoint. The MetadataReference interface specifies the service contract implemented by all metadata endpoints in . There is no need to implement the MetadataReference contract in your service implementation. Instead, add the ServiceMetadataBehavior to the service description. Or, when using configuration, set the contract attribute of the endpoint element to IMetadataExchange. For an example, see How to: Publish Metadata for a Service Using a Configuration File. For details on publishing metadata in see Publishing Metadata.",0,1,1,1,0,0,1,0,0,0,0,0,4,190,clean
339,34256,490250,493994,8,"@Target(value={PARAMETER,METHOD,FIELD}) @Retention(value=RUNTIME) public @interface FormParam ","Binds the value(s) of a form parameter contained within a request entity  body to a resource method parameter. Values are URL decoded unless this is  disabled using the Encoded annotation. A default value can be specified  using the DefaultValue annotation. If the request entity body is absent or  is an unsupported media type, the default value is used. The type T of the  annotated parameter must either:     1. Be a primitive type    2. Have a constructor that accepts a single String argument    3. Have a static method named valueOf or fromString that accepts a       single String argument (see, for example, Integer.valueOf(String))    4. Be List<T>, Set<T> or SortedSet<T>, where T satisfies 2 or 3 above.       The resulting collection is read-only.  If the type is not one of those listed in 4 above then the first value  (lexically) of the parameter is used.  Note that, whilst the annotation target permits use on fields and methods,  this annotation is only required to be supported on resource method  parameters.  See Also:     DefaultValue, Encoded  Required Element Summary  java.lang.String 	value           Defines the name of the form parameter whose value will be used  to initialize the value of the annotated method argument.    Element Detail   value   public abstract java.lang.String value      Defines the name of the form parameter whose value will be used to     initialize the value of the annotated method argument. The name is     specified in decoded form, any percent encoded literals within the     value will not be decoded and will instead be treated as literal text.     E.g. if the parameter name is a b then the value of the annotation is     a b, not a+b or a%20b.  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,1,1,0,0,0,1,0,0,0,0,0,4,321,clean
340,38495,226848,229813,7,System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet.ActiveDirectorySubnet(),Additional online Documentation: Summary: Initializes a new instance of the ActiveDirectorySubnet class.,1,0,0,0,0,0,0,0,0,0,0,1,2,12,mixed
341,33387,457026,460770,8,public ManageReferralControl(),Constructs a critical ManageReferral control.,0,0,0,0,0,0,0,0,0,0,0,0,0,5,
342,38674,229473,232444,7,System.Drawing.Design.UITypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs),Additional online Documentation: Summary: Paints a representation of the value of an object.,0,0,1,0,0,0,0,0,0,0,0,0,1,13,clean
343,33412,487271,491015,8,public enum CascadeType   ,"Defines the set of cascadable operations that are propagated to the  associated entity. The value cascade=ALL is equivalent to  cascade={PERSIST, MERGE, REMOVE, REFRESH, DETACH}.  Since:     Java Persistence 1.0",0,0,0,0,0,0,0,0,0,0,0,0,0,29,
344,40363,268800,272515,7,System.Workflow.Runtime.Hosting.WorkflowRuntimeService,"Additional online Documentation: Syntax: public abstract class WorkflowRuntimeService Summary: The abstract base class from which the workflow runtime engine core services are derived. Remarks: Services that derive from the WorkflowRuntimeService class can be started and stopped by the workflow runtime engine. The order in which the services are started or stopped, however, is indeterminate, and services may require the support of other services in order to properly initialize themselves when they are started, and, conversely, may require the to support of other services in order to properly shut down when they are stopped. To address this problem, the workflow runtime engine provides two-phase mechanisms for starting and stopping services. When StartRuntime is called, the workflow runtime engine invokes the Start method for each of its services that derive from the WorkflowRuntimeService class. After all of these services have been started, the workflow runtime engine raises the WorkflowRuntime.Started event, which causes the OnStarted method to be invoked for each workflow runtime engine service. Your service can override the OnStarted method to participate in this two phase process. Similarly, when StopRuntime is called, the Stop method, the WorkflowRuntime.Stopped event, and the OnStopped method provide this two-phase mechanism. The State property contains a WorkflowRuntimeServiceState value that indicates whether the service is in the process of starting or stopping or is completely started or stopped. Services that derive from the WorkflowRuntimeService class can raise the WorkflowRuntime.ServicesExceptionNotHandled event when they encounter a condition that causes an unhandled exception by calling RaiseServicesExceptionNotHandledEvent. Services derived from the WorkflowSchedulerService class, the WorkflowCommitWorkBatchService class, the WorkflowPersistenceService class, and the TrackingService class ultimately derives from the WorkflowRuntimeService class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,1,1,1,1,0,0,0,1,6,298,mixed
345,33727,464533,468277,8,"public abstract class RowFilter<M,I>   ","RowFilter is used to filter out entries from the model so that they are not  shown in the view. For example, a RowFilter associated with a JTable might  only allow rows that contain a column with a specific string. The meaning  of entry depends on the component type. For example, when a filter is  associated with a JTable, an entry corresponds to a row; when associated  with a JTree, an entry corresponds to a node.  Subclasses must override the include method to indicate whether the entry  should be shown in the view. The Entry argument can be used to obtain the  values in each of the columns in that entry. The following example shows an  include method that allows only entries containing one or more values  starting with the string a:   RowFilter<Object,Object> startsWithAFilter = new RowFilter<Object,Object>() { public boolean include(Entry<? extends Object, ? extends Object> entry) { for (int i = entry.getValueCount() - 1; i >= 0; i--) { if (entry.getStringValue(i).startsWith(a)) { // The value starts with a, include it return true; } } // None of the columns start with a; return false so that this // entry is not shown return false; } };   RowFilter has two formal type parameters that allow you to create a  RowFilter for a specific model. For example, the following assumes a  specific model that is wrapping objects of type Person. Only Persons with  an age over 20 will be shown:   RowFilter<PersonModel,Integer> ageFilter = new RowFilter<PersonModel,Integer>() { public boolean include(Entry<? extends PersonModel, ? extends Integer> entry) { PersonModel personModel = entry.getModel(); Person person = personModel.getPerson(entry.getIdentifier()); if (person.getAge() > 20) { // Returning true indicates this row should be shown. return true; } // Age is <= 20, don't show it. return false; } }; PersonModel model = createPersonModel(); TableRowSorter<PersonModel> sorter = new TableRowSorter<PersonModel>(model); sorter.setRowFilter(ageFilter);   Since:     1.6 See Also:     TableRowSorter",1,1,1,1,0,0,0,1,1,0,0,0,6,294,clean
346,40292,268248,271962,7,System.Workflow.ComponentModel.Design.WorkflowTheme,"Additional online Documentation: Syntax: public sealed class WorkflowTheme : IDisposable Summary: Provides the look and feel property settings to a workflow in design-time environment. Remarks: Workflow themes define the look and feel of a workflow design surface. This includes background styles, foreground styles, fonts, and icons defined for the workflow. A WorkflowTheme is a theme defined for a specific workflow. The AmbientTheme class can be used for default properties if a specific workflow theme is not desired. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,0,2,102,clean
347,34277,473289,477033,8,public class PropertyException   ,"This exception indicates that an error was encountered while getting or  setting a property.  Since:     JAXB1.0 See Also:     JAXBContext, Validator, Unmarshaller, Serialized Form",1,1,0,0,0,0,0,0,0,0,0,0,2,23,clean
349,38309,217700,220648,7,System.Xml.Xsl.Runtime.XsltConvert.ToNodeSet(System.Collections.Generic.IList{System.Xml.XPath.XPathItem}),Additional online Documentation: Summary: Converts the specified values to a sequence of nodes.,0,0,1,0,0,0,0,0,0,0,0,1,2,13,mixed
350,39853,253429,257108,7,System.Web.Services.Protocols.SoapRpcServiceAttribute,"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class)] public sealed class SoapRpcServiceAttribute : Attribute Summary: Sets the default format of SOAP requests and responses sent to and from XML Web service methods within the XML Web service. Remarks: The SoapRpcServiceAttribute allows you to set the default encoding style for XML Web service methods within an XML Web service to RPC method encoding and Encoded parameter encoding. Web Services Description Language (WSDL) defines two styles for how an XML Web service method, or operation, can be encoded in a SOAP request or a SOAP response: RPC and Document. The RPC style refers to encoding the XML Web service method according to section 7 of the SOAP specification for using SOAP for RPC. This style specifies that all parameters are encapsulated within a single element named after the XML Web service method, and that each element within that element represents a parameter named after its respective parameter name. To set the default method level encoding to Document, apply a SoapDocumentServiceAttribute to the class implementing the XML Web service. For more details, see [<topic://cpconCustomizingSOAPInASPNETWebServicesWebServiceClients>]. This attribute can be applied to a class implementing an XML Web service. Example: The following example shows how to use the SoapRpcServiceAttribute class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,0,1,1,0,0,0,4,228,clean
351,33528,488314,492058,8,public interface ResourceAdapterAssociation ,This interface specifies the methods to associate a ResourceAdapter object  with other objects that implement this interface like  ManagedConnectionFactory and ActivationSpec.  Version:     1.0 Author:     Ram Jeyaraman,0,0,0,0,0,0,1,0,0,0,0,0,1,25,clean
352,39225,238320,241356,7,System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11,Additional online Documentation: Syntax: public class DiscoveryMessageSequence11 : IXmlSerializable Summary: Represents the AppSequence header defined in version 1.1 of the WS-Discovery Protocol. Remarks: This class allows a receiver of discovery messages to process those messages in order even though they were received out of order. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,0,0,0,1,0,0,0,0,0,2,69,clean
353,33619,489168,492912,8,public void setVersion(int v),"Sets the version of the cookie protocol that this Cookie complies with.  Version 0 complies with the original Netscape cookie specification. Version 1 complies with RFC 2109.  Since RFC 2109 is still somewhat new, consider version 1 as experimental; do not use it yet on production sites.  Parameters: v - 0 if the cookie should comply with the original Netscape specification; 1 if the cookie should comply with RFC 2109 See Also: getVersion()",1,0,0,0,0,0,0,0,0,1,0,0,2,64,clean
354,38322,222045,224996,7,System.Deployment.Application.DownloadProgressChangedEventArgs,"Additional online Documentation: Syntax: public class DownloadProgressChangedEventArgs : ProgressChangedEventArgs Summary: Provides data for the DownloadProgressChanged event. Remarks: In a console application, since events are assigned to threads out of a thread pool, you might receive update progress events out of order, with a subsequent event showing a decrease compared to a previous event. You will not see such behavior in a Windows Forms application, because events in Windows Forms are processed sequentially out of the UI thread's message queue. Example: The following code example demonstrates the use of DownloadProgressChangedEventArgs in the context of an application that uses InPlaceHostingManager to download and install a ClickOnce application programmatically. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,1,0,0,1,4,131,mixed
355,33065,484643,488387,8,public interface Converter ,"Converter is an interface describing a Java class that can perform  Object-to-String and String-to-Object conversions between model data  objects and a String representation of those objects that is suitable for  rendering.  Converter implementations must have a zero-arguments public constructor. In  addition, if the Converter class wishes to have configuration property  values saved and restored with the component tree, the implementation must  also implement StateHolder.  Starting with version 1.2 of the specification, an exception to the above  zero-arguments constructor requirement has been introduced. If a converter  has a single argument constructor that takes a Class instance and the  Class of the data to be converted is known at converter instantiation time,  this constructor must be used to instantiate the converter instead of the  zero-argument version. This enables the per-class conversion of Java  enumerated types.  If any Converter implementation requires a java.util.Locale to perform its  job, it must obtain that Locale from the UIViewRoot of the current  FacesContext, unless the Converter maintains its own Locale as part of its  state.  If the class implementing Converter has a ResourceDependency annotation,  the action described in ResourceDependency must be taken when  ValueHolder.setConverter(javax.faces.convert.Converter) is called. If the  class implementing Converter has a ResourceDependencies annotation, the  action described in ResourceDependencies must be taken when  ValueHolder.setConverter(javax.faces.convert.Converter) is called.",1,0,1,0,0,0,1,0,0,0,0,0,3,229,clean
356,38533,225315,228275,7,System.DirectoryServices.AccountManagement.MultipleMatchesException.MultipleMatchesException(),Additional online Documentation: Summary: Instantiates a new instance of the MultipleMatchesException class.,0,0,0,0,0,0,0,0,0,0,0,1,1,12,non-information
357,32635,448019,451763,8,public SQLWarning(String reason),"Constructs a SQLWarning object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the Throwable.initCause(java.lang.Throwable) method.  Parameters: reason - a description of the warning",1,0,0,0,0,0,1,0,0,0,0,0,2,49,clean
358,39020,239781,242849,7,System.ServiceModel.MsmqBindingBase,"Additional online Documentation: Syntax: public abstract class MsmqBindingBase : Binding, IBindingRuntimePreferences Summary: The base class for NetMsmqBinding and MsmqIntegrationBinding. Remarks: This abstract class contains properties common to NetMsmqBinding and MsmqIntegrationBinding. All of the fundamental concepts in queuing are displayed in the form of properties. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,0,0,0,0,1,3,68,mixed
359,32396,442867,446611,8,public void checkAccess(Thread t),"Throws a SecurityException if the calling thread is not allowed to modify the thread argument.  This method is invoked for the current security manager by the stop, suspend, resume, setPriority, setName, and setDaemon methods of class Thread.  If the thread argument is a system thread (belongs to the thread group with a null parent) then this method calls checkPermission with the RuntimePermission(modifyThread) permission. If the thread argument is not a system thread, this method just returns silently.  Applications that want a stricter policy should override this method. If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the RuntimePermission(modifyThread) permission, and if so, return silently. This is to ensure that code granted that permission (such as the JDK itself) is allowed to manipulate any thread.  If this method is overridden, then super.checkAccess should be called by the first statement in the overridden method, or the equivalent security check should be placed in the overridden method.  Parameters: t - the thread to be checked. Throws: SecurityException - if the calling thread does not have permission to modify the thread. NullPointerException - if the thread argument is null. See Also: resume, setDaemon, setName, setPriority, stop, suspend, checkPermission",1,0,1,1,0,1,1,0,0,0,0,0,5,205,clean
360,32313,440528,444272,8,public class EventSetDescriptor   ,"An EventSetDescriptor describes a group of events that a given Java bean  fires.  The given group of events are all delivered as method calls on a single  event listener interface, and an event listener object can be registered  via a call on a registration method supplied by the event source.",1,1,0,0,0,0,0,1,0,0,0,0,3,50,clean
361,34448,475114,478858,8,@Documented @Retention(value=RUNTIME) @Target(value=METHOD) public @interface Action ,"The Action annotation allows explicit association of a WS-Addressing  Action message addressing property with input, output, and fault messages  of the mapped WSDL operation.  In this version of JAX-WS there is no standard way to specify Action  values in a WSDL and there is no standard default value. It is intended  that, after the W3C WG on WS-Addressing has defined these items in a  recommendation, a future version of JAX-WS will require the new standards.  Since:     JAX-WS 2.1 See Also:     Addressing, FaultAction  Optional Element Summary  FaultAction[] 	fault           Explicit value of the WS-Addressing Action message addressing  property for the fault message(s) of the operation.  String 	input           Explicit value of the WS-Addressing Action message addressing  property for the input message of the operation.  String 	output           Explicit value of the WS-Addressing Action message addressing  property for the output message of the operation.     input   public abstract String input      Explicit value of the WS-Addressing Action message addressing property     for the input message of the operation.      Default:            output   public abstract String output      Explicit value of the WS-Addressing Action message addressing property     for the output message of the operation.      Default:            fault   public abstract FaultAction[] fault      Explicit value of the WS-Addressing Action message addressing property     for the fault message(s) of the operation. Each exception that is     mapped to a fault and requires an explicit WS-Addressing Action      message addressing property, needs to be specified as a value in this     property using FaultAction annotation.      Default:         {} Overview  	 Package  	  Class  	 Use  	 Tree  	 Deprecated  	 Index  	  Help  JavaT Platform Standard Ed. 6  PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature For further API reference and developer documentation, see Java SE  Developer Documentation. That documentation contains more detailed,  developer-targeted descriptions, with conceptual overviews, definitions of  terms, workarounds, and working code examples.  Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.",1,0,0,0,0,0,1,0,0,1,0,0,3,319,clean
362,39818,251836,255507,7,System.Web.UI.MobileControls.Adapters.WmlValidationSummaryAdapter.Render(System.Web.UI.MobileControls.Adapters.WmlMobileTextWriter),"Additional online Documentation: Summary: Generates the target-specific markup for the control to which the control adapter is attached. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site.",1,0,0,0,0,0,0,0,0,0,1,0,2,41,clean
363,33522,488131,491875,8,public interface InteractionSpec   ,"An InteractionSpec holds properties for driving an Interaction with an EIS  instance. An InteractionSpec is used by an Interaction to execute the  specified function on an underlying EIS.  The CCI specification defines a set of standard properties for an  InteractionSpec. An InteractionSpec implementation is not required to  support a standard property if that property does not apply to its  underlying EIS.  The InteractionSpec implementation class must provide getter and setter  methods for each of its supported properties. The getter and setter methods  convention should be based on the Java Beans design pattern.  The standard properties are as follows:      * FunctionName: name of an EIS function     * InteractionVerb: mode of interaction with an EIS instance: SYNC_SEND,       SYNC_SEND_RECEIVE, SYNC_RECEIVE     * ExecutionTimeout: the number of milliseconds an Interaction will wait       for an EIS to execute the specified function  The following standard properties are used to give hints to an Interaction  instance about the ResultSet requirements:      * FetchSize     * FetchDirection     * MaxFieldSize     * ResultSetType     * ResultSetConcurrency  A CCI implementation can provide additional properties beyond that  described in the InteractionSpec interface. Note that the format and type  of the additional properties is specific to an EIS and is outside the scope  of the CCI specification.  It is required that the InteractionSpec interface be implemented as a  JavaBean for the toolability support. The properties on the InteractionSpec  implementation class should be defined through the getter and setter  methods pattern. An implementation class for InteractionSpec interface is  required to implement the java.io.Serializable interface.  Since:     0.8 Version:     0.8 Author:     Rahul Sharma See Also:     Interaction",1,0,0,0,0,0,1,0,0,0,0,0,2,252,clean
364,34759,473068,476812,8,public final class XMLConstants   ,"Utility class to contain basic XML values as constants.  Since:     1.5 See Also:     Extensible Markup Language (XML) 1.1, Extensible Markup Language (XML)     1.0 (Second Edition), XML 1.0 Second Edition Specification Errata,      Namespaces in XML 1.1, Namespaces in XML, Namespaces in XML Errata,      XML Schema Part 1: Structures",1,0,0,0,0,0,0,0,0,0,1,0,2,41,clean
365,39456,257458,261149,7,System.Web.Management.TraceWebEventProvider.Shutdown,Additional online Documentation: Syntax: public override void Shutdown() Summary: Performs tasks associated with shutting down the provider. Remarks: ASP.NET calls the Shutdown method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.,1,0,1,0,0,0,0,0,0,0,0,0,2,48,clean
366,40074,264823,268522,7,"System.Windows.Forms.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)","Additional online Documentation: Syntax: [SecurityPermissionAttribute(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)] void IDataObject.SetData( ref FORMATETC pFormatetcIn, ref STGMEDIUM pmedium, bool fRelease ) Parameters pFormatetcInType: System.Runtime.InteropServices.ComTypes.FORMATETC% A FORMATETC structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium. pmediumType: System.Runtime.InteropServices.ComTypes.STGMEDIUM% A STGMEDIUM structure, passed by reference, that defines the storage medium in which the data is being passed. fReleaseType: System.Boolean true to specify that the data object called, which implements SetData, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only. Implements IDataObject.SetData(FORMATETC, STGMEDIUM, Boolean) Summary: Transfers data to the object that implements this method. This method is called by an object that contains a data source. Remarks: This member is an explicit interface member implementation. It can be used only when the DataObject is cast to an IDataObject interface.",0,0,0,0,0,0,0,0,0,0,0,0,0,197,
367,33594,488781,492525,8,public class HttpConstraintElement   ,Java Class representation of an HttpConstraint annotation value.  Since:     Servlet 3.0,1,0,0,0,0,0,0,0,0,0,0,1,2,10,mixed
368,37954,212254,215191,7,"System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)","Additional online Documentation: Syntax: public static ConditionalExpression IfThen( Expression test, Expression ifTrue ) Parameters testType: System.Linq.Expressions.Expression An Expression to set the Test property equal to. ifTrueType: System.Linq.Expressions.Expression An Expression to set the IfTrue property equal to. Return Value Type: System.Linq.Expressions.ConditionalExpression A ConditionalExpression that has the NodeType property equal to Conditional and the Test, IfTrue, properties set to the specified values. The IfFalse property is set to default expression and the type of the resulting ConditionalExpression returned by this method is Void. Summary: Creates a ConditionalExpression that represents a conditional block with an if statement. Example: The following code example shows how to create an expression that represents a conditional block.",1,0,0,0,0,0,0,0,1,0,0,0,2,118,clean
369,39124,239640,242708,7,System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout,"Additional online Documentation: Syntax: TimeSpan ReceiveTimeout { get; } Property Value Type: System.TimeSpan The Timespan that specifies the interval of time to wait for the receive method to time out. Summary: Gets the interval of time after which the receive method, invoked by a communication object, times out. Remarks: All operations that are potentially lengthy must have a timeout. Methods that don't take explicit timeouts, must delegate to those that do with default timeouts or must not do any work that blocks. Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already consumed by earlier tries.",1,0,1,0,0,0,0,0,0,0,0,1,3,112,mixed
370,33977,466075,469819,8,protected ListDataListener listDataListener, This protected field is implementation specific. Do not access directly or override. Use the create method instead  See Also: createListDataListener() ,0,0,1,0,0,0,0,0,0,0,0,0,1,20,clean
371,38417,224048,227001,7,System.Web.UI.Design.WebControls.FormViewDesigner.AutoFormats,Additional online Documentation: Syntax: public override DesignerAutoFormatCollection AutoFormats { get; } Property Value Type: System.Web.UI.Design.DesignerAutoFormatCollection A DesignerAutoFormatCollection that contains the predefined schemes for the FormView. Summary: Gets the collection of automatic formatting schemes for display in the Auto Format dialog box. Remarks: The DesignerAutoFormatCollection object is populated from an XML-encoded member of an internal class.,1,0,0,0,0,0,1,0,0,0,1,0,3,58,clean
372,32220,438268,442012,8,public final class NumericShaper   ,"The NumericShaper class is used to convert Latin-1 (European) digits to  other Unicode decimal digits. Users of this class will primarily be people  who wish to present data using national digit shapes, but find it more  convenient to represent the data internally using Latin-1 (European)  digits. This does not interpret the deprecated numeric shape selector  character (U+206E).  Instances of NumericShaper are typically applied as attributes to text with  the NUMERIC_SHAPING attribute of the TextAttribute class. For example, this  code snippet causes a TextLayout to shape European digits to Arabic in an  Arabic context:       Map map = new HashMap(); map.put(TextAttribute.NUMERIC_SHAPING, NumericShaper.getContextualShaper(NumericShaper.ARABIC)); FontRenderContext frc = ...; TextLayout layout = new TextLayout(text, map, frc); layout.draw(g2d, x, y);    It is also possible to perform numeric shaping explicitly using instances  of NumericShaper, as this code snippet demonstrates:       char[] text = ...; // shape all EUROPEAN digits (except zero) to ARABIC digits NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC); shaper.shape(text, start, count);  // shape European digits to ARABIC digits if preceding text is Arabic, or // shape European digits to TAMIL digits if preceding text is Tamil, or // leave European digits alone if there is no preceding text, or // preceding text is neither Arabic nor Tamil NumericShaper shaper = NumericShaper.getContextualShaper(NumericShaper.ARABIC | NumericShaper.TAMIL, NumericShaper.EUROPEAN); shaper.shape(text. start, count);   Since:     1.4 See Also:     Serialized Form",1,1,0,1,0,0,1,0,1,0,0,0,5,225,clean
374,38950,237281,240274,7,System.Security.Permissions.DataProtectionPermissionAttribute.Flags,Additional online Documentation: Syntax: public DataProtectionPermissionFlags Flags { get; set; } Property Value Type: System.Security.Permissions.DataProtectionPermissionFlags A bitwise combination of the DataProtectionPermissionFlags values. The default is NoFlags. Summary: Gets or sets the data protection permissions. Example: The following code example shows the use of the Flags property. This code example is part of a larger example provided for the DataProtectionPermission class.,1,0,0,0,0,0,0,0,1,0,0,1,3,61,mixed
375,38315,217422,220368,7,System.Xml.Xsl.Runtime.PrecedingSiblingIterator.Current,Additional online Documentation: Syntax: public XPathNavigator Current { get; } Property Value Type: System.Xml.XPath.XPathNavigator The current result navigator. Summary: Returns the current result navigator. Remarks: The state of the navigator changes only if the MoveNext method has returned true.,1,0,1,0,0,0,0,0,0,0,0,1,3,40,mixed
376,32660,448160,451904,8,public class Annotation   ,"An Annotation object is used as a wrapper for a text attribute value if the  attribute has annotation characteristics. These characteristics are:      * The text range that the attribute is applied to is critical to the       semantics of the range. That means, the attribute cannot be applied       to subranges of the text range that it applies to, and, if two       adjacent text ranges have the same value for this attribute, the       attribute still cannot be applied to the combined range as a whole       with this value.     * The attribute or its value usually do no longer apply if the       underlying text is changed. An example is grammatical information attached to a sentence: For the  previous sentence, you can say that an example is the subject, but you  cannot say the same about an, example, or exam. When the text is  changed, the grammatical information typically becomes invalid. Another  example is Japanese reading information (yomi).  Wrapping the attribute value into an Annotation object guarantees that  adjacent text runs don't get merged even if the attribute values are equal,  and indicates to text containers that the attribute should be discarded if  the underlying text is modified.  Since:     1.2 See Also:     AttributedCharacterIterator",1,1,0,0,0,1,1,0,1,0,0,0,5,197,clean
377,38693,231065,234038,7,System.EnterpriseServices.EventClassAttribute,"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Class, Inherited = true)] [ComVisibleAttribute(false)] public sealed class EventClassAttribute : Attribute Summary: Marks the attributed class as an event class. This class cannot be inherited. Remarks: If EventClass is specified, it must not be disabled in the COM+ catalog; if enabled in the COM+ catalog, it must be specified on the component. Method calls on an event class are never delivered to the implementation; they are instead delivered to event subscribers. For a list of initial property values for an instance of EventClassAttribute, see the EventClassAttribute constructor. For more information about using attributes, see Extending Metadata Using Attributes. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,1,1,3,128,mixed
378,38700,231029,234002,7,System.EnterpriseServices.ComponentAccessControlAttribute,"Additional online Documentation: Syntax: [ComVisibleAttribute(false)] [AttributeUsageAttribute(AttributeTargets.Class, Inherited = true)] public sealed class ComponentAccessControlAttribute : Attribute Summary: Enables security checking on calls to a component. This class cannot be inherited. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,1,0,0,1,3,55,mixed
379,39746,249392,253059,7,System.Web.UI.UpdatePanelTrigger.Initialize,"Additional online Documentation: Syntax: protected internal virtual void Initialize() Summary: When overridden in a derived class, enables a trigger to initialize itself.",1,0,0,0,0,0,1,0,0,0,0,0,2,22,clean
380,32628,447534,451278,8,"void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException","Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.  Parameters: parameterIndex - the first parameter is 1, the second is 2, ... x - the parameter value Throws: SQLException - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement",1,0,0,0,0,0,0,0,0,0,0,1,2,70,mixed
381,33692,460204,463948,8,"public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException",Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.  Parameters: parameterName - the name of the column to be set value - the parameter value length - the number of characters in the parameter data. Throws: SQLException - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs Since: 1.6,1,0,0,0,0,0,0,0,0,0,0,1,2,91,mixed
382,39272,244249,247328,7,System.ServiceProcess.PowerBroadcastStatus,Additional online Documentation: Syntax: public enum PowerBroadcastStatus Summary: Indicates the system's power status. Remarks: PowerBroadcastStatus is used by the ServiceBase class to indicate a change in the system's power status. You can design your application to react to any power status change.,1,1,0,1,0,1,1,0,0,0,0,0,5,44,clean
383,39335,257782,261473,7,System.Web.Profile.SettingsAllowAnonymousAttribute,"Additional online Documentation: Syntax: [AttributeUsageAttribute(AttributeTargets.Property)] public sealed class SettingsAllowAnonymousAttribute : Attribute Summary: Identifies whether a profile property can be set or accessed for an anonymous user. Remarks: The SettingsAllowAnonymousAttribute class is used to identify whether a property of a custom profile implementation can be accessed if the user is an anonymous user. For information about enabling anonymous identification, see the documentation provided for the anonymousIdentification configuration element. If no SettingsAllowAnonymousAttribute is specified for a profile property, anonymous access of the profile property is not allowed. A custom profile implementation is a class that inherits from the ProfileBase abstract class and defines properties for the user profile that are not specified in the profile configuration element. You can specify a custom user-profile type in the application's Web.config file with the inherits attribute of the profile configuration element as shown in the following example. <configuration> <connectionStrings> <add name=#SqlServices# connectionString=#Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;# /> </connectionStrings> <system.web> <authentication mode=#Forms# > <forms loginUrl=#login.aspx# name=#.ASPXFORMSAUTH# /> </authentication> <authorization> <deny users=#?# /> </authorization> <profile inherits=#Samples.AspNet.Profile.EmployeeProfile# defaultProvider=#SqlProvider#> <providers> <clear /> <add name=#SqlProvider# type=#System.Web.Profile.SqlProfileProvider# connectionStringName=#SqlServices# description=#SQL Profile Provider for Sample#/> <add name=#EmployeeInfoProvider# type=#System.Web.Profile.SqlProfileProvider# connectionStringName=#SqlServices# description=#SQL Profile Provider for Employee Info#/> </providers> <properties> <add name=#GarmentSize# /> </properties> </profile> </system.web> </configuration> Example: The following code example defines a class that inherits from the ProfileBase to create a custom profile. The type of the custom profile is specified in the inherits attribute of the profile configuration element in the Web.config file for an application. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,0,0,0,0,1,0,1,0,0,0,4,299,clean
384,39803,250584,254253,7,"System.Web.UI.MobileControls.IControlAdapter.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection,System.Object,System.Boolean@)","Additional online Documentation: Syntax: bool LoadPostData( string postDataKey, NameValueCollection postCollection, Object controlPrivateData, out bool dataChanged ) Parameters postDataKeyType: System.String Identifies the control.  postCollectionType: System.Collections.Specialized.NameValueCollection Contains the collection of all incoming name values.  controlPrivateDataType: System.Object Provides a place to send private data to the control that might be required for loading of post data. The control determines the type that is passed to the parameter.  dataChangedType: System.Boolean% Returns true if the required the object in privateControlData was changed, so the RaisePostDataChangedEvent event can be raised. Return Value Type: System.Boolean true if the adapter handles loading the post data; otherwise, false. Summary: Returns true if the adapter handles loading the post data. This API is obsolete. For information about how to develop ASP.NET mobile applications, see the www.asp.net/mobile Web site. Remarks: This method is called when a control that implements the IPostBackDataHandler interface has its own LoadPostData method invoked. Note Different devices might provide their data back to the calling server in different ways. An example is the difference between how WML and HTML report back the results of a SelectionList.",1,0,0,0,0,0,0,0,0,1,1,0,3,189,clean
385,34311,473413,477157,8,public static final class XmlElement.DEFAULT   ,Used in XmlElement.type() to signal that the type be inferred from the  signature of the property.,1,0,0,0,0,0,1,0,0,0,0,0,2,17,clean
386,33810,462626,466370,8,public void setComponentOrientation(ComponentOrientation o),"Description copied from class: Component Sets the language-sensitive orientation that is to be used to order the elements or text within this component. Language-sensitive LayoutManager and Component subclasses will use this property to determine how to lay out and draw components.  At construction time, a component's orientation is set to ComponentOrientation.UNKNOWN, indicating that it has not been specified explicitly. The UNKNOWN orientation behaves the same as ComponentOrientation.LEFT_TO_RIGHT.  To set the orientation of a single component, use this method. To set the orientation of an entire component hierarchy, use applyComponentOrientation.  Overrides: setComponentOrientation in class Component See Also: ComponentOrientation",0,0,0,0,0,0,0,1,0,0,0,0,1,104,clean
387,32773,451037,454781,8,"public void set(V newReference, int newStamp)",Unconditionally sets the value of both the reference and stamp.  Parameters: newReference - the new value for the reference newStamp - the new value for the stamp,1,0,0,0,0,0,0,0,0,0,0,1,2,25,mixed
388,32427,442450,446194,8,public static final float MIN_VALUE," A constant holding the smallest positive nonzero value of type float, 2 -149. It is equal to the hexadecimal floating-point literal 0x0.000002P-126f and also equal to Float.intBitsToFloat(0x1).  See Also: Constant Field Values ",1,0,0,0,0,0,1,0,0,0,0,0,2,35,clean
389,40374,268887,272602,7,System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs.WorkflowType,"Additional online Documentation: Syntax: public Type WorkflowType { get; set; } Property Value Type: System.Type The Type of a workflow. Summary: Gets or sets the workflow Type for which the TrackingProfile should be removed. Remarks: WorkflowType specifies the workflow Type for which a TrackingProfile no longer exists, and which, therefore, should no longer be tracked by the runtime tracking infrastructure.",1,1,0,0,0,0,1,0,0,0,0,0,3,59,clean
390,33238,486695,490439,8,public java.lang.String getDisposition() throws MessagingException,"Returns the value of the Content-Disposition header field. This represents the disposition of this part. The disposition describes how the part should be presented to the user.  If the Content-Disposition field is unavailable, null is returned.  This implementation uses getHeader(name) to obtain the requisite header field.  Specified by: getDisposition in interface Part Returns: disposition of this part, or null if unknown Throws: MessagingException See Also: headers",1,0,0,0,1,0,1,0,0,0,0,0,3,69,clean
391,39356,258206,261897,7,System.Web.Security.RolePrincipal,"Additional online Documentation: Syntax: [SerializableAttribute] public class RolePrincipal : IPrincipal, ISerializable Summary: Represents security information for the current HTTP request, including role membership. This class cannot be inherited. Remarks: The RolePrincipal object implements the IPrincipal interface and represents the current security context for the HTTP request. When role management is enabled (see Roles), the RoleManagerModule assigns a RolePrincipal object to the User property of the Current HttpContext. The RolePrincipal class exposes the security identity for the current HTTP request and additionally performs checks for role membership. If CacheRolesInCookie is true, then the RolePrincipal object manages the cached list of roles and looks up role membership for the current user in the cached list first, then the role Provider. If CacheRolesInCookie is false, the RolePrincipal object always looks up role membership using the role provider. The RolePrincipal object encrypts and decrypts role information cached in the cookie identified by the CookieName based on the CookieProtectionValue. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,1,0,0,0,0,1,4,178,mixed
392,39151,239253,242321,7,System.ServiceModel.ClientBase`1.Channel,Additional online Documentation: Syntax: protected TChannel Channel { get; } Property Value Type: TChannel A channel of a specified type. Summary: Gets the inner channel used to to send messages to variously configured service endpoints.,1,0,0,0,0,0,0,0,0,0,0,1,2,33,mixed
393,32749,450801,454545,8,public interface ThreadFactory ,"An object that creates new threads on demand. Using thread factories  removes hardwiring of calls to new Thread, enabling applications to use  special thread subclasses, priorities, etc.  The simplest implementation of this interface is just:   class SimpleThreadFactory implements ThreadFactory { public Thread newThread(Runnable r) { return new Thread(r); } }   The Executors.defaultThreadFactory() method provides a more useful simple  implementation, that sets the created thread context to known values before  returning it.  Since:     1.5",1,0,0,1,0,0,0,1,1,0,0,0,4,71,clean
394,39405,255923,259603,7,System.Web.Configuration.BuildProviderCollection,Additional online Documentation: Syntax: [ConfigurationCollectionAttribute(typeof(BuildProvider))] public sealed class BuildProviderCollection : ConfigurationElementCollection Summary: Represents a collection of BuildProvider objects. This class cannot be inherited. Remarks: The BuildProviderCollection is used to compile custom resource files. You can have any number of build providers. The BuildProviderCollection does not refer to any actual element in the underlying configuration file. It is a construct that allows easy access to the compilation information it contains. Example: This section provides two code examples. The first demonstrates how to declaratively specify values for several properties of the BuildProviderCollection class. The second demonstrates how to use members of the BuildProviderCollection class. The following configuration file example shows how to declaratively specify values for several properties of the BuildProviderCollection class.  The following code example demonstrates how to use members of the BuildProviderCollection class. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.,1,0,0,1,0,0,0,0,1,0,1,0,4,159,clean
395,32655,447185,450929,8,DatabaseMetaData getMetaData() throws SQLException,"Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a connection. The metadata includes information about the database's tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on.  Returns: a DatabaseMetaData object for this Connection object Throws: SQLException - if a database access error occurs or this method is called on a closed connection",1,1,0,0,0,0,0,0,0,0,0,0,2,67,clean
396,32612,446897,450641,8,public class ECParameterSpec   ,This immutable class specifies the set of domain parameters used with  elliptic curve cryptography (ECC).  Since:     1.5 See Also:     AlgorithmParameterSpec,1,0,0,0,0,0,1,0,0,0,0,0,2,19,clean
397,33355,456650,460394,8,public class PartialResultException   ,"This exception is thrown to indicate that the result being returned or  returned so far is partial, and that the operation cannot be completed. For  example, when listing a context, this exception indicates that returned  results only represents some of the bindings in the context.  Synchronization and serialization issues that apply to NamingException  apply directly here.  Since:     1.3 See Also:     Serialized Form",0,0,0,0,0,0,0,0,0,0,0,0,0,61,
398,38488,227407,230372,7,System.DirectoryServices.ActiveDirectory.ReplicationNeighbor.ReplicationNeighborOptions,Additional online Documentation: Syntax: [FlagsAttribute] public enum ReplicationNeighborOptions Summary: Specifies the options for a ReplicationNeighbor object.,1,1,0,0,0,0,0,0,0,0,0,0,2,16,clean
399,38832,234360,237342,7,System.Net.PeerToPeer.Collaboration.PeerContact.ApplicationChanged,Additional online Documentation: Syntax: public event EventHandler<ApplicationChangedEventArgs> ApplicationChanged Summary: This event is raised whenever an application associated with the PeerContact has changed.,0,0,0,0,0,0,0,0,0,0,0,0,0,23,
400,34117,471035,474779,8,public class SimpleAttributeSet   ,"A straightforward implementation of MutableAttributeSet using a hash table.  Warning: Serialized objects of this class will not be compatible with  future Swing releases. The current serialization support is appropriate for  short term storage or RMI between applications running the same version of  Swing. As of 1.4, support for long term storage of all JavaBeansTM has been  added to the java.beans package. Please see XMLEncoder.",0,0,0,1,1,0,1,0,0,1,0,0,4,64,clean
401,38310,217418,220364,7,System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator.Current,Additional online Documentation: Syntax: public XPathNavigator Current { get; } Property Value Type: System.Xml.XPath.XPathNavigator The current result navigator. Summary: Returns the current result navigator. Remarks: The state of the navigator changes only if the MoveNext method has returned true.,1,0,0,1,0,0,0,0,0,0,0,1,3,40,mixed
402,38059,217859,220807,7,Microsoft.SqlServer.Server.SqlMetaData.SqlMetaData(),Additional online Documentation: Summary: Initializes a new instance of the SqlMetaData class.,1,0,0,0,0,0,0,0,0,0,1,1,3,12,mixed
403,37713,207814,210740,7,System.Activities.DynamicActivity`1.Attributes,Additional online Documentation: Syntax: public Collection<Attribute> Attributes { get; } Property Value Type: System.Collections.ObjectModel.Collection(Of Attribute) The collection of attributes. Summary: Gets the collection of attributes of the dynamically generated activity.,0,0,0,0,0,0,0,0,0,0,0,0,0,33,
404,38081,219937,222886,7,System.Data.Odbc.OdbcDataReader.GetValues(System.Object[]),"Additional online Documentation: Syntax: public override int GetValues( Object[] values ) Parameters valuesType: System.Object() An array of type Object into which to copy the attribute columns. Return Value Type: System.Int32 The number of instances of Object in the array. Implements IDataRecord.GetValues(Object()) Summary: Populates an array of objects with the column values of the current row. Remarks: For most applications, the GetValues method provides an efficient means for retrieving all columns, instead of retrieving each column individually. You can pass an Object array that contains fewer than the number of columns that are contained in the resulting row. Only the amount of data the Object array holds is copied to the array. You can also pass an Object array whose length is more than the number of columns that are contained in the resulting row. This method returns DBNull for null database columns.",1,0,0,0,0,0,0,0,1,0,1,0,3,145,clean
405,39214,237775,240770,7,System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement.States,Additional online Documentation: Syntax: [ConfigurationPropertyAttribute(#states#)] public StateElementCollection States { get; } Property Value Type: System.ServiceModel.Activities.Tracking.Configuration.StateElementCollection The collection of states. Summary: Gets a StateElementCollection that contains the states to filter ActivityStateRecord on.,1,0,0,0,0,0,1,0,0,0,0,0,2,35,clean
406,33589,459157,462901,8,public class RealmCallback   ,This callback is used by SaslClient and SaslServer to retrieve realm  information.  Since:     1.5 See Also:     Serialized Form,1,0,0,1,0,0,1,0,0,0,0,0,3,17,clean
407,38672,227926,230896,7,System.Drawing.Color.IndianRed,"Additional online Documentation: Syntax: public static Color IndianRed { get; } Property Value Type: System.Drawing.Color A Color representing a system-defined color. Summary: Gets a system-defined color that has an ARGB value of \#FFCD5C5C. Remarks: For an example of this color, see Colors by Name.",1,0,0,0,0,0,0,0,0,0,1,1,3,48,mixed
408,33206,486209,489953,8,public abstract class Message   ,"This class models an email message. This is an abstract class. Subclasses  provide actual implementations.  Message implements the Part interface. Message contains a set of attributes  and a content. Messages within a folder also have a set of flags that  describe its state within the folder.  Message defines some new attributes in addition to those defined in the  Part interface. These attributes specify meta-data for the message - i.e.,  addressing and descriptive information about the message.  Message objects are obtained either from a Folder or by constructing a new  Message object of the appropriate subclass. Messages that have been  received are normally retrieved from a folder named INBOX.  A Message object obtained from a folder is just a lightweight reference to  the actual message. The Message is 'lazily' filled up (on demand) when each  item is requested from the message. Note that certain folder  implementations may return Message objects that are pre-filled with certain  user-specified items. To send a message, an appropriate subclass of Message  (e.g., MimeMessage) is instantiated, the attributes and content are filled  in, and the message is sent using the Transport.send method.  Author:     John Mani, Bill Shannon, Max Spivak See Also:     Part",1,0,0,0,0,0,1,1,0,0,0,0,3,200,clean
409,39693,249358,253025,7,System.Web.UI.UpdatePanel,"Additional online Documentation: Syntax: public class UpdatePanel : Control, IAttributeAccessor ASP.NET Copy <asp:UpdatePanel /> Summary: Enables sections of a page to be partially rendered without a postback. Remarks: In this topic: Introduction Refreshing UpdatePanel Content UpdatePanel Usage Applying Styles Declarative Syntax Introduction UpdatePanel controls are a central part of AJAX functionality in ASP.NET. They are used with the ScriptManager control to enable partial-page rendering. Partial-page rendering reduces the need for synchronous postbacks and complete page updates when only part of the page has to be updated. Partial-page rendering improves the user experience because it reduces the screen flicker that occurs during a full-page postback and improves Web page interactivity. Refreshing UpdatePanel Content When partial-page rendering is enabled, a control can perform a postback that updates the whole page or an asynchronous postback that updates the content of one or more UpdatePanel controls. Whether a control causes an asynchronous postback and updates an UpdatePanel control depends on the following: If the UpdateMode property of the UpdatePanel control is set to Always, the UpdatePanel control's content is updated on every postback that originates from the page. This includes asynchronous postbacks from controls that are inside  UpdatePanel controls and postbacks from controls that are not inside UpdatePanel controls. If the UpdateMode property is set to Conditional, the UpdatePanel control's content is updated in the following circumstances: When you call the Update method of the UpdatePanel control explicitly. When the UpdatePanel control is nested inside an UpdatePanel control, and the parent panel is updated. When a postback is caused by a control that is defined as a trigger by using the Triggers property of the UpdatePanel control. In this scenario, the control explicitly triggers an update of the panel content. The control can be either inside or outside the UpdatePanel control that the trigger is associated with. When the ChildrenAsTriggers property is set to true and a child control of the UpdatePanel control causes a postback. Child controls of nested UpdatePanel controls do not cause an update to the outer UpdatePanel control unless they are explicitly defined as triggers. The combination of setting the ChildrenAsTriggers property to false and the UpdateMode property to Always is not allowed and will throw an exception. When the UpdatePanel control performs an asynchronous post, it adds a custom HTTP header. Some proxies remove this custom HTTP header. If this occurs, the server handles the request as a regular postback, which causes a client error. To resolve this issue, insert a custom form field when you perform asynchronous posts. Then check the header or the custom form field in server code. UpdatePanel Usage You can use multiple UpdatePanel controls to update different page regions independently. When the page that contains one or more UpdatePanel controls is first rendered, all the content of all UpdatePanel controls are rendered and sent to the browser. On subsequent asynchronous postbacks, the content of each UpdatePanel control might not be updated depending on the panel settings and on client or server logic for individual panels. You can also use UpdatePanel controls in the following scenarios: In user controls. On master and content pages. Nested inside  UpdatePanel controls. Inside templated controls such as the GridView or Repeater controls. UpdatePanel controls can be added declaratively or programmatically. You can add an UpdatePanel control programmatically, but you cannot add triggers programmatically. To create trigger-like behavior, you can register a control on the page as an asynchronous postback control. You do this by calling the RegisterAsyncPostBackControl method of the ScriptManager control. You can then create an event handler that runs in response to the asynchronous postback, and in the handler, call the Update method of the UpdatePanel control. Applying Styles The UpdatePanel control accepts expando attributes. This lets you set a CSS class for the HTML elements that the controls render. For example, you might create the markup shown in the following example:  The markup in the previous example renders HTML similar to the following when the page runs:    Declarative Syntax Example: The following examples show different uses of the UpdatePanel control. Controls Inside an UpdatePanel Control The following example shows how to put controls inside an UpdatePanel control to reduce screen flicker when you post to the server. In this example, a Calendar and a DropDownList control are inside an UpdatePanel control. By default, the UpdateMode property is Always and the ChildrenAsTriggers property is true. Therefore, child controls of the panel cause an asynchronous postback.  Master/Detail Scenario with UpdatePanel Controls In the following example, an UpdatePanel control is used in a master/detail scenario that shows orders and order details from the Northwind database. One UpdatePanel control contains the GridView control that displays a list of orders. A second UpdatePanel control contains a DetailsView control that displays the details of one order. When you select an order from the first table, details for that order are displayed in the second table. The second table is updated asynchronously based on the selection in the first table. The sorting and paging operations in the orders summary table also cause partial updates.   <%@ Page Language=## %> <!DOCTYPE html PUBLIC #-//W3C//DTD XHTML 1.0 Transitional//EN# #http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd#> <script runat=#server#> protected void GridView1_SelectedIndexChanged(object sender, EventArgs e) { SqlDataSource2.SelectParameters[#OrderID#].DefaultValue = GridView1.SelectedDataKey.Value.ToString(); } </script> <html xmlns=#http://www.w3.org/1999/xhtml#> <head id=#Head1# runat=#server#> <title>UpdatePanel Example</title> </head> <body> <form id=#form1# runat=#server#> <div> <asp:ScriptManager ID=#ScriptManager1# runat=#server# /> <asp:UpdatePanel ID=#OrdersPanel# UpdateMode=#Conditional# runat=#server#> <ContentTemplate> <asp:GridView ID=#GridView1# AllowPaging=#True# AllowSorting=#True# Caption=#Orders# DataKeyNames=#OrderID# DataSourceID=#SqlDataSource1# OnSelectedIndexChanged=#GridView1_SelectedIndexChanged# runat=#server# > <Columns> <asp:CommandField ShowSelectButton=#True#></asp:CommandField> </Columns> </asp:GridView> <asp:SqlDataSource ID=#SqlDataSource1# runat=#server# ConnectionString=#<%$ ConnectionStrings:NorthwindConnectionString %># SelectCommand=#SELECT [OrderID], [CustomerID], [EmployeeID], [OrderDate] FROM [Orders]#> </asp:SqlDataSource> </ContentTemplate> </asp:UpdatePanel> <asp:UpdatePanel ID=#OrderDetailsPanel# UpdateMode=#Always# runat=#server#> <ContentTemplate> <asp:DetailsView ID=#DetailsView1# Caption=#Order Details# DataKeyNames=#OrderID,ProductID# DataSourceID=#SqlDataSource2# runat=#server#> <EmptyDataTemplate> <i>Select a row from the Orders table.</i> </EmptyDataTemplate> </asp:DetailsView> <asp:SqlDataSource ID=#SqlDataSource2# ConnectionString=#<%$ ConnectionStrings:NorthwindConnectionString %># SelectCommand=#SELECT [OrderID], [ProductID], [UnitPrice], [Quantity], [Discount] FROM [Order Details] WHERE ([OrderID] = @OrderID)# runat=#server#> <SelectParameters> <asp:Parameter Name=#OrderID# Type=#Int32# /> </SelectParameters> </asp:SqlDataSource> </ContentTemplate> </asp:UpdatePanel> </div> </form> </body> </html> If you put a GridView control inside an UpdatePanel control, setting the GridView control's EnableSortingAndPagingCallbacks property to true is not supported. However, because the UpdatePanel control supports asynchronous postbacks, any postbacks that change the GridView control inside an UpdatePanel control cause the same behavior as sorting and paging callbacks. Using an UpdatePanel Control in a Template In the following example, an UpdatePanel control is used in the item template of a GridView control. UpdatePanel controls in each data row are generated automatically. Each row's UpdatePanel control contains a Label control to display the quantity of the item in that row and a Button control to decrease and increase the quantity.   <%@ Page Language=## %> <!DOCTYPE html PUBLIC #-//W3C//DTD XHTML 1.0 Transitional//EN# #http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd#> <script runat=#server#> private void ChangeQuantity(object sender, int delta) { Label quantityLabel = (Label)((Button)sender).FindControl(#QuantityLabel#); int currentQuantity = Int32.Parse(quantityLabel.Text); currentQuantity = Math.Max(0, currentQuantity + delta); quantityLabel.Text = currentQuantity.ToString(System.Globalization.CultureInfo.InvariantCulture); } private void OnDecreaseQuantity(object sender, EventArgs e) { ChangeQuantity(sender, -1); } private void OnIncreaseQuantity(object sender, EventArgs e) { ChangeQuantity(sender, 1); } protected void Button1_Click(object sender, EventArgs e) { StringBuilder sb = new StringBuilder(); sb.Append(#Beverage order:<br/>#); foreach (GridViewRow row in GridView1.Rows) { if (row.RowType == DataControlRowType.DataRow) { Label quantityLabel = (Label)row.FindControl(#QuantityLabel#); int currentQuantity = Int32.Parse(quantityLabel.Text); sb.Append(row.Cells[0].Text + # : # + currentQuantity + #<br/>#); } } SummaryLabel.Text = sb.ToString(); } </script> <html xmlns=#http://www.w3.org/1999/xhtml#> <head id=#Head1# runat=#server#> <title>UpdatePanel Inside GridView Template Example </title> </head> <body> <form id=#form1# runat=#server#> <div> <asp:ScriptManager ID=#ScriptManager1# runat=#server# /> <asp:GridView ID=#GridView1# AutoGenerateColumns=#False# DataSourceID=#SqlDataSource1# runat=#server#> <Columns> <asp:BoundField DataField=#ProductName# HeaderText=#ProductName# /> <asp:BoundField DataField=#UnitPrice# HeaderText=#UnitPrice# /> <asp:TemplateField HeaderText=#Quantity#> <ItemTemplate> <asp:UpdatePanel ID=#QuantityUpdatePanel# UpdateMode=#Conditional# runat=#server# > <ContentTemplate> <asp:Label ID=#QuantityLabel# Text=#0# runat=#server# /> <asp:Button ID=#DecreaseQuantity# Text=#-# OnClick=#OnDecreaseQuantity# runat=#server# /> <asp:Button ID=#IncreaseQuantity# Text=#+# OnClick=#OnIncreaseQuantity# runat=#server# /> </ContentTemplate> </asp:UpdatePanel> </ItemTemplate> </asp:TemplateField> </Columns> </asp:GridView> <asp:UpdatePanel ID=#SummaryUpdatePanel# UpdateMode=#Conditional# runat=#server#> <ContentTemplate> <asp:Button ID=#Button1# OnClick=#Button1_Click# Text=#Get Summary# runat=#server# /> <br /> <asp:Label ID=#SummaryLabel# runat=#server#> </asp:Label> </ContentTemplate> </asp:UpdatePanel> <asp:SqlDataSource ID=#SqlDataSource1# ConnectionString=#<%$ ConnectionStrings:NorthwindConnectionString %># SelectCommand=#SELECT [ProductName], [UnitPrice] FROM [Alphabetical list of products] WHERE ([CategoryName] LIKE '%' + @CategoryName + '%')# runat=#server#> <SelectParameters> <asp:Parameter DefaultValue=#Beverages# Name=#CategoryName# Type=#String# /> </SelectParameters> </asp:SqlDataSource> </div> </form> </body> </html> ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,0,0,0,0,1,1,0,0,0,4,1497,clean
410,39331,255151,258831,7,System.Web.ProcessModelInfo,"Additional online Documentation: Syntax: public class ProcessModelInfo Summary: Contains methods that return information about worker processes. Remarks: The ProcessModelInfo class is not meant to be instantiated in your own code. Use the static GetCurrentProcessInfo and GetHistory methods to populate ProcessInfo objects, and then use the properties of the ProcessInfo objects to obtain information about the processes. Note The GetCurrentProcessInfo and GetHistory methods can be used only with Microsoft Internet Information Services (IIS) version 5.0 on Microsoft Windows 2000 and Windows XP or with IIS 6.0 on Windows Server 2003 and using IIS 5.0 isolation mode. For more information, see How to: Configure ASP.NET Applications for an ASP.NET Version. Example: The following code example demonstrates how to call the GetCurrentProcessInfo method to display statistics about the currently executing ASP.NET process on a Web page. This example will work with Internet Information Services 5.0 on Windows 2000 and Windows XP or with IIS 6.0 on Windows Server 2003 and using IIS 5.0 isolation mode. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,1,1,0,0,0,3,180,clean
411,34676,479115,482859,8,public class ImplicitActivationPolicyValue   ,ImplicitActivationPolicyValue has the following semantics.  IMPLICIT_ACTIVATION to indicate implicit activation of servants. This  requires SYSTEM_ID and RETAIN policies to be set. NO_IMPLICIT_ACTIVATION to  indicate no implicit servant activation.,1,0,0,0,0,0,1,0,0,0,0,0,2,32,clean
413,38219,215451,218392,7,System.Data.Linq.IMultipleResults,"Additional online Documentation: Syntax: public interface IMultipleResults : IFunctionResult, IDisposable Summary: Represents the results of mapped functions or queries with variable return sequences. Remarks: In the following SQL code example, the result shape depends on the input (shape =1 or shape = 2). The order that the projections are returned is undefined. Topic Location How to: Use Stored Procedures Mapped for Sequential Result Shapes (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Multiple Result Shapes (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Sequential Result Shapes (LINQ to SQL) LINQ to SQL How to: Use Stored Procedures Mapped for Multiple Result Shapes (LINQ to SQL) LINQ to SQL",0,0,0,0,0,0,0,0,1,0,1,0,2,114,clean
414,37652,207779,210705,7,System.Activities.DelegateCompletionCallback,"Additional online Documentation: Syntax: public delegate void DelegateCompletionCallback( NativeActivityContext context, ActivityInstance completedInstance, IDictionary<string, Object> outArguments ) Parameters contextType: System.Activities.NativeActivityContext The execution environment of the activity handling the callback. completedInstanceType: System.Activities.ActivityInstance The completed activity instance of the ActivityDelegate handler. outArgumentsType: System.Collections.Generic.IDictionary(Of String, Object) The output arguments of the completed ActivityDelegate. Summary: Represents the method that is called when an ActivityDelegate completes. Remarks: The values in the outArguments dictionary are the ActivityDelegateParameter values of the ActivityDelegate that are assigned when the ActivityDelegate is invoked, keyed by Name.",1,0,0,0,0,0,0,0,0,0,0,1,2,93,mixed
417,32961,481593,485337,8,public interface StateHolder ,"This interface is implemented by classes that need to save their state  between requests.  An implementor must implement both  saveState(javax.faces.context.FacesContext) and  restoreState(javax.faces.context.FacesContext, java.lang.Object) methods in  this class, since these two methods have a tightly coupled contract between  themselves. In other words, if there is an ineritance hierarchy, it is not  permissable to have the saveState(javax.faces.context.FacesContext) and  restoreState(javax.faces.context.FacesContext, java.lang.Object) methods  reside at different levels of the hierarchy.  An implementor must have a public no-args constructor.",1,0,1,0,0,0,0,0,0,0,0,0,2,95,clean
418,32544,445656,449400,8,ServerRuntimeException,@Deprecated public class Operation      extends Object   An Operation contains a description of a Java method. Operation objects  were used in JDK1.1 version stubs and skeletons. The Operation class is not  needed for 1.2 style stubs (stubs generated with,1,0,0,0,0,0,0,0,0,1,0,0,2,46,clean
419,32904,480694,484438,8,"@Target(value={TYPE,METHOD,FIELD}) @Retention(value=RUNTIME) @Documented @NormalScope(passivating=true) @Inherited public @interface ConversationScoped ","Specifies that a bean is conversation scoped.  The conversation scope is active:      * during all standard lifecycle phases of any JSF faces or non-faces       request.  The conversation context provides access to state associated with a  particular conversation. Every JSF request has an associated conversation.  This association is managed automatically by the container according to the  following rules:      * Any JSF request has exactly one associated conversation.     * The conversation associated with a JSF request is determined at the       beginning of the restore view phase and does not change during the       request.  Any conversation is in one of two states: transient or long-running.      * By default, a conversation is transient     * A transient conversation may be marked long-running by calling        Conversation.begin()     * A long-running conversation may be marked transient by calling        Conversation.end()  All long-running conversations have a string-valued unique identifier,  which may be set by the application when the conversation is marked  long-running, or generated by the container.  If the conversation associated with the current JSF request is in the  transient state at the end of a JSF request, it is destroyed, and the  conversation context is also destroyed.  If the conversation associated with the current JSF request is in the  long-running state at the end of a JSF request, it is not destroyed.  Instead, it may be propagated to other requests according to the following  rules:      * The long-running conversation context associated with a request that       renders a JSF view is automatically propagated to any faces request       (JSF form submission) that originates from that rendered page.     * The long-running conversation context associated with a request that       results in a JSF redirect (a redirect resulting from a navigation       rule or JSF NavigationHandler) is automatically propagated to the       resulting non-faces request, and to any other subsequent request to       the same URL. This is accomplished via use of a GET request parameter       named cid containing the unique identifier of the conversation.     * The long-running conversation associated with a request may be       propagated to any non-faces request via use of a GET request       parameter named cid containing the unique identifier of the       conversation. In this case, the application must manage this request       parameter.  When no conversation is propagated to a JSF request, the request is  associated with a new transient conversation. All long-running  conversations are scoped to a particular HTTP servlet session and may not  cross session boundaries. In the following cases, a propagated long-running  conversation cannot be restored and reassociated with the request:      * When the HTTP servlet session is invalidated, all long-running       conversation contexts created during the current session are       destroyed, after the servlet service() method completes.     * The container is permitted to arbitrarily destroy any long-running       conversation that is associated with no current JSF request, in order       to conserve resources.  Author:     Gavin King, Pete Muir See Also:     Conversation, NonexistentConversationException,      BusyConversationException  Overview  	 Package  	  Class  	 Tree  	 Deprecated  	 Index  	 Help   PREV CLASS   NEXT CLASS 	 FRAMES    NO FRAMES     SUMMARY: REQUIRED | OPTIONAL 	 DETAIL: ELEMENT Submit a bug or feature  Copyright © 2009-2011, Oracle Corporation and/or its affiliates. All Rights  Reserved. Use is subject to license terms.  Generated on 10-February-2011 12:41",1,0,1,1,0,0,1,1,0,0,0,0,5,521,clean
420,39282,244483,247656,7,System.Speech.Recognition.RecognizedAudio,"Additional online Documentation: Syntax: [SerializableAttribute] public class RecognizedAudio Summary: Represents audio input that is associated with a RecognitionResult. Remarks: A speech recognizer generates information about the audio input as part of the recognition operation. To access the recognized audio, use the Audio property or the GetAudioForWordRange method of the RecognitionResult. A recognition result can be produced by the following events and methods of the SpeechRecognizer and SpeechRecognitionEngine classes: Events: SpeechRecognitionEngine.SpeechHypothesized and SpeechRecognizer.SpeechHypothesized SpeechRecognitionEngine.SpeechRecognitionRejected and SpeechRecognizer.SpeechRecognitionRejected SpeechRecognitionEngine.SpeechRecognized and SpeechRecognizer.SpeechRecognized SpeechRecognitionEngine.EmulateRecognizeCompleted and SpeechRecognizer.EmulateRecognizeCompleted SpeechRecognitionEngine.RecognizeCompleted Methods: SpeechRecognitionEngine.EmulateRecognize and SpeechRecognizer.EmulateRecognize SpeechRecognitionEngine.EmulateRecognizeAsync and SpeechRecognizer.EmulateRecognizeAsync SpeechRecognitionEngine.Recognize SpeechRecognitionEngine.RecognizeAsync Important A recognition result produced by emulated speech recognition does not contain recognized audio. For such a recognition result, its Audio property returns Nothing and its GetAudioForWordRange method throws an exception. For more information about emulated speech recognition, see the EmulateRecognize and EmulateRecognizeAsync methods of the SpeechRecognizer and SpeechRecognitionEngine classes. Example: The following example handles the SpeechRecognitionEngine.SpeechRecognized, SpeechRecognizer.SpeechRecognized, or Grammar.SpeechRecognized event and outputs to the console information about the recognized audio that is associated with the recognition result. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,1,1,1,0,0,0,4,212,clean
421,33803,462531,466275,8,public int getAnchorSelectionIndex(),Returns the anchor selection index. This is a cover method that delegates to the method of the same name on the list's selection model.  Returns: the anchor selection index See Also: ListSelectionModel.getAnchorSelectionIndex(),1,0,0,0,0,0,0,0,0,0,0,1,2,34,mixed
422,40244,266290,269996,7,System.Workflow.Activities.StateMachineWorkflowActivity,"Additional online Documentation: Syntax: [ActivityValidatorAttribute(typeof(StateActivityValidator))] [ComVisibleAttribute(false)] [ToolboxBitmapAttribute(typeof(StateMachineWorkflowActivity), #Resources.StateMachineWorkflowActivity.png#)] public class StateMachineWorkflowActivity : StateActivity Summary: Serves as the root container for state machine workflows. Contains event-driven activities and states. Remarks: The StateMachineWorkflowActivity is an activity container used to create workflows that follow a state machine model. The StateMachineWorkflowActivity is a CompositeActivity, which means the StateMachineWorkflowActivity can contain other activities. The StateMachineWorkflowActivity and the EventDrivenActivity activities are the only permitted child activities of the StateMachineWorkflowActivity. EventDrivenActivity activities are permitted because the root activity itself behaves like a state. Therefore, you can have EventDrivenActivity activities at the root level that are used by all the State activities in the StateMachineWorkflowActivity. EventDrivenActivity activities at this level provide a global mechanism for processing workflow events and automate state transitions. StateActivity activities provide a mechanism to define the various stages in the model. The StateMachineWorkflowActivity has properties that are required for the execution of the state machine workflow. Most notably, the StateMachineWorkflowActivity has two properties that are important: InitialStateNameProperty and CompletedStateNameProperty. The InitialStateNameProperty of the state machine is the state in which the state machine is when an instance of the state machine is created. The InitialStateNameProperty property is mandatory and must be provided when a StateMachineWorkflowActivity is created. The InitialStateNameProperty of the state machine is like any other state activity that is contained within the state machine. The state activity can be a direct child of the StateMachineWorkflowActivity root activity and a StateMachineWorkflowActivity can have only one InitialStateNameProperty. The CompletedStateNameProperty of the StateMachineWorkflowActivity is a StateActivity activity that is designated as the end state of the StateMachineWorkflowActivity. When a transition is made to the CompletedStateNameProperty, the workflow execution is completed. The CompletedStateNameProperty is not mandatory. This means that you can have a StateMachineWorkflowActivity that is not completed. This does not mean that the state machine workflow is always active in memory. The StateMachineWorkflowActivity might be unloaded as it waits for an event. StateMachineWorkflowActivity activities that never complete are especially useful in processing long running business transactions, as in the case of a purchase order received by a supplier. The fact that the purchase order was fulfilled does not mean that the purchase order process is over. The goods that are part of the purchase order might be returned or the purchase order might be amended and have additional items added to it after the fulfillment. Sometimes there might be a requirement to keep the purchase order records for an extended period of time for legal or other purposes. The fact that a workflow does not finish just means that the workflow remains in an unloaded state. There may be a case for retiring the workflows, which means that after a set period of time the workflow instance may be forced to shut down. Example: The following code example shows how to create a new instance of the StateMachineWorkflowActivity class and use it to implement a basic state machine to transition between three states. This code example is part of the SimpleStateMachineWorkflow SDK sample from the StateMachineWorkflow.cs file. For more information, seeSimple State Machine. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,1,1,1,0,0,1,1,1,0,0,0,7,541,clean
423,37745,206831,209677,7,System.Activities.Design.View.ArgumentToExpressionModelItemConverter,"Additional online Documentation: Syntax: ArgumentToExpressionModelItemConverter handles the case where the argument value itself is null. In this situation, ArgumentToExpressionModelItemConverter creates the wrapper object for the Expression to be used from. Summary: Converts an argument to an expression model. Remarks: ArgumentToExpressionModelItemConverter handles the case where the argument value itself is null. In this situation, ArgumentToExpressionModelItemConverter creates the wrapper object for the Expression to be used from. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,0,0,0,0,0,0,0,0,0,1,2,90,mixed
424,32726,448967,452711,8,public static String toString(float[] a),"Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets ([]). Adjacent elements are separated by the characters ,  (a comma followed by a space). Elements are converted to strings as by String.valueOf(float). Returns null if a is null.  Parameters: a - the array whose string representation to return Returns: a string representation of a Since: 1.5",1,0,0,0,0,0,0,0,0,0,0,1,2,72,mixed
425,34608,477945,481689,8,public interface DynValueBox   ,"DynValueBox objects support the manipulation of IDL boxed value types. The  DynValueBox interface can represent both null and non-null value types. For  a DynValueBox representing a non-null value type, the DynValueBox has a  single component of the boxed type. A DynValueBox representing a null value  type has no components and a current position of -1.",1,0,1,0,0,0,1,0,0,0,0,0,3,56,clean
426,32620,447584,451328,8,public interface ResultSet   ,"A table of data representing a database result set, which is usually  generated by executing a statement that queries the database.  A ResultSet object maintains a cursor pointing to its current row of data.  Initially the cursor is positioned before the first row. The next method  moves the cursor to the next row, and because it returns false when there  are no more rows in the ResultSet object, it can be used in a while loop to  iterate through the result set.  A default ResultSet object is not updatable and has a cursor that moves  forward only. Thus, you can iterate through it only once and only from the  first row to the last row. It is possible to produce ResultSet objects that  are scrollable and/or updatable. The following code fragment, in which con  is a valid Connection object, illustrates how to make a result set that is  scrollable and insensitive to updates by others, and that is updatable. See  ResultSet fields for other options.    Statement stmt = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); ResultSet rs = stmt.executeQuery(SELECT a, b FROM TABLE2); // rs will be scrollable, will not show changes made by others, // and will be updatable    The ResultSet interface provides getter methods (getBoolean, getLong, and  so on) for retrieving column values from the current row. Values can be  retrieved using either the index number of the column or the name of the  column. In general, using the column index will be more efficient. Columns  are numbered from 1. For maximum portability, result set columns within  each row should be read in left-to-right order, and each column should be  read only once.  For the getter methods, a JDBC driver attempts to convert the underlying  data to the Java type specified in the getter method and returns a suitable  Java value. The JDBC specification has a table showing the allowable  mappings from SQL types to Java types that can be used by the ResultSet  getter methods.  Column names used as input to getter methods are case insensitive. When a  getter method is called with a column name and several columns have the  same name, the value of the first matching column will be returned. The  column name option is designed to be used when column names are used in the  SQL query that generated the result set. For columns that are NOT  explicitly named in the query, it is best to use column numbers. If column  names are used, the programmer should take care to guarantee that they  uniquely refer to the intended columns, which can be assured with the SQL  AS clause.  A set of updater methods were added to this interface in the JDBC 2.0 API  (JavaTM 2 SDK, Standard Edition, version 1.2). The comments regarding  parameters to the getter methods also apply to parameters to the updater  methods.  The updater methods may be used in two ways:     1. to update a column value in the current row. In a scrollable        ResultSet object, the cursor can be moved backwards and forwards, to       an absolute position, or to a position relative to the current row.       The following code fragment updates the NAME column in the fifth row       of the ResultSet object rs and then uses the method updateRow to       update the data source table from which rs was derived.          rs.absolute(5); // moves the cursor to the fifth row of rs rs.updateString(NAME, AINSWORTH); // updates the // NAME column of row 5 to be AINSWORTH rs.updateRow(); // updates the row in the data source       2. to insert column values into the insert row. An updatable ResultSet        object has a special row associated with it that serves as a staging       area for building a row to be inserted. The following code fragment       moves the cursor to the insert row, builds a three-column row, and       inserts it into rs and into the data source table using the method        insertRow.          rs.moveToInsertRow(); // moves cursor to the insert row rs.updateString(1, AINSWORTH); // updates the // first column of the insert row to be AINSWORTH rs.updateInt(2,35); // updates the second column to be 35 rs.updateBoolean(3, true); // updates the third column to true rs.insertRow(); rs.moveToCurrentRow();    A ResultSet object is automatically closed when the Statement object that  generated it is closed, re-executed, or used to retrieve the next result  from a sequence of multiple results.  The number, types and properties of a ResultSet object's columns are  provided by the ResulSetMetaData object returned by the  ResultSet.getMetaData method.  See Also:     Statement.executeQuery(java.lang.String), Statement.getResultSet(),      ResultSetMetaData",1,0,1,0,1,1,1,1,1,1,0,0,8,752,clean
427,39399,258826,262517,7,System.Web.UI.ControlSkin,"Additional online Documentation: Syntax: public class ControlSkin Summary: Represents a control skin, which is a means to define stylistic properties that are applied to an ASP.NET Web server control. Remarks: Page and control developers do not use the ControlSkinDelegate, ControlSkin, or PageTheme classes directly. These classes are used internally by the ASP.NET page framework to apply server-side properties and cascading style sheet definitions that are defined in ASP.NET themes and control skin files to specific types of controls. ControlSkin objects represent a named skin or default skin of a Control control at run time and design time. ASP.NET builds PageTheme, ControlSkin and ControlSkinDelegate objects to apply the style elements defined in themes and control skin files to ASP.NET Web pages and controls. For more information about themes and control skins, see ASP.NET Themes and Skins. Topic Location How to: Define ASP.NET Themes Building ASP .NET Web Applications How to: Define ASP.NET Themes Building ASP .NET Web Applications Example: The following code example demonstrates how control skins are specified for controls in a declarative ASP.NET page. The example shows three ASP.NET server controls found in the same page, two that use the same named skin and one that uses a different skin. ThreadSafety: Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.",1,0,1,1,0,0,1,1,1,0,0,0,6,237,clean
429,33255,454975,458719,8,public interface NotificationListener   ,Should be implemented by an object that wants to receive notifications.  Since:     1.5,0,0,0,0,0,0,0,0,0,0,0,0,0,12,
430,34348,473799,477543,8,public static interface XMLSignature.SignatureValue   ,A representation of the XML SignatureValue element as defined in the W3C  Recommendation for XML-Signature Syntax and Processing. The XML Schema  Definition is defined as:   <element name=SignatureValue type=ds:SignatureValueType/> <complexType name=SignatureValueType> <simpleContent> <extension base=base64Binary> <attribute name=Id type=ID use=optional/> </extension> </simpleContent> </complexType>,0,0,0,0,0,0,0,0,1,0,1,0,2,51,clean
